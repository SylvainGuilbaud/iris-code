<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2018.1.5 (Build 659U)" ts="2021-08-31 12:13:06">
<Class name="Aviation.Aircraft">
<Description><![CDATA[
 <p>This class represents the details on aircraft involved in events registered by the 
 <a href="http://www.ntsb.gov/" target="_blank">National Transportation Safety Board</a>.</p>
 <p><b>Note on the data</b>: The dataset provided in this sample demo is only a lightweight
 subset of the full NTSB dataset, which is available from 
 <a href="http://www.ntsb.gov/" target="_blank">http://www.ntsb.gov</a>. This data is supplied
 here for demonstration purposes only and neither intended nor warranted to be accurate.<br/>
 	Courtesy: National Transportation Safety Board</p>]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62494,55275.822588</TimeCreated>

<Property name="server">
<Type>%Status</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// server

]]></Content>
</UDLText>

<Property name="EventId">
<Type>%String</Type>
</Property>

<Property name="AircraftKey">
<Type>%Library.Integer</Type>
</Property>

<Property name="Event">
<Type>Aviation.Event</Type>
<Cardinality>parent</Cardinality>
<Inverse>Aircraft</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Crew">
<Type>Aviation.Crew</Type>
<Cardinality>children</Cardinality>
<Inverse>Aircraft</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="RegistrationNumber">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="11"/>
</Property>

<Property name="Missing">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="FlightPlan">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="FlightPlanActivated">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="Damage">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AccidentFire">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AccidentExplosion">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AircraftManufacturer">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="30"/>
</Property>

<Property name="AircraftModel">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AircraftSeries">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="AircraftSerialNo">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AircraftCertMaxGrossWeight">
<Type>%Library.Integer</Type>
</Property>

<Property name="AircraftCategory">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AircraftRegistrationClass">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="AircraftHomeBuilt">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="3"/>
</Property>

<Property name="SeatsFlightCrew">
<Type>%Library.Integer</Type>
</Property>

<Property name="SeatsCabinCrew">
<Type>%Library.Integer</Type>
</Property>

<Property name="SeatsPassengers">
<Type>%Library.Integer</Type>
</Property>

<Property name="SeatsTotal">
<Type>%Library.Integer</Type>
</Property>

<Property name="EngineCount">
<Type>%Library.Integer</Type>
</Property>

<Property name="GearType">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="4"/>
</Property>

<Property name="LastInspectionType">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="LastInspectionDate">
<Type>%Library.TimeStamp</Type>
</Property>

<Property name="AirFrameHoursSinceLastInspection">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="AirFrameHours">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Owner">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="OwnerState">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="2"/>
</Property>

<Property name="OwnerCountry">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="4"/>
</Property>

<Property name="OperatorIndividual">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="OperatorName">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="OperatorState">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="2"/>
</Property>

<Property name="OperatorCountry">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="4"/>
</Property>

<Property name="OperatorCode">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="4"/>
</Property>

<Property name="OwnerCertified">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="OperatorCertificate">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="4"/>
</Property>

<Property name="OperatorCertificateNum">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="11"/>
</Property>

<Property name="OperationScheduled">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="OperationDomestic">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="OperationType">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="FlightType">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="SecondPilot">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="DepartureSameAsEvent">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="DepartureAirportId">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="4"/>
</Property>

<Property name="DepartureCity">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DepartureState">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="2"/>
</Property>

<Property name="DepartureCountry">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="3"/>
</Property>

<Property name="DepartureTime">
<Type>%Library.Integer</Type>
</Property>

<Property name="DepartureTimeZone">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="3"/>
</Property>

<Property name="DestinationSameAsLocal">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="4"/>
</Property>

<Property name="DestinationAirportId">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="4"/>
</Property>

<Property name="DestinationCity">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DestinationState">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="2"/>
</Property>

<Property name="DestinationCountry">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="3"/>
</Property>

<Property name="FlightPhase">
<Type>%Library.Integer</Type>
</Property>

<Property name="ReportedToICAO">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="EvacuationOccurred">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="AirFrameHoursSince">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="4"/>
</Property>

<Property name="FlightSiteSeeing">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="FlightMedical">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="FlightMedicalType">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="15"/>
</Property>

<Index name="PKINDEX">
<PrimaryKey>1</PrimaryKey>
<Properties>EventId,AircraftKey</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("Aircraft")</DataLocation>
<DefaultData>AircraftDefaultData</DefaultData>
<IdLocation>^Aviation.EventC("Aircraft")</IdLocation>
<IndexLocation>^Aviation.AircraftI</IndexLocation>
<StreamLocation>^Aviation.AircraftS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="AircraftDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EventId</Value>
</Value>
<Value name="3">
<Value>AircraftKey</Value>
</Value>
<Value name="4">
<Value>RegistrationNumber</Value>
</Value>
<Value name="5">
<Value>Missing</Value>
</Value>
<Value name="6">
<Value>FlightPlan</Value>
</Value>
<Value name="7">
<Value>FlightPlanActivated</Value>
</Value>
<Value name="8">
<Value>Damage</Value>
</Value>
<Value name="9">
<Value>AccidentFire</Value>
</Value>
<Value name="10">
<Value>AccidentExplosion</Value>
</Value>
<Value name="11">
<Value>AircraftManufacturer</Value>
</Value>
<Value name="12">
<Value>AircraftModel</Value>
</Value>
<Value name="13">
<Value>AircraftSeries</Value>
</Value>
<Value name="14">
<Value>AircraftSerialNo</Value>
</Value>
<Value name="15">
<Value>AircraftCertMaxGrossWeight</Value>
</Value>
<Value name="16">
<Value>AircraftCategory</Value>
</Value>
<Value name="17">
<Value>AircraftRegistrationClass</Value>
</Value>
<Value name="18">
<Value>AircraftHomeBuilt</Value>
</Value>
<Value name="19">
<Value>SeatsFlightCrew</Value>
</Value>
<Value name="20">
<Value>SeatsCabinCrew</Value>
</Value>
<Value name="21">
<Value>SeatsPassengers</Value>
</Value>
<Value name="22">
<Value>SeatsTotal</Value>
</Value>
<Value name="23">
<Value>EngineCount</Value>
</Value>
<Value name="24">
<Value>GearType</Value>
</Value>
<Value name="25">
<Value>LastInspectionType</Value>
</Value>
<Value name="26">
<Value>LastInspectionDate</Value>
</Value>
<Value name="27">
<Value>AirFrameHoursSinceLastInspection</Value>
</Value>
<Value name="28">
<Value>AirFrameHours</Value>
</Value>
<Value name="29">
<Value>Owner</Value>
</Value>
<Value name="30">
<Value>OwnerState</Value>
</Value>
<Value name="31">
<Value>OwnerCountry</Value>
</Value>
<Value name="32">
<Value>OperatorIndividual</Value>
</Value>
<Value name="33">
<Value>OperatorName</Value>
</Value>
<Value name="34">
<Value>OperatorState</Value>
</Value>
<Value name="35">
<Value>OperatorCountry</Value>
</Value>
<Value name="36">
<Value>OperatorCode</Value>
</Value>
<Value name="37">
<Value>OwnerCertified</Value>
</Value>
<Value name="38">
<Value>OperatorCertificate</Value>
</Value>
<Value name="39">
<Value>OperatorCertificateNum</Value>
</Value>
<Value name="40">
<Value>OperationScheduled</Value>
</Value>
<Value name="41">
<Value>OperationDomestic</Value>
</Value>
<Value name="42">
<Value>OperationType</Value>
</Value>
<Value name="43">
<Value>FlightType</Value>
</Value>
<Value name="44">
<Value>SecondPilot</Value>
</Value>
<Value name="45">
<Value>DepartureSameAsEvent</Value>
</Value>
<Value name="46">
<Value>DepartureAirportId</Value>
</Value>
<Value name="47">
<Value>DepartureCity</Value>
</Value>
<Value name="48">
<Value>DepartureState</Value>
</Value>
<Value name="49">
<Value>DepartureCountry</Value>
</Value>
<Value name="50">
<Value>DepartureTime</Value>
</Value>
<Value name="51">
<Value>DepartureTimeZone</Value>
</Value>
<Value name="52">
<Value>DestinationSameAsLocal</Value>
</Value>
<Value name="53">
<Value>DestinationAirportId</Value>
</Value>
<Value name="54">
<Value>DestinationCity</Value>
</Value>
<Value name="55">
<Value>DestinationState</Value>
</Value>
<Value name="56">
<Value>DestinationCountry</Value>
</Value>
<Value name="57">
<Value>FlightPhase</Value>
</Value>
<Value name="58">
<Value>ReportedToICAO</Value>
</Value>
<Value name="59">
<Value>EvacuationOccurred</Value>
</Value>
<Value name="60">
<Value>AirFrameHoursSince</Value>
</Value>
<Value name="61">
<Value>FlightSiteSeeing</Value>
</Value>
<Value name="62">
<Value>FlightMedical</Value>
</Value>
<Value name="63">
<Value>FlightMedicalType</Value>
</Value>
<Value name="64">
<Value>server</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Aviation.Classification.Utils">
<Description>
This sample illustrates how to build and test Text Categorization models programmatically</Description>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63356,61709.704407</TimeCreated>

<Method name="CreateClassifier">
<Description><![CDATA[
Demonstration method using the <method>%iKnow.Classification.Builder</method> API to
create a simple classifier on the Aviation Events demo.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		set tDomId = $system.iKnow.GetDomainId("Aviation Events demo")
		
		if 'tDomId || '##class(%iKnow.Queries.SourceAPI).GetCountByDomain(tDomId) {
			write !,"Aviation events domain is not set up. Run ##class(Aviation.Utils).SetupStandalone() first",!
			quit
		}
		
		// create training and test set using a rather random split based on the modulo of the record ID
		// Using the modulo operator ensures we'll get the same results each time (unlike using RandomFilter)
		set tTrainingSet = ##class(%iKnow.Filters.SqlFilter).%New(tDomId, "SELECT ':SQL:'||YEAR(EventDate)||':'||EventID AS ExternalID FROM Aviation.Event WHERE (ID # 10) <= 5")
		set tTestSet = ##class(%iKnow.Filters.SqlFilter).%New(tDomId, "SELECT ':SQL:'||YEAR(EventDate)||':'||EventID AS ExternalID FROM Aviation.Event WHERE (ID # 10) > 5")
		
		// instantiate builder and configure for use with highest injury
		set tBuilder = ##class(%iKnow.Classification.IKnowBuilder).%New("Aviation Events demo",tTrainingSet)
		set tBuilder.TestSet = tTestSet
		set tSC = tBuilder.%LoadMetadataCategories("HighestInjury")
		quit:$$$ISERR(tSC)
		
		// note that "HighestInjury" is perhaps not that convenient to use as a category, as 
		// for example, a "HighestInjury=Serious" record could well mention some minor injuries as well.
		
		
		// populate the model with a few terms
		set tSC = tBuilder.%PopulateTerms(50)
		quit:$$$ISERR(tSC)
		set tSC = tBuilder.%AddEntity("crash site")
		quit:$$$ISERR(tSC)
		set tSC = tBuilder.%AddTermsFromSQL("SELECT TOP 50 EntityValue AS Term FROM %iKnow_Objects.EntityUnique WHERE DomainID = "_tDomId_" AND EntityValue LIKE '%injur%' ORDER BY CorpusSpread DESC")
		quit:$$$ISERR(tSC)
		
		// add more terms as you see fit
		// ...
		

		// generate classifier class
		set tSC = tBuilder.%CreateClassifierClass("Aviation.Classification.MyClassifier", 1, 1, 1)
		quit:$$$ISERR(tSC)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="OptimizeClassifier">
<Description><![CDATA[
Code sample using the <method>%iKnow.Classification.Optimizer</method> class to increase the
accuracy of our classification model.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		if '$$$defClassDefined("Aviation.Classification.MyClassifier") {
			w !,"Please run the ..CreateClassifier() method first",!
			quit
		}
		
		set tDomId = $system.iKnow.GetDomainId("Aviation Events demo")
		
		// restore a builder object from our class definition
		set tSC = ##class(%iKnow.Classification.Builder).%LoadFromDefinition("Aviation.Classification.MyClassifier", .tBuilder)
		quit:$$$ISERR(tSC)
		
		// instantiate a builder object
		set tOptimizer = ##class(%iKnow.Classification.Optimizer).%New()
		set tOptimizer.Builder = tBuilder
		
		// load candidate entities
		set tSC = ##class(%iKnow.Queries.EntityAPI).GetTopBM25(.tCandidates, tDomId, 1, 200)
		quit:$$$ISERR(tSC)
		// skip the first 50, as we already added them in ..CreateClassifier()
		for i=1:1:50 { kill tCandidates(i) }
		set tSC = tOptimizer.LoadTermsArray(.tCandidates, 2)
		quit:$$$ISERR(tSC)
		
		// fire off the optimization process
		set tOptimizer.Verbose = 1
		set tSC = tOptimizer.Optimize(20)
		quit:$$$ISERR(tSC)
		write !
		
		// save updated class
		set tSC = tOptimizer.SaveClassifier("Aviation.Classificaton.MyClassifier", 1)
		quit:$$$ISERR(tSC)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="TestClassifier">
<Description><![CDATA[
Code sample using the batch testing features offered by <class>%iKnow.Classification.Utils</class>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		if '$$$defClassDefined("Aviation.Classification.MyClassifier") {
			w !,"Please run the ..CreateClassifier() method first",!
			quit
		}
		
		set tDomId = $system.iKnow.GetDomainId("Aviation Events demo")
		set tTestSet = ##class(%iKnow.Filters.SqlFilter).%New(tDomId, "SELECT ':SQL:'||YEAR(EventDate)||':'||EventID AS ExternalID FROM Aviation.Event WHERE (ID # 10) > 5")
		set tSC = ##class(%iKnow.Classification.Utils).%RunModelFromDomain(.tResId, "Aviation.Classification.MyClassifier", tDomId, "HighestInjury", tTestSet)
		quit:$$$ISERR(tSC)
		
		&SQL(SELECT COUNT(*), SUM(CASE WHEN ActualValue=PredictedValue THEN 1 ELSE 0 END) 
				INTO :tTotal, :tRight 
				FROM %DeepSee_PMML_Utils.TempResult 
				WHERE TestId = :tResId)
				
		write !,"We got ",tRight," records right out of ",tTotal,!
		
		
		// retrieve precision and recall metrics for this test result
		set tSC = ##class(%DeepSee.PMML.Utils.TempResult).GetAggregatePrecisionMetrics(tResId,.tPrecision,.tMPrecision,.tRecall,.tMRecall,.tFMeasure,.tMFMeasure)
		quit:$$$ISERR(tSC)
		write !,"            micro-AVG   macro-AVG"
		write !,"Precision:     ",$fnumber(tMPrecision,"",2),"%      ",$fnumber(tPrecision,"",2),"%"
		write !,"Recall:        ",$fnumber(tMRecall,"",2),"%      ",$fnumber(tRecall,"",2),"%"
		write !,"F-measure:     ",$fnumber(tMFMeasure,"",2),"%      ",$fnumber(tFMeasure,"",2),"%",!
		
		// drop test results
		do ##class(%DeepSee.PMML.Utils).%DropResults(tResId)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Aviation.Crew">
<Description><![CDATA[
 <p>This class represents the details on crew involved in events registered by the 
 <a href="http://www.ntsb.gov/" target="_blank">National Transportation Safety Board</a>.</p>
 <p><b>Note on the data</b>: The dataset provided in this sample demo is only a lightweight
 subset of the full NTSB dataset, which is available from 
 <a href="http://www.ntsb.gov/" target="_blank">http://www.ntsb.gov</a>. This data is supplied
 here for demonstration purposes only and neither intended nor warranted to be accurate.<br/>
 	Courtesy: National Transportation Safety Board</p>]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62914,57485.629265</TimeCreated>

<Property name="EventId">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// server 

]]></Content>
</UDLText>

<Property name="AircraftKey">
<Type>%Library.Integer</Type>
</Property>

<Property name="CrewNumber">
<Type>%Library.Integer</Type>
</Property>

<Property name="Aircraft">
<Type>Aviation.Aircraft</Type>
<Cardinality>parent</Cardinality>
<Inverse>Crew</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PKINDEX">
<PrimaryKey>1</PrimaryKey>
<Properties>EventId,AircraftKey,CrewNumber</Properties>
<Unique>1</Unique>
</Index>

<Property name="Age">
<Type>%Integer</Type>
</Property>

<Property name="Category">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="Injury">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="Sex">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="ToxicologyTestPerformed">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="MedicalCertificationDate">
<Type>%Library.TimeStamp</Type>
</Property>

<Property name="MedicalCertification">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="MedicalCertificationValid">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Seat">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="SeatbeltUsed">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="ShoulderHarnessUsed">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("Crew")</DataLocation>
<DefaultData>CrewDefaultData</DefaultData>
<IdLocation>^Aviation.AircraftC("Crew")</IdLocation>
<IndexLocation>^Aviation.CrewI</IndexLocation>
<StreamLocation>^Aviation.CrewS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CrewDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EventId</Value>
</Value>
<Value name="3">
<Value>AircraftKey</Value>
</Value>
<Value name="4">
<Value>CrewNumber</Value>
</Value>
<Value name="5">
<Value>Age</Value>
</Value>
<Value name="6">
<Value>Category</Value>
</Value>
<Value name="7">
<Value>Injury</Value>
</Value>
<Value name="8">
<Value>Sex</Value>
</Value>
<Value name="9">
<Value>ToxicologyTestPerformed</Value>
</Value>
<Value name="10">
<Value>MedicalCertificationDate</Value>
</Value>
<Value name="11">
<Value>MedicalCertification</Value>
</Value>
<Value name="12">
<Value>MedicalCertificationValid</Value>
</Value>
<Value name="13">
<Value>Seat</Value>
</Value>
<Value name="14">
<Value>SeatbeltUsed</Value>
</Value>
<Value name="15">
<Value>ShoulderHarnessUsed</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Aviation.Cubes.Aircraft">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62916,60098.391112</TimeCreated>
<DependsOn>Aviation.Aircraft,Aviation.Cubes.Events</DependsOn>

<Parameter name="DOMAIN">
</Parameter>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="AviationAircraft" displayName="Aviation Aircraft" disabled="false" abstract="false" sourceClass="Aviation.Aircraft" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0">
<dimension name="AircraftTypeD" displayName="Aircraft Type" disabled="false" hasAll="true" allCaption="All Types" allDisplayName="All Types" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="AircraftCategory" name="Category" disabled="false" list="false" useDisplayValue="true">
</level>
<level sourceProperty="AircraftManufacturer" name="Manufacturer" disabled="false" list="false" useDisplayValue="true">
</level>
<level sourceProperty="AircraftModel" name="Model" disabled="false" list="false" useDisplayValue="true">
</level>
</hierarchy>
</dimension>
<dimension name="FlightTypeD" displayName="Flight Type" disabled="false" hasAll="false" allCaption="All FlightType" allDisplayName="FlightType" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="FlightType" name="FlightType" disabled="false" list="false" useDisplayValue="true">
</level>
</hierarchy>
</dimension>
<dimension name="DamageD" displayName="Damage" disabled="false" hasAll="false" allCaption="All Damage" allDisplayName="Damage" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="Damage" name="Damage" disabled="false" list="false" useDisplayValue="true">
<property name="DamageNumeric" hidden="true" sourceExpression="$case(%source.Damage, &quot;Destroyed&quot;:3, &quot;Substantial&quot;:2, &quot;Minor&quot;:1, &quot;None&quot;:0, :99)" sort="asc" />
</level>
</hierarchy>
</dimension>
<relationship sourceProperty="Event" name="Event" disabled="false" relatedCube="AviationEvents" inverse="Aircraft" cardinality="one"></relationship>
<relationship name="Crew" disabled="false" relatedCube="AviationCrew" inverse="Aircraft" cardinality="many"></relationship>
</cube>
]]></Data>
</XData>
</Class>


<Class name="Aviation.Cubes.Crew">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62931,48332.049413</TimeCreated>
<DependsOn>Aviation.Crew,Aviation.Cubes.Aircraft</DependsOn>

<Parameter name="DOMAIN">
</Parameter>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="AviationCrew" displayName="Aviation Crew" disabled="false" abstract="false" sourceClass="Aviation.Crew" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0">
<dimension name="AgeD" displayName="Age" disabled="false" hasAll="true" allCaption="All Ages" allDisplayName="All ages" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="Age" name="AgeGroup" displayName="Age group" disabled="false" list="false" rangeExpression="(,25):&lt; 25;[25,45):25-45;[45,55):45-55;[55,):55+;" useDisplayValue="true">
</level>
<level sourceProperty="Age" name="Age" disabled="false" list="false" useDisplayValue="true">
</level>
</hierarchy>
</dimension>
<dimension name="GenderD" displayName="Gender" disabled="false" hasAll="true" allCaption="All gender" allDisplayName="All gender" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="Sex" name="Gender" disabled="false" list="false" useDisplayValue="true">
</level>
</hierarchy>
</dimension>
<dimension name="CategoryD" displayName="Category" disabled="false" hasAll="true" allCaption="All categories" allDisplayName="All categories" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="Category" name="Category" disabled="false" list="false" useDisplayValue="true">
</level>
</hierarchy>
</dimension>
<dimension name="InjuryD" displayName="Injury" disabled="false" hasAll="true" allCaption="All injuries" allDisplayName="All injuries" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="Injury" name="Injury" disabled="false" list="false" useDisplayValue="true" nullReplacement="Unknown">
<property name="InjuryNumeric" hidden="true" sourceExpression="$case(%source.Injury, &quot;Fatal&quot;:3, &quot;Serious&quot;:2, &quot;Minor&quot;:1, &quot;None&quot;:0, :99)" sort="asc" />
</level>
</hierarchy>
</dimension>
<dimension name="MedicalCertificationD" displayName="Medical Certification" disabled="false" hasAll="true" allCaption="All certifications" allDisplayName="All certifications" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="MedicalCertification" name="MedicalCertification" displayName="Medical Certification" disabled="false" list="false" useDisplayValue="true">
</level>
</hierarchy>
</dimension>
<listing name="Details" disabled="false" listingType="table" fieldList="CrewNumber,Age,Sex,Category,MedicalCertification,MedicalCertificationDate,MedicalCertificationValid,SeatbeltUsed,ShoulderHarnessUsed,ToxicologyTestPerformed"></listing>
<relationship name="Aircraft" relatedCube="AviationAircraft" sourceProperty="Aircraft" cardinality="one" inverse="Crew" />
</cube>
]]></Data>
</XData>
</Class>


<Class name="Aviation.Cubes.Events">
<Description>
</Description>
<CompileAfter>Aviation.KPI.Actions</CompileAfter>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62916,60490.25088</TimeCreated>
<DependsOn>Aviation.Event</DependsOn>

<Parameter name="DOMAIN">
</Parameter>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="AviationEvents" displayName="Aviation Events" disabled="false" abstract="false" sourceClass="Aviation.Event" actionClass="Aviation.KPI.Actions" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0" defaultListing="SimpleListing">
<dimension name="EventDateD" displayName="Event Date" disabled="false" hasAll="false" allCaption="All EventDate" allDisplayName="EventDate" sourceProperty="EventDate" type="time" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level name="Year" disabled="false" timeFunction="Year" list="false" useDisplayValue="true" useAsFilter="true">
</level>
<level name="Month" disabled="false" timeFunction="MonthNumber" list="false" useDisplayValue="true" useAsFilter="true">
</level>
<level name="Day" disabled="false" timeFunction="DayNumber" list="false" useDisplayValue="true" useAsFilter="true">
</level>
</hierarchy>
</dimension>
<dimension name="LocationD" displayName="Location" disabled="false" hasAll="false" allCaption="All LocationCountry" allDisplayName="LocationCountry" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="LocationCountry" sourceExpression="%cube.%Lookup(&quot;CountryCodes&quot;, %source.LocationCountry)" name="Country" disabled="false" timeFunction="DayNumber" list="false" useDisplayValue="true" useAsFilter="true" nullReplacement="Unknown">
</level>
<level sourceProperty="LocationState" sourceExpression="$s(%source.LocationCountry=&quot;USA&quot;:%cube.%Lookup(&quot;USStateCodes&quot;, %source.LocationState), 1:%source.LocationState)" name="State" disabled="false" timeFunction="DayNumber" list="false" useDisplayValue="true" useAsFilter="true" nullReplacement="Unknown">
</level>
</hierarchy>
</dimension>
<dimension name="SkyConditionD" displayName="Sky Condition" disabled="false" hasAll="false" allCaption="All SkyConditionNonCeiling" allDisplayName="SkyConditionNonCeiling" type="data" iKnowMeasure="Report" iKnowType="dictionary" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="SkyConditionNonCeiling" name="SkyCondition" displayName="Sky Condition" description="Sky Condition (non-ceiling)" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
</level>
</hierarchy>
</dimension>
<dimension name="MidAirD" displayName="Mid-Air" disabled="false" hasAll="false" allCaption="All MidAir" allDisplayName="MidAir" type="data" iKnowMeasure="Report" iKnowType="dictionary" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="MidAir" name="MidAir" displayName="Mid-Air" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
</level>
</hierarchy>
</dimension>
<dimension name="InjuriesD" displayName="Injuries" disabled="false" hasAll="false" allCaption="All InjuriesHighest" allDisplayName="InjuriesHighest" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level sourceProperty="InjuriesHighest" name="InjuriesHighest" displayName="Highest Injury" disabled="false" >
<property name="InjuryLevelNumeric" hidden="true" sourceExpression="$case(%source.InjuriesHighest, &quot;Fatal&quot;:3, &quot;Serious&quot;:2, &quot;Minor&quot;:1, &quot;None&quot;:0, :99)" sort="asc" />
</level>
</hierarchy>
</dimension>
<dimension name="EntitiesD" displayName="Entities" disabled="false" hasAll="true" allCaption="All Entities" allDisplayName="All Entities" type="iKnow" iKnowMeasure="Report" iKnowType="entity" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level name="Entities" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
</level>
</hierarchy>
</dimension>
<dimension name="DictionariesD" displayName="Dictionaries" disabled="false" hasAll="true" allCaption="All Dictionaries" allDisplayName="All Dictionaries" type="iKnow" iKnowMeasure="Report" iKnowType="dictionary" hidden="false" showHierarchies="default">
<hierarchy name="H1" disabled="false">
<level name="Dictionaries" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
</level>
<level name="Items" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
</level>
</hierarchy>
</dimension>

<!--
<dimension name="SetBuilderD" displayName="Sets" type="computed" dimensionClass="%DeepSee.SetBuilder.ComputedDimension" >
<hierarchy name="H1" >
<level name="Set" />
</hierarchy>
</dimension>
-->

<measure sourceProperty="NarrativeFull" name="Report" displayName="Report" disabled="false" aggregate="COUNT" type="iKnow" hidden="false" searchable="false" iKnowSource="string" iKnowParameters="MAT:SkipRelations::0" iKnowDictionaries="Injuries,Maneuvers,Pilot skills,Weather conditions"></measure>
<measure sourceProperty="InjuriesTotal" name="InjuriesTotal" disabled="false" type="number" hidden="false" searchable="false"></measure>

<relationship name="Aircraft" displayName="Aircraft" disabled="false" relatedCube="AviationAircraft" inverse="Event" cardinality="many"></relationship>

<calculatedMember name="Distinct Entity Count" disabled="false" dimension="MEASURES" valueExpression="%KPI(&quot;%DeepSee.iKnow&quot;,&quot;Result&quot;,1,&quot;aggregate&quot;,&quot;total&quot;,&quot;%CONTEXT&quot;)" hidden="false"></calculatedMember>
<calculatedMember name="Dictionary Match Count" disabled="false" dimension="MEASURES" valueExpression="%KPI(&quot;%DeepSee.iKnowDictionary&quot;,&quot;MatchCount&quot;,1,&quot;aggregate&quot;,&quot;sum&quot;,&quot;%CONTEXT&quot;) " hidden="false"></calculatedMember>
<calculatedMember name="Average Dictionary Score" disabled="false" dimension="MEASURES" valueExpression="%KPI(&quot;%DeepSee.iKnowDictionary&quot;,&quot;MatchScore&quot;,1,&quot;aggregate&quot;,&quot;average&quot;,&quot;%CONTEXT&quot;) " hidden="false"></calculatedMember>

<listing name="SimpleListing" disabled="false" listingType="table" fieldList="EventId, $$$IKLINK as Report, EventDate, Type, LocationCountry, LocationState, InjuriesHighest"></listing>
<listing name="ShortListing" disabled="false" listingType="table" fieldList="EventId, EventDate, LocationCountry, LocationState"></listing>
<listing name="Map" disabled="false" listingType="map" fieldList="EventId, $$$IKSUMMARY as Summary, LocationCoordsLatitude As Latitude, LocationCoordsLongitude As Longitude"></listing>
</cube>
]]></Data>
</XData>
</Class>


<Class name="Aviation.DashboardsEtc">
<Abstract>1</Abstract>
<Super>%DeepSee.UserLibrary.Container</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62516,44242.522945</TimeCreated>

<XData name="Contents">
<Description>
 This XData section contains the contents of this container.
 Typically this is an xml document representing a Dashboard or Pivot.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/library</XMLNamespace>
<Data><![CDATA[
<items>

<!-- Aviation demo\Per state overview.pivot -->
<!-- Pie chart plotting a breakdown of US aviation events by state, with geo listing option -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Per state overview" folderName="Aviation demo" title="" description="This pivot shows the events per state (US only), broken down by light conditions." keywords="iKnow,Aviation" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-03-05T16:26:58.792Z" createdBy="UnknownUser" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="AviationEvents" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </columnAxisOptions>
  <rowLevel spec="[LocationD].[H1].[State].Members" key="" value="" text="State" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </rowLevel>
  <filter spec="[LocationD].[H1].[Country].&amp;[United States]" key="United States" value="" text="United States" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </filter>
</pivot>

<!-- Aviation demo\Injuries comparison.pivot -->
<!-- Pivot plotting the "highest injury level" attribute from the Event table against textual evidence found by iKnow in the actual report text -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Injuries comparison" folderName="Aviation demo" title="" description="This pivot compares the &quot;Highest injuries&quot; property with what can be derived from the Report text, using a simple Term List dictionary." keywords="iKnow,Aviation" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-03-05T16:11:05.729Z" createdBy="UnknownUser" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="AviationEvents" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </columnAxisOptions>
  <rowLevel spec="[DictionariesD].[H1].[Dictionaries].[Injuries]" key="" value="" text="Dictionary" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="iKnow" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
    <childLevels spec="[DictionariesD].[H1].[Items].[:injuries:none]" key="" value="" text="none" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="none" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
    </childLevels>
    <childLevels spec="[DictionariesD].[H1].[Items].[:injuries:minor]" key="" value="" text="minor" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="minor" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
    </childLevels>
    <childLevels spec="[DictionariesD].[H1].[Items].[:injuries:serious]" key="" value="" text="serious" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="serious" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
    </childLevels>
    <childLevels spec="[DictionariesD].[H1].[Items].[:injuries:fatal]" key="" value="" text="fatal" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="fatal" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
    </childLevels>
  </rowLevel>
  <rowLevel spec="[DictionariesD].[H1].[Dictionaries].[Injuries]" key="" value="" text="All reports" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </rowLevel>
  <columnLevel spec="[InjuriesD].[H1].[InjuriesHighest].[None]" key="" value="" text="None" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </columnLevel>
  <columnLevel spec="[InjuriesD].[H1].[InjuriesHighest].[Minor]" key="" value="" text="Minor" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </columnLevel>
  <columnLevel spec="[InjuriesD].[H1].[InjuriesHighest].[Serious]" key="" value="" text="Serious" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </columnLevel>
  <columnLevel spec="[InjuriesD].[H1].[InjuriesHighest].[Fatal]" key="" value="" text="Fatal" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="">
  </columnLevel>
</pivot>

<!-- Aviation event reports.dashboard -->
<!-- Contains the following widgets: 
		- Aviation demo\Injuries comparison.pivot
		- Aviation demo\Per state overview.pivot 
		- AviationTopConcepts.kpi (plotting top concepts for Report iKnow measure) -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Aviation event reports" folderName="" title="Aviation event reports" description="Note on the data: The dataset provided in this sample demo is only a lightweight subset of the full NTSB dataset, which is available from http://www.ntsb.gov. This data is supplied here for demonstration purposes only and neither intended nor warranted to be accurate. Courtesy: National Transportation Safety Board" keywords="iKnow,Aviation" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-03-05T15:18:29.165Z" createdBy="UnknownUser" category="" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;},image: {style:&apos;width:137.5px;height:122.5px;&apos;,src:&apos;covers/book_128.gif&apos;,imageStyle:&apos;width:137.5px;height:122.5px;&apos;},subtitle: {},footer: {text:&apos;unstructured data&apos;,style:&apos;background-color:rgb(224, 0, 0);&apos;}}" scheme="" worklistCount="1" snapTo="false" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true">
  <widget name="InjuriesComparison" type="pivot" subtype="pivot" subtypeClass="" title="&quot;Highest injuries&quot; vs matching results" dataSource="Aviation demo/Injuries comparison.pivot" dataLink="" drillDownDataSource="" top="3" left="545" width="602" height="285" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="4" colSpanL="6" rowSpanL="5" showToolbar="true" theme="">
    <control name="" action="showListing" target="" targetProperty="SimpleListing" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="GoToReport" target="" targetProperty="" location="widget" type="auto" controlClass="" label="NTSB report" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="listingSelected1"></control>
    <property name="analyzer">1</property>
    <property name="chartToggle">none</property>
    <property name="dimensionSource"></property>
    <property name="excel">0</property>
    <property name="initialExecute">1</property>
    <property name="pivotSelect"></property>
    <property name="print">0</property>
    <property name="showDimensions">0</property>
  </widget>
  <widget name="PerStateOverview" type="pivot" subtype="pieChart" subtypeClass="pieChart" title="US Accidents by state" dataSource="Aviation demo/Per state overview.pivot" dataLink="" drillDownDataSource="" top="3" left="5" width="540" height="551" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="4" rowSpanL="10" showToolbar="true" theme="">
    <control name="" action="showListing" target="" targetProperty="SimpleListing" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="showGeoListing" target="" targetProperty="Map" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[EventDateD].[H1].[Year]" location="dashboard" type="searchBox" controlClass="" label="Year" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[Aircraft].[AircraftTypeD].[H1].[Category]" location="dashboard" type="dropdown" controlClass="" label="Aircraft type" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="showBreakdown" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="itemSelected"></control>
    <control name="" action="GoToReport" target="" targetProperty="" location="widget" type="auto" controlClass="" label="NTSB report" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="listingSelected1"></control>
    <property name="analyzer">1</property>
    <property name="chartToggle">chart</property>
    <property name="dimensionSource"></property>
    <property name="excel">0</property>
    <property name="initialExecute">1</property>
    <property name="legendPos">bottom</property>
    <property name="pivotSelect"></property>
    <property name="print">0</property>
    <property name="showDimensions">0</property>
    <override name="legend">{orientation:'horizontal',_type:'chartLegend'}</override>
  </widget>
  <widget name="TopConceptsKPI" type="pivot" subtype="pivot" subtypeClass="" title="Top concepts in Event Reports" dataSource="AviationTopConcepts.kpi" dataLink="" drillDownDataSource="" top="291" left="546" width="598" height="261" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="5" homeColL="4" colSpanL="6" rowSpanL="5" showToolbar="true" theme="">
    <control name="" action="prevPage" target="" targetProperty="" location="widget" type="auto" controlClass="" label="&lt;&lt;" title="Previous page" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="nextPage" target="" targetProperty="" location="widget" type="auto" controlClass="" label="&gt;&gt;" title="Next page" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
  </widget>
</dashboard>
</items>
]]></Data>
</XData>
</Class>


<Class name="Aviation.Event">
<Description><![CDATA[
 <p>This class represents events involving aircraft as registered by the 
 <a href="http://www.ntsb.gov/" target="_blank">National Transportation Safety Board</a>.</p>
 <p><b>Note on the data</b>: The dataset provided in this sample demo is only a lightweight
 subset of the full NTSB dataset, which is available from 
 <a href="http://www.ntsb.gov/" target="_blank">http://www.ntsb.gov</a>. This data is supplied
 here for demonstration purposes only and neither intended nor warranted to be accurate.<br/>
 	Courtesy: National Transportation Safety Board</p>]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62494,53769.257413</TimeCreated>

<Property name="EventId">
<Type>%Library.String</Type>
</Property>

<Property name="NTSBId">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="Type">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="EventDate">
<Type>%TimeStamp</Type>
</Property>

<Property name="EventTime">
<Type>%Integer</Type>
</Property>

<Property name="TimeZone">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="3"/>
</Property>

<Property name="LocationCountry">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="LocationState">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="LocationCity">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="LocationSiteZipCode">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="LocationCoordsLatitude">
<Type>%Double</Type>
</Property>

<Property name="LocationCoordsLongitude">
<Type>%Double</Type>
</Property>

<Property name="MidAir">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="OnGroundCollision">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="AirportName">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="30"/>
</Property>

<Property name="AirportLocation">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="25"/>
</Property>

<Property name="AirportDistance">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="AirportDirection">
<Type>%Integer</Type>
</Property>

<Property name="AirportElevation">
<Type>%Integer</Type>
</Property>

<Property name="LightConditions">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="SkyConditionNonCeiling">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="SkyConditionNonCeilingHeight">
<Type>%Library.Integer</Type>
</Property>

<Property name="SkyConditionCeilingHeight">
<Type>%Library.Integer</Type>
</Property>

<Property name="SkyConditionCeiling">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="Visibility">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="WeatherAirTemperature">
<Type>%Integer</Type>
</Property>

<Property name="WindDirection">
<Type>%Integer</Type>
</Property>

<Property name="WindDirectionIndicator">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="WindVelocity">
<Type>%Integer</Type>
</Property>

<Property name="WindVelocityIndicator">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="WindGustIndicator">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="WindGust">
<Type>%Integer</Type>
</Property>

<Property name="Altimeter">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="WeatherPrecipitation">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="3"/>
</Property>

<Property name="InjuriesHighest">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="InjuriesGroundFatal">
<Type>%Integer</Type>
</Property>

<Property name="InjuriesGroundMinor">
<Type>%Integer</Type>
</Property>

<Property name="InjuriesGroundSerious">
<Type>%Integer</Type>
</Property>

<Property name="InjuriesTotalFatal">
<Type>%Integer</Type>
</Property>

<Property name="InjuriesTotalMinor">
<Type>%Integer</Type>
</Property>

<Property name="InjuriesTotalNone">
<Type>%Integer</Type>
</Property>

<Property name="InjuriesTotalSerious">
<Type>%Integer</Type>
</Property>

<Property name="InjuriesTotal">
<Type>%Integer</Type>
</Property>

<Property name="InvestigatingAgency">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="FAADistrictOffice">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="NarrativeFull">
<Description>
For simplicity, using the narratives for the first aircraft involved in this event,
as in most cases subsequent narratives just refer to the initial one.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100000"/>
</Property>

<Property name="NarrativeSummary">
<Type>%String</Type>
<Parameter name="MAXLEN" value="30000"/>
</Property>

<Property name="NarrativeCause">
<Type>%String</Type>
<Parameter name="MAXLEN" value="30000"/>
</Property>

<Property name="Aircraft">
<Type>Aviation.Aircraft</Type>
<Cardinality>children</Cardinality>
<Inverse>Event</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PKINDEX">
<PrimaryKey>1</PrimaryKey>
<Properties>EventId</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Aviation.EventD</DataLocation>
<DefaultData>EventDefaultData</DefaultData>
<IdLocation>^Aviation.EventD</IdLocation>
<IndexLocation>^Aviation.EventI</IndexLocation>
<StreamLocation>^Aviation.EventS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="EventDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EventId</Value>
</Value>
<Value name="3">
<Value>NTSBId</Value>
</Value>
<Value name="4">
<Value>Type</Value>
</Value>
<Value name="5">
<Value>EventDate</Value>
</Value>
<Value name="6">
<Value>EventTime</Value>
</Value>
<Value name="7">
<Value>TimeZone</Value>
</Value>
<Value name="8">
<Value>LocationCountry</Value>
</Value>
<Value name="9">
<Value>LocationState</Value>
</Value>
<Value name="10">
<Value>LocationCity</Value>
</Value>
<Value name="11">
<Value>LocationCountryCode</Value>
</Value>
<Value name="12">
<Value>LocationSiteZipCode</Value>
</Value>
<Value name="13">
<Value>LocationCoordsLatitude</Value>
</Value>
<Value name="14">
<Value>LocationCoordsLongitude</Value>
</Value>
<Value name="15">
<Value>MidAir</Value>
</Value>
<Value name="16">
<Value>OnGroundCollision</Value>
</Value>
<Value name="17">
<Value>AirportName</Value>
</Value>
<Value name="18">
<Value>AirportLocation</Value>
</Value>
<Value name="19">
<Value>AirportDistance</Value>
</Value>
<Value name="20">
<Value>AirportDirection</Value>
</Value>
<Value name="21">
<Value>AirportElevation</Value>
</Value>
<Value name="22">
<Value>LightConditions</Value>
</Value>
<Value name="23">
<Value>SkyConditionNonCeiling</Value>
</Value>
<Value name="24">
<Value>SkyConditionNonCeilingHeight</Value>
</Value>
<Value name="25">
<Value>SkyConditionCeilingHeight</Value>
</Value>
<Value name="26">
<Value>SkyConditionCeiling</Value>
</Value>
<Value name="27">
<Value>Visibility</Value>
</Value>
<Value name="28">
<Value>WeatherAirTemperature</Value>
</Value>
<Value name="29">
<Value>WindDirection</Value>
</Value>
<Value name="30">
<Value>WindDirectionIndicator</Value>
</Value>
<Value name="31">
<Value>WindVelocity</Value>
</Value>
<Value name="32">
<Value>WindVelocityIndicator</Value>
</Value>
<Value name="33">
<Value>WindGustIndicator</Value>
</Value>
<Value name="34">
<Value>WindGust</Value>
</Value>
<Value name="35">
<Value>Altimeter</Value>
</Value>
<Value name="36">
<Value>WeatherPrecipitation</Value>
</Value>
<Value name="37">
<Value>InjuriesHighest</Value>
</Value>
<Value name="38">
<Value>InjuriesGroundFatal</Value>
</Value>
<Value name="39">
<Value>InjuriesGroundMinor</Value>
</Value>
<Value name="40">
<Value>InjuriesGroundSerious</Value>
</Value>
<Value name="41">
<Value>InjuriesTotalFatal</Value>
</Value>
<Value name="42">
<Value>InjuriesTotalMinor</Value>
</Value>
<Value name="43">
<Value>InjuriesTotalNone</Value>
</Value>
<Value name="44">
<Value>InjuriesTotalSerious</Value>
</Value>
<Value name="45">
<Value>InjuriesTotal</Value>
</Value>
<Value name="46">
<Value>InvestigatingAgency</Value>
</Value>
<Value name="47">
<Value>FAADistrictOffice</Value>
</Value>
<Value name="48">
<Value>NarrativeFull</Value>
</Value>
<Value name="49">
<Value>NarrativeSummary</Value>
</Value>
<Value name="50">
<Value>NarrativeCause</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Aviation.KPI.Actions">
<Description><![CDATA[
Adds an action for <class>Aviation.EventCube</class> to display the full NTSB report for an
Aviation Event fact record.]]></Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62717,43395.999388</TimeCreated>

<XData name="KPI">
<Description>
This XData definition defines the KPI.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi xmlns="http://www.intersystems.com/deepsee/kpi" name="Aviation Actions">
<action name="GoToReport" displayName="Open NTSB report" />
</kpi>
]]></Data>
</XData>

<Method name="%OnDashboardAction">
<Description>
This callback is invoked from a dashboard when an action defined by this dashboard is invoked.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pAction:%String,pContext:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (pAction="GoToReport") {
		set pContext.command = "newWindow:Aviation.UI.NTSBLink.zen?ID="_pContext.valueList
	}

	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Aviation.KPI.TopConcepts">
<Super>%iKnow.DeepSee.GenericKPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62525,33361.511007</TimeCreated>

<Parameter name="IKCUBENAME">
<Description><![CDATA[
 Override this parameter and <parameter>IKMEASURENAME</parameter> to specify the iKnow
 domain linked to a particular iKnow measure for the KPI's query to access.]]></Description>
<Type>%String</Type>
<Default>AviationEvents</Default>
</Parameter>

<Parameter name="IKMEASURENAME">
<Description><![CDATA[
 Override this parameter and <parameter>IKCUBENAME</parameter> to specify the iKnow
 domain linked to a particular iKnow measure for the KPI's query to access.]]></Description>
<Type>%String</Type>
<Default>Report</Default>
</Parameter>

<XData name="KPI">
<Description>
 This XData definition defines the KPI.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="AviationTopConcepts" displayName="AviationEvents > Top Concepts" >
<property name="resultNumber" disabled="true" />
<property name="entUniId" disabled="true" />
<property name="entity" />
<property name="frequency" />
<property name="spread" />
</kpi>
]]></Data>
</XData>
</Class>


<Class name="Aviation.Metrics.Builder">
<Super>%iKnow.Metrics.MetricBuilder</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62686,43060.831326</TimeCreated>

<Property name="TotalSourceCount">
<Type>%Integer</Type>
</Property>

<Property name="SourceFreqs">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="SimilarEntIds">
<MultiDimensional>1</MultiDimensional>
</Property>

<Method name="CalculateEntUniMetrics">
<FormalSpec>pEntUniId:%Integer,pEntUniValue:%String,*pValues</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		kill pValues
		
		if (..Type=$$$IKMTRTYPESOURCE) {
			/// Calculation for TF*IDF:
			/// using a weighted local frequency with relationships counted as 0.5 occurrences
			set tSourceFreqs = $g(..SourceFreqs(pEntUniId))
			set tTF = $lg(tSourceFreqs,1) + ($lg(tSourceFreqs,2) * 0.5)
			
			// Use unweighted spread for IDF calculation
			set tSpread = ##class(%iKnow.Queries.EntityAPI).GetSpread(..DomainId, pEntUniId, $$$ENTTYPEANY)
			set tIDF = $zlog((..TotalSourceCount - tSpread + 0.5) / (tSpread + 0.5))
			set pValues("TFIDF") = tTF*tIDF
		}
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="OnAfterBuildMetricsForSource">
<FormalSpec>pSrcId:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		kill ..SourceFreqs
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="OnBeforeBuildMetricsForSource">
<FormalSpec>pSrcId:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		
		// pre-load frequencies for this source
		set tSC = ##class(%iKnow.Queries.EntityAPI).GetBySource(.tResult, ..DomainId, pSrcId, 0, 0, $$$ENTTYPECONCEPT)
		quit:$$$ISERR(tSC)
		
		kill ..SourceFreqs
		set i=""
		for {
			set i = $order(tResult(i),1,tEntity)
			quit:i=""
			
			set ..SourceFreqs($li(tEntity,1)) = $li(tEntity,3,4)
		}
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="OnBeforeBuildMetrics">
<Description><![CDATA[
<p>Utility method called before a MetricBuilder starts building any metrics, in which
custom code can be executed to set up any auxiliary objects or data structures.</p>
<p>Note: depending on the value of <parameter>SUPPORTSMULTIPROCESS</parameter>, multiple
MetricBuilder instances can be running alongside one another</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..TotalSourceCount = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(..DomainId)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CalculateSourceMetrics">
<Description><![CDATA[
<p>This is the main method a custom MetricBuilder should implement to support metrics
targeting sources. Depending on the value of <property>Type</property>, the properties
<property>CurrentSrcId</property> (for $$$IKMTRTYPESOURCE), <property>CurrentFieldName</property>
and <property>CurrentFieldValue</property> (for $$$IKMTRTYPEGROUP) or neither of these
(for $$$IKMTRTYPEDOMAIN) will define the scope for which metrics should be calculated.</p>
<p>For a given source <var>pSourceId</var> in the context of a given source <var>pSrcId</var>,
this method should calculate all metrics it knows about and return them through
<var>pValues</var> in an array indexed by metric name:
			pValues(<i>metricName</i>) = value </p>]]></Description>
<FormalSpec>pSourceId:%Integer,*pValues</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		kill pValues
		 
		if (..Type = $$$IKMTRTYPEGROUP) {
			set tDomainId = ..DomainId
			set tFilter = ##class(%iKnow.Filters.SourceIdFilter).%New(tDomainId, $lb(pSourceId))
			set tEntUniId = "", tScore = ""
			for {
				set tEntUniId = $order(..SimilarEntIds(tEntUniId))
				quit:tEntUniId=""
				
				set tScore = tScore + ##class(%iKnow.Queries.EntityAPI).GetFrequency(tDomainId, tEntUniId,,, tFilter)
			}
			set:tScore pValues("CategoryRelevance") = tScore
		}
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="OnAfterBuildMetricsForGroup">
<Description><![CDATA[
<p>Utility method called after a MetricBuilder instance finishes building any metrics for the
group identified by <property>CurrentFieldName</property> and <property>CurrentFieldValue</property>,
for metrics of type $$$IKMTRTYPEGROUP.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		kill ..SimilarEntIds
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="OnBeforeBuildMetricsForGroup">
<Description><![CDATA[
<p>Utility method called before a MetricBuilder instance starts building any metrics for the
group identified by <property>CurrentFieldName</property> and <property>CurrentFieldValue</property>,
for metrics of type $$$IKMTRTYPEGROUP.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		set tFilter = ##class(%iKnow.Filters.SimpleMetadataFilter).%New(..DomainId, ..CurrentFieldName, $$$MDOPEQUAL, ..CurrentFieldValue)
		set tSC = ##class(%iKnow.Queries.EntityAPI).GetSimilar(.tResult, ..DomainId, ..CurrentFieldValue, 0, 0, tFilter, $$$FILTERONLY)
		quit:$$$ISERR(tSC)
		
		set i = ""
		for {
			set i = $order(tResult(i),1,tData)
			quit:i=""
			
			set ..SimilarEntIds($li(tData,1)) = ""
		}
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Aviation.Metrics.Definition">
<CompileAfter>Aviation.Metrics.Builder</CompileAfter>
<Super>%iKnow.Metrics.MetricDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62686,43172.48161</TimeCreated>

<XData name="Metrics">
<XMLNamespace>http://www.intersystems.com/iknow/metrics</XMLNamespace>
<Data><![CDATA[
<metrics>
<metric name="TFIDF" type="source" targets="entity"
	builderClass="Aviation.Metrics.Builder"
	description="This well-known metric multiplies the local frequency of a term with its (smoothed) Inverse Document Frequency (defined as $zlog(([totalSrcCount] - [spread] + 0.5) / ([spread] + 0.5)). In this implementation, we're using a weighted local frequency where relationships are counted as 0.5 (but the IDF uses unweighted entity spread)." />
<metric name="ReportQuality" type="domain" targets="source" maintainIndex="true"
	description="A custom metric expressing the writing quality of a report (to be manually assigned, NOT calculated)" />
<metric name="CategoryRelevance" type="group" targets="source" groupField="AircraftCategory"
 	builderClass="Aviation.Metrics.Builder" maintainIndex="true"
 	description="A simplistic metric expressing how often the aircraft category was referred in the report" />
</metrics>
]]></Data>
</XData>
</Class>


<Class name="Aviation.ReportDomain">
<Description><![CDATA[
<p>This class wraps all settings for the Aviation Events demo domain in a single XData block.
Check the documentation on "Domain Definitions" or the class reference of
<class>%iKnow.DomainDefinition</class> for more details.</p>
<p>Note: for licensing reasons, this domain is disabled by default. To enable it, open this class 
in Studio, change the "disabled" property in the root &lt;domain&gt; element of the
<xdata>Domain</xdata> XData block to "false" and compile the class. Alternatively, run the 
SetupStandalone() method in <class>Aviation.Utils</class>.<br/>This step
is only required for licensing reasons, as the outcome of the compile-time actions taken by an
iKnow domain definition could not be packaged in the distributed SAMPLES database before knowing
the license context at the actual Cache instance where it will be installed.</p>
<p><b>Note on the data</b>: The dataset provided in this sample demo is only a lightweight
subset of the full NTSB dataset, which is available from 
<a href="http://www.ntsb.gov/" target="_blank">http://www.ntsb.gov</a>. This data is supplied
here for demonstration purposes only and neither intended nor warranted to be accurate.<br/>
Courtesy: National Transportation Safety Board</p>]]></Description>
<Super>%iKnow.DomainDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62703,35623.381509</TimeCreated>

<XData name="Domain">
<XMLNamespace>http://www.intersystems.com/iknow</XMLNamespace>
<Data><![CDATA[
<domain name="Aviation Events demo" disabled="true">

<!-- use parameter elements to configure domain-level parameters -->
<parameter name="Status" value="1" />

<!-- this expression is used in the where clause of the query selecting data for this domain
	 through the "%expression.MaxYear" reference -->
<expression name="MaxYear" value="2013" />

<!-- this section configures the metadata fields for this domain -->
<metadata>
<field name="EventDate" dataType="DATE" operators="=,BETWEEN" />
<field name="Year" dataType="NUMBER" operators="ALL" />
<field name="Country" dataType="STRING" operators="=" />
<field name="State" dataType="STRING" operators="=" />
<field name="LightConditions" dataType="STRING" operators="=,!=" />
<field name="HighestInjury" dataType="STRING" caseSensitive="true" />
</metadata>

<!-- this section configures where to load the data from, upon calling the %Build() method.
	 Note that you can have any number of elements within this section, each corresponding to
	 one batch or list of sources previously indexed through an iKnow Lister class -->
<data dropBeforeBuild="true">
<table tableName="Aviation.Event" idField="EventId" groupField="YEAR(EventDate)" dataFields="NarrativeFull"
	whereClause="YEAR(EventDate) &lt;= %expression.MaxYear"
	metadataColumns="CAST(EventDate AS DATE) As EventDate, YEAR(EventDate) As Year, LocationCountry As Country, LocationState As State, LightConditions, InjuriesHighest HighestInjury" >
</table>
</data>

<!-- this section configures any dictionaries to be loaded into the domain upon building it -->
<matching dropBeforeBuild="true">

<!-- this first entry refers to a dictionary sourced from elsewhere, through a SQL query selecting
	 all dictionary terms to be loaded into the dictionary -->
<external sql="SELECT DISTINCT AircraftManufacturer, AircraftModel, ':aircraft:'||AircraftCategory||':'||AircraftManufacturer FROM Aviation.Aircraft" >
<column fixedValue="Aircraft" role="dictionary name" />
<column fixedValue="List of aircraft manufacturers and models" role="dictionary description" />
<column position="1" role="item name" />
<column position="1" role="term" />
<column position="2" role="term" />
<column position="3" role="item URI" />
</external>

<!-- subsequent dictionaries are defined statically -->
<dictionary name="Maneuvers">
 <item name="altitude" uri=":maneuver:altitude">
  <term string="ascend" />
  <term string="ascended" />
  <term string="ascending" />
  <term string="ascent" />
  <term string="descend" />
  <term string="descended" />
  <term string="descending" />
  <term string="descent" />
 </item>
 <item name="landing" uri=":maneuver:landing">
  <term string="landed" />
  <term string="landing" />
  <term string="lands" />
 </item>
 <item name="takeoff" uri=":maneuver:takeoff">
  <term string="take-off" />
  <term string="takeoff" />
  <term string="takeoffs" />
  <term string="taking off" />
  <term string="took off" />
 </item>
</dictionary>
<dictionary name="Weather conditions">
 <item name="clouds" uri=":weather:clouds">
  <term string="broken clouds" />
  <term string="cumuliform clouds" />
  <term string="scattered clouds" />
  <term string="skies overcast" />
  <term string="sky broken" />
 </item>
 <item name="heavy wind" uri=":weather:heavy wind">
  <term string="extreme turbulence" />
  <term string="severe turbulence" />
  <term string="significant turbulence" />
  <term string="substantial turbulence" />
 </item>
 <item name="mist" uri=":weather:mist">
  <term string="fog" />
  <term string="mist" />
 </item>
 <item name="rain" uri=":weather:rain">
  <term string="drizzle" />
  <term string="precipitation" />
  <term string="rain" />
  <term string="wet" />
 </item>
 <item name="thunderstorm" uri=":weather:thunderstorm">
  <term string="thunderstorm" />
  <term string="thunderstorms" />
 </item>
 <item name="clear" uri=":weather:visibility">
  <term string="clear of clouds" />
  <term string="clear skies" />
  <term string="clear sky" />
  <term string="sky condition clear" />
  <term string="unlimited visibility" />
  <term string="visibility unrestricted" />
 </item>
 <item name="mild wind" uri=":weather:wind">
  <term string="calm winds" />
  <term string="light winds" />
  <term string="wind" />
 </item>
 <item name="winter" uri=":weather:winter">
  <term string="ice-covered" />
  <term string="icy" />
  <term string="snow" />
  <term string="snow-covered" />
 </item>
</dictionary>
<dictionary name="Injuries">
 <item name="fatal" uri=":injuries:fatal">
  <term string="died" />
  <term string="fatal injuries" />
  <term string="fatally injured" />
  <term string="succumbed" />
  <term string="was killed" />
  <term string="were killed" />
 </item>
 <item name="minor" uri=":injuries:minor">
  <term string="minor injuries" />
  <term string="wounded" />
 </item>
 <item name="none" uri=":injuries:none">
  <term string="no injuries" />
  <term string="not injured" />
  <term string="survived" />
  <term string="was not injured" />
  <term string="were not injured" />
 </item>
 <item name="serious" uri=":injuries:serious">
  <term string="serious injuries" />
  <term string="seriously injured" />
 </item>
</dictionary>
<dictionary name="Pilot skills">
 <item name="instructor" uri=":skills:instructor">
  <term string="cfi" />
  <term string="instructor" />
 </item>
 <item name="professional" uri=":skills:pro">
  <term string="airline transport pilot" />
  <term string="commercial pilot" />
  <term string="commercial-rated pilot" />
  <term string="pilot/owner" />
  <term string="private pilot" />
  <term string="private-rated pilot" />
 </item>
 <item name="student" uri=":skills:student">
  <term string="student pilot" />
 </item>
</dictionary>
</matching>
</domain>
]]></Data>
</XData>
</Class>


<Class name="Aviation.UI.Investigator">
<Description><![CDATA[
<p>This page represents a mockup interface for typing in new aviation event reports for the
<class>Aviation.Event</class> narrative columns. After typing in a report of a few
sentences and pressing the "process" button, the system will look for reports similar to the
one being typed in using the basic similarity algorithm (first tab) and a slightly more
elaborate matching-based approach (second tab). This matching-based approach constructs a
simple dictionary based on the contents of what's being typed in (<method>BuildSrcDictionary</method>) and then finds the report
with the highest number of matches against this dictionary. While the basic similarity option
(using %iKnow.Queries.SourceAPI.GetSimilar()) is easier to use and has a few options by itself,
the matching-based alternative demonstrates how other iKnow API calls can be used together
from a simple interface. More specifically, the matching-based approach has the advantage
non-exact matches also contribute to the similarity, at the cost of performance and slight
over-scoring of simple re-occurring words. </p>

<p>When clicking one of the suggested "similar" reports, a popup shows the basic details of
the similar event (time, location, aircraft, link to NTSB report) as well as the the contents
of the existing report, with all entities (and CRCs) of the input text highlighted in this
similar one. A second tab then reveals the presumed cause of that similar event as recorded
by the NTSB, which may "help" the user get an idea of a likely cause for the event being
described in his manual input. </p>

<p>Being a code sample, the code is supposed to be quite readable with some comments about
what is being achieved by specific line(s) of code, as well as suggesting extensions
developers might wish to make to make the demo perform better.</p>

<p>To set up the demo, run the following command from the terminal:
<blockquote><pre>do ##class(Aviation.UI.Investigator).Setup()</pre></blockquote></p>]]></Description>
<IncludeCode>%IKInclude</IncludeCode>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62592,39771.390825</TimeCreated>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Aviation Event Investigation</Default>
</Parameter>

<Parameter name="IKNOWREPORTDOMAINNAME">
<Description>
Default iKnow domain name for event reports</Description>
<Default>Aviation Investigator demo - reports</Default>
</Parameter>

<Parameter name="IKNOWCAUSEDOMAINNAME">
<Description>
Default iKnow domain name for event causes</Description>
<Default>Aviation Investigator demo - causes</Default>
</Parameter>

<Parameter name="IKNOWDICTNAME">
<Description>
Name of the dictionary generated as part of the matching-based similarity search</Description>
<Internal>1</Internal>
<Default>Aviation.UI.Investigator Dictionary</Default>
</Parameter>

<Property name="summaryLength">
<Description>
Length of the report/cause summary to be displayed in the popup.</Description>
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="LENGTH"/>
</Property>

<Property name="selectedSource">
<Description>
The source ID of the report selected from the "similar reports" list (any tab).</Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="reportDomain">
<Description><![CDATA[
The domain ID for the event reports. Populated during <method>%OnAfterCreatePage</method>.]]></Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="causeDomain">
<Description><![CDATA[
The domain ID for the event causes. Populated during <method>%OnAfterCreatePage</method>.]]></Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="inputSource">
<Description>
The Source ID of the source containing the manual input from the text box. This is a Virtual
Source and hence the number will be negative.</Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>

<Property name="filter">
<Description><![CDATA[
A filter string to restrict the scope of the similarity search.
Either use an InitialExpression or add code to populate this property, similar to the
filterPane and associated methods in <class>%iKnow.UI.AbstractPortal</class>]]></Description>
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="FILTER"/>
</Property>

<Property name="dictId">
<Description><![CDATA[
The ID of the dictionary created as part of <method>BuildSrcDictionary</method>]]></Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Aviation Event Investigator - iKnow Demo">
<modalGroup id="modSource" layout="vertical" containerStyle="padding:10px;">
<vgroup cellVAlign="top">
<html id="htmlTitle" OnDrawContent="DrawEventHeader" />
<spacer height="10" />
<tabGroup showTabBar="true" enclosingStyle="padding:5px;">
<tab caption="Event report" cellStyle="padding:5px;" width="100%">
<html id="htmlSource" OnDrawContent="DrawSource" containerStyle="overflow-y:scroll;" 
enclosingClass="textBox" seed="REPORT" />
<spacer height="10" />
<hgroup labelPosition="left" cellVAlign="top">
<text id="txtLength" value="all" hint="number of sentences to display" label="Summary length: " />
<spacer width="20" />
<button caption="summarize" onclick="zenPage.summarize();" />
</hgroup>
</tab>
<!-- uncomment the <tab> below to display more (basic) info about the currently selected
	 report. Optionally change the queryClass and queryName attributes of the <tablePane>
	 to display different information or add more <tablePane> elements to display different
	 types of information simultaneously. -->
<!--tab caption="Report analysis" cellStyle="padding:10px;" width="100%">
<titleBox title="Top concepts" />
<tablePane id="tabTopEnts" queryClass="%iKnow.Queries.EntityQAPI" queryName="GetTop" 
showRowSelector="false" width="100%">
<parameter value="#(%page.reportDomain)#" />
<parameter value="1" />
<parameter value="12" />
<parameter value="" />
<parameter value="15" />
<parameter value="0" />
<parameter value="0" />
<parameter value="#(%page.inputSource)#" />
<column colName="entUniId" hidden="true" />
<column colName="spread" hidden="true" />
</tablePane>
</tab-->
<tab caption="Cause" cellStyle="padding:5px;" width="100%">
<html id="htmlCause" containerStyle="overflow-y:scroll" OnDrawContent="DrawSource" 
enclosingClass="textBox" seed="CAUSE" />
</tab>
</tabGroup>
</vgroup>
</modalGroup>

<form method="post" id="form" height="100%" width="100%">
<vgroup containerStyle="padding:10px;" height="100%" width="100%">
<hgroup id="logoContainer" >
<image src="/csp/sys/iknow/img/iknow.jpg" height="70" id="imgLogoPane" />
<spacer width="30" />
<label label="Aviation Event Investigator" labelClass="pageTitle" />
</hgroup>
<spacer height="10" />
<hgroup id="grpMain" valign="top" >
<vgroup id="grpText" valign="top">
<textarea id="txtInput" rows="7" title="Type your event report here and press the 'process' button to look for similar events." />
</vgroup>
<spacer width="20" />
<vgroup id="grpButtons" valign="top" labelPosition="left">
<select required="true" label="Language" id="optLanguage" valueList="AUTO,en,fr,de,nl,es,pt"
displayList="Auto-detect,English,French,German,Dutch,Spanish,Portugese" showEmpty="false" />
<spacer height="10" />
<button caption="process" onclick="zenPage.realTimeInputClient();" />
<spacer height="10" />
</vgroup>
</hgroup>
<spacer height="10" />
<tabGroup id="tgrResults" showTabBar="true" height="100px">
<tab id="tabSimilar" caption="Basic similarity" cellStyle="padding:10px;" title="Normal entity-based similarity" >
<tablePane id="tblSimilar" queryClass="%iKnow.Queries.SourceQAPI" queryName="GetSimilar"
 autoExecute="false" OnExecuteResultSet="ExecuteSimilarQuery" showRowSelector="false">
<parameter value="#(%page.reportDomain)#" />
<parameter value="#(%page.inputSource)#" />
<parameter value="1" />
<parameter value="10" />
<parameter value="#(%page.filter)#" />
<parameter value="SIMPLE" />
<column colName="srcId" hidden="true" />
<column colName="extId" header="External ID"  link="javascript:zenPage.displaySourceClient(#(%query.srcId)#);" width="40" />
<column header="Event date" OnDrawCell="DrawMetadata" seed="EventDate" width="15" />
<column header="Category" OnDrawCell="DrawMetadata" seed="AircraftCategory" width="15" />
<column colName="percentageMatched" header="Percentage matched" OnDrawCell="DrawPercentage" width="15" />
<column colName="percentageNew" header="Percentage new" OnDrawCell="DrawPercentage" width="15" />
<column colName="nbOfEntsInRefSrc" hidden="true" />
<column colName="nbOfEntsInCommon" hidden="true" />
<column colName="nbOfEntsInSimSrc" hidden="true" />
<column colName="score" header="Score" hidden="true" />
</tablePane>
</tab>
<tab id="tabSrcDictionary" caption="Dictionary-based similarity" cellStyle="padding:10px;" title="Similar events based on matching results of the new report treated as a dictionary.">
<tablePane id="tblDictionary" queryClass="%iKnow.Matching.MatchingQAPI" showRowSelector="false"
queryName="GetTopSourcesByDictionary" autoExecute="false" OnExecuteResultSet="ExecuteSimilarQuery">
<parameter value="#(%page.reportDomain)#" />
<parameter value="#(%page.dictId)#" />
<parameter value="1" />
<parameter value="10" />
<parameter value="#(%page.filter)#" />
<column colName="srcId" hidden="true" />
<column colName="externalId" header="External ID"  link="javascript:zenPage.displaySourceClient(#(%query.srcId)#);" width="40" />
<column header="Event date" OnDrawCell="DrawMetadata" seed="EventDate" width="15" />
<column header="Category" OnDrawCell="DrawMetadata" seed="AircraftCategory" width="15" />
<column colName="matchCount" header="Match count" width="15" />
<column colName="totalScore" header="Total score" width="15" />
</tablePane>
</tab>
<!-- Currently not implemented as Virtual Sources don't have dominance information -->
<!--tab id="tabDominance" caption="Dominance-based similarity" cellStyle="padding:10px;" >
<tablePane id="tblDominance" queryClass="%iKnow.Queries.SourceQAPI" queryName="GetSimilar"
 autoExecute="false" OnExecuteResultSet="ExecuteSimilarQuery" showRowSelector="false">
<parameter value="#(%page.reportDomain)#" />
<parameter value="#(%page.inputSource)#" />
<parameter value="1" />
<parameter value="10" />
<parameter value="#(%page.filter)#" />
<parameter value="DOMINANTENTITIES" />
<column colName="srcId" hidden="true" />
<column colName="extId" header="External ID" OnDrawCell="DrawExternalId" width="60" />
<column colName="percentageMatched" header="Percentage matched" width="20" />
<column colName="percentageNew" header="Percentage new" width="20" />
<column colName="nbOfEntsInRefSrc" hidden="true" />
<column colName="nbOfEntsInCommon" hidden="true" />
<column colName="nbOfEntsInSimSrc" hidden="true" />
<column colName="score" header="Score" hidden="true" />
</tablePane>
</tab-->
</tabGroup>
</vgroup>
</form>
</page>
]]></Data>
</XData>

<Method name="ProcessInput">
<Description><![CDATA[
<p>ZenMethod to process manual user input <var>pText</var> by the iKnow engine and store the
ID of the generated Virtual Source in <property>inputSource</property>.</p>]]></Description>
<FormalSpec>pText:%String(MAXLEN=32767),pLanguage:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC = $$$OK, tOldStatus = 0
	try {
		set tDomainId = ..reportDomain
		set tDomainName = $system.iKnow.GetDomainName(tDomainId)
		
		// drop the previous virtual source created
		do:..inputSource ##class(%iKnow.Source.Loader).DeleteVirtualSource(tDomainId, $zabs(..inputSource))
		
		// create a simple configuration object for pLanguage, if none exists yet
		set tConfigName = "AviationInvestigatorConfig"_pLanguage
		if '##class(%iKnow.Configuration).NameIndexExists(tConfigName) {
			set tLanguages = $s(pLanguage="AUTO":$$$IKLANGUAGES, 1:$lb(pLanguage))
			set tConfig = ##class(%iKnow.Configuration).%New(tConfigName, (pLanguage="AUTO"), tLanguages)
			set tSC = tConfig.%Save()
			quit:$$$ISERR(tSC)
		}
		
		// process pText, loading it as a virtual source
		set tFullRef = "AviationInvestigatorInput "_$zdt($h)
		set tSC = $system.iKnow.IndexString(tDomainName, tFullRef, pText, tConfigName, 1, .vSrcId)
		quit:$$$ISERR(tSC)
		
		// store the generated (virtual) source ID
		set ..inputSource = vSrcId
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit $s($$$ISOK(tSC):"OK", 1:$system.Status.GetErrorText(tSC))
]]></Implementation>
</Method>

<Method name="realTimeInputClient">
<Description><![CDATA[
Client-side method coordinating the processing of user input by invoking <method>ProcessInput</method>
and then refreshing the appropriate sections of the interface. ]]></Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var msg = zenPage.ProcessInput(zen('txtInput').getValue(), zen('optLanguage').getValue());
	if (msg != 'OK') {
		alert(msg);
	}
	zen('tblSimilar').refreshContents();
	zenPage.refreshDictionaryAsync();
	//zen('tblDominance').refreshContents();
]]></Implementation>
</Method>

<Method name="BuildSrcDictionary">
<Description><![CDATA[
Builds/replaces a dictionary based on the contents of the (virtual) source represented by
<property>inputSource</property> and stores it into both the reports and the causes domains.
The ID of this dictionary (in the reports domain) is stored into <property>dictId</property>.]]></Description>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		set tSrcId = +..inputSource
		set tDomainId = ..reportDomain
		set tDomainIdCause = ..causeDomain
		
		// first kill existing dictionary
		set tDictId = ##class(%iKnow.Matching.DictionaryAPI).GetDictionaryId(tDomainId, ..#IKNOWDICTNAME)
		set:tDictId>0 tSC = ##class(%iKnow.Matching.DictionaryAPI).DropDictionary(tDomainId, tDictId)
		quit:$$$ISERR(tSC)
		set tDictIdCause = ##class(%iKnow.Matching.DictionaryAPI).GetDictionaryId(tDomainIdCause, ..#IKNOWDICTNAME)
		set:tDictIdCause>0 tSC = ##class(%iKnow.Matching.DictionaryAPI).DropDictionary(tDomainIdCause, tDictIdCause)
		quit:$$$ISERR(tSC)
		
		// now create a new one, containing all entities and CRCs of the current source
		// NOTE: this is a very crude approach. refining this to all entities that are dominant
		// in the input text and/or not too common in the overall domain (such as "pilot" etc),
		// could improve the results.
		set ..dictId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionary(tDomainId, ..#IKNOWDICTNAME)
		set tDictIdCause = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionary(tDomainIdCause, ..#IKNOWDICTNAME)
		
		set tSC = ##class(%iKnow.Queries.EntityAPI).GetBySource(.tEntities, tDomainId, tSrcId, 0, 0)
		quit:$$$ISERR(tSC)
		set i=""
		for {
			set i = $order(tEntities(i),1,tData)
			quit:i=""
			
			set tSC = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryItemAndTerm(tDomainId, ..dictId, $li(tData,2), ":entity:"_$li(tData,1)_":"_$li(tData,2))
			quit:$$$ISERR(tSC)
			set tSC = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryItemAndTerm(tDomainIdCause, tDictIdCause, $li(tData,2), ":entity:"_$li(tData,1)_":"_$li(tData,2))
			quit:$$$ISERR(tSC)
		}
		quit:$$$ISERR(tSC)
		
		set tSC = ##class(%iKnow.Queries.CrcAPI).GetBySource(.tCrcs, tDomainId, tSrcId, 0, 0)
		quit:$$$ISERR(tSC)
		set i=""
		for {
			set i = $order(tCrcs(i),1,tData)
			quit:i=""
			
			set tSC = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryItemAndTerm(tDomainId, ..dictId, $lts($li(tData,2,4)," "), ":crc:"_$lts($li(tData,1,4),":"))
			quit:$$$ISERR(tSC)
			set tSC = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryItemAndTerm(tDomainIdCause, tDictIdCause, $lts($li(tData,2,4)," "), ":crc:"_$lts($li(tData,1,4),":"))
			quit:$$$ISERR(tSC)
		}
		quit:$$$ISERR(tSC)
		
		// now match all sources in the reports domain against this new dictionary
		set tSC = ##class(%iKnow.Matching.MatchingAPI).MatchSources(tDomainId, ..filter, $lb(..dictId))
		quit:$$$ISERR(tSC)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="refreshDictionaryAsync">
<Description><![CDATA[
Client-side method called asynchroneously from <method>realTimeInputClient</method> to
perform the matching-based similarity search in the background and avoid "freezing" the UI
while it runs.]]></Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.BuildSrcDictionary();
	zen('tblDictionary').refreshContents();
	
	// also refresh source view panes, should they already be open before the matching process
	// finished at the end of BuildSrcDictionary();
	zen('htmlSource').refreshContents();
	zen('htmlCause').refreshContents();
]]></Implementation>
</Method>

<Method name="onlayoutHandler">
<Description><![CDATA[
This client event, if present, is fired when the page 
is first loaded or whenever it is resized.<br/>
If this is called at load time, then <var>load</var> will
be true.]]></Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenPage.resizeGroups(load);
]]></Implementation>
</Method>

<Method name="resizeGroups">
<Description>
Utility method to properly position and align the main page components.</Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var logo = zen('logoContainer').getEnclosingDiv().clientHeight;
	var txtInput = zen('grpText').getEnclosingDiv().clientHeight;
	var available = 100; //zenGetWindowHeight()-logo-txtInput-100; ???
	zen('tgrResults').getEnclosingDiv().style.height = available;
	zen('tabSimilar').getEnclosingDiv().style.height = available-20;
	zen('tabSrcDictionary').getEnclosingDiv().style.height = available-20;
	
	var fullWidth = zenGetWindowWidth()-40;
	zen('grpMain').getEnclosingDiv().style.width = fullWidth;
	zen('tgrResults').getEnclosingDiv().style.width = fullWidth;
	zen('tblSimilar').getEnclosingDiv().style.width = fullWidth-40;
	zen('grpText').getEnclosingDiv().style.width = parseInt(fullWidth*0.7);
	zen('txtInput').setProperty('cols', parseInt(fullWidth*0.07));
	zen('grpButtons').getEnclosingDiv().style.width = parseInt(fullWidth*0.3);
]]></Implementation>
</Method>

<Method name="ExecuteSimilarQuery">
<Description>
Ensures required parameters are present when calling a GetSimilar() query from the main
tables, to avoid noisy errors when the page opens before typing/selecting anything.</Description>
<FormalSpec><![CDATA[pRS:%Library.ResultSet,&tSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	merge p = pInfo.parms
	quit:'+p(1) 1  // quit if no domain is specified
	quit:'+p(2) 1  // quit if no source is specified
	
	set p = $o(p(""),-1)
	set tSC = pRS.Execute(p...)
	
	quit 1
]]></Implementation>
</Method>

<Method name="onUpdateFilterClient">
<Description><![CDATA[
Client-side utility method to refresh appropriate sections when <property>filter</property>
changes.]]></Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zen('tblSimilar').refreshContents();
	zen('tblDictionary').refreshContents();
]]></Implementation>
</Method>

<Method name="DrawPercentage">
<Description><![CDATA[
Draws a &lt;tablePane&gt; column's contents as a percentage]]></Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	write $g(%query(pName))*100, "%"
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawMetadata">
<Description><![CDATA[
Utility method to draw source metadata in a &lt;tablePane&gt; column for a given source.
<var>pSeed</var> is expected to be the name of the metadata field to display.]]></Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tExtId = $g(%query("extId"),$g(%query("externalId")))
	set tValue = ##class(%iKnow.Queries.MetadataAPI).GetValue(..reportDomain, pSeed, tExtId, .tSC)
	set:pSeed="EventDate" tValue = $zd(tValue)
	write tValue
	quit tSC
]]></Implementation>
</Method>

<Method name="displaySourceClient">
<Description><![CDATA[
Client-side method refreshing appropriate sections of the popup window using the
<var>srcId</var> passed in.]]></Description>
<FormalSpec>srcId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zen('modSource').show();
	var sc = zenPage.setProperty('selectedSource',srcId);
	zen('htmlTitle').refreshContents();
	zen('htmlSource').refreshContents();
	zen('htmlCause').refreshContents();
	zen('tabTopEnts').refreshContents();
]]></Implementation>
</Method>

<Method name="summarize">
<Description>
Client-side method triggered when the user presses the "summarize" button.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('summaryLength', zen('txtLength').getValue());
	zen('htmlSource').refreshContents();
]]></Implementation>
</Method>

<Method name="DrawEventHeader">
<Description><![CDATA[
<p>Draws a number of event properties as a header for the popup.</p>]]></Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		quit:'..selectedSource
		
		set tExtId = ##class(%iKnow.Queries.SourceAPI).GetExternalId(..reportDomain, ..selectedSource)
		set tSC = ##class(%iKnow.Source.Lister).SplitExtId(..reportDomain, tExtId, .tLister, .tGroup, .tEventId)
		quit:$$$ISERR(tSC)
		
		#dim tEvent As Aviation.Event
		set tEvent = ##class(Aviation.Event).PKINDEXOpen(tEventId)
		
		write "<table id=""title""><tr>"
		write "<td id=""titleLeft"">"_tExtId_"</td>"
		write "<td id=""titleRight""><a href=""http://dms.ntsb.gov/aviation/GenPDF.aspx?id="_tEvent.NTSBId_"&rpt=fa"" target=""_new"">NTSB report</a></td>"
		write "</tr></table>"
		
		write "<table id=""metadata"">"
		write "<tr><td class=""left"">Date:</td><td>"_$e(tEvent.EventDate,1,10)_"</td></tr>"
		write "<tr><td class=""left"">NTSB ID:</td><td><a href=""http://dms.ntsb.gov/aviation/GenPDF.aspx?id="_tEvent.NTSBId_"&rpt=fa"" target=""_new"">"_tEvent.NTSBId_"</a></td></tr>"
		write "<tr><td class=""left"">Location:</td><td><a href=""http://maps.google.com/maps?q="_tEvent.LocationCoordsLatitude_",+"_tEvent.LocationCoordsLongitude_"+(Event location:+"_$zconvert(tEvent.LocationCity,"O","URL")_")&iwloc=A"" target=""_new"">"_$s(tEvent.LocationState'="":tEvent.LocationState_", ", 1:"")_tEvent.LocationCountry_"</a></td></tr>"
		write "<tr><td class=""left"">Light conditions:</td><td>"_$case(tEvent.LightConditions, "DAYL":"Daylight", "DUSK":"Dusk", "DAWN":"Dawn", "NBRT":"Night (bright)", "NDRK":"Night (dark)", "NITE":"Night", :"Unkown")_"</td></tr>"
		write "<tr><td class=""left"">Aircraft:</td><td>"_tEvent.Aircraft.GetAt(1).AircraftManufacturer_" ("_$case(tEvent.Aircraft.GetAt(1).AircraftCategory, "HELI":"helicopter", "AIR":"airplane", "BALL":"balloon", "GLI":"glider", "GYRO":"gyrocraft", "PPAR":"powered parachute", "ULTR":"ultralight", "WSFT":"weight shift", :"unknown")_")</td></tr>"
		write "</table>"
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="DrawSource">
<Description><![CDATA[
<p>Draws the contents of a source (report or cause, based on <var>pSeed</var>) as identified by
the value of <property>selectedSource</property>. The source is summarized if
<property>summaryLength</property> is non-zero (interpreted as the number of sentences) and
any matches against the dictionary created by <method>BuildSrcDictionary</method> is
highlighted.</p>]]></Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		quit:'..selectedSource
		
		if (pSeed="REPORT") {
			set tDomainId = ..reportDomain
			set tSrcId = ..selectedSource
			set tLength = ..summaryLength
		} else {
			set tDomainId = ..causeDomain
			set tExtId = ##class(%iKnow.Queries.SourceAPI).GetExternalId(..reportDomain, ..selectedSource)
			set tSrcId = ##class(%iKnow.Queries.SourceAPI).GetSourceId(tDomainId, tExtId)
			set tLength = 0
		}
		
		set tMatchFilter = ##class(%iKnow.Matching.MatchFilter).%New()
		set tDictId = ##class(%iKnow.Matching.DictionaryAPI).GetDictionaryId(tDomainId, ..#IKNOWDICTNAME)
		set tHighlight("MATCH", tDictId) = "<span class=""matchF"" title=""$$$TERM"">"
		set tHighlight("MATCH", tDictId, "PARTIAL") = "<span class=""matchP"" title=""$$$TERM"">"
		
		// Cause domain is not matched yet!
		set:pSeed="CAUSE" tSC = ##class(%iKnow.Matching.MatchingAPI).MatchSource(tDomainId, tSrcId, $lb(tDictId))
		quit:$$$ISERR(tSC)
		
		w "<p>"
		
		set srcObj = ##class(%iKnow.Objects.Source).PKINDEXOpen(tDomainId, tSrcId)
		set sentBase = srcObj.FirstSentenceId-1
			
		if (tLength>0) {
			set tSC = ##class(%iKnow.Queries.SourceAPI).GetSummary(.res, tDomainId, tSrcId, tLength)
			quit:$$$ISERR(tSC)
		} else {
			kill res
			for i=1:1:srcObj.SentenceCount { set res(i) = $lb(sentBase+i) }
		}
		
		set i = "", prevPos=0
		for {
			set i = $o(res(i),1,d)
			quit:i=""
			
			set tSentId = $li(d,1), sentPos = tSentId-sentBase
			w:(sentPos>(prevPos+1)) " ... "
			
			write ##class(%iKnow.Queries.SentenceAPI).GetHighlighted(tDomainId, tSentId, .tHighlight,,,.tSC)," "
			quit:$$$ISERR(tSC)
			
			set prevPos = sentPos
		}
		w:(prevPos=(sentBase+srcObj.SentenceCount)) " ..."
		
		w "</p>"
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
Initializes some of the panes and session variables used by this page, fetching domain, 
source and term variables from the request (if present).
This method also verifies if the appropriate domains are present.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..reportDomain = $system.iKnow.GetDomainId(..#IKNOWREPORTDOMAINNAME)
	set ..causeDomain = $system.iKnow.GetDomainId(..#IKNOWCAUSEDOMAINNAME)
	
	if (..reportDomain="") || (..causeDomain="") {
		quit $$$ERROR($$$GeneralError, "Please set up the Aviation Investigator demo before opening this page, using the following command: do ##class(Aviation.UI.Investigator).Setup()")
	}
	
	quit ##super()
]]></Implementation>
</Method>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
body {
	font-family: Verdana, Arial;
	font-size: 12px;
	line-height: 17px;
}

a {
	color: #a00000;
}

.match,.matchF {
	background-color: #9999ff;
	border: solid #9999ff 2px;
}
.matchP {
	border: solid #9999ff 2px;
	background-color: none;
}

table#title {
	border-bottom: solid black 1px;
	width: 100%;
}
td#titleLeft {
	font-weight: bold;
	font-size: 20px;
}
td#titleRight {
	vertical-alignment: bottom;
	text-align: right
}

table#metadata {
	margin-left: 20px;
	margin-top: 10px;
}
table#metadata td.left {
	padding-right: 10px;
	text-align: right;
}

.pageTitle {
	vertical-alignment: bottom;
	font-weight: bold;
	font-size: 25px;
}

.textBox {
	overflow-y: scroll;
	width: 500px;
	height: 300px;
	background-color: white;
	padding: 5px;
}

</style>
]]></Data>
</XData>

<Method name="Setup">
<Description><![CDATA[
Sets up the Aviation Investigator demo. If the Standalone Aviation demo was already
set up through <class>Aviation.Utils</class>, that domain will be used.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		do EnableIKnow^%SYS.cspServer("/csp/samples/")
	} catch (ex) {
		write !,"WARNING: failed to enable iKnow sample UI classes for this namespace.",!
	}
	
	set tSC = $$$OK
	try {
		
		write !,"Setting up reports domain..."
		if '##class(%iKnow.Domain).NameIndexExists(..#IKNOWREPORTDOMAINNAME) {
			set tDomain = ##class(%iKnow.Domain).%New(..#IKNOWREPORTDOMAINNAME)
			set tSC = tDomain.%Save()
			quit:$$$ISERR(tSC)
			set tSC = $system.iKnow.IndexTable(..#IKNOWREPORTDOMAINNAME, "Aviation.Event", "EventId", "YEAR(EventDate)", "NarrativeFull")
			quit:$$$ISERR(tSC)
		}
		write " (domain ID: ",$system.iKnow.GetDomainId(..#IKNOWREPORTDOMAINNAME),")"
		
		
		write !,"Setting up causes domain..."
		if '##class(%iKnow.Domain).NameIndexExists(..#IKNOWCAUSEDOMAINNAME) {
			set tDomain = ##class(%iKnow.Domain).%New(..#IKNOWCAUSEDOMAINNAME)
			set tSC = tDomain.%Save()
			quit:$$$ISERR(tSC)
			
			set tSC = $system.iKnow.IndexTable(..#IKNOWCAUSEDOMAINNAME, "Aviation.Event", "EventId", "YEAR(EventDate)", "NarrativeCause As Cause")
			quit:$$$ISERR(tSC)
			set ^Aviation.DomainName.Causes = ..#IKNOWCAUSEDOMAINNAME
		}
		write " (domain ID: ",$system.iKnow.GetDomainId(..#IKNOWCAUSEDOMAINNAME),")"
		
		
		do ##Class(%Library.RoutineMgr).GetWebServerPort(.tPort,.tServer,.tURLPrefix,.tURL)
		write !,"All done.",!!,"You can access the Aviation Investigator sample application at",!,tURL_"csp/samples/Aviation.UI.Investigator.zen",!
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	if $$$ISERR(tSC) {
		write !,"An error occurred while setting up the Aviation Investigator Demo:",!
		do $system.OBJ.DisplayError(tSC)
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="onunloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.OnUnload();
	return true;
]]></Implementation>
</Method>

<Method name="OnUnload">
<Internal>1</Internal>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	try {
		// clean up any leftover sources
		do:..reportDomain&&..inputSource ##class(%iKnow.Source.Loader).DeleteVirtualSource(..reportDomain, $zabs(..inputSource))
	} catch {}
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Aviation.UI.NTSBLink">
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62599,40091.238859</TimeCreated>

<XData name="Contents">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Forwarding to original NTSB report..." enclosingStyle="padding: 20px;">
<html id="htmlRedirect" OnDrawContent="DrawRedirect" />
</page>
]]></Data>
</XData>

<Method name="DrawRedirect">
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		set tID = $g(%request.Data("ID",1))
		if (tID="") {
			write "<p>No event ID specified</p>"
			quit
		} elseif $f(tID,",") {
			set tID = $p(tID,",",1)
			write "<p>Multiple tIDs specified, only the first one will be used (""",tID,""")"
		}
		
		set tEvent = ##class(Aviation.Event).PKINDEXOpen(tID)
		if (tEvent="") {
			write "<p>Unknown event ID: ",tID," </p>"
			quit
		}
		
		set tURL = "http://dms.ntsb.gov/aviation/GenPDF.aspx?id="_tEvent.NTSBId_"&rpt=fa"
		
		&html<<p>Redirecting to NTSB.gov...</p><p>&nbsp;Please note some the NTSB report server might not always be available.</p>>
		write "<script language=""JavaScript"" type=""text/javascript"">location.href='"_tURL_"';</script>"
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Aviation.Utils">
<Description><![CDATA[
<p>This class groups code for setting up two demos:</p>
<ul>
	<li>The <b>DeepSee Aviation demo</b> demonstrates how the iKnow featues embedded in
		DeepSee can be used to combine analysis of structured and unstructured data. It can be
		configured by calling the <method>SetupCube</method> class method in this class. Check
		the "Using unstructured data in cubes" chapter in the "Defining DeepSee models" guide.</li>
	<li>The <b>iKnow Aviation demo</b> uses the same dataset, but just loads it as a normal
		standalone iKnow domain, which can be explored to the general iKnow APIs. This domain is
			fully defined through the domain definition in <class>Aviation.ReportDomain</class> and can
		be set up by calling its %Build() method. This class' <method>SetupStandalone</method>
			will invoke that %Build() method and call additional configuration code to ensure your
			security settings allow accessing the UI classes for the SAMPLES namespace. Check the 
		"Using iKnow" guide in the documentation for more details.</p>
</ul>

 <p>The classes in this package represent events involving aircraft as registered by the 
 <a href="http://www.ntsb.gov/" target="_blank">National Transportation Safety Board</a>.</p>
 <p><b>Note on the data</b>: The dataset provided in this sample demo is only a lightweight
 subset of the full NTSB dataset, which is available from 
 <a href="http://www.ntsb.gov/" target="_blank">http://www.ntsb.gov</a>. This data is supplied
 here for demonstration purposes only and neither intended nor warranted to be accurate.<br/>
 	Courtesy: National Transportation Safety Board</p>]]></Description>
<IncludeCode>%IKPublic</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62516,40938.397242</TimeCreated>

<Parameter name="CUBENAME">
<Default>AviationEvents</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// server

]]></Content>
</UDLText>

<Parameter name="MEASURENAME">
<Default>Report</Default>
</Parameter>

<Method name="Setup">
<Description><![CDATA[
<i>Deprecated</i>: use <method>SetupCube</method> instead.	]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..SetupCube()
]]></Implementation>
</Method>

<Method name="SetupCube">
<Description><![CDATA[
 Utility method to load all relevant data and build the
 <class>Aviation.Accidents</class> cube for the DeepSee Aviation demo.	]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		do EnableDeepSee^%SYS.cspServer("/csp/samples/")
	} catch (ex) {
		write !,"WARNING: failed to enable DeepSee for this namespace."
	}
	
	set tSC = $$$OK
	try {
		w !,"Loading Aviation Term Lists...",!
		set tSC = ..CreateTermLists()
		quit:$$$ISERR(tSC)
		
		// compile the cube as pre-loaded samples classes might not have run through
		// all required projection code for iKnow domain generation
		w !,"Compiling Aviation cubes...",!
		set tSC = $system.OBJ.Compile("Aviation.Cubes.Events", "ckr-d")
		quit:$$$ISERR(tSC)
		
		set tSC = ##class(%DeepSee.Utils).%BuildCube("AviationEvents")
		quit:$$$ISERR(tSC)
		set tSC = ##class(%DeepSee.Utils).%BuildCube("AviationAircraft")
		quit:$$$ISERR(tSC)
		set tSC = ##class(%DeepSee.Utils).%BuildCube("AviationCrew")
		quit:$$$ISERR(tSC)
		
		w !,"Loading Aviation Pivots & Dashboard...",!
		set tSC = ##class(%DeepSee.UserLibrary.Utils).%ImportContainer("Aviation.DashboardsEtc",1,1)
		quit:$$$ISERR(tSC)
		
		w !,"All done, you can now use the Aviation cubes in Analyzer",!
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	
	if $$$ISERR(tSC) {
		w !,"An error occurred while loading the demo:"
		d $system.OBJ.DisplayError(tSC)
	}
	
	quit tSC
]]></Implementation>
</Method>

<Method name="SetupStandalone">
<Description><![CDATA[
<p>Sets up a regular iKnow domain and loads the Aviation demo dataset into it by calling the 
<class>Aviation.ReportDomain</class> %Build() method after enabling it and configuring CSP access
to %iKnow UI classes for the SAMPLES web application.</p>
<p>Note that the <var>pDomainName</var>, <var>pMetaFields</var>, <var>pLoadTermLists</var> arguments are now deprecated.</p>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDomainName:%String="",pMetaFields:%String="",pLoadTermLists:%Boolean=1,pVerbose:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		do EnableIKnow^%SYS.cspServer("/csp/samples/")
	} catch (ex) {
		write !,"WARNING: failed to enable iKnow sample UI classes for this namespace."
	}
	
	if (pDomainName_pMetaFields)'="" {
		write !,"WARNING: The pDomainName and pMetaFields arguments have been deprecated!"
	}
	
	set tSC = $$$OK
	try {
		
		// Enabling the Aviation Event demo domain.
		// Note that this step is only required for licensing reasons, as the outcome of the compile-time
		// actions taken by an iKnow domain definition could not be packaged in the distributed SAMPLES 
		// database before knowing the license used by the actual Cache instance.
		
		write:pVerbose !,"Enabling Aviation Event demo domain..."
		set tSC = ..EnableDomainDefinition()
		quit:$$$ISERR(tSC)
		
		set tSC = ##class(Aviation.ReportDomain).%Build(pVerbose)
		quit:$$$ISERR(tSC)
		
		set tSC = ##class(%Library.RoutineMgr).GetWebServerPort(.tPort,.tServer,.tURLPrefix,.tURL)		
		write:pVerbose !,"All done.",!!,"You can browse the contents of this domain using the Knowledge Portal at",!,tURL,"csp/sys/_iKnow.UI.KnowledgePortal.zen?$NAMESPACE=SAMPLES&domain="_##class(Aviation.ReportDomain).%GetDomainId(),!
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	if $$$ISERR(tSC) {
		write !,"An error occurred while setting up the Standalone Aviation Demo:",!
		do $system.OBJ.DisplayError(tSC)
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="EnableDomainDefinition">
<Description>
Note that this step is only required for licensing reasons, as the outcome of the compile-time
actions taken by an iKnow domain definition could not be packaged in the distributed SAMPLES 
database before knowing the license used by the actual Cache instance.
DO NOT MODIFY OR USE THIS CODE OUTSIDE OF ITS INVOCATION BY SetupStandalone()</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {		
		set tXData = ##class(%Dictionary.XDataDefinition).%OpenId("Aviation.ReportDomain||Domain")
		set tNewStream = ##class(%Stream.TmpCharacter).%New()
		
		// modify first line:
		set tFirstLine = tXData.Data.ReadLine()
		set tFirstLine = $replace(tFirstLine,"disabled=""true""","disabled=""false""")
		set tSC = tNewStream.WriteLine(tFirstLine)
		quit:$$$ISERR(tSC)
		
		while 'tXData.Data.AtEnd {
			set tLength = 32000
			set tLine = tXData.Data.ReadLine(.tLength, .tSC)
			quit:$$$ISERR(tSC)
			set tSC = tNewStream.WriteLine(tLine)
			quit:$$$ISERR(tSC)
		}
		
		set tSC = tXData.Data.Clear()
		quit:$$$ISERR(tSC)
		
		set tSC = tXData.Data.CopyFromAndSave(tNewStream)
		quit:$$$ISERR(tSC)
		
		set tSC = tXData.%Save()
		quit:$$$ISERR(tSC)
		
		set tSC = $system.OBJ.Compile("Aviation.ReportDomain","c-d")
		quit:$$$ISERR(tSC)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="GetAviationDictionaries">
<Description><![CDATA[
Returns the dictionaries to be used for matching with the Aviation dataset in a 
pseudo-form, so they can be used both for building Term Lists (see
<method>CreateTermLists</method>) and iKnow Dictionaries
(<method>CreateIKnowDictionaries</method>).]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pDictionaries</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill pDictionaries 
    s pDictionaries(1) = "Maneuvers"
    s pDictionaries(1,":maneuver:altitude") = "altitude"
    s pDictionaries(1,":maneuver:altitude",1) = "ascend"
    s pDictionaries(1,":maneuver:altitude",2) = "ascended"
    s pDictionaries(1,":maneuver:altitude",3) = "ascending"
    s pDictionaries(1,":maneuver:altitude",4) = "ascent"
    s pDictionaries(1,":maneuver:altitude",5) = "descend"
    s pDictionaries(1,":maneuver:altitude",6) = "descended"
    s pDictionaries(1,":maneuver:altitude",7) = "descending"
    s pDictionaries(1,":maneuver:altitude",8) = "descent"
    s pDictionaries(1,":maneuver:landing") = "landing"
    s pDictionaries(1,":maneuver:landing",1) = "landed"
    s pDictionaries(1,":maneuver:landing",2) = "landing"
    s pDictionaries(1,":maneuver:landing",3) = "lands"
    s pDictionaries(1,":maneuver:takeoff") = "takeoff"
    s pDictionaries(1,":maneuver:takeoff",1) = "take-off"
    s pDictionaries(1,":maneuver:takeoff",2) = "takeoff"
    s pDictionaries(1,":maneuver:takeoff",3) = "takeoffs"
    s pDictionaries(1,":maneuver:takeoff",4) = "taking off"
    s pDictionaries(1,":maneuver:takeoff",5) = "took off"
    s pDictionaries(2) = "Weather conditions"
    s pDictionaries(2,":weather:clouds") = "clouds"
    s pDictionaries(2,":weather:clouds",1) = "broken clouds"
    s pDictionaries(2,":weather:clouds",2) = "cumuliform clouds"
    s pDictionaries(2,":weather:clouds",3) = "scattered clouds"
    s pDictionaries(2,":weather:clouds",4) = "skies overcast"
    s pDictionaries(2,":weather:clouds",5) = "sky broken"
    s pDictionaries(2,":weather:wind") = "mild wind"
    s pDictionaries(2,":weather:wind",1) = "calm winds"
    s pDictionaries(2,":weather:wind",2) = "light winds"
    s pDictionaries(2,":weather:wind",3) = "wind"
    s pDictionaries(2,":weather:visibility") = "clear"
    s pDictionaries(2,":weather:visibility",1) = "clear of clouds"
    s pDictionaries(2,":weather:visibility",2) = "clear skies"
    s pDictionaries(2,":weather:visibility",3) = "clear sky"
    s pDictionaries(2,":weather:visibility",4) = "sky condition clear"
    s pDictionaries(2,":weather:visibility",5) = "unlimited visibility"
    s pDictionaries(2,":weather:visibility",6) = "visibility unrestricted"
    s pDictionaries(2,":weather:rain") = "rain"
    s pDictionaries(2,":weather:rain",1) = "drizzle"
    s pDictionaries(2,":weather:rain",2) = "precipitation"
    s pDictionaries(2,":weather:rain",3) = "rain"
    s pDictionaries(2,":weather:rain",4) = "wet"
    s pDictionaries(2,":weather:heavy wind") = "heavy wind"
    s pDictionaries(2,":weather:heavy wind",1) = "extreme turbulence"
    s pDictionaries(2,":weather:heavy wind",2) = "severe turbulence"
    s pDictionaries(2,":weather:heavy wind",3) = "significant turbulence"
    s pDictionaries(2,":weather:heavy wind",4) = "substantial turbulence"
    s pDictionaries(2,":weather:mist") = "mist"
    s pDictionaries(2,":weather:mist",1) = "fog"
    s pDictionaries(2,":weather:mist",2) = "mist"
    s pDictionaries(2,":weather:winter") = "winter"
    s pDictionaries(2,":weather:winter",1) = "ice-covered"
    s pDictionaries(2,":weather:winter",2) = "icy"
    s pDictionaries(2,":weather:winter",3) = "snow"
    s pDictionaries(2,":weather:winter",4) = "snow-covered"
    s pDictionaries(2,":weather:thunderstorm") = "thunderstorm"
    s pDictionaries(2,":weather:thunderstorm",1) = "thunderstorm"
    s pDictionaries(2,":weather:thunderstorm",2) = "thunderstorms"
    s pDictionaries(3) = "Injuries"
    s pDictionaries(3,":injuries:fatal") = "fatal"
    s pDictionaries(3,":injuries:fatal",1) = "died"
    s pDictionaries(3,":injuries:fatal",2) = "fatal injuries"
    s pDictionaries(3,":injuries:fatal",3) = "fatally injured"
    s pDictionaries(3,":injuries:fatal",4) = "succumbed"
    s pDictionaries(3,":injuries:fatal",5) = "was killed"
    s pDictionaries(3,":injuries:fatal",6) = "were killed"
    s pDictionaries(3,":injuries:minor") = "minor"
    s pDictionaries(3,":injuries:minor",1) = "minor injuries"
    s pDictionaries(3,":injuries:minor",2) = "wounded"
    s pDictionaries(3,":injuries:none") = "none"
    s pDictionaries(3,":injuries:none",1) = "no injuries"
    s pDictionaries(3,":injuries:none",2) = "not injured"
    s pDictionaries(3,":injuries:none",3) = "survived"
    s pDictionaries(3,":injuries:none",4) = "was not injured"
    s pDictionaries(3,":injuries:none",5) = "were not injured"
    s pDictionaries(3,":injuries:serious") = "serious"
    s pDictionaries(3,":injuries:serious",1) = "serious injuries"
    s pDictionaries(3,":injuries:serious",2) = "seriously injured"
    s pDictionaries(4) = "Pilot skills"
    s pDictionaries(4,":skills:pro") = "professional"
    s pDictionaries(4,":skills:pro",1) = "airline transport pilot"
    s pDictionaries(4,":skills:pro",2) = "commercial pilot"
    s pDictionaries(4,":skills:pro",3) = "commercial-rated pilot"
    s pDictionaries(4,":skills:pro",4) = "pilot/owner"
    s pDictionaries(4,":skills:pro",5) = "private pilot"
    s pDictionaries(4,":skills:pro",6) = "private-rated pilot"
    s pDictionaries(4,":skills:instructor") = "instructor"
    s pDictionaries(4,":skills:instructor",1) = "cfi"
    s pDictionaries(4,":skills:instructor",2) = "instructor"
    s pDictionaries(4,":skills:student") = "student"
    s pDictionaries(4,":skills:student",1) = "student pilot"
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateTermLists">
<Description>
Creates the Term Lists used for matching in the DeepSee Aviation demo.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		
		// Create Term List for US states
		if '##class(%DeepSee.TermList).%TermListExists("USStateCodes") {
			set tSC = ##class(%DeepSee.TermList).%CreateTermList("USStateCodes", "US States",,, "Names of US States (created by the Aviation Event demo setup script)")
			quit:$$$ISERR(tSC)
		}
		set tCode = ""
		for {
			set tCode = $order(^Aviation.States(tCode), 1, tState)
			quit:tCode=""
			
			do ##class(%DeepSee.TermList).%SetValue("USStateCodes", tCode, tState)
		}
		
		// Create Term List for US states
		if '##class(%DeepSee.TermList).%TermListExists("CountryCodes") {
			set tSC = ##class(%DeepSee.TermList).%CreateTermList("CountryCodes", "Country Codes",,, "Names of countries indexed by two-letter country code (created by the Aviation Event demo setup script)")
			quit:$$$ISERR(tSC)
		}
		set tCode = ""
		for {
			set tCode = $order(^Aviation.Countries(tCode), 1, tCountry)
			quit:tCode=""
			
			do ##class(%DeepSee.TermList).%SetValue("CountryCodes", tCode, tCountry)
		}
		
		
		
		// Create Term Lists for matching against iKnow measures
		do ..GetAviationDictionaries(.tDictionaries)
		
		set i = ""
		for {
			set i = $order(tDictionaries(i),1,tDictionary)
			quit:i=""
			
	        do ##class(%DeepSee.TermList).%DeleteTermList(tDictionary)
	        do ##class(%DeepSee.TermList).%CreateTermList(tDictionary, "Aviation terms - "_tDictionary, "URI",, "Sample Term List for Aviation demo", ..#CUBENAME)
			
			set tURI = ""
			for {
				set tURI = $order(tDictionaries(i,tURI),1,tItem)
				quit:tURI=""
				
				set j = ""
				for {
					set j = $order(tDictionaries(i,tURI,j),1,tTerm)
					quit:j=""
					
					do ##class(%DeepSee.TermList).%SetValue(tDictionary, tTerm, tItem)
        			do ##class(%DeepSee.TermList).%SetValue(tDictionary, tTerm, tURI,"URI")
				}
			}
		}
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="LoadFromNTSB">
<Description><![CDATA[
<p>Loads <var>pMaxRecords</var> aviation event records from the official NTSB database, which
can be downloaded as a Microsoft Access file from <a href="http://www.ntsb.gov/avdata/Access/">www.ntsb.gov</a>.
The Access file needs to be exposed through ODBC using a DSN named <var>pDSN</var>. Any existing
information for a given event will be overwritten, so loading from the "update" databases on
ntsb.gov will just append to your existing database.</p>
<p>Set <var>pMaxRecords</var> to 0 to load all events from the database and use <var>pClearFirst</var>
to specify whether existing events should be erased prior to the load. Using <var>pPrefList</var>,
and <var>pWhereClause</var>, you can list specific events which need to be selected, as records
are selected randomly from the full database. With <var>pSkipWhenEmpty</var>, a list of properties
of the event, aircraft and crew records can be supplied which needs to be non-null for the record
to be selected.</p>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDSN:%String="AviationAccess",pMaxRecords:%Integer=1200,pClearFirst:%Boolean=1,pVerbose:%Boolean=1,pSkipWhenEmpty:%List={$lb($lb("NarrativeFull","LocationCoordsLongitude","InjuriesHighest","MidAir","SkyConditionNonCeiling"),$lb("Damage","AircraftCategory","FlightType"))},pWhereClause:%String="",pPrefList:%List={$lb("20020611X00850","20030728X01207","20010123X00341")}</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		if (pClearFirst) {
			do ##class(Aviation.Crew).%KillExtent()
			do ##class(Aviation.Aircraft).%KillExtent()
			do ##class(Aviation.Event).%KillExtent()
		}
		
		set tEventProps = $lg(pSkipWhenEmpty,1)
		set tAircraftProps = $lg(pSkipWhenEmpty,2)
		set tCrewProps = $lg(pSkipWhenEmpty,3)
		
	    set tConnection = ##class(%SQLGatewayConnection).%New()
	    set tSC = tConnection.Connect(pDSN,"","") 
	    quit:$$$ISERR(tSC)

		// prepare main event statements
	    set tEventResultSet = ##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	    set tSQLPref = "SELECT *, -1 As FakeOrder FROM events WHERE ev_id = '"_$lts(pPrefList,"' OR ev_id = '")_"'"
	    set tSQL = "SELECT *, (ev_time*ev_time) MOD 79 As FakeOrder FROM events WHERE " _ $s(pWhereClause="":"ev_year >= 2000", 1:pWhereClause)
	    set tSQL = "SELECT * FROM ("_tSQLPref_") UNION ("_tSQL_") ORDER BY FakeOrder"
	    set tCountSQL = "SELECT COUNT(*) FROM ("_tSQL_")"
	    set tSC = tEventResultSet.Prepare(tCountSQL,, tConnection)
	    quit:$$$ISERR(tSC)
	    set tSC = tEventResultSet.Execute()
	    quit:$$$ISERR(tSC)
	    do tEventResultSet.Next()
	    set tMaxCount = tEventResultSet.GetData(1)
	    w:pVerbose !,"Loading ",tMaxCount," events from DSN '",pDSN,"'"
	    do tEventResultSet.Close()
	    set tSC = tEventResultSet.Prepare(tSQL,, tConnection)
	    quit:$$$ISERR(tSC)
	    set tSC = tEventResultSet.Execute()
	    quit:$$$ISERR(tSC)
	    
	    // prepare other statements
	    set tNarrativeResultSet = ##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	    set tAircraftResultSet = ##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	    set tCrewResultSet = ##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	    
		set tCount = 0, tSkipCount = 0, tUpdateCount = 0
	    while tEventResultSet.Next() { 
	    	
	    	set tEventId = tEventResultSet.Get("ev_id")
	    	set tIsNew = '##class(Aviation.Event).PKINDEXExists(tEventId)
	    	
	    	if (tIsNew) {
		    	set tEvent = ##class(Aviation.Event).%New()
    	        set tEvent.EventId = tEventId
	    	} else {
		    	set tEvent = ##class(Aviation.Event).PKINDEXOpen(tEventId)
		    	do tEvent.Aircraft.Clear()
		    	set x = $i(tUpdateCount)
	    	}
	    	
            set tEvent.AirportDirection = $zstrip(tEventResultSet.Get("apt_dir"),"<>W")
            set tEvent.AirportDistance = $zstrip(tEventResultSet.Get("apt_dist"),"<>W")
            set tEvent.AirportElevation = $zstrip(tEventResultSet.Get("apt_elev"),"<>W")
            set tValue = $zstrip(tEventResultSet.Get("ev_nr_apt_loc"),"<>W")
            set tEvent.AirportLocation = $case(tValue, "OFAP":"Off airport / airstrip", "ONAP":"On airport", "ONAS":"On airstrip", "UNK":"Unknown", :tValue)
            set tEvent.AirportName = $zstrip(tEventResultSet.Get("apt_name"),"<>W")
            set tEvent.Altimeter = $zstrip(tEventResultSet.Get("altimeter"),"<>W")
            
            set tDate = $zstrip(tEventResultSet.Get("ev_date"),"<>W")
            set tTime = $zstrip(tEventResultSet.Get("ev_time"),"<>W")
            if (+tTime) && (tDate'="") && (tTime'=2400) {
	            set tHours = tTime\100, tHours = $s(tHours>9:tHours, 1:"0"_tHours)
	            set tMinutes = (tTime#100)#60, tMinutes = $s(tMinutes>9:tMinutes, 1:"0"_tMinutes)
	            set tDate = $p(tDate," ",1)_" "_tHours_":"_tMinutes_":00"
            }
            set tEvent.EventDate = tDate
            set tEvent.EventTime = tTime
            
            set tEvent.FAADistrictOffice = $zstrip(tEventResultSet.Get("faa_dist_office"),"<>W")
            set tEvent.InjuriesGroundFatal = $zstrip(tEventResultSet.Get("inj_f_grnd"),"<>W")
            set tEvent.InjuriesGroundMinor = $zstrip(tEventResultSet.Get("inj_m_grnd"),"<>W")
            set tEvent.InjuriesGroundSerious = $zstrip(tEventResultSet.Get("inj_s_grnd"),"<>W")
            set tValue = $zstrip(tEventResultSet.Get("ev_highest_injury"),"<>W")
            set tEvent.InjuriesHighest = $case(tValue, "NONE":"None", "MINR":"Minor", "SERS":"Serious", "FATL":"Fatal", "UNK":"Unknown", :tValue)
            set tEvent.InjuriesTotal = $zstrip(tEventResultSet.Get("inj_tot_t"),"<>W")
            set tEvent.InjuriesTotalFatal = $zstrip(tEventResultSet.Get("inj_tot_f"),"<>W")
            set tEvent.InjuriesTotalMinor = $zstrip(tEventResultSet.Get("inj_tot_m"),"<>W")
            set tEvent.InjuriesTotalNone = $zstrip(tEventResultSet.Get("inj_tot_n"),"<>W")
            set tEvent.InjuriesTotalSerious = $zstrip(tEventResultSet.Get("inj_tot_s"),"<>W")
            set tEvent.InvestigatingAgency = $zstrip(tEventResultSet.Get("invest_agy"),"<>W")
            set tValue = $zstrip(tEventResultSet.Get("light_cond"),"<>W")
            set tEvent.LightConditions = $case(tValue, "DAWN":"Dawn", "DAYL":"Day", "DUSK":"Dusk", "NBRT":"Night/Bright", "NDRK":"Night/Dark", "NITE":"Night", "NR":"Not Reported", :tValue)
            set tEvent.LocationCity = $zstrip(tEventResultSet.Get("ev_city"),"<>W")
            
            set tLatitude = $zstrip(tEventResultSet.Get("latitude"),"<>W")
            if (tLatitude'="") {
	            set tSign = $case($e(tLatitude,*), "S":-1, :1)
	            set tDegrees = $e(tLatitude,1,*-5)
	            set tMinutes = $e(tLatitude,*-4,*-3)
	            set tSeconds = $e(tLatitude,*-2,*-1)
	            set tLatitude = (tDegrees + (tMinutes/60) + (tSeconds/3600)) * tSign
            }
            set tEvent.LocationCoordsLatitude = tLatitude
            
            set tLongitude = $zstrip(tEventResultSet.Get("longitude"),"<>W")
            if (tLongitude'="") {
	            set tSign = $case($e(tLongitude,*), "W":-1, :1)
	            set tDegrees = $e(tLongitude,1,*-5)
	            set tMinutes = $e(tLongitude,*-4,*-3)
	            set tSeconds = $e(tLongitude,*-2,*-1)
	            set tLongitude = (tDegrees + (tMinutes/60) + (tSeconds/3600)) * tSign
            }
            set tEvent.LocationCoordsLongitude = tLongitude
            
            set tState = $zstrip(tEventResultSet.Get("ev_state"),"<>W")
            set tCountry = $zstrip(tEventResultSet.Get("ev_country"),"<>W")
            set:(tState'="")&&(tCountry="USA") tState = $g(^Aviation.States(tState), tState)
            set:tCountry'="" tCountry = $g(^Aviation.Countries(tCountry), tCountry)
            set tEvent.LocationState = tState
            set tEvent.LocationCountry = tCountry
            set tEvent.LocationSiteZipCode = $zstrip(tEventResultSet.Get("ev_site_zipcode"),"<>W")
            set tEvent.MidAir = $zstrip(tEventResultSet.Get("mid_air"),"<>W")
            set tEvent.NTSBId = $zstrip(tEventResultSet.Get("ntsb_no"),"<>W")
            set tEvent.OnGroundCollision = $zstrip(tEventResultSet.Get("on_ground_collision"),"<>W")
            set tValue = $zstrip(tEventResultSet.Get("sky_cond_ceil"),"<>W")
            set tEvent.SkyConditionCeiling = $case(tValue, "BKN":"Broken", "NONE":"None", "OBSC":"Obscured", "OVC":"Overcast", "UNK":"Unknown", "VV":"Indefinite (VV)", :tValue)
            set tEvent.SkyConditionCeilingHeight = $zstrip(tEventResultSet.Get("sky_ceil_ht"),"<>W")
            set tValue = $zstrip(tEventResultSet.Get("sky_cond_nonceil"),"<>W")
            set tEvent.SkyConditionNonCeiling = $case(tValue, "BKNT":"Thin broken", "CLER":"Clear", "FEW":"Few", "OVCT":"Thin overcast", "POBS":"Partial obscuration", "SCAT":"Scattered", "UNK":"Unknown", :tValue)
            set tEvent.SkyConditionNonCeilingHeight = $zstrip(tEventResultSet.Get("sky_nonceil_ht"),"<>W")
            set tEvent.TimeZone = $zstrip(tEventResultSet.Get("ev_tmzn"),"<>W")
            set tValue = $zstrip(tEventResultSet.Get("ev_type"),"<>W")
            set tEvent.Type = $case(tValue, "ACC":"Accident", "INC":"Incident", "OCC":"Occurrence", "UNK":"Unknown", :tValue)
            set tEvent.Visibility = $zstrip(tEventResultSet.Get("vis_sm"),"<>W")
            set tEvent.WeatherAirTemperature = $zstrip(tEventResultSet.Get("wx_temp"),"<>W")
            set tEvent.WeatherPrecipitation = $zstrip(tEventResultSet.Get("wx_int_precip"),"<>W")
            set tEvent.WindDirection = $zstrip(tEventResultSet.Get("wind_dir_deg"),"<>W")
            set tEvent.WindDirectionIndicator = $zstrip(tEventResultSet.Get("wind_dir_ind"),"<>W")
            set tEvent.WindGust = $zstrip(tEventResultSet.Get("gust_kts"),"<>W")
            set tValue = $zstrip(tEventResultSet.Get("gust_ind"),"<>W")
            set tEvent.WindGustIndicator = $case(tValue, "N":"Non gusting", "U":"Unknown", "G":"Gusting", "Y":"Gusting", :tValue)
            set tEvent.WindVelocity = $zstrip(tEventResultSet.Get("wind_vel_kts"),"<>W")
            set tValue = $zstrip(tEventResultSet.Get("wind_vel_ind"),"<>W")
            set tEvent.WindVelocityIndicator = $case(tValue, "CALM":"Calm", "LVAR":"Light and variable", "SPEC":"Special", "UNK":"Unknown", "V":"Variable", :tValue)
            
            
            // load first narrative for this event
            set tSC = tNarrativeResultSet.Prepare("SELECT * FROM narratives WHERE ev_id = '"_tEventId_"' AND Aircraft_Key = 1",, tConnection)
            quit:$$$ISERR(tSC)
            set tSC = tNarrativeResultSet.Execute()
            quit:$$$ISERR(tSC)
            if tNarrativeResultSet.Next() {
	            set tString = $zstrip(tNarrativeResultSet.Get("narr_cause"), "<>W")
	            set tString = $translate(tString, $c(8216,8219,8217,8220,8223,8221,8211,243,8212,8482,8226), "'''""""""-o- -")
	            set tString = $replace($replace(tString,$c(176)," degrees"),$c(8230),"...")
	            set tEvent.NarrativeCause = $zconvert(tString,"O","UTF8")
	            set tString = $zstrip(tNarrativeResultSet.Get("narr_accp"), "<>W")
	            set tString = $translate(tString, $c(8216,8219,8217,8220,8223,8221,8211,243,8212,8482,8226), "'''""""""-o- -")
	            set tString = $replace($replace(tString,$c(176)," degrees"),$c(8230),"...")
	            set tEvent.NarrativeFull = $zconvert(tString,"O","UTF8")
	            set tString = $zstrip(tNarrativeResultSet.Get("narr_accf"), "<>W")
	            set tString = $translate(tString, $c(8216,8219,8217,8220,8223,8221,8211,243,8212,8482,8226), "'''""""""-o- -")
	            set tString = $replace($replace(tString,$c(176)," degrees"),$c(8230),"...")
	            set tEvent.NarrativeSummary = $zconvert(tString,"O","UTF8")
            }
            do tNarrativeResultSet.Close()
            
            
            // verify pSkipWhenEmpty elements
            set ptr=0, tSkip=0
            while $listnext(tEventProps, ptr, tProp) {
	            if ($property(tEvent, tProp)="") {
		            set tSkip=$i(tSkipCount)
		            quit
	            }
            }
            continue:tSkip
            
            
            // loop through aircraft for this event
            set tSC = tAircraftResultSet.Prepare("SELECT * FROM aircraft WHERE ev_id = '"_tEventId_"'",, tConnection)
            quit:$$$ISERR(tSC)
            set tSC = tAircraftResultSet.Execute()
            quit:$$$ISERR(tSC)
           	while tAircraftResultSet.Next() {
	           	set tAircraftKey = tAircraftResultSet.Get("Aircraft_Key")
	           	
	           	if (tIsNew) || '##class(Aviation.Aircraft).PKINDEXExists(tEventId, tAircraftKey) {
		           	set tAircraft = ##class(Aviation.Aircraft).%New()
	           		set tAircraft.EventId = tEventId
		        	set tAircraft.AircraftKey = tAircraftKey
	           	} else {
		           	set tAircraft = ##class(Aviation.Aircraft).PKINDEXOpen(tEventId, tAircraftKey)
		           	do tAircraft.Crew.Clear()
	           	}
	           	
	           	set tValue = $zstrip(tAircraftResultSet.Get("acft_expl"),"<>W")
	           	set tAircraft.AccidentExplosion = $case(tValue, "BOTH":"Ground and in-flight", "GRD":"Ground", "IFLT":"In-flight", "NONE":"None", "UNK":"Unknown", "UORG":"Unknown origin", :tValue)
	           	set tValue = $zstrip(tAircraftResultSet.Get("acft_fire"),"<>W")
		        set tAircraft.AccidentFire = $case(tValue, "BOTH":"Ground and in-flight", "GRD":"Ground", "IFLT":"In-flight", "NONE":"None", "UNK":"Unknown", "UORG":"Unknown origin", :tValue)
		        set tAircraft.AirFrameHours = $zstrip(tAircraftResultSet.Get("afm_hrs"),"<>W")
		        set tAircraft.AirFrameHoursSince = $zstrip(tAircraftResultSet.Get("afm_hrs_since"),"<>W")
		        set tAircraft.AirFrameHoursSinceLastInspection = $zstrip(tAircraftResultSet.Get("afm_hrs_last_insp"),"<>W")
		        set tValue = $zstrip(tAircraftResultSet.Get("acft_category"),"<>W")
		        set tAircraft.AircraftCategory = $case(tValue, "AIR":"Airplane", "BALL":"Balloon", "BLIM":"Blimp", "GLI":"Glider", "GYRO":"Gyrocraft", "HELI":"Helicopter", "PLFT":"Powered-Lift", "ULTR":"Ultralight", "UNK":"Unknown", "PPAR":"Powered Parachute", "WSFT":"Weight Shift", :tValue)
		        set tAircraft.AircraftCertMaxGrossWeight = $zstrip(tAircraftResultSet.Get("cert_max_gr_wt"),"<>W")
		        set tAircraft.AircraftHomeBuilt = $zstrip(tAircraftResultSet.Get("homebuilt"),"<>W")
		        set tAircraft.AircraftManufacturer = $zstrip(tAircraftResultSet.Get("acft_make"),"<>W")
		        set tAircraft.AircraftModel = $zstrip(tAircraftResultSet.Get("acft_model"),"<>W")
		        set tValue = $zstrip(tAircraftResultSet.Get("acft_reg_cls"),"<>W")
		        set tAircraft.AircraftRegistrationClass = $case(tValue, "FNFN":"Foreign Registered/Foreign Soil", "FNUS":"Foreign Registered/US Soil", "MIL":"Military", "NREG":"Not Registered", "UNK":"Unknown", "USFN":"US Registered/Foreign Soil", "USFO":"US Registered/Foreign Operator", "USUS":"US Registered/US Soil", :tValue)
		        set tAircraft.AircraftSerialNo = $zstrip(tAircraftResultSet.Get("acft_serial_no"),"<>W")
		        set tAircraft.AircraftSeries = $zstrip(tAircraftResultSet.Get("acft_series"),"<>W")
		        set tValue = $zstrip(tAircraftResultSet.Get("damage"),"<>W")
		        set tAircraft.Damage = $case(tValue, "NONE":"None", "MINR":"Minor", "SUBS":"Substantial", "DEST":"Destroyed", "UNK":"Unknown", :tValue)
		        set tAircraft.DepartureAirportId = $zstrip(tAircraftResultSet.Get("dprt_apt_id"),"<>W")
		        set tAircraft.DepartureCity = $zstrip(tAircraftResultSet.Get("dprt_city"),"<>W")
		        set tAircraft.DepartureCountry = $zstrip(tAircraftResultSet.Get("dprt_country"),"<>W")
		        set tAircraft.DepartureSameAsEvent = $zstrip(tAircraftResultSet.Get("dprt_pt_same_ev"),"<>W")
		        set tAircraft.DepartureState = $zstrip(tAircraftResultSet.Get("dprt_state"),"<>W")
		        set tAircraft.DepartureTime = $zstrip(tAircraftResultSet.Get("dprt_time"),"<>W")
		        set tAircraft.DepartureTimeZone = $zstrip(tAircraftResultSet.Get("dprt_timezn"),"<>W")
		        set tAircraft.DestinationAirportId = $zstrip(tAircraftResultSet.Get("dest_apt_id"),"<>W")
		        set tAircraft.DestinationCity = $zstrip(tAircraftResultSet.Get("dest_city"),"<>W")
		        set tAircraft.DestinationCountry = $zstrip(tAircraftResultSet.Get("dest_country"),"<>W")
		        set tAircraft.DestinationSameAsLocal = $zstrip(tAircraftResultSet.Get("dest_same_local"),"<>W")
		        set tAircraft.DestinationState = $zstrip(tAircraftResultSet.Get("dest_state"),"<>W")
		        set tAircraft.EngineCount = $zstrip(tAircraftResultSet.Get("num_eng"),"<>W")
		        set tAircraft.EvacuationOccurred = $zstrip(tAircraftResultSet.Get("evacuation"),"<>W")
		        set tAircraft.FlightMedical = $zstrip(tAircraftResultSet.Get("air_medical"),"<>W")
		        set tAircraft.FlightMedicalType = $zstrip(tAircraftResultSet.Get("med_type_flight"),"<>W")
		        set tAircraft.FlightPhase = $zstrip(tAircraftResultSet.Get("phase_flt_spec"),"<>W")
		        set tValue = $zstrip(tAircraftResultSet.Get("flt_plan_filed"),"<>W")
		        set tAircraft.FlightPlan = $case(tValue, "CVFR":"Company VFR", "DFR":"Defense VFR", "IFR":"IFR", "MVFR":"Military VFR", "NONE":"None", "SVFR":"Special VFR", "UNK":"Unknown", "VFF":"Visual flight", "VFIF":"VFR/IFR", "VFR":"VFR", "ORGT":"Organ transport", :tValue)
		        set tAircraft.FlightPlanActivated = $zstrip(tAircraftResultSet.Get("flight_plan_activated"),"<>W")
		        set tAircraft.FlightSiteSeeing = $zstrip(tAircraftResultSet.Get("site_seeing"),"<>W")
		        set tValue = $zstrip(tAircraftResultSet.Get("type_fly"),"<>W")
		        set tAircraft.FlightType = $case(tValue, "AAPL":"Aerial Application", "ADRP":"Air Drop", "AIRM":"Air Medical", "AOBV":"Aerial Observation", "ASHO":"Air Race/Show", "ATXA":"Air Taxi Non-Sched.(135A)", "ATXC":"Air Taxi Commuter", "ATXO":"Air Taxi Oper./Large Aircraft", "ATXS":"Air Taxi Sched./Not Commuter", "BANT":"Banner Tow", "BUS":"Business", "CRGO":"All Cargo Carriers", "EXEC":"Executive/Corporate", "FERY":"Ferry", "FLTS":"Flight Test", "EXLD":"External Load", "FIRF":"Fire Fighting", "GLDT":"Glider Tow", "HIRE":"For Hire", "ILGL":"Illegal Cargo/Operation", "INDS":"Industrial Special", "INST":"Instructional", "OTH":"Other", "OWRK":"Other Work Use", "PERS":"Personal", "POSI":"Positioning", "PUBU":"Public Use", "PUBL":"Public Use - Local", "PUBF":"Public Use - Federal", "SCAC":"Scheduled Air Carrier", "SCRH":"Sched. Air Carrier Helicopter", "SITE":"Site Seeing", "SKYD":"Skydiving", "SUPP":"Supplemental/Commercial Oper.", "TVLC":"Travel Club", "UNK":"Unknown", :tValue)
		        set tAircraft.GearType = $zstrip(tAircraftResultSet.Get("fixed_retractable"),"<>W")
		        set tAircraft.LastInspectionDate = $zstrip(tAircraftResultSet.Get("date_last_insp"),"<>W")
		        set tValue = $zstrip(tAircraftResultSet.Get("type_last_insp"),"<>W")
		        set tAircraft.LastInspectionType = $case(tValue, "100H":"100 Hours", "ANNL":"Annual", "COAW":"Continuous Airworthiness", "COND":"Conditional", "UNK":"Unknown", :tValue)
		        set tAircraft.Missing = $zstrip(tAircraftResultSet.Get("acft_missing"),"<>W")
		        set tValue = $zstrip(tAircraftResultSet.Get("oper_dom_int"),"<>W")
		        set tAircraft.OperationDomestic = $case(tValue, "DOM":"Domestic", "INT":"International", "N/A":"Not Applicable", "UNK":"Unknown", :tValue)
		        set tValue = $zstrip(tAircraftResultSet.Get("oper_sched"),"<>W")
		        set tAircraft.OperationScheduled = $case(tValue, "N/A":"Not Applicable", "UNK":"Unknown", "NSCH":"Non-scheduled", "SCHD":"Scheduled", :tValue)
		        set tValue = $zstrip(tAircraftResultSet.Get("oper_pax_cargo"),"<>W")
		        set tAircraft.OperationType = $case(tValue, "CARG":"Cargo", "MAIL":"Mail", "N/A":"Not applicable", "PACA":"Passenger & cargo", "PAX":"Passenger only", :tValue)
		        set tAircraft.OperatorCertificate = $zstrip(tAircraftResultSet.Get("oper_cert"),"<>W")
		        set tAircraft.OperatorCertificateNum = $zstrip(tAircraftResultSet.Get("oper_cert_num"),"<>W")
		        set tAircraft.OperatorCode = $zstrip(tAircraftResultSet.Get("oper_code"),"<>W")
		        set tAircraft.OperatorCountry = $zstrip(tAircraftResultSet.Get("oper_country"),"<>W")
		        set tAircraft.OperatorIndividual = $zstrip(tAircraftResultSet.Get("oper_individual_name"),"<>W")
		        set tAircraft.OperatorName = $zstrip(tAircraftResultSet.Get("oper_name"),"<>W")
		        set tAircraft.OperatorState = $zstrip(tAircraftResultSet.Get("oper_state"),"<>W")
		        set tAircraft.Owner = $zstrip(tAircraftResultSet.Get("owner_acft"),"<>W")
		        set tAircraft.OwnerCertified = $zstrip(tAircraftResultSet.Get("certs_held"),"<>W")
		        set tAircraft.OwnerCountry = $zstrip(tAircraftResultSet.Get("owner_country"),"<>W")
		        set tAircraft.OwnerState = $zstrip(tAircraftResultSet.Get("owner_state"),"<>W")
		        set tAircraft.RegistrationNumber = $zstrip(tAircraftResultSet.Get("regis_no"),"<>W")
		        set tAircraft.ReportedToICAO = $zstrip(tAircraftResultSet.Get("report_to_icao"),"<>W")
		        set tAircraft.SeatsCabinCrew = $zstrip(tAircraftResultSet.Get("cc_seats"),"<>W")
		        set tAircraft.SeatsFlightCrew = $zstrip(tAircraftResultSet.Get("fc_seats"),"<>W")
		        set tAircraft.SeatsPassengers = $zstrip(tAircraftResultSet.Get("pax_seats"),"<>W")
		        set tAircraft.SeatsTotal = $zstrip(tAircraftResultSet.Get("total_seats"),"<>W")
		        set tAircraft.SecondPilot = $zstrip(tAircraftResultSet.Get("second_pilot"),"<>W")
		        
	            // verify pSkipWhenEmpty elements
   		        set ptr=0, tSkip=0
   	    	    while $listnext(tAircraftProps, ptr, tProp) {
	        	    if ($property(tAircraft, tProp)="") {
		        	    set tSkip=1
		        	    quit
	            	}
            	}
            	continue:tSkip
	           	do tEvent.Aircraft.Insert(tAircraft)
		        
		        set tSC = tCrewResultSet.Prepare("SELECT * FROM Flight_Crew WHERE ev_id = '"_tEventId_"' AND Aircraft_Key = "_tAircraftKey,, tConnection)
	    		quit:$$$ISERR(tSC)
		        set tSC = tCrewResultSet.Execute()
		        quit:$$$ISERR(tSC)
		        while tCrewResultSet.Next() {
			        set tCrewNumber = tCrewResultSet.Get("crew_no")
			        if (tIsNew) || '##class(Aviation.Crew).PKINDEXExists(tEventId, tAircraftKey, tCrewNumber) {
				        set tCrew = ##class(Aviation.Crew).%New()
				        set tCrew.EventId = tEventId
				        set tCrew.AircraftKey = tAircraftKey
			        	set tCrew.CrewNumber = tCrewNumber
			        } else {
				        set tCrew = ##class(Aviation.Crew).PKINDEXOpen(tEventId, tAircraftKey, tCrewNumber)
			        }
			        
			        set tCrew.Age = $zstrip(tCrewResultSet.Get("crew_age"),"<>W")
			        set tValue = $zstrip(tCrewResultSet.Get("crew_category"),"<>W")
			        set tCrew.Category = $case(tValue, "CPLT":"Co-Pilot", "DSTU":"Student Pilot", "FENG":"Flight Engineer", "FLTI":"Flight Instructor", "KPLT":"Check Pilot", "OTHR":"Other", "PLT":"Pilot", :tValue)
			        set tValue = $zstrip(tCrewResultSet.Get("crew_inj_level"),"<>W")
			        set tCrew.Injury = $case(tValue, "NONE":"None", "MINR":"Minor", "SERS":"Serious", "FATL":"Fatal", "UNK":"Unknown", :tValue)
			        set tValue = $zstrip(tCrewResultSet.Get("med_certf"),"<>W")
			        set tCrew.MedicalCertification = $case(tValue, "CL1":"Class 1", "CL2":"Class 2", "CL3":"Class 3", "NONE":"None", "SPRT":"Sport Pilot", "UNK":"Unknown", :tValue)
			        set tCrew.MedicalCertificationDate = $zstrip(tCrewResultSet.Get("date_lst_med"),"<>W")
			        set tValue = $zstrip(tCrewResultSet.Get("med_crtf_vldty"),"<>W")
			        set tCrew.MedicalCertificationValid = $case(tValue, "EXP":"Expired", "NONE":"None", "NV":"Invalid Medical for flight", "UNK":"Unknown", "VNOW":"Valid Medical - no waivers/lim.", "VWW":"Valid Medical - w/ waivers/lim.", "WOWL":"Without Waivers/Limitations", "WWL":"With Waivers/Limitations", :tValue)
			        set tValue = $zstrip(tCrewResultSet.Get("seat_occ_pic"),"<>W")
			        set tCrew.Seat = $case(tValue, "CTR":"Center", "FRT":"Front", "LEFT":"Left", "REAR":"Rear", "RGT":"Right", "SNGL":"Single", "UNK":"Unknown", :tValue)
			        set tCrew.SeatbeltUsed = $zstrip(tCrewResultSet.Get("seatbelts_used"),"<>W")
			        set tCrew.Sex = $zstrip(tCrewResultSet.Get("crew_sex"),"<>W")
			        set tCrew.ShoulderHarnessUsed = $zstrip(tCrewResultSet.Get("shldr_harn_used"),"<>W")
			        set tCrew.ToxicologyTestPerformed = $zstrip(tCrewResultSet.Get("crew_tox_perf"),"<>W")
			        
			        
		            // verify pSkipWhenEmpty elements
		            set ptr=0, tSkip=0
		            while $listnext(tCrewProps, ptr, tProp) {
			            if ($property(tCrew, tProp)="") {
				            set tSkip=1
				            quit
			            }
		            }
		            continue:tSkip
			        do tAircraft.Crew.Insert(tCrew)
		        }
		        do tCrewResultSet.Close()
		        
		        // skip if no Crew entries left
		        continue:'tAircraft.Crew.Count()
           	}
           	do tAircraftResultSet.Close()
           	
           	// skip if no Aircraft entries left
           	if ('tEvent.Aircraft.Count()) {
	           	set tSkipCount = tSkipCount+1
	           	continue
           	}
           	
            set tSC = tEvent.%Save()
            quit:$$$ISERR(tSC)
            
            set x = $i(tCount)
            
            if '(tCount#100) {
	            w:pVerbose !,"Processed ",tCount," out of ",tMaxCount," events... ",$s(tUpdateCount:"(including "_tUpdateCount_" updates) ", 1:"")
    	        w:pVerbose&&tSkipCount " - skipped ",tSkipCount," because of missing data"
            }
            
            quit:pMaxRecords&&(pMaxRecords<=tCount)
	    } 
	    quit:$$$ISERR(tSC)
	    do tEventResultSet.Close()
	    
	    w:pVerbose !!,"Disconnecting from DSN '",pDSN,"'"
	    set tSC = tConnection.Disconnect() 
	    quit:$$$ISERR(tSC)
	    
	    w:pVerbose !!,"Done",!,"Loaded ",tCount," events ",$s(tUpdateCount:"(including "_tUpdateCount_" updates) ", 1:"")
        w:pVerbose&&tSkipCount " - skipped ",tSkipCount," because of missing data"
        w:pVerbose !
        
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="BasTutorial.Person">
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59208,4776.597</TimeCreated>

<Property name="DOB">
<Type>%Date</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="LastName">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {LastName}=$p({Name},",",1)</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="COLLATION" value="EXACT"/>
</Property>

<Property name="FirstName">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {FirstName}=$p({Name},",",2)</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="COLLATION" value="EXACT"/>
</Property>

<Property name="Phone">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="12"/>
</Property>

<Index name="DOB">
<Description>
Index for property DOB</Description>
<Properties>DOB</Properties>
</Index>

<Index name="Name">
<Description>
Index for LastName,FirstName</Description>
<Properties>LastName,FirstName</Properties>
</Index>

<Index name="Phone">
<Description>
Uniqueness index for property Phone</Description>
<Properties>Phone</Properties>
<Unique>1</Unique>
</Index>

<Parameter name="MANAGEDEXTENT">
<Default>0</Default>
</Parameter>

<Storage name="Default">
<Type>%CacheStorage</Type>
<DataLocation>^PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^PersonD</IdLocation>
<IndexLocation>^PersonI</IndexLocation>
<StreamLocation>^BasTutor.PersonS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PersonDefaultData">
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Phone</Value>
</Value>
<Value name="3">
<Value>DOB</Value>
</Value>
<Value name="4">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cinema.Duration">
<Description>
Stores information about time durations.</Description>
<Super>%Library.Integer</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>58752,45905</TimeCreated>

<Method name="LogicalToDisplay">
<Description><![CDATA[
Converts the value of <var>%val</var>, which is in logical integer format, into a display string. 
The formatting is based on the value of the FORMAT parameter.
<p>Returns the formatted value of <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Quit (%val \ 60) _ "h" _ (%val# 60) _ "m"
]]></Implementation>
</Method>
</Class>


<Class name="Cinema.Film">
<Description>
Information about films</Description>
<Super>%Library.Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>58755,59417</TimeCreated>

<Index name="TicketsSoldIndex">
<Description>
Index for property TicketsSold</Description>
<Properties>TicketsSold</Properties>
</Index>

<Index name="TitleIndex">
<Description>
Index for property Title</Description>
<Properties>Title</Properties>
</Index>

<Property name="Category">
<Type>Cinema.FilmCategory</Type>
</Property>

<Property name="Description">
<Type>%Library.String</Type>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="Length">
<Type>Cinema.Duration</Type>
</Property>

<Property name="PlayingNow">
<Type>%Library.Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="Rating">
<Type>%Library.String</Type>
<Parameter name="VALUELIST" value=",G,PG,PG-13,R"/>
</Property>

<Property name="TicketsSold">
<Type>%Library.Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Title">
<Type>%Library.String</Type>
<Required>1</Required>
</Property>

<Query name="TopCategory">
<Description>
Top films (by tickets sold) in a genre</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>P1:%Library.String</FormalSpec>
<SqlQuery><![CDATA[ SELECT TOP 3 ID, Description, Length, Rating, Title, Category->CategoryName
 	FROM Film
 	WHERE (PlayingNow = 1) AND (Category = :P1)
 	ORDER BY TicketsSold DESC]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Description:%Library.String,Length:Cinema.Duration,Rating:%Library.String,Title:%Library.String,CategoryName:%Library.String"/>
</Query>

<Query name="TopFilms">
<Description>
List of most popular films.</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>P1:%Library.String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[ SELECT Top 3 ID, Description, Length, Rating, Title, Category->CategoryName
 	FROM Film
 	WHERE (PlayingNow = 1)
 	ORDER BY TicketsSold DESC]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,Description:%Library.String,Length:Cinema.Duration,Rating:%Library.String,Title:%Library.String,CategoryName:%Library.String"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CinemaooFilmD</DataLocation>
<DefaultData>FilmDefaultData</DefaultData>
<IdLocation>^CinemaooFilmD</IdLocation>
<IndexLocation>^CinemaooFilmI</IndexLocation>
<StreamLocation>^Cinema.FilmS</StreamLocation>
<Data name="FilmDefaultData">
<Value name="1">
<Value>Description</Value>
</Value>
<Value name="2">
<Value>PlayingNow</Value>
</Value>
<Value name="3">
<Value>TicketsSold</Value>
</Value>
<Value name="4">
<Value>Title</Value>
</Value>
<Value name="5">
<Value>Category</Value>
</Value>
<Value name="6">
<Value>Length</Value>
</Value>
<Value name="7">
<Value>Rating</Value>
</Value>
<Value name="8">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cinema.FilmCategory">
<Description>
List of film genres, for instance "Drama".</Description>
<Super>%Library.Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>58755,59417</TimeCreated>

<Property name="CategoryName">
<Type>%Library.String</Type>
</Property>

<Index name="CategoryNameIndex">
<Description>
Index for property CategoryName</Description>
<Properties>CategoryName</Properties>
</Index>

<Query name="CategoryName">
<Description>
List of film category names</Description>
<Type>%Library.SQLQuery</Type>
<SqlQuery> SELECT ID, CategoryName
 	FROM FilmCategory
 	ORDER BY CategoryName</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,CategoryName:%Library.String"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CinemaooFilmCategoryD</DataLocation>
<DefaultData>FilmCategoryDefaultData</DefaultData>
<IdLocation>^CinemaooFilmCategoryD</IdLocation>
<IndexLocation>^CinemaooFilmCategoryI</IndexLocation>
<StreamLocation>^Cinema.FilmCategoryS</StreamLocation>
<Data name="FilmCategoryDefaultData">
<Value name="1">
<Value>CategoryName</Value>
</Value>
<Value name="2">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cinema.RemoveCookie">
<Description>
Removes the cookie used by the Cache Cinema sample application</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>58755,59417</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 &html<
 <html><head></head>
 <body bgcolor="#FFFFFF"><p><img src="CacheCinemaLogo.gif" width="273" height="70"> </p>
 >
 
 If (%request.Data("Action",1) = "R") {
 	Write "<b>Cookie Removed</b>",!
 } ElseIf ($D(%request.Cookies("CacheCinemaLastCategory"))) {
	&html< 
	<form method="post" action='Cinema.RemoveCookie.cls?Action=R' name="RemoveForm">
		<table cellpadding="5"> 
			<tr>
			<td valign="bottom">To remove the cookie used by the Cache Cinema sample application click</td>
			<td valign="bottom"><input type="submit" name="RemoveButton" value="Remove Cookie"></td> 
			</tr>
		</table>
	</form>
	>
 } Else {
	Write "<b>No cookie found</b>",!
 }
 
 &html<
 </body></html>
 >
 Quit 1
]]></Implementation>
</Method>

<Method name="OnPreHTTP">
<Description><![CDATA[
Event handler for <B>PREHTTP</B> event: this is invoked before
the HTTP headers for a CSP page have been sent.  All changes to the
<class>%CSP.Response</class> class, such as adding cookies, HTTP headers,
setting the content type etc. must be made from within the OnPreHTTP() method.
Also changes to the state of the CSP application such as changing %session.Preserve,
%session.EndSession or %session.AppTimeout must be made within the OnPreHTTP() method.
Return <B>0</B> to prevent <method>OnPage</method> from being called.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 If (%request.Data("Action",1) = "R") {
	// Delete the cookie by setting the expiration date to yesterday
	Set Expires = +$H - 1
	Set Expires = $ZD(Expires,11) _ ", " _ $ZD(Expires,2) _ " 00:00:00 GMT"
	Do %response.SetCookie("CacheCinemaLastCategory", "", Expires, "/")
 }
 Quit 1
]]></Implementation>
</Method>
</Class>


<Class name="Cinema.Review">
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62348,56958.608428</TimeCreated>

<Property name="Film">
<Type>Cinema.Film</Type>
</Property>

<Property name="ReviewScore">
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="10"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="ReviewText">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20000"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Cinema.ReviewD</DataLocation>
<DefaultData>ReviewDefaultData</DefaultData>
<IdLocation>^Cinema.ReviewD</IdLocation>
<IndexLocation>^Cinema.ReviewI</IndexLocation>
<StreamLocation>^Cinema.ReviewS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ReviewDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Film</Value>
</Value>
<Value name="3">
<Value>ReviewScore</Value>
</Value>
<Value name="4">
<Value>ReviewText</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cinema.Show">
<Description>
Information about when and where films are shown.</Description>
<Super>%Library.Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>58755,75574</TimeCreated>

<Property name="Film">
<Type>Cinema.Film</Type>
</Property>

<Property name="StartTime">
<Type>%Library.Time</Type>
<Parameter name="FORMAT" value="2"/>
</Property>

<Property name="Theater">
<Type>Cinema.Theater</Type>
</Property>

<Query name="ShowTimes">
<Description>
List of show times and locations for a single film.</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>P1:%Library.String</FormalSpec>
<SqlQuery><![CDATA[ SELECT ID, StartTime, Theater->TheaterName
	FROM Show
	WHERE (Film = :P1)
	ORDER BY StartTime, Theater]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,StartTime:%Library.Time,TheaterName:%Library.String"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CinemaooShowD</DataLocation>
<DefaultData>ShowDefaultData</DefaultData>
<IdLocation>^CinemaooShowD</IdLocation>
<IndexLocation>^CinemaooShowI</IndexLocation>
<StreamLocation>^Cinema.ShowS</StreamLocation>
<Data name="ShowDefaultData">
<Value name="1">
<Value>Film</Value>
</Value>
<Value name="2">
<Value>StartTime</Value>
</Value>
<Value name="3">
<Value>Theater</Value>
</Value>
<Value name="4">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cinema.Theater">
<Description>
Information about theaters and ticket prices.</Description>
<Super>%Library.Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>58752,45905</TimeCreated>

<Property name="AdultPrice">
<Type>%Library.Float</Type>
<Parameter name="MINVAL" value="0"/>
<Parameter name="SCALE" value="2"/>
</Property>

<Property name="ChildPrice">
<Type>%Library.Float</Type>
<Parameter name="MINVAL" value="0"/>
<Parameter name="SCALE" value="2"/>
</Property>

<Property name="TheaterName">
<Type>%Library.String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CinemaooTheaterD</DataLocation>
<DefaultData>TheaterDefaultData</DefaultData>
<IdLocation>^CinemaooTheaterD</IdLocation>
<IndexLocation>^CinemaooTheaterI</IndexLocation>
<StreamLocation>^Cinema.TheaterS</StreamLocation>
<Data name="TheaterDefaultData">
<Value name="1">
<Value>AdultPrice</Value>
</Value>
<Value name="2">
<Value>ChildPrice</Value>
</Value>
<Value name="3">
<Value>TheaterName</Value>
</Value>
<Value name="4">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cinema.TicketConfirm">
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page,Cinema.Utils</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>58764,81321</TimeCreated>
<Inheritance>right</Inheritance>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Write "<HTML>",!
 Write "<HEAD>",!
 Write "</HEAD>",!
 Write "<BODY>",!
 If $data(%session.Data("Order")) {
	Do ..CompleteOrder()
	Write "Your order was processed successfully. ",!
	Write "Thank you for using Cach&eacute; Cinema!<br><br>",!
	If $G(%request.Data("OrderEmail",1))'="" {
		Write ..SendEmail( %request.Data("OrderEmail",1),
		"Your tickets have been ordered"),!
 	}
 } Else {
 	Write "Your order expired before it was completed.",!
 }
 Write "</BODY>",!
 Write "</HTML>",!
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPreHTTP">
<Description><![CDATA[
Event handler for <B>PREHTTP</B> event: this is invoked before
the HTTP headers for a CSP page have been sent.  All changes to the
<class>%CSPResponse</class> class, such as adding cookies, HTTP headers,
setting the content type etc. must be made from within the OnPreHTTP() method.
Return <B>0</B> to prevent <method>OnPage</method> from being called.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 If $data(%session.Data("Order")) {
	New ord,itm,cat
	Set ord = ##class(Cinema.TicketOrder).%OpenId(%session.Data("Order"))
	Set itm = ord.Items.GetAt(1)
	Set cat = itm.Show.Film.Category.%Id()

	// Put a cookie on the users computer
	Set Expires = +$H + 7
	Set Expires = $ZD(Expires,11) _ ", " _ $ZD(Expires,2) _ " 00:00:00 GMT"
	Do %response.SetCookie("CacheCinemaLastCategory", cat, Expires, "/")
 }
 
 Quit 1
]]></Implementation>
</Method>
</Class>


<Class name="Cinema.TicketItem">
<Super>%Library.Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>58755,75574</TimeCreated>

<Property name="AdultTickets">
<Type>%Library.Integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="ChildTickets">
<Type>%Library.Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Show">
<Type>Cinema.Show</Type>
</Property>

<Property name="TicketOrder">
<Type>Cinema.TicketOrder</Type>
<Cardinality>parent</Cardinality>
<Inverse>Items</Inverse>
<Relationship>1</Relationship>
</Property>

<Query name="ShowItem">
<Type>%Library.SQLQuery</Type>
<FormalSpec>P1:%Library.String</FormalSpec>
<SqlQuery><![CDATA[ SELECT ID, AdultTickets, ChildTickets, Show->Film->Title, Show->StartTime, Show->Theater->TheaterName, Show->Film
	FROM TicketItem
	WHERE (TicketOrder = :P1)]]></SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="ROWSPEC" value="ID,AdultTickets:%Library.Integer,ChildTickets:%Library.Integer,Title:%Library.String,StartTime:%Library.Time,TheaterName:%Library.String,Film:Cinema.Film"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CinemaooTicketItemD</DataLocation>
<DefaultData>TicketItemDefaultData</DefaultData>
<IdLocation>^CinemaooTicketItemD</IdLocation>
<IndexLocation>^CinemaooTicketItemI</IndexLocation>
<StreamLocation>^Cinema.TicketItemS</StreamLocation>
<Data name="TicketItemDefaultData">
<Value name="1">
<Value>AdultTickets</Value>
</Value>
<Value name="2">
<Value>ChildTickets</Value>
</Value>
<Value name="3">
<Value>Show</Value>
</Value>
<Value name="4">
<Value>TicketOrder</Value>
</Value>
<Value name="5">
<Value>Order</Value>
</Value>
<Value name="6">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cinema.TicketOrder">
<Super>%Library.Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>58755,75574</TimeCreated>

<Property name="Items">
<Type>Cinema.TicketItem</Type>
<Cardinality>children</Cardinality>
<Inverse>TicketOrder</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Total">
<Type>%Float</Type>
<Parameter name="SCALE" value="2"/>
</Property>

<Property name="Complete">
<Description>
Set Complete to true (1) to indicate order has been completed.
Complete will be false (0) while the order is being input.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CinemaooTicketOrderD</DataLocation>
<DefaultData>TicketOrderDefaultData</DefaultData>
<IdLocation>^CinemaooTicketOrderD</IdLocation>
<IndexLocation>^CinemaooTicketOrderI</IndexLocation>
<StreamLocation>^Cinema.TicketOrderS</StreamLocation>
<Data name="TicketOrderDefaultData">
<Value name="1">
<Value>Customer</Value>
</Value>
<Value name="2">
<Value>Items</Value>
</Value>
<Value name="3">
<Value>Total</Value>
</Value>
<Value name="4">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="5">
<Value>Complete</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Cinema.Utils">
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.SessionEvents,%CSP.Page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>58926,58876</TimeCreated>
<Inheritance>right</Inheritance>

<Method name="AddShow">
<ClassMethod>1</ClassMethod>
<FormalSpec>ShowID:%Library.String</FormalSpec>
<Implementation><![CDATA[
 // Get an order object
 New itm,ord,shw
 If $data(%session.Data("Order")) {
	Set ord = ##class(Cinema.TicketOrder).%OpenId(%session.Data("Order"))
 } Else {
	Set ord=##class(Cinema.TicketOrder).%New()
	Set %session.EventClass = "Cinema.Utils"
 }
 
 // Add an item to the order for this show.
 Set itm=##class(Cinema.TicketItem).%New()
 Set shw=##class(Cinema.Show).%OpenId(ShowID)
 Set itm.Show=shw
 Set itm.TicketOrder=ord
 Set ord.Total=ord.Total
 			+(itm.AdultTickets*itm.Show.Theater.AdultPrice)
 			+(itm.ChildTickets*itm.Show.Theater.ChildPrice)
 
 // Save incomplete order and remember its Id in %session.
 Do ord.%Save()
 Set %session.Data("Order") = ord.%Id()

 // Update Order.csp page 
 &js<parent.Order.location="Order.csp">
]]></Implementation>
</Method>

<Method name="ChangeQuantity">
<ClassMethod>1</ClassMethod>
<FormalSpec>ItemNum:%Library.Integer,TicketType:%Library.Integer,NewQuantity:%Library.Integer</FormalSpec>
<Implementation><![CDATA[
 If $data(%session.Data("Order")) {
	// Open the current order object
	New itm,ord
	Set ord = ##class(Cinema.TicketOrder).%OpenId(%session.Data("Order"))
	
	// Update quantity
	Set itm=ord.Items.GetAt(ItemNum)
	If TicketType=1 {  
		Set ord.Total=ord.Total+((NewQuantity-itm.AdultTickets)*itm.Show.Theater.AdultPrice)
		Set itm.AdultTickets=NewQuantity
	} Else {  
		Set ord.Total=ord.Total+((NewQuantity-itm.ChildTickets)*itm.Show.Theater.ChildPrice)
		Set itm.ChildTickets=NewQuantity
	}
	
	// Update Order.csp page 
	&js<parent.Order.document.OrderTickets.TotalCharge.value=#(..QuoteJS($FN(ord.Total,"",2)))#;>
	
	// Save incomplete order.
	Do ord.%Save()
 }
]]></Implementation>
</Method>

<Method name="CompleteOrder">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 If $data(%session.Data("Order")) {
	// Open the current order object
	New cat,flm,i,itm,ord
	Set ord = ##class(Cinema.TicketOrder).%OpenId(%session.Data("Order"))
	
	// Update the number of tickets sold for each film in the order
	For i = 1:1:ord.Items.Count() {
		Set itm = ord.Items.GetAt(i)
		Set flm = itm.Show.Film
		Set flm.TicketsSold = flm.TicketsSold + 
			itm.AdultTickets + itm.ChildTickets
		Set cat = flm.Category.%Id()
		Do flm.%Save()
 	}

	// Mark order as complete and save
	Set ord.Complete=1
 	Do ord.%Save()
 	Kill %session.Data("Order")
 }
]]></Implementation>
</Method>

<Method name="OnEndSession">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 If $data(%session.Data("Order")) {
	// Delete the incomplete order
	Do ##class(Cinema.TicketOrder).%DeleteId(%session.Data("Order"))
 	Kill %session.Data("Order")
 }
]]></Implementation>
</Method>

<Method name="SendEmail">
<ClassMethod>1</ClassMethod>
<FormalSpec>Addr:%Library.String,MessageText:%Library.String</FormalSpec>
<ReturnType>%Library.String</ReturnType>
<Implementation><![CDATA[
 // To enable email processing, you must:
 //Replace the "**" with the name of your mail server
 //Replace the "*@*" with your own email address, 
 //which will be used as the "from" address
 //Comment out or remove the following Quit statement
 //
 Quit "Unable to send confirmation to " _ Addr _ ".<br>" _
 "In order to send a mail message, " _
 "you must supply a server name and " _
 "email address in the SendEmail method " _
 "of the Cinema.Utils class"
 //
 New Mailer,Msg
 // Create an SMTP object and connect to a server
 Set Mailer = ##class(%Net.SMTP).%New()
 // Fill in the name of your mail server
 Set Mailer.smtpserver = "**"
 // Create a Message object and fill in From, To, Subject
 Set Msg = ##class(%Net.MailMessage).%New()
 // Fill in an email address
 Set Msg.From="**"
 Do Msg.To.Insert(Addr)
 Set Msg.Subject = "Theater Tickets"
 // Add message content
 Do Msg.TextData.Write(MessageText)
 // Send the message and close objects
 Do Mailer.Send(Msg)
 Quit "Email confirmation has been sent to " _ Addr
]]></Implementation>
</Method>
</Class>


<Class name="CosTutorial.Person">
<Super>%Persistent,%Populate</Super>
<TimeChanged>62542,52833.10456</TimeChanged>
<TimeCreated>58776,45024</TimeCreated>

<Property name="DOB">
<Type>%Date</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="LastName">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {LastName}=$p({Name},",",1)</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="COLLATION" value="EXACT"/>
</Property>

<Property name="FirstName">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {FirstName}=$p({Name},",",2)</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="COLLATION" value="EXACT"/>
</Property>

<Property name="Phone">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="12"/>
</Property>

<Index name="DOB">
<Description>
Index for property DOB</Description>
<Properties>DOB</Properties>
</Index>

<Index name="Name">
<Description>
Index for LastName,FirstName</Description>
<Properties>LastName,FirstName</Properties>
</Index>

<Index name="Phone">
<Description>
Uniqueness index for property Phone</Description>
<Properties>Phone</Properties>
<Unique>1</Unique>
</Index>

<Parameter name="MANAGEDEXTENT">
<Default>0</Default>
</Parameter>

<Storage name="Default">
<Type>%CacheStorage</Type>
<DataLocation>^PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^PersonD</IdLocation>
<IndexLocation>^PersonI</IndexLocation>
<StreamLocation>^CosTutor.PersonS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PersonDefaultData">
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Phone</Value>
</Value>
<Value name="3">
<Value>DOB</Value>
</Value>
<Value name="4">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DSVRDemo.ConditionalBannerLIDR">
<Description>
</Description>
<Super>%DeepSee.Report.dataPresenter</Super>
<TimeChanged>62971,56417.062</TimeChanged>
<TimeCreated>62971,56417.062</TimeCreated>

<Parameter name="DEFAULTMODE">
<Default>pdf</Default>
</Parameter>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<Parameter name="DSSHOME">
<Default>linked</Default>
</Parameter>

<Parameter name="DSSCLASS">
<Default>DSVRDemo.FilmDCR</Default>
</Parameter>

<XData name="ReportModel">
<Data><![CDATA[
<reportModel>
<![CDATA[

{package:"DSVRDemo",objClass:"ConditionalBannerLIDR",appName:"",sysName:"DSVRDemo.ConditionalBannerLIDR",name:"Annotated Box Office",desc:"",type:"DPR",dssHome:"linked",dssClass:"DSVRDemo.FilmDCR",pageModel:
{paper:"letter",orient:"portrait",units:"in",width:612,height:792,left:72,right:72,top:72,bottom:72,header:18,footer:18},dssName:"FilmDCRData",t:"_LIDR",s:[
{t:"h",g:"_r",a:true,h:"205pt",w:"468pt",b:1,i:[
{t:"box",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:1,fc:"#ffffff",fo:1,xa:0,ta:0,za:1,zw:466,zh:126,zt:73,zl:1},c:"BOX",url:null,durl:null},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:36,xj:"center",xf:"sans-serif",ta:0,za:1,zw:468,zh:44,zt:74,zl:0},c:"CAPN",f:"!Annotated Box Office",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:118,zl:246},c:"ATTR",f:"@runBy",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:118,zl:0},c:"CAPN",f:"!Run by:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:134,zl:246},c:"ATTR",f:"@Genre",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:134,zl:0},c:"CAPN",f:"!Genre:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:150,zl:246},c:"ATTR",f:"@runTime",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:150,zl:0},c:"CAPN",f:"!Run time:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:166,zl:246},c:"ELEM",f:"TotalTicketsSold",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:166,zl:0},c:"CAPN",f:"!Total tickets sold:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:182,zl:246},c:"ELEM",f:"TotalFilms",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:182,zl:0},c:"CAPN",f:"!Total films:",fn:""}]},
{t:"h",g:"_p",a:true,h:"43pt",w:"468pt",b:0,i:[
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:86,zh:11,zt:22,zl:70},c:"ATTR",f:"@runBy",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:70,zh:11,zt:22,zl:0},c:"CAPN",f:"!Run by:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:86,zh:11,zt:11,zl:70},c:"ATTR",f:"@Genre",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:70,zh:11,zt:11,zl:0},c:"CAPN",f:"!Genre:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:86,zh:11,zt:0,zl:70},c:"ATTR",f:"@runTime",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:70,zh:11,zt:0,zl:0},c:"CAPN",f:"!Run time:",fn:""},
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:0,xa:0,ta:0,za:1,zw:466,zh:0,zt:34,zl:0}}]},
{t:"h",g:"FilmsByGenre",a:true,h:"74pt",w:"468pt",b:0,i:[
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:78,zh:14,zt:45,zl:78},c:"ELEM",f:"TitleCount",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:78,zh:14,zt:45,zl:0},c:"CAPN",f:"!Title count:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:18,xj:"center",xf:"sans-serif",ta:0,za:1,zw:156,zh:21,zt:24,zl:156},c:"ATTR",f:"@CategoryName",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:78,zh:14,zt:45,zl:390},c:"ELEM",f:"TotalSeats",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:78,zh:14,zt:45,zl:312},c:"CAPN",f:"!Total seats:",fn:""},
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:0,xa:0,ta:0,za:1,zw:466,zh:0,zt:60,zl:0}}]},
{t:"b",g:"FilmDetail",a:true,h:"71pt",w:"468pt",b:0,i:[
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:257,zh:16,zt:4,zl:3},c:"ELEM",f:"Title",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:66,zh:19,zt:0,zl:265},c:"CAPN",f:"!Rating",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:66,zh:29,zt:19,zl:265},c:"ELEM",f:"Rating",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:66,zh:19,zt:0,zl:330},c:"CAPN",f:"!Length",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:66,zh:29,zt:19,zl:330},c:"ELEM",f:"Length",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:208,zh:19,zt:36,zl:3},c:"CAPN",f:"!Description",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:208,zh:29,zt:52,zl:3},c:"ELEM",f:"Description",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:56,zh:19,zt:0,zl:409},c:"CAPN",f:"!Sales",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:56,zh:29,zt:19,zl:409},c:"ELEM",f:"TicketsSold",fn:""}],cb:[
{t:"f",g:"_r",c:"../@CategoryName=\'Comedy\' and TicketsSold&gt;10000",h:"63pt",w:"468pt",b:0,rh:0,i:[
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:298,zh:14,zt:7,zl:90},c:"CAPN",f:"!Comedies are often cheap to make so good sales usually ",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:131,zh:14,zt:23,zl:163},c:"CAPN",f:"!translate into pure profit.",fn:""},
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:0,xa:0,ta:0,za:1,zw:468,zh:0,zt:2,zl:0}},
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:0,xa:0,ta:0,za:1,zw:468,zh:0,zt:41,zl:0}}]},
{t:"f",g:"_r",c:"(../@CategoryName=\'Action\' or ../@CategoryName=\'Comedy\') and TicketsSold&lt;1000",h:"82pt",w:"468pt",b:0,rh:0,i:[
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:181,zh:14,zt:8,zl:14},c:"CAPN",f:"!Pacing is a major consideration for ",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:87,zh:14,zt:8,zl:200},c:"ATTR",f:"../@CategoryName",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:98,zh:14,zt:23,zl:12},c:"CAPN",f:"!The running time of ",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:54,zh:13,zt:23,zl:120},c:"ELEM",f:"Length",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:279,zh:14,zt:37,zl:18},c:"CAPN",f:"!may have negatively impacted box office performance",fn:""},
{t:"box",gc:
{sa:1,sc:"#000000",so:1,sw:"3",ss:"solid",fa:1,fc:"#ffff00",fo:1,xa:0,ta:0,za:1,zw:141,zh:46,zt:5,zl:310},c:"BOX",url:null,durl:null},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:true,xi:true,xu:false,xs:25,xj:"center",xf:"sans-serif",ta:0,za:1,zw:126,zh:26,zt:15,zl:319},c:"CAPN",f:"!NOTE!!!",fn:""}]}]},
{t:"f",g:"FilmsByGenre",a:true,h:"41pt",w:"468pt",b:1,i:[
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:0,xa:0,ta:0,za:1,zw:466,zh:0,zt:25,zl:0}},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:78,zh:14,zt:28,zl:78},c:"ELEM",f:"TitleCount",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:78,zh:14,zt:28,zl:0},c:"CAPN",f:"!Title count:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:78,zh:14,zt:28,zl:390},c:"ELEM",f:"TotalSeats",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:78,zh:14,zt:28,zl:312},c:"CAPN",f:"!Total seats:",fn:""}]},
{t:"f",g:"_r",a:true,h:"82pt",w:"468pt",b:0,i:[
{t:"box",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:1,fc:"#ffffff",fo:1,xa:0,ta:0,za:1,zw:466,zh:54,zt:25,zl:1},c:"BOX",url:null,durl:null},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:16,xj:"center",xf:"sans-serif",ta:0,za:1,zw:468,zh:20,zt:26,zl:0},c:"CAPN",f:"!Annotated Box Office",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:46,zl:246},c:"ELEM",f:"TotalTicketsSold",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:46,zl:0},c:"CAPN",f:"!Total tickets sold:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:62,zl:246},c:"ELEM",f:"TotalFilms",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:62,zl:0},c:"CAPN",f:"!Total films:",fn:""}]},
{t:"f",g:"_p",a:true,h:"37pt",w:"468pt",b:0,i:[
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:0,xa:0,ta:0,za:1,zw:466,zh:0,zt:1,zl:0}},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:86,zh:11,zt:2,zl:70},c:"ATTR",f:"@runBy",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:70,zh:11,zt:2,zl:0},c:"CAPN",f:"!Run by:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:86,zh:11,zt:13,zl:70},c:"ATTR",f:"@Genre",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:70,zh:11,zt:13,zl:0},c:"CAPN",f:"!Genre:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:86,zh:11,zt:24,zl:70},c:"ATTR",f:"@runTime",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:70,zh:11,zt:24,zl:0},c:"CAPN",f:"!Run time:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"right",xf:"sans-serif",ta:0,za:1,zw:156,zh:12,zt:23,zl:312},c:"CAPN",f:"!Annotated Box Office",fn:""}]}]}
]]]]><![CDATA[></reportModel>
]]></Data>
</XData>

<XData name="ReportDisplay">
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[

<report xmlns="http://www.intersystems.com/zen/report/display"
name="FilmDCRData">
	<init>
		<xslt xslfo="ParagraphFunctions" />
	</init>
<document width="612pt" height="792pt" marginLeft="72" marginRight="72" marginTop="72" marginBottom="72" headerHeight="43pt" regionBeforeExtent="41pt" footerHeight="37pt" regionAfterExtent="35pt" />
<pageheader>
<!-- PAGE HEADER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="43pt" viewBox="0 0 468 43" >
<svg:rect x="70" y="22" width="86" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="70" y="30.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runBy"/>
</svg:text>
<svg:rect x="0" y="22" width="70" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="30.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Run by:
</svg:text>
<svg:rect x="70" y="11" width="86" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="70" y="19.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@Genre"/>
</svg:text>
<svg:rect x="0" y="11" width="70" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="19.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Genre:
</svg:text>
<svg:rect x="70" y="0" width="86" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="70" y="8.333333333333334" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runTime"/>
</svg:text>
<svg:rect x="0" y="0" width="70" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="8.333333333333334" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Run time:
</svg:text>
<svg:line x1="0" y1="34" x2="466" y2="34" style="stroke:#000000;stroke-width:2;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of PAGE HEADER -->
</pageheader>
<pagefooter>
<!-- PAGE FOOTER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="37pt" viewBox="0 0 468 37" >
<svg:line x1="0" y1="1" x2="466" y2="1" style="stroke:#000000;stroke-width:2;stroke-opacity:1" />
<svg:rect x="70" y="2" width="86" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="70" y="10.333333333333334" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runBy"/>
</svg:text>
<svg:rect x="0" y="2" width="70" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="10.333333333333334" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Run by:
</svg:text>
<svg:rect x="70" y="13" width="86" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="70" y="21.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@Genre"/>
</svg:text>
<svg:rect x="0" y="13" width="70" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="21.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Genre:
</svg:text>
<svg:rect x="70" y="24" width="86" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="70" y="32.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runTime"/>
</svg:text>
<svg:rect x="0" y="24" width="70" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="32.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Run time:
</svg:text>
<svg:rect x="312" y="23" width="156" height="12" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="31.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Annotated Box Office
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of PAGE FOOTER -->
</pagefooter>
<body>
<!-- REPORT HEADER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="205pt" viewBox="0 0 468 205" >
<svg:rect x="1" y="73" width="466" height="126" style="fill-opacity:1;fill:#ffffff;stroke:#000000;stroke-width:2;stroke-opacity:1" />
<svg:rect x="0" y="74" width="468" height="44" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="234" y="104" style="font-size:36;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:middle;" >
Annotated Box Office
</svg:text>
<svg:rect x="246" y="118" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="129.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runBy"/>
</svg:text>
<svg:rect x="0" y="118" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="129.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Run by:
</svg:text>
<svg:rect x="246" y="134" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="145.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@Genre"/>
</svg:text>
<svg:rect x="0" y="134" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="145.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Genre:
</svg:text>
<svg:rect x="246" y="150" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="161.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runTime"/>
</svg:text>
<svg:rect x="0" y="150" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="161.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Run time:
</svg:text>
<svg:rect x="246" y="166" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="177.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="TotalTicketsSold"/>
</svg:text>
<svg:rect x="0" y="166" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="177.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Total tickets sold:
</svg:text>
<svg:rect x="246" y="182" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="193.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="TotalFilms"/>
</svg:text>
<svg:rect x="0" y="182" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="193.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Total films:
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<pagebreak/>
<!-- end of REPORT HEADER -->
<group name='FilmsByGenre' >
<!-- GROUP HEADER (FilmsByGenre) -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="74pt" viewBox="0 0 468 74" >
<svg:rect x="78" y="45" width="78" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="78" y="55" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="TitleCount"/>
</svg:text>
<svg:rect x="0" y="45" width="78" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="55" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Title count:
</svg:text>
<svg:rect x="156" y="24" width="156" height="21" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="234" y="39" style="font-size:18;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:middle;" >
<xsl:value-of select="@CategoryName"/>
</svg:text>
<svg:rect x="390" y="45" width="78" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="55" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
<xsl:value-of select="TotalSeats"/>
</svg:text>
<svg:rect x="312" y="45" width="78" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="390" y="55" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Total seats:
</svg:text>
<svg:line x1="0" y1="60" x2="466" y2="60" style="stroke:#000000;stroke-width:2;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of GROUP HEADER (FilmsByGenre) -->
<group name='FilmDetail' >
<!-- REPORT BODY (FilmDetail) -->
<write>
<![CDATA[
<fo:block font-size="0pt">
<fo:instream-foreign-object>
<svg:svg width="468pt" height="71pt" viewBox="0 0 468 71" >
<svg:rect x="3" y="4" width="257" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="3" y="14" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="Title"/>
</svg:text>
<svg:rect x="265" y="0" width="66" height="19" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="265" y="10" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Rating
</svg:text>
<svg:rect x="265" y="19" width="66" height="29" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="265" y="27.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
<xsl:value-of select="Rating"/>
</svg:text>
<svg:rect x="330" y="0" width="66" height="19" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="330" y="10" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Length
</svg:text>
<svg:rect x="330" y="19" width="66" height="29" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="330" y="27.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
<xsl:value-of select="Length"/>
</svg:text>
<svg:rect x="3" y="36" width="208" height="19" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="3" y="46" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Description
</svg:text>
<svg:rect x="3" y="52" width="208" height="29" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="3" y="60.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
<xsl:value-of select="Description"/>
</svg:text>
<svg:rect x="409" y="0" width="56" height="19" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="409" y="10" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Sales
</svg:text>
<svg:rect x="409" y="19" width="56" height="29" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="409" y="27.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
<xsl:value-of select="TicketsSold"/>
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of REPORT BODY (FilmDetail) -->
<!-- CONDITIONAL REPORT BODY (FilmDetail) -->
<write>
<![CDATA[
<fo:block font-size="0pt" keep-with-previous.within-page="always">
<xsl:if test="../@CategoryName='Comedy' and TicketsSold&gt;10000" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="63pt" viewBox="0 0 468 63" >
<svg:rect x="90" y="7" width="298" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="90" y="17" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
Comedies are often cheap to make so good sales usually 
</svg:text>
<svg:rect x="163" y="23" width="131" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="163" y="33" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
translate into pure profit.
</svg:text>
<svg:line x1="0" y1="2" x2="468" y2="2" style="stroke:#000000;stroke-width:1;stroke-opacity:1" />
<svg:line x1="0" y1="41" x2="468" y2="41" style="stroke:#000000;stroke-width:1;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</xsl:if>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of CONDITIONAL REPORT BODY (FilmDetail) -->
<!-- CONDITIONAL REPORT BODY (FilmDetail) -->
<write>
<![CDATA[
<fo:block font-size="0pt" keep-with-previous.within-page="always">
<xsl:if test="(../@CategoryName='Action' or ../@CategoryName='Comedy') and TicketsSold&lt;1000" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="82pt" viewBox="0 0 468 82" >
<svg:rect x="14" y="8" width="181" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="14" y="18" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
Pacing is a major consideration for 
</svg:text>
<svg:rect x="200" y="8" width="87" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="200" y="18" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
<xsl:value-of select="../@CategoryName"/>
</svg:text>
<svg:rect x="12" y="23" width="98" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="12" y="33" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
The running time of 
</svg:text>
<svg:rect x="120" y="23" width="54" height="13" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="120" y="33" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
<xsl:value-of select="Length"/>
</svg:text>
<svg:rect x="18" y="37" width="279" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="18" y="47" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
may have negatively impacted box office performance
</svg:text>
<svg:rect x="310" y="5" width="141" height="46" style="fill-opacity:1;fill:#ffff00;stroke:#000000;stroke-width:3;stroke-opacity:1" />
<svg:rect x="319" y="15" width="126" height="26" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="382" y="35.83333333333333" style="font-size:25;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;font-style:italic;text-anchor:middle;" >
NOTE!!!
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</xsl:if>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of CONDITIONAL REPORT BODY (FilmDetail) -->
</group>
<!-- GROUP FOOTER (FilmsByGenre) -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="41pt" viewBox="0 0 468 41" >
<svg:line x1="0" y1="25" x2="466" y2="25" style="stroke:#000000;stroke-width:2;stroke-opacity:1" />
<svg:rect x="78" y="28" width="78" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="78" y="38" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="TitleCount"/>
</svg:text>
<svg:rect x="0" y="28" width="78" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="38" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Title count:
</svg:text>
<svg:rect x="390" y="28" width="78" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="38" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
<xsl:value-of select="TotalSeats"/>
</svg:text>
<svg:rect x="312" y="28" width="78" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="390" y="38" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Total seats:
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<pagebreak/>
<!-- end of GROUP FOOTER (FilmsByGenre) -->
</group>
<!-- REPORT FOOTER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="82pt" viewBox="0 0 468 82" >
<svg:rect x="1" y="25" width="466" height="54" style="fill-opacity:1;fill:#ffffff;stroke:#000000;stroke-width:2;stroke-opacity:1" />
<svg:rect x="0" y="26" width="468" height="20" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="234" y="39.333333333333336" style="font-size:16;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:middle;" >
Annotated Box Office
</svg:text>
<svg:rect x="246" y="46" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="57.666666666666664" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="TotalTicketsSold"/>
</svg:text>
<svg:rect x="0" y="46" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="57.666666666666664" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Total tickets sold:
</svg:text>
<svg:rect x="246" y="62" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="73.66666666666667" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="TotalFilms"/>
</svg:text>
<svg:rect x="0" y="62" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="73.66666666666667" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Total films:
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of REPORT FOOTER -->
</body>
</report>
]]></Data>
</XData>
</Class>


<Class name="DSVRDemo.FilmDCR">
<Description>
</Description>
<Super>%DeepSee.Report.dataCollector,%DeepSee.Report.dataSchemaInterface</Super>
<TimeChanged>62509,63242.031</TimeChanged>
<TimeCreated>62509,63242.031</TimeCreated>

<Property name="Genre">
<Description>
Genre of film to report</Description>
<Type>%String</Type>
<Parameter name="ZENURL" value="GENRE"/>
</Property>

<Parameter name="DEFAULTMODE">
<Default>xml</Default>
</Parameter>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDCR">
<Data><![CDATA[
<reportDCR>
<![CDATA[

{package:"DSVRDemo",objClass:"FilmDCR",appName:"",sysName:"DSVRDemo.FilmDCR",name:"",desc:"",type:"DCR",dataSrc:"Cinema.Film",sql:
{src:"Cinema.Film",fld:["Title","TicketsSold","Category->CategoryName AS Category_CategoryName","ID","Description","Length","PlayingNow","Rating"],w:"(Category->CategoryName = ?) OR (? IS NULL)",ob:["Category->CategoryName","Title"],p:["..Genre","..Genre"],op:null},prop:[
{n:"Genre",t:"%String",z:"GENRE",d:"Genre of film to report",i:""}],meth:
{},tree:
{n:"_root",t:"gp",k:[
{n:"runBy",t:"at",e:"$UserName"},
{n:"Genre",t:"at",e:"..Genre"},
{n:"TotalFilms",t:"ag",f:"Title",o:"COUNT"},
{n:"TotalTicketsSold",t:"ag",f:"TicketsSold",o:"SUM"},
{n:"runTime",t:"at",e:"$ZDT($H,3)"},
{n:"FilmsByGenre",t:"gp",br:"Category->CategoryName",k:[
{n:"TitleCount",t:"ag",f:"Title",o:"COUNT"},
{n:"TotalSeats",t:"ag",f:"TicketsSold",o:"SUM"},
{n:"CategoryName",t:"at",f:"Category->CategoryName"},
{n:"FilmDetail",t:"gp",s:"Title",k:[
{n:"sysID",t:"el",f:"ID"},
{n:"Description",t:"el",f:"Description"},
{n:"Length",t:"el",f:"Length"},
{n:"PlayingNow",t:"el",f:"PlayingNow"},
{n:"Rating",t:"el",f:"Rating"},
{n:"Title",t:"el",f:"Title"},
{n:"TicketsSold",t:"el",f:"TicketsSold"}]}]}]},dataCls:"Cinema.Film"}
]]]]><![CDATA[></reportDCR>
]]></Data>
</XData>

<XData name="ReportDSS">
<Data><![CDATA[
<reportDSS>
<![CDATA[

{t:"r",n:"FilmDCRData",dataFileName:"",dataCollector:"DSVRDemo.FilmDCR",onExtractData:"",onGetDataAge:"",a:[
{t:"a",n:"runBy"},
{t:"a",n:"Genre"},
{t:"a",n:"runTime"}],i:[
{t:"i",n:"TotalFilms"},
{t:"i",n:"TotalTicketsSold"},
{t:"g",n:"FilmsByGenre",a:[
{t:"a",n:"CategoryName"}],i:[
{t:"i",n:"TitleCount"},
{t:"i",n:"TotalSeats"},
{t:"g",n:"FilmDetail",a:
{},i:[
{t:"i",n:"sysID"},
{t:"i",n:"Description"},
{t:"i",n:"Length"},
{t:"i",n:"PlayingNow"},
{t:"i",n:"Rating"},
{t:"i",n:"Title"},
{t:"i",n:"TicketsSold"}]}]}]}
]]]]><![CDATA[></reportDSS>
]]></Data>
</XData>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
name="FilmDCRData"
sql='SELECT Title,TicketsSold,Category->CategoryName AS Category_CategoryName,ID,Description,Length,PlayingNow,Rating
	FROM Cinema.Film
	WHERE (Category->CategoryName = ?) OR (? IS NULL)
	ORDER BY Category_CategoryName,Title
'>
<parameter expression="..Genre"/>
<parameter expression="..Genre"/>
<attribute name="runBy" expression="$UserName" />

<attribute name="Genre" expression="..Genre" />

<aggregate name="TotalFilms" type="COUNT" field="Title" />

<aggregate name="TotalTicketsSold" type="SUM" field="TicketsSold" />

<attribute name="runTime" expression="$ZDT($H,3)" />

<group name="FilmsByGenre" breakOnField="Category_CategoryName" >
<aggregate name="TitleCount" type="COUNT" field="Title" />
<aggregate name="TotalSeats" type="SUM" field="TicketsSold" />
<attribute name="CategoryName" field="Category_CategoryName" />
<group name="FilmDetail" >
<element name="sysID" field="ID" />
<element name="Description" field="Description" />
<element name="Length" field="Length" />
<element name="PlayingNow" field="PlayingNow" />
<element name="Rating" field="Rating" />
<element name="Title" field="Title" />
<element name="TicketsSold" field="TicketsSold" />
</group>
</group>

</report>
]]></Data>
</XData>
</Class>


<Class name="DSVRDemo.FilmLIDR">
<Description>
</Description>
<Super>%DeepSee.Report.dataPresenter</Super>
<TimeChanged>62971,58135.093</TimeChanged>
<TimeCreated>62971,58135.093</TimeCreated>

<Parameter name="DEFAULTMODE">
<Default>pdf</Default>
</Parameter>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<Parameter name="DSSHOME">
<Default>linked</Default>
</Parameter>

<Parameter name="DSSCLASS">
<Default>DSVRDemo.FilmDCR</Default>
</Parameter>

<XData name="ReportModel">
<Data><![CDATA[
<reportModel>
<![CDATA[

{package:"DSVRDemo",objClass:"FilmLIDR",appName:"",sysName:"DSVRDemo.FilmLIDR",name:"",desc:"",type:"DPR",dssHome:"linked",dssClass:"DSVRDemo.FilmDCR",dssName:"FilmDCRData",t:"_LIDR",s:[
{t:"h",g:"_r",a:true,h:"97pt",w:"468pt",b:0,i:[
{t:"box",gc:
{sa:1,sc:"#ffff00",so:1,sw:"3",ss:"dotted",fa:1,fc:"#20007f",fo:1,xa:0,ta:0,za:1,zw:439,zh:50,zt:2,zl:14},c:"BOX",url:null,durl:null},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#ffff7f",xo:1,xb:true,xi:true,xu:false,xs:28,xj:"left",xf:"sans-serif",ta:0,za:1,zw:205,zh:32,zt:11,zl:129},c:"CAPN",f:"!Box Office Zen",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:140,zh:14,zt:55,zl:151},c:"CAPN",f:"!Total ticket sales by genre",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:131,zh:14,zt:71,zl:45},c:"CAPN",f:"!Number of title released: ",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:93,zh:14,zt:71,zl:275},c:"CAPN",f:"!Total ticket sales: ",fn:""},
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:"3",ss:"solid",fa:0,xa:0,ta:0,za:1,zw:468,zh:0,zt:89,zl:0}},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:65,zh:14,zt:70,zl:179},c:"ELEM",f:"TotalFilms",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:96,zh:15,zt:70,zl:371},c:"ELEM",f:"TotalTicketsSold",fn:""}]},
{t:"h",g:"_p",a:true,h:"22pt",w:"468pt",b:0,i:[
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:9,xj:"left",xf:"sans-serif",ta:0,za:1,zw:97,zh:14,zt:2,zl:8},c:"CAPN",f:"!Genre Breakdown",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:9,xj:"left",xf:"sans-serif",ta:0,za:1,zw:71,zh:14,zt:2,zl:385},c:"CAPN",f:"!Total Seats Sold",fn:""},
{t:"line",gc:
{sa:1,sc:"#000000",so:0.5147058823529411,sw:1,ss:"solid",fa:0,xa:0,ta:0,za:1,zw:468,zh:0,zt:16,zl:0}}]},
{t:"h",g:"FilmsByGenre",a:true,h:"107pt",w:"468pt",b:0,i:[
{t:"box",gc:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#20007f",fo:1,xa:0,ta:0,za:1,zw:64,zh:64,zt:3,zl:22},c:"BOX",url:null,durl:null},
{t:"box",gc:
{sa:1,sc:"#ffff7f",so:1,sw:"5",ss:"solid",fa:1,fc:"#20007f",fo:1,xa:0,ta:0,za:1,zw:46,zh:43,zt:14,zl:32},c:"BOX",url:null,durl:null},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#00007f",xo:1,xb:true,xi:false,xu:false,xs:24,xj:"left",xf:"sans-serif",ta:0,za:1,zw:302,zh:32,zt:6,zl:95},c:"ATTR",f:"@CategoryName",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:87,zh:14,zt:39,zl:95},c:"CAPN",f:"!Titles Released:",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:65,zh:14,zt:54,zl:95},c:"CAPN",f:"!Total Seats:",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:63,zh:14,zt:37,zl:192},c:"ELEM",f:"TitleCount",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:0,za:1,zw:66,zh:14,zt:53,zl:192},c:"ELEM",f:"TotalSeats",fn:""}]},
{t:"t",g:"FilmDetail",a:true,w:"6.5in",l:"8pt",tw:"449pt",i:[
{t:"c",gcH:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#bfbfff",fo:1,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:1,tb:true,thb:true,thbd:true,thcd:true,tbcd:true,tbrd:true,tzs:false,tzc:"#bfffcf",za:1,zw:114,zh:20,zt:0,zl:8},f:"Title",gcB:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"serif",ta:1,tb:true,thb:true,thbd:true,thcd:true,tbcd:true,tbrd:true,tzs:false,tzc:"#bfffcf",za:1,zw:114,zh:52,zt:20,zl:8},c:"TITLE"},
{t:"c",gcH:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#bfbfff",fo:1,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:1,tb:true,thb:true,thbd:true,thcd:true,tbcd:true,tbrd:true,tzs:false,tzc:"#bfffcf",za:1,zw:187,zh:20,zt:0,zl:122},f:"Description",gcB:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"left",xf:"serif",ta:1,tb:true,thb:true,thbd:true,thcd:true,tbcd:true,tbrd:true,tzs:false,tzc:"#bfffcf",za:1,zw:187,zh:52,zt:20,zl:122},c:"DESCRIPTION"},
{t:"c",gcH:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#bfbfff",fo:1,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:1,tb:true,thb:true,thbd:true,thcd:true,tbcd:true,tbrd:true,tzs:false,tzc:"#bfffcf",za:1,zw:98,zh:20,zt:0,zl:309},f:"TicketsSold",gcB:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"right",xf:"serif",ta:1,tb:true,thb:true,thbd:true,thcd:true,tbcd:true,tbrd:true,tzs:false,tzc:"#bfffcf",za:1,zw:98,zh:52,zt:20,zl:309},c:"SALES"},
{t:"c",gcH:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#bfbfff",fo:1,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:1,tb:true,thb:true,thbd:true,thcd:true,tbcd:true,tbrd:true,tzs:false,tzc:"#bfffcf",za:1,zw:50,zh:20,zt:0,zl:407},f:"Rating",gcB:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:12,xj:"center",xf:"serif",ta:1,tb:true,thb:true,thbd:true,thcd:true,tbcd:true,tbrd:true,tzs:false,tzc:"#bfffcf",za:1,zw:50,zh:52,zt:20,zl:407},c:"RATING"}]},
{t:"f",g:"FilmsByGenre",a:true,h:"158pt",w:"468pt",b:1,i:[
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#20007f",xo:1,xb:true,xi:false,xu:false,xs:16,xj:"left",xf:"sans-serif",ta:0,za:1,zw:54,zh:22,zt:11,zl:25},c:"CAPN",f:"!Genre: ",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#20007f",xo:1,xb:true,xi:false,xu:false,xs:16,xj:"left",xf:"sans-serif",ta:0,za:1,zw:171,zh:26,zt:10,zl:83},c:"ATTR",f:"@CategoryName",fn:""},
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:0,xa:0,ta:0,za:1,zw:227,zh:0,zt:28,zl:8}},
{t:"chart",url:"deepsee/line_chart_24.png",c:"column",cIdx:1,n:"Seats Sold by Genre",grp:"FilmDetail",udg:1,df:["!TicketsSold"],sn:"",sLgd:0,sLbl:1,bw:0,mt:12,mr:21,ml:20,mb:32,tx:42,ty:3,lx:80,ly:10,lh:20,lw:20,XA:
{lbl:"",fld:["Title"],title:"",txtAnchor:"begin",lblAngle:"45",mnVD:"0",mGL:"false"},YA:
{lbl:"",fld:[""],title:"",txtAnchor:"begin",lblAngle:"0",mnVD:"0",mGL:"false"},gc:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#20007f",fo:1,xa:1,xc:"#ffff7f",xo:1,xb:false,xi:false,xu:false,xs:8,xj:"left",xf:"sans-serif",ta:0,za:1,zw:219,zh:138,zt:14,zl:238}}]},
{t:"f",g:"_r",a:true,h:"102pt",w:"468pt",b:0,i:[
{t:"box",gc:
{sa:1,sc:"#ffff7f",so:1,sw:"5",ss:"dotted",fa:1,fc:"#20007f",fo:1,xa:0,ta:0,za:1,zw:420,zh:89,zt:7,zl:26},c:"BOX",url:null,durl:null},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#ffff40",xo:1,xb:false,xi:false,xu:false,xs:14,xj:"center",xf:"Broadway",ta:0,za:1,zw:410,zh:18,zt:14,zl:31},c:"CAPN",f:"!End Of",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#ffff00",xo:1,xb:false,xi:false,xu:false,xs:34,xj:"center",xf:"Broadway",ta:0,za:1,zw:407,zh:42,zt:29,zl:32},c:"CAPN",f:"!Box Office Zen Report",fn:""},
{t:"txt",gc:
{sa:0,fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#ffff40",xo:1,xb:false,xi:false,xu:false,xs:15,xj:"center",xf:"Broadway",ta:0,za:1,zw:407,zh:20,zt:69,zl:32},c:"CAPN",f:"!Hope you enjoyed the show",fn:""}]},
{t:"f",g:"_p",a:true,h:"26pt",w:"468pt",b:0,i:[
{t:"line",gc:
{sa:1,sc:"#ff0000",so:1,sw:"3",ss:"solid",fa:0,xa:0,ta:0,za:1,zw:468,zh:0,zt:9,zl:0}},
{t:"pagenum",gc:
{sa:0,fa:1,fc:"#ffffff",fo:1,xa:1,xc:"#000000",xo:1,xb:true,xi:true,xu:false,xs:12,xj:"center",xf:"sans-serif",ta:0,za:1,zw:89,zh:15,zt:3,zl:191},c:"PAGENUM",f:null,fmt:"# of ##"}]}],pageModel:
{paper:"letter",orient:"portrait",units:"in",width:612,height:792,left:72,right:72,top:72,bottom:72,header:0,footer:0}}
]]]]><![CDATA[></reportModel>
]]></Data>
</XData>

<XData name="ReportDisplay">
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[

<report xmlns="http://www.intersystems.com/zen/report/display"
name="FilmDCRData">
	<init>
		<xslt xslfo="ParagraphFunctions" />
	</init>
<document width="612pt" height="792pt" marginLeft="72" marginRight="72" marginTop="72" marginBottom="72" headerHeight="22pt" regionBeforeExtent="20pt" footerHeight="27pt" regionAfterExtent="25pt" />
<pageheader>
<!-- PAGE HEADER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="22pt" viewBox="0 0 468 22" >
<svg:rect x="8" y="2" width="97" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="8" y="9.5" style="font-size:9;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
Genre Breakdown
</svg:text>
<svg:rect x="385" y="2" width="71" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="385" y="9.5" style="font-size:9;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
Total Seats Sold
</svg:text>
<svg:line x1="0" y1="16" x2="468" y2="16" style="stroke:#000000;stroke-width:1;stroke-opacity:0.5147058823529411" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of PAGE HEADER -->
</pageheader>
<pagefooter>
<!-- PAGE FOOTER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:table border-collapse="collapse" inline-progression-dimension="468pt" table-layout="fixed">
<fo:table-column column-width="191pt" />
<fo:table-column column-width="89pt" />
<fo:table-column column-width="188pt" />
<fo:table-body>
<fo:table-row height="3pt">
<fo:table-cell padding="0pt" number-columns-spanned="3" number-rows-spanned="1">
<fo:block font-size="0pt">
<fo:instream-foreign-object height="3pt" width="468pt">
<svg:svg width="468pt" height="3pt" viewBox="0 0 468 3" >
<svg:line x1="0" y1="9" x2="468" y2="9" style="stroke:#ff0000;stroke-width:3;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row height="15pt">
<fo:table-cell padding="0pt" number-columns-spanned="1" number-rows-spanned="1">
<fo:block font-size="0pt">
<fo:instream-foreign-object height="15pt" width="191pt">
<svg:svg width="191pt" height="15pt" viewBox="0 3 191 15" >
<svg:line x1="0" y1="9" x2="468" y2="9" style="stroke:#ff0000;stroke-width:3;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
</fo:table-cell>
<fo:table-cell padding="0pt" number-columns-spanned="1" number-rows-spanned="1" display-align="center"  background-color="#ffffff" >
<fo:block font-size="0pt" text-align="center" >
]]]]><![CDATA[>
</write>
<item special="page-number-of" style="font-size:12pt;font-family:sans-serif;color:#000000;font-weight:bold;font-style:italic;text-align:center;width:89;height:15;" />
<write>
<![CDATA[
</fo:block>
</fo:table-cell>
<fo:table-cell padding="0pt" number-columns-spanned="1" number-rows-spanned="1">
<fo:block font-size="0pt">
<fo:instream-foreign-object height="15pt" width="188pt">
<svg:svg width="188pt" height="15pt" viewBox="280 3 188 15" >
<svg:line x1="0" y1="9" x2="468" y2="9" style="stroke:#ff0000;stroke-width:3;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row height="8pt">
<fo:table-cell padding="0pt" number-columns-spanned="3" number-rows-spanned="1">
<fo:block font-size="0pt">
<fo:instream-foreign-object height="8pt" width="468pt">
<svg:svg width="468pt" height="8pt" viewBox="0 18 468 8" >
<svg:line x1="0" y1="9" x2="468" y2="9" style="stroke:#ff0000;stroke-width:3;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of PAGE FOOTER -->
</pagefooter>
<body>
<!-- REPORT HEADER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="97pt" viewBox="0 0 468 97" >
<svg:rect x="14" y="2" width="439" height="50" style="fill-opacity:1;fill:#20007f;stroke:#ffff00;stroke-width:3;stroke-opacity:1;stroke-dasharray:3,3" />
<svg:rect x="129" y="11" width="205" height="32" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="129" y="34.33333333333333" style="font-size:28;font-family:sans-serif;fill:#ffff7f;fill-opacity:1;font-weight:bold;font-style:italic;" >
Box Office Zen
</svg:text>
<svg:rect x="151" y="55" width="140" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="151" y="65" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
Total ticket sales by genre
</svg:text>
<svg:rect x="45" y="71" width="131" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="45" y="81" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
Number of title released: 
</svg:text>
<svg:rect x="275" y="71" width="93" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="275" y="81" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
Total ticket sales: 
</svg:text>
<svg:line x1="0" y1="89" x2="468" y2="89" style="stroke:#000000;stroke-width:3;stroke-opacity:1" />
<svg:rect x="179" y="70" width="65" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="179" y="80" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
<xsl:value-of select="TotalFilms"/>
</svg:text>
<svg:rect x="371" y="70" width="96" height="15" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="371" y="80" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
<xsl:value-of select="TotalTicketsSold"/>
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of REPORT HEADER -->
<group name='FilmsByGenre' >
<!-- GROUP HEADER (FilmsByGenre) -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="107pt" viewBox="0 0 468 107" >
<svg:rect x="22" y="3" width="64" height="64" style="fill-opacity:1;fill:#20007f;stroke:#000000;stroke-width:1;stroke-opacity:1" />
<svg:rect x="32" y="14" width="46" height="43" style="fill-opacity:1;fill:#20007f;stroke:#ffff7f;stroke-width:5;stroke-opacity:1" />
<svg:rect x="95" y="6" width="302" height="32" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="95" y="26" style="font-size:24;font-family:sans-serif;fill:#00007f;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@CategoryName"/>
</svg:text>
<svg:rect x="95" y="39" width="87" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="95" y="49" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
Titles Released:
</svg:text>
<svg:rect x="95" y="54" width="65" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="95" y="64" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
Total Seats:
</svg:text>
<svg:rect x="192" y="37" width="63" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="192" y="47" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
<xsl:value-of select="TitleCount"/>
</svg:text>
<svg:rect x="192" y="53" width="66" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="192" y="63" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;" >
<xsl:value-of select="TotalSeats"/>
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of GROUP HEADER (FilmsByGenre) -->
<!-- Start of REPORT BODY (FilmDetail) -->
<fo><write><![CDATA[
<fo:table space-after="24pt" border-collapse="collapse" inline-progression-dimension="468">
<fo:table-column column-number="1" column-width="4pt" />
<fo:table-column column-number="2" column-width="464pt" />
<fo:table-body><fo:table-row><fo:table-cell><fo:block></fo:block></fo:table-cell><fo:table-cell>
]]]]><![CDATA[>
</write></fo>
<table orient='col' group='FilmDetail' width='449pt' style='margin-left:2pt;margin-right:2pt;border:1pt solid #000000;' >
<item field='Title' width='114pt' style='font-size:12;font-family:serif;color:#000000;font-weight:normal;font-style:normal;text-decoration:none;text-align:left;border-bottom:1pt solid #000000;border-right:1pt solid #000000;'>
<caption value='TITLE' style='background-color:#bfbfff;font-size:12;font-family:sans-serif;color:#000000;font-weight:bold;font-style:normal;text-decoration:none;text-align:left;width:114pt;border-top:1pt solid #000000;border-left:1pt solid #000000;border-bottom:1pt solid #000000;border-right:1pt solid #000000;' />
</item>
<item field='Description' width='187pt' style='font-size:12;font-family:serif;color:#000000;font-weight:normal;font-style:normal;text-decoration:none;text-align:left;border-bottom:1pt solid #000000;border-right:1pt solid #000000;'>
<caption value='DESCRIPTION' style='background-color:#bfbfff;font-size:12;font-family:sans-serif;color:#000000;font-weight:bold;font-style:normal;text-decoration:none;text-align:left;width:187pt;border-top:1pt solid #000000;border-bottom:1pt solid #000000;border-right:1pt solid #000000;' />
</item>
<item field='TicketsSold' width='98pt' style='font-size:12;font-family:serif;color:#000000;font-weight:normal;font-style:normal;text-decoration:none;text-align:right;border-bottom:1pt solid #000000;border-right:1pt solid #000000;'>
<caption value='SALES' style='background-color:#bfbfff;font-size:12;font-family:sans-serif;color:#000000;font-weight:bold;font-style:normal;text-decoration:none;text-align:right;width:98pt;border-top:1pt solid #000000;border-bottom:1pt solid #000000;border-right:1pt solid #000000;' />
</item>
<item field='Rating' width='50pt' style='font-size:12;font-family:serif;color:#000000;font-weight:normal;font-style:normal;text-decoration:none;text-align:center;border-bottom:1pt solid #000000;'>
<caption value='RATING' style='background-color:#bfbfff;font-size:12;font-family:sans-serif;color:#000000;font-weight:bold;font-style:normal;text-decoration:none;text-align:left;width:50pt;border-top:1pt solid #000000;border-left:1pt solid #000000;border-bottom:1pt solid #000000;' />
</item>
</table>
<fo><write><![CDATA[
</fo:table-cell></fo:table-row></fo:table-body></fo:table>
]]]]><![CDATA[>
</write></fo>
<!-- End of REPORT BODY (FilmDetail) -->
<!-- GROUP FOOTER (FilmsByGenre) -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:table border-collapse="collapse" inline-progression-dimension="468pt" table-layout="fixed">
<fo:table-column column-width="238pt" />
<fo:table-column column-width="219pt" />
<fo:table-column column-width="11pt" />
<fo:table-body>
<fo:table-row height="14pt">
<fo:table-cell padding="0pt" number-columns-spanned="3" number-rows-spanned="1">
<fo:block font-size="0pt">
<fo:instream-foreign-object height="14pt" width="468pt">
<svg:svg width="468pt" height="14pt" viewBox="0 0 468 14" >
<svg:rect x="25" y="11" width="54" height="22" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="25" y="24.333333333333336" style="font-size:16;font-family:sans-serif;fill:#20007f;fill-opacity:1;font-weight:bold;" >
Genre: 
</svg:text>
<svg:rect x="83" y="10" width="171" height="26" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="83" y="23.333333333333336" style="font-size:16;font-family:sans-serif;fill:#20007f;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@CategoryName"/>
</svg:text>
<svg:line x1="8" y1="28" x2="235" y2="28" style="stroke:#000000;stroke-width:1;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row height="138pt">
<fo:table-cell padding="0pt" number-columns-spanned="1" number-rows-spanned="1">
<fo:block font-size="0pt">
<fo:instream-foreign-object height="138pt" width="238pt">
<svg:svg width="238pt" height="138pt" viewBox="0 14 238 138" >
<svg:rect x="25" y="11" width="54" height="22" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="25" y="24.333333333333336" style="font-size:16;font-family:sans-serif;fill:#20007f;fill-opacity:1;font-weight:bold;" >
Genre: 
</svg:text>
<svg:rect x="83" y="10" width="171" height="26" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="83" y="23.333333333333336" style="font-size:16;font-family:sans-serif;fill:#20007f;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@CategoryName"/>
</svg:text>
<svg:line x1="8" y1="28" x2="235" y2="28" style="stroke:#000000;stroke-width:1;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
</fo:table-cell>
<fo:table-cell padding="0pt" number-columns-spanned="1" number-rows-spanned="1">
<fo:block font-size="0pt">
]]]]><![CDATA[>
</write>
<barChart width="219" height="138" backgroundStyle="fill:#20007f;stroke-width:0.7246376811594203;stroke:#000000;" titleStyle="font-size:5.797101449275362;font-family:sans-serif;fill:#ffff7f;fill-opacity:1;" legendVisible="false" labelsVisible="true" labelStyle="font-size:4.3478260869565215;font-family:sans-serif;fill:#ffff7f;fill-opacity:1;;" marginTop="12" marginLeft="20" marginRight="21" marginBottom="32" titleX="42" titleY="3"
	title="Seats Sold by Genre"
	dataFields="!TicketsSold"
	dataGroup="FilmDetail"
	>
<xaxis
	labelValue="Title" labelGroup="FilmDetail"
	labelAngle="45"
	textAnchor="begin"
	minValueDisplacement="0"
	majorGridLines="false"
/>
<yaxis
	labelAngle="0"
	textAnchor="begin"
	minValueDisplacement="0"
	majorGridLines="false"
/>
</barChart>
<write>
<![CDATA[
</fo:block>
</fo:table-cell>
<fo:table-cell padding="0pt" number-columns-spanned="1" number-rows-spanned="1">
<fo:block font-size="0pt">
<fo:instream-foreign-object height="138pt" width="11pt">
<svg:svg width="11pt" height="138pt" viewBox="457 14 11 138" >
<svg:rect x="25" y="11" width="54" height="22" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="25" y="24.333333333333336" style="font-size:16;font-family:sans-serif;fill:#20007f;fill-opacity:1;font-weight:bold;" >
Genre: 
</svg:text>
<svg:rect x="83" y="10" width="171" height="26" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="83" y="23.333333333333336" style="font-size:16;font-family:sans-serif;fill:#20007f;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@CategoryName"/>
</svg:text>
<svg:line x1="8" y1="28" x2="235" y2="28" style="stroke:#000000;stroke-width:1;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row height="6pt">
<fo:table-cell padding="0pt" number-columns-spanned="3" number-rows-spanned="1">
<fo:block font-size="0pt">
<fo:instream-foreign-object height="6pt" width="468pt">
<svg:svg width="468pt" height="6pt" viewBox="0 152 468 6" >
<svg:rect x="25" y="11" width="54" height="22" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="25" y="24.333333333333336" style="font-size:16;font-family:sans-serif;fill:#20007f;fill-opacity:1;font-weight:bold;" >
Genre: 
</svg:text>
<svg:rect x="83" y="10" width="171" height="26" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="83" y="23.333333333333336" style="font-size:16;font-family:sans-serif;fill:#20007f;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@CategoryName"/>
</svg:text>
<svg:line x1="8" y1="28" x2="235" y2="28" style="stroke:#000000;stroke-width:1;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
]]]]><![CDATA[>
</write>
<pagebreak/>
<!-- end of GROUP FOOTER (FilmsByGenre) -->
</group>
<!-- REPORT FOOTER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="102pt" viewBox="0 0 468 102" >
<svg:rect x="26" y="7" width="420" height="89" style="fill-opacity:1;fill:#20007f;stroke:#ffff7f;stroke-width:5;stroke-opacity:1;stroke-dasharray:5,5" />
<svg:rect x="31" y="14" width="410" height="18" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="236" y="25.666666666666664" style="font-size:14;font-family:Broadway;fill:#ffff40;fill-opacity:1;text-anchor:middle;" >
End Of
</svg:text>
<svg:rect x="32" y="29" width="407" height="42" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="235.5" y="57.33333333333333" style="font-size:34;font-family:Broadway;fill:#ffff00;fill-opacity:1;text-anchor:middle;" >
Box Office Zen Report
</svg:text>
<svg:rect x="32" y="69" width="407" height="20" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="235.5" y="81.5" style="font-size:15;font-family:Broadway;fill:#ffff40;fill-opacity:1;text-anchor:middle;" >
Hope you enjoyed the show
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of REPORT FOOTER -->
</body>
</report>
]]></Data>
</XData>
</Class>


<Class name="DSVRDemo.FilmQueryDSS">
<Description>
undefined</Description>
<Super>%DeepSee.Report.sqlQueryDSS</Super>
<TimeChanged>62971,59046.109</TimeChanged>
<TimeCreated>62971,59046.109</TimeCreated>

<Parameter name="DEFAULTMODE">
<Default>xml</Default>
</Parameter>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDSS">
<Data><![CDATA[
<reportDSS>
<![CDATA[

{t:"r",n:"ListFilms",dataCollector:"DSVRDemo.FilmQueryDSS",a:[
{t:"a",n:"runTime"},
{t:"a",n:"runBy"}],i:[
{t:"g",n:"Results",i:[
{t:"i",n:"TotalCount"},
{t:"i",n:"AveAllTicketsSold"},
{t:"i",n:"MaxAllTicketsSold"},
{t:"i",n:"MinAllTicketsSold"},
{t:"i",n:"SumAllTicketsSold"},
{t:"g",n:"DataByCategoryName",a:[
{t:"a",n:"CategoryName"}],i:[
{t:"i",n:"GroupCount"},
{t:"i",n:"AveTicketsSoldByCategoryName"},
{t:"i",n:"MaxTicketsSoldByCategoryName"},
{t:"i",n:"MinTicketsSoldByCategoryName"},
{t:"i",n:"SumTicketsSoldByCategoryName"},
{t:"g",n:"Detail",a:[
{t:"a",n:"ID"}],i:[
{t:"i",n:"Title"},
{t:"i",n:"TicketsSold"},
{t:"i",n:"Description"},
{t:"i",n:"Length"},
{t:"i",n:"PlayingNow"},
{t:"i",n:"Rating"}]}]}]}]}
]]]]><![CDATA[></reportDSS>
]]></Data>
</XData>

<XData name="QueryInterfaceModel">
<Data><![CDATA[
<qiModel>
<![CDATA[

{headerInfo:
{type:"SQLDSS"},CLASS_NAME:"DSVRDemo.FilmSQL",PROCEDURE_TYPE:"query",METHOD_OR_QUERY_NAME:"ListFilms",NUMBER_INPUT_PARAMS:"0",NUMBER_INPUT_OUTPUT_PARAMS:"0",NUMBER_OUTPUT_PARAMS:"0",RETURN_VALUE:"",PROCEDURE_INTERFACE:"1",NUMBER_OF_COLUMNS:"8",INPUT_PARAMETERS:"",INPUT_OUTPUT_PARAMETERS:"",OUTPUT_PARAMETERS:"",RESULTSET_COLUMNS:"ID INTEGER, Title VARCHAR, TicketsSold INTEGER, CategoryName VARCHAR, Description VARCHAR, Length INTEGER, PlayingNow BIT, Rating VARCHAR",SCHEMA:"DSVRDemo",PROC_NAME:"FilmSQL_ListFilms",GROUPBY:[
{gFld:"CategoryName",gName:"CategoryName",gDown:0}],SORTBY:[
{cName:"Title",cDown:0}],FLDS:[
{cName:"ID",cType:"INTEGER",xName:"ID",isNum:false,cAggr:
{Count:1,Ave:0,Sum:0,Min:0,Max:0}},
{cName:"Title",cType:"VARCHAR",xName:"Title",isNum:false,cAggr:
{Count:0,Ave:0,Sum:0,Min:0,Max:0}},
{cName:"TicketsSold",cType:"INTEGER",xName:"TicketsSold",isNum:true,cAggr:
{Count:0,Ave:1,Sum:1,Min:1,Max:1}},
{cName:"CategoryName",cType:"VARCHAR",xName:"CategoryName",isNum:false,cAggr:
{Count:0,Ave:0,Sum:0,Min:0,Max:0}},
{cName:"Description",cType:"VARCHAR",xName:"Description",isNum:false,cAggr:
{Count:0,Ave:0,Sum:0,Min:0,Max:0}},
{cName:"Length",cType:"INTEGER",xName:"Length",isNum:true,cAggr:
{Count:0,Ave:0,Sum:0,Min:0,Max:0}},
{cName:"PlayingNow",cType:"BIT",xName:"PlayingNow",isNum:false,cAggr:
{Count:0,Ave:0,Sum:0,Min:0,Max:0}},
{cName:"Rating",cType:"VARCHAR",xName:"Rating",isNum:false,cAggr:
{Count:0,Ave:0,Sum:0,Min:0,Max:0}}]}
]]]]><![CDATA[></qiModel>
]]></Data>
</XData>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns='http://www.intersystems.com/zen/report/definition'
	queryClass='DSVRDemo.FilmSQL' queryName='ListFilms' top='1' name='ListFilms'>
	<attribute name='runTime' expression='$ZDT($H,3)' />
	<attribute name='runBy' expression='$UserName' />
	<group name='Results' queryClass='DSVRDemo.FilmSQL' queryName='ListFilms'  orderby='CategoryName,Title' >
<aggregate name='TotalCount' type='CUSTOM' field='ID' class='%ZEN.Report.Aggregate.CountDistinct'/>
<aggregate name='AveAllTicketsSold' type='AVG' field='TicketsSold' />
<aggregate name='MaxAllTicketsSold' type='MAX' field='TicketsSold' />
<aggregate name='MinAllTicketsSold' type='MIN' field='TicketsSold' />
<aggregate name='SumAllTicketsSold' type='SUM' field='TicketsSold' />
<group name='DataByCategoryName' breakOnField='CategoryName' >
<attribute name='CategoryName' field='CategoryName'/>
<aggregate name='GroupCount' type='CUSTOM' field='ID' class='%ZEN.Report.Aggregate.CountDistinct'/>
<aggregate name='AveTicketsSoldByCategoryName' type='AVG' field='TicketsSold' />
<aggregate name='MaxTicketsSoldByCategoryName' type='MAX' field='TicketsSold' />
<aggregate name='MinTicketsSoldByCategoryName' type='MIN' field='TicketsSold' />
<aggregate name='SumTicketsSoldByCategoryName' type='SUM' field='TicketsSold' />
<group name='Detail' >
<attribute name='ID' field='ID'/>
<element name='Title' field='Title'/>
<element name='TicketsSold' field='TicketsSold'/>
<element name='Description' field='Description'/>
<element name='Length' field='Length'/>
<element name='PlayingNow' field='PlayingNow'/>
<element name='Rating' field='Rating'/>
</group>
</group>
	</group>
</report>
]]></Data>
</XData>
</Class>


<Class name="DSVRDemo.FilmSQL">
<Description>
Simple query class used to exercise the Build-From-Query feature of DeepSee Visual Reports</Description>
<ClassType>persistent</ClassType>
<Super>%Persistent</Super>
<TimeChanged>62971,43907.813632</TimeChanged>
<TimeCreated>62376,55642.166751</TimeCreated>
<LegacyInstanceContext>1</LegacyInstanceContext>

<Query name="ListFilms">
<Type>%SQLQuery</Type>
<SqlProc>1</SqlProc>
<SqlQuery><![CDATA[	SELECT ID,Title,TicketsSold,Category->CategoryName,Description,Length,PlayingNow,Rating
	FROM Cinema.Film
	ORDER BY Title]]></SqlQuery>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DSVRDemo.FilmSQLD</DataLocation>
<DefaultData>FilmSQLDefaultData</DefaultData>
<IdLocation>^DSVRDemo.FilmSQLD</IdLocation>
<IndexLocation>^DSVRDemo.FilmSQLI</IndexLocation>
<StreamLocation>^DSVRDemo.FilmSQLS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="FilmSQLDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DSVRDemo.LegacyMyReportDSS">
<Description>
DSVR DSS module interfacing to MyReport of SAMPLES</Description>
<Super>%DeepSee.Report.dataSchemaInterface</Super>
<TimeChanged>62971,59209.406</TimeChanged>
<TimeCreated>62971,59209.406</TimeCreated>

<Parameter name="DEFAULTMODE">
<Default>xml</Default>
</Parameter>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDSS">
<Data><![CDATA[
<reportDSS>
<![CDATA[

{t:"r",n:"myReport",dataCollector:"ZENApp.MyReport",a:[
{t:"a",n:"runTime"},
{t:"a",n:"runBy"},
{t:"a",n:"author"},
{t:"a",n:"month"}],i:[
{t:"i",n:"grandTotal"},
{t:"g",n:"SalesRep",a:[
{t:"a",n:"name"}],i:[
{t:"i",n:"count"},
{t:"i",n:"subtotal"},
{t:"i",n:"avg"},
{t:"g",n:"record",a:[
{t:"a",n:"id"},
{t:"a",n:"number"}],i:[
{t:"i",n:"date"},
{t:"i",n:"customer"}]}]}]}
]]]]><![CDATA[></reportDSS>
]]></Data>
</XData>
</Class>


<Class name="DSVRDemo.LegacyMyReportLIDR">
<Description>
An auto-fill reformat of the existing Zen report, MyReport, found in SAMPLES </Description>
<Super>%DeepSee.Report.dataPresenter</Super>
<TimeChanged>62971,59449.656</TimeChanged>
<TimeCreated>62971,59449.656</TimeCreated>

<Parameter name="DEFAULTMODE">
<Default>pdf</Default>
</Parameter>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<Parameter name="DSSHOME">
<Default>linked</Default>
</Parameter>

<Parameter name="DSSCLASS">
<Default>DSVRDemo.LegacyMyReportDSS</Default>
</Parameter>

<XData name="ReportModel">
<Data><![CDATA[
<reportModel>
<![CDATA[

{package:"DSVRDemo",objClass:"LegacyMyReportLIDR",appName:"",sysName:"DSVRDemo.LegacyMyReportLIDR",name:"My Reformatted Report",desc:"An auto-fill reformat of the existing Zen report, MyReport, found in SAMPLES ",type:"DPR",dssHome:"linked",dssClass:"DSVRDemo.LegacyMyReportDSS",pageModel:
{paper:"letter",orient:"portrait",units:"in",width:612,height:792,left:72,right:72,top:72,bottom:72,header:18,footer:18},dssName:"myReport",t:"_LIDR",s:[
{t:"h",g:"_r",a:true,h:"202pt",w:"468pt",b:1,i:[
{t:"box",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:1,fc:"#ffffff",fo:1,xa:0,ta:0,za:1,zw:466,zh:126,zt:73,zl:1},c:"BOX",url:null,durl:null},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:36,xj:"center",xf:"sans-serif",ta:0,za:1,zw:468,zh:44,zt:74,zl:0},c:"CAPN",f:"!My Reformatted Report",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:118,zl:246},c:"ATTR",f:"@runTime",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:118,zl:0},c:"CAPN",f:"!Run time:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:134,zl:246},c:"ATTR",f:"@runBy",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:134,zl:0},c:"CAPN",f:"!Run by:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:150,zl:246},c:"ATTR",f:"@author",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:150,zl:0},c:"CAPN",f:"!Author:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:166,zl:246},c:"ATTR",f:"@month",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:166,zl:0},c:"CAPN",f:"!Month:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:182,zl:246},c:"ELEM",f:"grandTotal",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:182,zl:0},c:"CAPN",f:"!Grand total:",fn:""}]},
{t:"h",g:"_p",a:true,h:"59pt",w:"468pt",b:0,i:[
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:106,zh:11,zt:33,zl:50},c:"ATTR",f:"@runTime",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:50,zh:11,zt:33,zl:0},c:"CAPN",f:"!Run time:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:106,zh:11,zt:22,zl:50},c:"ATTR",f:"@runBy",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:50,zh:11,zt:22,zl:0},c:"CAPN",f:"!Run by:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:106,zh:11,zt:11,zl:50},c:"ATTR",f:"@author",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:50,zh:11,zt:11,zl:0},c:"CAPN",f:"!Author:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:106,zh:11,zt:0,zl:50},c:"ATTR",f:"@month",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:50,zh:11,zt:0,zl:0},c:"CAPN",f:"!Month:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:22,xj:"right",xf:"sans-serif",ta:0,za:1,zw:156,zh:26,zt:0,zl:312},c:"CAPN",f:"!My Reformatted Report",fn:""},
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:0,xa:0,ta:0,za:1,zw:466,zh:0,zt:45,zl:0}}]},
{t:"h",g:"SalesRep",a:true,h:"103pt",w:"468pt",b:0,i:[
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:18,xj:"center",xf:"sans-serif",ta:0,za:1,zw:156,zh:21,zt:24,zl:156},c:"ATTR",f:"@name",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:96,zh:14,zt:45,zl:372},c:"ELEM",f:"avg",fn:"#.##"},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:60,zh:14,zt:45,zl:312},c:"CAPN",f:"!Avg:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:96,zh:14,zt:59,zl:372},c:"ELEM",f:"subtotal",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:60,zh:14,zt:59,zl:312},c:"CAPN",f:"!Subtotal:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:96,zh:14,zt:73,zl:372},c:"ELEM",f:"count",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:60,zh:14,zt:73,zl:312},c:"CAPN",f:"!Count:",fn:""},
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:0,xa:0,ta:0,za:1,zw:466,zh:0,zt:88,zl:0}}]},
{t:"t",g:"record",a:true,w:"6.5in",l:"0pt",tw:"468pt",i:[
{t:"c",gcH:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#d3d3d3",fo:1,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:1,tb:false,thb:false,thbd:true,thcd:false,tbcd:false,tbrd:false,tzs:true,tzc:"#e9e9e9",za:1,zw:117,zh:20,zt:0,zl:0},f:"@id",gcB:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:1,tb:false,thb:false,thbd:true,thcd:false,tbcd:false,tbrd:false,tzs:true,tzc:"#e9e9e9",za:1,zw:117,zh:52,zt:20,zl:0},c:"Id"},
{t:"c",gcH:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#d3d3d3",fo:1,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:1,tb:false,thb:false,thbd:true,thcd:false,tbcd:false,tbrd:false,tzs:true,tzc:"#e9e9e9",za:1,zw:117,zh:20,zt:0,zl:117},f:"@number",gcB:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:1,tb:false,thb:false,thbd:true,thcd:false,tbcd:false,tbrd:false,tzs:true,tzc:"#e9e9e9",za:1,zw:117,zh:52,zt:20,zl:117},c:"Number"},
{t:"c",gcH:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#d3d3d3",fo:1,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:1,tb:false,thb:false,thbd:true,thcd:false,tbcd:false,tbrd:false,tzs:true,tzc:"#e9e9e9",za:1,zw:117,zh:20,zt:0,zl:234},f:"customer",gcB:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:1,tb:false,thb:false,thbd:true,thcd:false,tbcd:false,tbrd:false,tzs:true,tzc:"#e9e9e9",za:1,zw:117,zh:52,zt:20,zl:234},c:"Customer"},
{t:"c",gcH:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#d3d3d3",fo:1,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"left",xf:"sans-serif",ta:1,tb:false,thb:false,thbd:true,thcd:false,tbcd:false,tbrd:false,tzs:true,tzc:"#e9e9e9",za:1,zw:117,zh:20,zt:0,zl:351},f:"date",gcB:
{sa:1,sc:"#000000",so:1,sw:1,ss:"solid",fa:1,fc:"#ffffff",fo:0,xa:1,xc:"#000000",xo:1,xb:false,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:1,tb:false,thb:false,thbd:true,thcd:false,tbcd:false,tbrd:false,tzs:true,tzc:"#e9e9e9",za:1,zw:117,zh:52,zt:20,zl:351},c:"Date"}]},
{t:"f",g:"SalesRep",a:true,h:"70pt",w:"468pt",b:1,i:[
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:0,xa:0,ta:0,za:1,zw:466,zh:0,zt:25,zl:0}},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:96,zh:14,zt:28,zl:372},c:"ELEM",f:"avg",fn:"#.##"},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:60,zh:14,zt:28,zl:312},c:"CAPN",f:"!Avg:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:96,zh:14,zt:42,zl:372},c:"ELEM",f:"subtotal",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:60,zh:14,zt:42,zl:312},c:"CAPN",f:"!Subtotal:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:96,zh:14,zt:56,zl:372},c:"ELEM",f:"count",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:12,xj:"right",xf:"sans-serif",ta:0,za:1,zw:60,zh:14,zt:56,zl:312},c:"CAPN",f:"!Count:",fn:""}]},
{t:"f",g:"_r",a:true,h:"65pt",w:"468pt",b:0,i:[
{t:"box",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:1,fc:"#ffffff",fo:1,xa:0,ta:0,za:1,zw:466,zh:38,zt:25,zl:1},c:"BOX",url:null,durl:null},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:16,xj:"center",xf:"sans-serif",ta:0,za:1,zw:468,zh:20,zt:26,zl:0},c:"CAPN",f:"!My Reformatted Report",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"left",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:46,zl:246},c:"ELEM",f:"grandTotal",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:14,xj:"right",xf:"sans-serif",ta:0,za:1,zw:222,zh:16,zt:46,zl:0},c:"CAPN",f:"!Grand total:",fn:""}]},
{t:"f",g:"_p",a:true,h:"47pt",w:"468pt",b:0,i:[
{t:"line",gc:
{sa:1,sc:"#000000",so:1,sw:"2",ss:"solid",fa:0,xa:0,ta:0,za:1,zw:466,zh:0,zt:1,zl:0}},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:106,zh:11,zt:2,zl:50},c:"ATTR",f:"@runTime",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:50,zh:11,zt:2,zl:0},c:"CAPN",f:"!Run time:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:106,zh:11,zt:13,zl:50},c:"ATTR",f:"@runBy",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:50,zh:11,zt:13,zl:0},c:"CAPN",f:"!Run by:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:106,zh:11,zt:24,zl:50},c:"ATTR",f:"@author",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:50,zh:11,zt:24,zl:0},c:"CAPN",f:"!Author:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:106,zh:11,zt:35,zl:50},c:"ATTR",f:"@month",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"left",xf:"sans-serif",ta:0,za:1,zw:50,zh:11,zt:35,zl:0},c:"CAPN",f:"!Month:",fn:""},
{t:"txt",gc:
{sa:0,fa:0,xa:1,xc:"#000000",xo:1,xb:true,xi:false,xu:false,xs:10,xj:"right",xf:"sans-serif",ta:0,za:1,zw:156,zh:12,zt:34,zl:312},c:"CAPN",f:"!My Reformatted Report",fn:""}]}]}
]]]]><![CDATA[></reportModel>
]]></Data>
</XData>

<XData name="ReportDisplay">
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[

<report xmlns="http://www.intersystems.com/zen/report/display"
name="myReport">
	<init>
		<xslt xslfo="ParagraphFunctions" />
	</init>
<document width="612pt" height="792pt" marginLeft="72" marginRight="72" marginTop="72" marginBottom="72" headerHeight="60pt" regionBeforeExtent="58pt" footerHeight="48pt" regionAfterExtent="46pt" />
<pageheader>
<!-- PAGE HEADER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="59pt" viewBox="0 0 468 59" >
<svg:rect x="50" y="33" width="106" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="50" y="41.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runTime"/>
</svg:text>
<svg:rect x="0" y="33" width="50" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="41.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Run time:
</svg:text>
<svg:rect x="50" y="22" width="106" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="50" y="30.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runBy"/>
</svg:text>
<svg:rect x="0" y="22" width="50" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="30.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Run by:
</svg:text>
<svg:rect x="50" y="11" width="106" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="50" y="19.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@author"/>
</svg:text>
<svg:rect x="0" y="11" width="50" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="19.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Author:
</svg:text>
<svg:rect x="50" y="0" width="106" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="50" y="8.333333333333334" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@month"/>
</svg:text>
<svg:rect x="0" y="0" width="50" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="8.333333333333334" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Month:
</svg:text>
<svg:rect x="312" y="0" width="156" height="26" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="18.333333333333332" style="font-size:22;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
My Reformatted Report
</svg:text>
<svg:line x1="0" y1="45" x2="466" y2="45" style="stroke:#000000;stroke-width:2;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of PAGE HEADER -->
</pageheader>
<pagefooter>
<!-- PAGE FOOTER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="47pt" viewBox="0 0 468 47" >
<svg:line x1="0" y1="1" x2="466" y2="1" style="stroke:#000000;stroke-width:2;stroke-opacity:1" />
<svg:rect x="50" y="2" width="106" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="50" y="10.333333333333334" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runTime"/>
</svg:text>
<svg:rect x="0" y="2" width="50" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="10.333333333333334" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Run time:
</svg:text>
<svg:rect x="50" y="13" width="106" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="50" y="21.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runBy"/>
</svg:text>
<svg:rect x="0" y="13" width="50" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="21.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Run by:
</svg:text>
<svg:rect x="50" y="24" width="106" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="50" y="32.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@author"/>
</svg:text>
<svg:rect x="0" y="24" width="50" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="32.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Author:
</svg:text>
<svg:rect x="50" y="35" width="106" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="50" y="43.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@month"/>
</svg:text>
<svg:rect x="0" y="35" width="50" height="11" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="0" y="43.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
Month:
</svg:text>
<svg:rect x="312" y="34" width="156" height="12" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="42.333333333333336" style="font-size:10;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
My Reformatted Report
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of PAGE FOOTER -->
</pagefooter>
<body>
<!-- REPORT HEADER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="202pt" viewBox="0 0 468 202" >
<svg:rect x="1" y="73" width="466" height="126" style="fill-opacity:1;fill:#ffffff;stroke:#000000;stroke-width:2;stroke-opacity:1" />
<svg:rect x="0" y="74" width="468" height="44" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="234" y="104" style="font-size:36;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:middle;" >
My Reformatted Report
</svg:text>
<svg:rect x="246" y="118" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="129.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runTime"/>
</svg:text>
<svg:rect x="0" y="118" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="129.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Run time:
</svg:text>
<svg:rect x="246" y="134" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="145.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@runBy"/>
</svg:text>
<svg:rect x="0" y="134" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="145.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Run by:
</svg:text>
<svg:rect x="246" y="150" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="161.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@author"/>
</svg:text>
<svg:rect x="0" y="150" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="161.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Author:
</svg:text>
<svg:rect x="246" y="166" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="177.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="@month"/>
</svg:text>
<svg:rect x="0" y="166" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="177.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Month:
</svg:text>
<svg:rect x="246" y="182" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="193.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="grandTotal"/>
</svg:text>
<svg:rect x="0" y="182" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="193.66666666666666" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Grand total:
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<pagebreak/>
<!-- end of REPORT HEADER -->
<group name='SalesRep' >
<!-- GROUP HEADER (SalesRep) -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="103pt" viewBox="0 0 468 103" >
<svg:rect x="156" y="24" width="156" height="21" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="234" y="39" style="font-size:18;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:middle;" >
<xsl:value-of select="@name"/>
</svg:text>
<svg:rect x="372" y="45" width="96" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="55" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
<xsl:value-of select="format-number(avg,'#.##')" />
</svg:text>
<svg:rect x="312" y="45" width="60" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="372" y="55" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Avg:
</svg:text>
<svg:rect x="372" y="59" width="96" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="69" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
<xsl:value-of select="subtotal"/>
</svg:text>
<svg:rect x="312" y="59" width="60" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="372" y="69" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Subtotal:
</svg:text>
<svg:rect x="372" y="73" width="96" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="83" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
<xsl:value-of select="count"/>
</svg:text>
<svg:rect x="312" y="73" width="60" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="372" y="83" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Count:
</svg:text>
<svg:line x1="0" y1="88" x2="466" y2="88" style="stroke:#000000;stroke-width:2;stroke-opacity:1" />
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of GROUP HEADER (SalesRep) -->
<!-- Start of REPORT BODY (record) -->
<fo><write><![CDATA[
<fo:table space-after="24pt" border-collapse="collapse" inline-progression-dimension="468">
<fo:table-column column-number="1" column-width="-4pt" />
<fo:table-column column-number="2" column-width="472pt" />
<fo:table-body><fo:table-row><fo:table-cell><fo:block></fo:block></fo:table-cell><fo:table-cell>
]]]]><![CDATA[>
</write></fo>
<table orient='col' group='record' altcolor='#e9e9e9' width='468pt' style='margin-left:2pt;margin-right:2pt;' >
<item field='@id' width='117pt' style='font-size:10;font-family:sans-serif;color:#000000;font-weight:normal;font-style:normal;text-decoration:none;text-align:left;'>
<caption value='Id' style='background-color:#d3d3d3;font-size:12;font-family:sans-serif;color:#000000;font-weight:bold;font-style:normal;text-decoration:none;text-align:left;width:117pt;border-bottom:1pt solid #000000;' />
</item>
<item field='@number' width='117pt' style='font-size:10;font-family:sans-serif;color:#000000;font-weight:normal;font-style:normal;text-decoration:none;text-align:left;'>
<caption value='Number' style='background-color:#d3d3d3;font-size:12;font-family:sans-serif;color:#000000;font-weight:bold;font-style:normal;text-decoration:none;text-align:left;width:117pt;border-bottom:1pt solid #000000;' />
</item>
<item field='customer' width='117pt' style='font-size:10;font-family:sans-serif;color:#000000;font-weight:normal;font-style:normal;text-decoration:none;text-align:left;'>
<caption value='Customer' style='background-color:#d3d3d3;font-size:12;font-family:sans-serif;color:#000000;font-weight:bold;font-style:normal;text-decoration:none;text-align:left;width:117pt;border-bottom:1pt solid #000000;' />
</item>
<item field='date' width='117pt' style='font-size:10;font-family:sans-serif;color:#000000;font-weight:normal;font-style:normal;text-decoration:none;text-align:left;'>
<caption value='Date' style='background-color:#d3d3d3;font-size:12;font-family:sans-serif;color:#000000;font-weight:bold;font-style:normal;text-decoration:none;text-align:left;width:117pt;border-bottom:1pt solid #000000;' />
</item>
</table>
<fo><write><![CDATA[
</fo:table-cell></fo:table-row></fo:table-body></fo:table>
]]]]><![CDATA[>
</write></fo>
<!-- End of REPORT BODY (record) -->
<!-- GROUP FOOTER (SalesRep) -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="70pt" viewBox="0 0 468 70" >
<svg:line x1="0" y1="25" x2="466" y2="25" style="stroke:#000000;stroke-width:2;stroke-opacity:1" />
<svg:rect x="372" y="28" width="96" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="38" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
<xsl:value-of select="format-number(avg,'#.##')" />
</svg:text>
<svg:rect x="312" y="28" width="60" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="372" y="38" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Avg:
</svg:text>
<svg:rect x="372" y="42" width="96" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="52" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
<xsl:value-of select="subtotal"/>
</svg:text>
<svg:rect x="312" y="42" width="60" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="372" y="52" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Subtotal:
</svg:text>
<svg:rect x="372" y="56" width="96" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="468" y="66" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
<xsl:value-of select="count"/>
</svg:text>
<svg:rect x="312" y="56" width="60" height="14" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="372" y="66" style="font-size:12;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Count:
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<pagebreak/>
<!-- end of GROUP FOOTER (SalesRep) -->
</group>
<!-- REPORT FOOTER -->
<write>
<![CDATA[
<fo:block font-size="0pt" >
<fo:instream-foreign-object>
<svg:svg width="468pt" height="65pt" viewBox="0 0 468 65" >
<svg:rect x="1" y="25" width="466" height="38" style="fill-opacity:1;fill:#ffffff;stroke:#000000;stroke-width:2;stroke-opacity:1" />
<svg:rect x="0" y="26" width="468" height="20" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="234" y="39.333333333333336" style="font-size:16;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:middle;" >
My Reformatted Report
</svg:text>
<svg:rect x="246" y="46" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="246" y="57.666666666666664" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;" >
<xsl:value-of select="grandTotal"/>
</svg:text>
<svg:rect x="0" y="46" width="222" height="16" style="fill:#ffffff;fill-opacity:0;stroke-width:0;" />
<svg:text x="222" y="57.666666666666664" style="font-size:14;font-family:sans-serif;fill:#000000;fill-opacity:1;font-weight:bold;text-anchor:end;" >
Grand total:
</svg:text>
</svg:svg>
</fo:instream-foreign-object>
</fo:block>
]]]]><![CDATA[>
</write>
<!-- end of REPORT FOOTER -->
</body>
</report>
]]></Data>
</XData>
</Class>


<Class name="DataMining.ClusterAnalysis.GraphicalDemoApp">
<Super>%ZEN.application</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62312,54928.733028</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Cluster Analysis Demo</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>
</Class>


<Class name="DataMining.ClusterAnalysis.Iris">
<Description><![CDATA[
The test and demo for application of Cluster Analysis to Iris dataset contained in class  
<CLASS>DataMining.IrisDataset</CLASS>
<p>
Run method <code>##class(DataMining.ClusterAnalysis.Iris).test()</code>
<p>
See also <a href="/csp/samples/DataMining.ClusterAnalysis.ZenDemoPage.cls" target="CADemo">Graphical Zen Demo</a> implemented in class 
<CLASS>DataMining.ClusterAnalysis.ZenDemoPage</CLASS> ]]></Description>
<Abstract>1</Abstract>
<IncludeCode>%occInclude</IncludeCode>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62312,44409.168749</TimeCreated>

<Method name="test">
<Description><![CDATA[
This method runs the full Cluster Analysis procedure for Iris dataset.
Parameters:
<ul>
<li> verbose - Level of verbosity. Defualt is 2 that prints the information readable on a single screen. 
Increasing verbosity might yield to too much information being printed but provides more details. 
Verbosity 1 prints just the results but no processing information. Set to 0
for silent run.
<li> NClusters - Number of clusters. The default is 3 and corresponds to the number of actual species in the 
dataset.
<li> method - Algorithm to use. Default is 1 which will run "PAM with SA" implemented by class 
<CLASS>%DeepSee.extensions.clusters.PAMSA</CLASS>. Setting to 0 will run simple and pure PAM algorithm 
implemented in <CLASS>%DeepSee.extensions.clusters.PAM</CLASS> which is faster but produces less 
reliable results. Setting it to 2 will run CLARA implemented by <CLASS>%DeepSee.extensions.clusters.CLARA</CLASS>
which is certainly an overkill for a small dataset like Iris.
</ul>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>verbose:%Integer=2,NClusters:%Integer=3,method:%Integer=1</FormalSpec>
<Implementation><![CDATA[
	#dim sc 	As %Status = $$$OK
	#dim ex As %Exception.AbstractException
	#dim pam As %DeepSee.extensions.clusters.PAM
	
	Try{
		set pam = ..GetModel($s(method=2:"clara",method:"sa",1:"pam"), .sc)
		Quit:$$$ISERR(sc)
		
		set pam.K = NClusters
		set pam.Verbose = verbose - 1
		
		set sc = pam.Execute()
		Quit:$$$ISERR(sc)
		
		Quit:'verbose
		
		if (verbose > 2) {
			do pam.printAll()
			w !
			d pam.printCluster(1)
			d pam.printCluster(2)
			d pam.printCluster(3)
		}
		
		set sc = ..Summary(pam, .tClusterNames)
		quit:$$$ISERR(sc)
		
		// BDB505: save PMML model
		w:verbose !,"Saving as PMML model"
		set sc = pam.GeneratePMML(.tPMML, .tClusterNames)
		quit:$$$ISERR(sc)
		set tModelClassName = $classname()_".PMML"
		set sc = tPMML.%SaveToClass(tModelClassName, 1, verbose)
		quit:$$$ISERR(sc)
		
		// run PMML model against the whole dataset
		if (verbose) {
			set tClusterID = ""
			for i = 1:1:3 {
				set tClusterID = tClusterID _ ", '"_$g(tClusterNames(i))_"', "_i
			}
			set sc = ##class(%DeepSee.PMML.Utils).%RunModelFromSQL(.tTestId, tModelClassName,, "SELECT PetalLength, PetalWidth, SepalLength, SepalWidth, DECODE(Species"_tClusterID_") ClusterID FROM DataMining.IrisDataset")
			quit:$$$ISERR(sc)
			set sc = ##class(%DeepSee.PMML.Utils.TempResult).GetAggregatePrecisionMetrics(tTestId, .tMacroPrecision, .tMicroPrecision, .tMacroRecall, .tMicroRecall, .tMacroFMeasure, .tMicroFMeasure)
			quit:$$$ISERR(sc)
			write !,"Test results on DataMining.IrisDataset: (micro/macro)"
			write !,"	Precision: ",$justify(tMicroPrecision,"",2),"% / ",$justify(tMacroPrecision,"",2),"%"
			write !,"	Recall ",$justify(tMicroRecall,"",2),"% / ",$justify(tMacroRecall,"",2),"%"
			write !,"	F-measure ",$justify(tMicroFMeasure,"",2),"% / ",$justify(tMacroFMeasure,"",2),"%"
			set sc = ##class(%DeepSee.PMML.Utils).%DropResults(tTestId)
			quit:$$$ISERR(sc)
		}
		
	}Catch(ex){
		set sc = ex.AsStatus()
	}
	do:$$$ISERR(sc) $system.OBJ.DisplayError(sc)
]]></Implementation>
</Method>

<Method name="speciesMatrix">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[model:%DeepSee.extensions.clusters.AbstractModel,k:%Integer,&matrix,*mostFrequent:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	
	#dim i, count As %Integer
	#dim id, species As %String
	#dim x
	
	set i = ""
	set mostFrequent = ""
	Do {
		do model.iterateCluster(k, .i, .id, .x)
		Quit:i=""
		
		set flower = ##class(DataMining.IrisDataset).%OpenId(id)
		set species = flower.Species
		set count = $g(matrix(k,species)) + 1
		set matrix(k,species) = count
		
		if ((mostFrequent="") || (matrix(k,mostFrequent)<matrix(k,species))) {
			set mostFrequent = species
		}
	} While(i'="")
	
	
	Quit sc
]]></Implementation>
</Method>

<Method name="Summary">
<ClassMethod>1</ClassMethod>
<FormalSpec>model:%DeepSee.extensions.clusters.AbstractModel,*pClusterNames</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	#dim s1, s2, s3 As %String
	#dim correct, error As %Integer
	#dim p1, p0 As %Double
	#dim asw, r, ch, cost As %Double

	w "Summary:", !
	
	k pClusterNames
	set sc = ..GetResults(model, .correct, .error, .s1, .s2, .s3)
	Quit:$$$ISERR(sc) sc
	
	set pClusterNames(1) = s1
	set pClusterNames(2) = s2
	set pClusterNames(3) = s3
		
	set p1 = (correct / (correct + error)) * 100
	set p0 = (error   / (correct + error)) * 100
		
	w "Cluster 1: "_s1_"; Cluster 2: "_s2_"; Cluster 3: "_s3, !
	w "Correct: "_correct_" ("_p1_"%); Errors: "_error_" ("_p0_"%)", !
	
	w "Indices:", !
	set asw = model.GetASWIndex().calculate(.sc)
	Quit:$$$ISERR(sc) sc
	set r =  model.GetPearsonGammaIndex().calculate(.sc)
	Quit:$$$ISERR(sc) sc
	set ch =  model.GetCalinskiHarabaszIndex().calculate(.sc)
	Quit:$$$ISERR(sc) sc
	set cost = model.TotalCost()
	
	w "Total Final Cost = 				"_cost, !
	w "Average Silhouette Width (ASW) = "_asw, !
	w "Pearson-Gamma (PG) = 			"_r, !
	w "Calinski-Harabasz (CH) = 		"_ch, !
	
	Quit sc
]]></Implementation>
</Method>

<Method name="GetResults">
<ClassMethod>1</ClassMethod>
<FormalSpec>model:%DeepSee.extensions.clusters.AbstractModel,*correct:%Integer,*error:%Integer,*s1:%String,*s2:%String,*s3:%String</FormalSpec>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	#dim matrix

	set sc = ..speciesMatrix(model, 1, .matrix, .s1)
	Quit:$$$ISERR(sc) sc

	set sc = ..speciesMatrix(model, 2, .matrix, .s2)
	Quit:$$$ISERR(sc) sc

	set sc = ..speciesMatrix(model, 3, .matrix, .s3)
	Quit:$$$ISERR(sc) sc
		
	set correct =       $g(matrix(1,s1)) + $g(matrix(2,s2)) + $g(matrix(3,s3))
	set error   = 		$g(matrix(1,s2),0) + $g(matrix(1,s3),0)
	set error = error + $g(matrix(2,s1),0) + $g(matrix(2,s3),0)
	set error = error + $g(matrix(3,s1),0) + $g(matrix(3,s2),0)

	Quit sc
]]></Implementation>
</Method>

<Method name="GetModel">
<ClassMethod>1</ClassMethod>
<FormalSpec>method:%String,*sc:%Status</FormalSpec>
<ReturnType>%DeepSee.extensions.clusters.AbstractModel</ReturnType>
<Implementation><![CDATA[
	#dim pam As %DeepSee.extensions.clusters.PAM
	#dim dataset As %String = "iris"
	
	set sc = $$$OK
	
	if ('##class(%DeepSee.extensions.clusters.AbstractModel).Exists(dataset)){
		set sc = ..PrepareModel(dataset)
		Quit:$$$ISERR(sc) ""
	}
	
	if (method="sa") {
		set pam = ##class(%DeepSee.extensions.clusters.PAMSA).Open(dataset)
	} elseif (method="clara") {
		set pam = ##class(%DeepSee.extensions.clusters.CLARA).Open(dataset)
		set pam.SampleSize = 50
		set pam.UseSA = 0
		set pam.NIdle = 5
	} else {
		set pam = ##class(%DeepSee.extensions.clusters.PAM).Open(dataset)
	}
	
	set pam.Normalize = 0
	
	Quit pam
]]></Implementation>
</Method>

<Method name="checkData">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc 	As %Status = $$$OK
	#dim ex As %Exception.AbstractException
	
	Try{
		&sql(select count(%ID) into :count from DataMining.IrisDataset)
		if (count'=150) {
			set sc = ##class(DataMining.IrisDataset).%KillExtent()
			Quit:$$$ISERR(sc)
			set sc = ##class(DataMining.IrisDataset).load()
			Quit:$$$ISERR(sc)
		}
	}Catch(ex){
		set sc = ex.AsStatus()
	}
	
	Quit sc
]]></Implementation>
</Method>

<Method name="PrepareModel">
<ClassMethod>1</ClassMethod>
<FormalSpec>dataset:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc 	As %Status = $$$OK
	#dim ex As %Exception.AbstractException
	#dim pam As %DeepSee.extensions.clusters.PAM
	
	Try{
		set sc = ..checkData()
		
		set pam = ##class(%DeepSee.extensions.clusters.PAM).New(dataset,.sc)
		Quit:$$$ISERR(sc)
		set pam.Normalize = 0

		set rs = ##class(%ResultSet).%New("%DynamicQuery:SQL")
		set sc = rs.Prepare("select %ID, SepalLength, SepalWidth, PetalLength, PetalWidth from DataMining.IrisDataset")
		Quit:$$$ISERR(sc)
		set sc = rs.Execute()
		Quit:$$$ISERR(sc)

		set sc = pam.SetData(rs, 4)
		Quit:$$$ISERR(sc)
		
		set sc = pam.Prepare()		
		Quit:$$$ISERR(sc)
	}Catch(ex){
		set sc = ex.AsStatus()
	}
	
	do:$$$ISERR(sc) $system.OBJ.DisplayError(sc)
	Quit sc
]]></Implementation>
</Method>

<Method name="DeleteModel">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ##class(%DeepSee.extensions.clusters.AbstractModel).Delete("iris")
]]></Implementation>
</Method>
</Class>


<Class name="DataMining.ClusterAnalysis.SimpleTest">
<Description><![CDATA[
This is a simple demo and test for Cluster Analysis algorithms included with DeepSee.
<p>
The 2-dimensional dataset consists of 9 points clearly distributed between two clusters.
<p>
Run <code>##class(DataMining.ClusterAnalysis.SimpleTest).test()</code> 
or see also <a href="/csp/samples/DataMining.ClusterAnalysis.ZenDemoPage.cls" target="CADemo">Graphical Zen Demo</a> implemented in class 
<CLASS>DataMining.ClusterAnalysis.ZenDemoPage</CLASS> ]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62312,39830.440697</TimeCreated>

<Property name="X">
<Type>%Double</Type>
</Property>

<Property name="Y">
<Type>%Double</Type>
</Property>

<Method name="populate">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc 	As %Status = $$$OK
	
	set sc = ..%KillExtent()
	Quit:$$$ISERR(sc) sc
	
	set sc = ..insert(1,1)
	Quit:$$$ISERR(sc) sc

	set sc = ..insert(2,3)
	Quit:$$$ISERR(sc) sc
	
	set sc = ..insert(1,2)
	Quit:$$$ISERR(sc) sc
	
	set sc = ..insert(2,2)
	Quit:$$$ISERR(sc) sc
	
	set sc = ..insert(10,4)
	Quit:$$$ISERR(sc) sc
	
	set sc = ..insert(11,5)
	Quit:$$$ISERR(sc) sc
	
	set sc = ..insert(10,6)
	Quit:$$$ISERR(sc) sc
	
	set sc = ..insert(12,5)
	Quit:$$$ISERR(sc) sc
	
	set sc = ..insert(11,6)
	Quit:$$$ISERR(sc) sc
	
	Quit sc
]]></Implementation>
</Method>

<Method name="insert">
<ClassMethod>1</ClassMethod>
<FormalSpec>x:%Double,y:%Double</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc 	As %Status = $$$OK

	set obj = ..%New()
	set obj.X = x
	set obj.Y = y
	
	set sc = obj.%Save()
	Quit sc
]]></Implementation>
</Method>

<Method name="test">
<ClassMethod>1</ClassMethod>
<FormalSpec>verbose:%Integer=1,NClusters:%Integer=2</FormalSpec>
<Implementation><![CDATA[
	#dim sc 	As %Status = $$$OK
	#dim model 	As %DeepSee.extensions.clusters.PAM
	#dim ex 	As %Exception.AbstractException
	#dim asw, r, ch, cost As %Double
	
	Try{
		set sc = ..populate()
		Quit:$$$ISERR(sc)
		
		set sc = ##class(%DeepSee.extensions.clusters.PAM).Delete("simple")
		Quit:$$$ISERR(sc)

		set model = ##class(%DeepSee.extensions.clusters.PAM).New("simple")
		set model.Verbose = verbose
		set model.Normalize = 0

		set model.K = NClusters
		
		set rs = ##class(%ResultSet).%New("%DynamicQuery:SQL")
		set sc = rs.Prepare("select %ID, x, y from DataMining_ClusterAnalysis.SimpleTest")
		Quit:$$$ISERR(sc)
		set sc = rs.Execute()
		Quit:$$$ISERR(sc)

		set sc = model.SetData(rs, 2)
		Quit:$$$ISERR(sc)
		set sc = model.Prepare()		
		Quit:$$$ISERR(sc)
		
		set sc = model.Execute()
		Quit:$$$ISERR(sc)
		
		Quit:'verbose
		
		do model.printAll()
		
		w !
		
		d model.printCluster(1)
		d model.printCluster(2)
		
		w "Indices:", !
		set asw = model.GetASWIndex().calculate(.sc)
		Quit:$$$ISERR(sc) 
		set r =  model.GetPearsonGammaIndex().calculate(.sc)
		Quit:$$$ISERR(sc) 
		set ch =  model.GetCalinskiHarabaszIndex(0).calculate(.sc)
		Quit:$$$ISERR(sc) 
		set cost = model.TotalCost()
	
		w "Total Final Cost = 				"_cost, !
		w "Average Silhouette Width (ASW) = "_asw, !
		w "Pearson-Gamma (PG) = 			"_r, !
		w "Calinski-Harabasz (CH) = 		"_ch, !
		
	}Catch(ex){
		set sc = ex.AsStatus()
	}
	
	do:$$$ISERR(sc) $system.OBJ.DisplayError(sc)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DataMining.Clus7500.SimpleTestD</DataLocation>
<DefaultData>SimpleTestDefaultData</DefaultData>
<IdLocation>^DataMining.Clus7500.SimpleTestD</IdLocation>
<IndexLocation>^DataMining.Clus7500.SimpleTestI</IndexLocation>
<StreamLocation>^DataMining.Clus7500.SimpleTestS</StreamLocation>
<Data name="SimpleTestDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>X</Value>
</Value>
<Value name="3">
<Value>Y</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DataMining.ClusterAnalysis.ZenDemoPage">
<Super>%DeepSee.extensions.clusters.TableAnalysis</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62312,52009.005005</TimeCreated>

<Parameter name="APPLICATION">
<Default>DataMining.ClusterAnalysis.GraphicalDemoApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Cluster Analysis Demo</Default>
</Parameter>

<Parameter name="SPECIALVALUES">
<Default>1</Default>
</Parameter>

<XData name="tableSelectPane">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<hgroup>
<spacer width="20"/>
<label value="Select Dataset: "/>
<spacer width="10"/>
<select id="tables" valueList="DataMining.ClusterAnalysis.SimpleTest,DataMining.IrisDataset"
displayList="Simple,Iris"
showEmpty="true" value=""
onchange="zenPage.demoChanged()"/>
<button caption="Set" onclick="zenPage.setRequested()"/>
</hgroup>
</pane>
]]></Data>
</XData>

<Method name="demoChanged">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.classname = zen('tables').getValue();
	if (this.classname == "") {
		zen('update').setDisabled(true);
	} else {
		if (this.classname == "DataMining.ClusterAnalysis.SimpleTest") {
			this.defaultRadius = 1
			zen('chart').setProperty('radius',5);
		} else {
			this.defaultRadius = 0.2
			zen('chart').setProperty('radius',0.75);
		}
		this.datasetHasChanged = 1;
		zenPage.tableChanged();
		
		//var select = zen('columnY');
		//alert(select.valueList +": " + this.propNameY + "/" + select.getValue());
		
		zen('update').setDisabled(false);
		zenPage.run();
	}
]]></Implementation>
</Method>

<Method name="debugDemoChanged">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
		this.datasetHasChanged = 1;
		var err = zenPage.OnSelectClass();
		zenPage.alertIfError(err);
		err = zenPage.RestoreDefaults();
		zenPage.alertIfError(err);
		//zenPage.tableChanged();
		zen('update').setDisabled(false);
		
		var select = zen('columnY');
		alert(select.valueList +": " + this.propNameY + "/" + select.getValue());
		select.setValue(this.propNameY);
		alert(select.valueList +": " + this.propNameY + "/" + select.getValue());
		//zenPage.run();
]]></Implementation>
</Method>

<Method name="setRequested">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
		err = zenPage.RestoreDefaults();
		zenPage.alertIfError(err);
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC = $$$OK
	#dim ex As %Exception.AbstractException
	Try {
		set tSC = ##class(DataMining.ClusterAnalysis.SimpleTest).populate()
		Quit:$$$ISERR(tSC)
		set tSC = ##class(DataMining.ClusterAnalysis.Iris).checkData()
		Quit:$$$ISERR(tSC)
		set ..%GetComponentById("update").disabled = 1
	} Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="RestoreDefaults">
<ReturnType>%ZEN.proxyObject</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#dim tSC = $$$OK
	#dim ex As %Exception.AbstractException
	#dim tSelect As %ZEN.Component.select
	#dim tMSelect As %ZEN.Component.multiSelectSet
	#dim tValueList, tDisplayList, properties As %String

	Try {
		Set tSelect  = ..%GetComponentById("tables")
		Set tMSelect = ..%GetComponentById("columns")
		
		Set properties = ""
		if (tSelect.value="DataMining.ClusterAnalysis.SimpleTest") {
			Set properties = "X,Y"
			Set tSelect = ..%GetComponentById("columnX")
			Set ..propNameX = "X"
			Set tSelect.value = ..propNameX
			Set tSelect.valueList = properties
			Set tSelect = ..%GetComponentById("columnY")
			Set ..propNameY = "Y"
			Set tSelect.value = ..propNameY
			Set tSelect.valueList = properties
			Set tSelect = ..%GetComponentById("ncl")
			Set tSelect.value = 2
		} elseif (tSelect.value="DataMining.IrisDataset") {
			Set properties = "PetalLength,PetalWidth,SepalLength,SepalWidth"
			Set tSelect = ..%GetComponentById("columnX")
			Set ..propNameX = "Species"
			Set tSelect.value = ..propNameX
			Set tSelect = ..%GetComponentById("columnY")
			Set ..propNameY = "SepalLength"
			Set tSelect.value = ..propNameY
			Set tSelect = ..%GetComponentById("ncl")
			Set tSelect.value = 3
		} else {
			set tSC = $$$ERROR($$$GeneralError,"Invalid Sample Selected: "_tSelect.value)
			Quit
		}
		set tMSelect.value = properties
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}

	Quit ..ErrObj(tSC)
]]></Implementation>
</Method>

<Method name="%OnGetValue">
<FormalSpec><![CDATA[&value,classname:%String,property:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ((classname="DataMining.IrisDataset") && (property="Species")) {
		set value = $case(value,"Iris-setosa":1,"Iris-virginica":6,"Iris-versicolor":11,:16)
	}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DataMining.IrisCube">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63117,78077.595584</TimeCreated>
<DependsOn>DataMining.IrisDataset</DependsOn>

<Parameter name="DOMAIN">
</Parameter>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="IrisCube" displayName="Iris" disabled="false" abstract="false" sourceClass="DataMining.IrisDataset" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0">
  <dimension name="ActualSpecies" disabled="false" hasAll="false" allCaption="All Species" allDisplayName="Species" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level sourceProperty="Species" name="ActualSpecies" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="PredictedSpecies" disabled="false" hasAll="false" allCaption="All Species1" allDisplayName="Species1" type="data" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false">
      <level sourceExpression="%cube.GetPredictedSpecies(%source.%ID)" name="PredictedSpecies" disabled="false" list="false" useDisplayValue="true" useAsFilter="true">
      </level>
    </hierarchy>
  </dimension>
  <measure sourceProperty="PetalLength" name="PetalLength" disabled="false" aggregate="AVG" type="number" hidden="false" searchable="false" iKnowSource="string"></measure>
  <measure sourceProperty="PetalWidth" name="PetalWidth" disabled="false" aggregate="AVG" type="number" hidden="false" searchable="false" iKnowSource="string"></measure>
  <measure sourceProperty="SepalLength" name="SepalLength" disabled="false" aggregate="AVG" type="number" hidden="false" searchable="false" iKnowSource="string"></measure>
  <measure sourceProperty="SepalWidth" name="SepalWidth" disabled="false" aggregate="AVG" type="number" hidden="false" searchable="false" iKnowSource="string"></measure>
  
  <calculatedMember name="AvgPredictedSL" disabled="false" dimension="Measures" valueExpression="%KPI(&quot;%DeepSee.PMML&quot;,&quot;PredictedValue&quot;,,&quot;PMML&quot;,&quot;DataMining.PMML.Iris&quot;, &quot;ModelName&quot;, &quot;SepalLength Regression&quot;, &quot;%CONTEXT&quot;)" hidden="false"></calculatedMember>
  
  <listing name="MyListing" fieldList="Species, $$$PMML[&quot;DataMining.PMML.Iris&quot;, &quot;DecisionTree&quot;] PredictedSpecies, PetalWidth, PetalLength, SepalWidth, SepalLength, $$$PMML[&quot;DataMining.PMML.Iris&quot;, &quot;SepalLength Regression&quot;] PredictedSepalLength" />
</cube>
]]></Data>
</XData>

<Method name="GetPredictedSpecies">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// execute the Decision Tree model to predict the species of the IrisDataset instance for pID
	set tSC = $$$OK, tOutcome = ""
	try {
		// 1: fetch the IrisDataset instance
		set tIris = ##class(DataMining.IrisDataset).%OpenId(pID)
		if (tIris="") {
			set tSC = $$$ERROR($$$GeneralError, "Could not open IrisDataset object with ID '"_pID_"'")
			quit
		}
		
		// 2: load its properties into an array
		kill tData
		set tData("PetalLength") = tIris.PetalLength
		set tData("PetalWidth") = tIris.PetalWidth
		set tData("SepalLength") = tIris.SepalLength
		set tData("SepalWidth") = tIris.SepalWidth
		
		// 3: instantiate the Decision Tree model
		set tSC = ##class(DataMining.PMML.Iris).%GetModelInstance("DecisionTree", .tModel)
		quit:$$$ISERR(tSC)
		
		// 4: execute the model and retrieve the predicted species
		set tSC = tModel.%ExecuteModel(.tData, .tOutput)
		quit:$$$ISERR(tSC)
		set tOutcome = tOutput.%GetFeatureValue("predictedValue")
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	if $$$ISERR(tSC) { $$$ThrowStatus(tSC) }
	quit tOutcome
]]></Implementation>
</Method>

<Method name="%OnBuildCube">
<Description><![CDATA[
Ensure <class>DataMiningIrisDataset</class> contains data]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = ##class(DataMining.IrisDataset).%DeleteExtent()
	quit:$$$ISERR(tSC) tSC
	quit ##class(DataMining.IrisDataset).load()
]]></Implementation>
</Method>
</Class>


<Class name="DataMining.IrisDataset">
<Description><![CDATA[
This class represents the Iris dataset, perhaps the best known database to be found in the pattern recognition literature.
<p>
The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other. Each record has 5 attributes:
<ol>
<li> sepal length in cm
<li> sepal width in cm
<li> petal length in cm
<li> petal width in cm
<li> class (species):
<ul>
<li>Iris Setosa
<li>Iris Versicolour
<li>Iris Virginica
</ul>
</ol>
<p>
The dataset is taken from <a href="http://archive.ics.uci.edu/ml/datasets/Iris">UCI Machine Learning Repository [http://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science by Frank, A. & Asuncion, A. (2010).</a>]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62312,41576.508001</TimeCreated>

<Property name="SepalLength">
<Type>%Double</Type>
</Property>

<Property name="SepalWidth">
<Type>%Double</Type>
</Property>

<Property name="PetalLength">
<Type>%Double</Type>
</Property>

<Property name="PetalWidth">
<Type>%Double</Type>
</Property>

<Property name="Species">
<Type>%String</Type>
</Property>

<Method name="load">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	#dim ex As %Exception.AbstractException
	#dim input As %Stream.TmpCharacter
	#dim line As %String
	#dim len, count As %Integer

	Try {
		Set input=##class(%Dictionary.CompiledXData).%OpenId("DataMining.IrisDataset||Iris").Data
		If '$IsObject(input) Set sc=%objlasterror Quit

		Quit:$$$ISERR(sc)

		Set count = 0
		While ($$$ISOK(sc)) {
			set len = 32000
			set line = input.ReadLine(.len,.sc)
			Quit:len<1
			Quit:$$$ISERR(sc)
			
			Continue:line["<"
			Continue:line[">"
		
			set count = $i(count)
			
			set flower = ..%New()
			set flower.SepalLength = $p(line,",",1)
			set flower.SepalWidth  = $p(line,",",2)
			set flower.PetalLength = $p(line,",",3)
			set flower.PetalWidth  = $p(line,",",4)
			set flower.Species     = $p(line,",",5)
			
			set sc = flower.%Save()
			Quit:$$$ISERR(sc)
		}
		
	} Catch (ex) {
		set sc = ex.AsStatus()
	}

	if ($$$ISERR(sc)) {
		do $system.OBJ.DisplayError(sc)
	}

	Quit sc
]]></Implementation>
</Method>

<XData name="Iris">
<Data><![CDATA[
<data>
<![CDATA[
5.1,3.5,1.4,0.2,Iris-setosa
4.9,3.0,1.4,0.2,Iris-setosa
4.7,3.2,1.3,0.2,Iris-setosa
4.6,3.1,1.5,0.2,Iris-setosa
5.0,3.6,1.4,0.2,Iris-setosa
5.4,3.9,1.7,0.4,Iris-setosa
4.6,3.4,1.4,0.3,Iris-setosa
5.0,3.4,1.5,0.2,Iris-setosa
4.4,2.9,1.4,0.2,Iris-setosa
4.9,3.1,1.5,0.1,Iris-setosa
5.4,3.7,1.5,0.2,Iris-setosa
4.8,3.4,1.6,0.2,Iris-setosa
4.8,3.0,1.4,0.1,Iris-setosa
4.3,3.0,1.1,0.1,Iris-setosa
5.8,4.0,1.2,0.2,Iris-setosa
5.7,4.4,1.5,0.4,Iris-setosa
5.4,3.9,1.3,0.4,Iris-setosa
5.1,3.5,1.4,0.3,Iris-setosa
5.7,3.8,1.7,0.3,Iris-setosa
5.1,3.8,1.5,0.3,Iris-setosa
5.4,3.4,1.7,0.2,Iris-setosa
5.1,3.7,1.5,0.4,Iris-setosa
4.6,3.6,1.0,0.2,Iris-setosa
5.1,3.3,1.7,0.5,Iris-setosa
4.8,3.4,1.9,0.2,Iris-setosa
5.0,3.0,1.6,0.2,Iris-setosa
5.0,3.4,1.6,0.4,Iris-setosa
5.2,3.5,1.5,0.2,Iris-setosa
5.2,3.4,1.4,0.2,Iris-setosa
4.7,3.2,1.6,0.2,Iris-setosa
4.8,3.1,1.6,0.2,Iris-setosa
5.4,3.4,1.5,0.4,Iris-setosa
5.2,4.1,1.5,0.1,Iris-setosa
5.5,4.2,1.4,0.2,Iris-setosa
4.9,3.1,1.5,0.1,Iris-setosa
5.0,3.2,1.2,0.2,Iris-setosa
5.5,3.5,1.3,0.2,Iris-setosa
4.9,3.1,1.5,0.1,Iris-setosa
4.4,3.0,1.3,0.2,Iris-setosa
5.1,3.4,1.5,0.2,Iris-setosa
5.0,3.5,1.3,0.3,Iris-setosa
4.5,2.3,1.3,0.3,Iris-setosa
4.4,3.2,1.3,0.2,Iris-setosa
5.0,3.5,1.6,0.6,Iris-setosa
5.1,3.8,1.9,0.4,Iris-setosa
4.8,3.0,1.4,0.3,Iris-setosa
5.1,3.8,1.6,0.2,Iris-setosa
4.6,3.2,1.4,0.2,Iris-setosa
5.3,3.7,1.5,0.2,Iris-setosa
5.0,3.3,1.4,0.2,Iris-setosa
7.0,3.2,4.7,1.4,Iris-versicolor
6.4,3.2,4.5,1.5,Iris-versicolor
6.9,3.1,4.9,1.5,Iris-versicolor
5.5,2.3,4.0,1.3,Iris-versicolor
6.5,2.8,4.6,1.5,Iris-versicolor
5.7,2.8,4.5,1.3,Iris-versicolor
6.3,3.3,4.7,1.6,Iris-versicolor
4.9,2.4,3.3,1.0,Iris-versicolor
6.6,2.9,4.6,1.3,Iris-versicolor
5.2,2.7,3.9,1.4,Iris-versicolor
5.0,2.0,3.5,1.0,Iris-versicolor
5.9,3.0,4.2,1.5,Iris-versicolor
6.0,2.2,4.0,1.0,Iris-versicolor
6.1,2.9,4.7,1.4,Iris-versicolor
5.6,2.9,3.6,1.3,Iris-versicolor
6.7,3.1,4.4,1.4,Iris-versicolor
5.6,3.0,4.5,1.5,Iris-versicolor
5.8,2.7,4.1,1.0,Iris-versicolor
6.2,2.2,4.5,1.5,Iris-versicolor
5.6,2.5,3.9,1.1,Iris-versicolor
5.9,3.2,4.8,1.8,Iris-versicolor
6.1,2.8,4.0,1.3,Iris-versicolor
6.3,2.5,4.9,1.5,Iris-versicolor
6.1,2.8,4.7,1.2,Iris-versicolor
6.4,2.9,4.3,1.3,Iris-versicolor
6.6,3.0,4.4,1.4,Iris-versicolor
6.8,2.8,4.8,1.4,Iris-versicolor
6.7,3.0,5.0,1.7,Iris-versicolor
6.0,2.9,4.5,1.5,Iris-versicolor
5.7,2.6,3.5,1.0,Iris-versicolor
5.5,2.4,3.8,1.1,Iris-versicolor
5.5,2.4,3.7,1.0,Iris-versicolor
5.8,2.7,3.9,1.2,Iris-versicolor
6.0,2.7,5.1,1.6,Iris-versicolor
5.4,3.0,4.5,1.5,Iris-versicolor
6.0,3.4,4.5,1.6,Iris-versicolor
6.7,3.1,4.7,1.5,Iris-versicolor
6.3,2.3,4.4,1.3,Iris-versicolor
5.6,3.0,4.1,1.3,Iris-versicolor
5.5,2.5,4.0,1.3,Iris-versicolor
5.5,2.6,4.4,1.2,Iris-versicolor
6.1,3.0,4.6,1.4,Iris-versicolor
5.8,2.6,4.0,1.2,Iris-versicolor
5.0,2.3,3.3,1.0,Iris-versicolor
5.6,2.7,4.2,1.3,Iris-versicolor
5.7,3.0,4.2,1.2,Iris-versicolor
5.7,2.9,4.2,1.3,Iris-versicolor
6.2,2.9,4.3,1.3,Iris-versicolor
5.1,2.5,3.0,1.1,Iris-versicolor
5.7,2.8,4.1,1.3,Iris-versicolor
6.3,3.3,6.0,2.5,Iris-virginica
5.8,2.7,5.1,1.9,Iris-virginica
7.1,3.0,5.9,2.1,Iris-virginica
6.3,2.9,5.6,1.8,Iris-virginica
6.5,3.0,5.8,2.2,Iris-virginica
7.6,3.0,6.6,2.1,Iris-virginica
4.9,2.5,4.5,1.7,Iris-virginica
7.3,2.9,6.3,1.8,Iris-virginica
6.7,2.5,5.8,1.8,Iris-virginica
7.2,3.6,6.1,2.5,Iris-virginica
6.5,3.2,5.1,2.0,Iris-virginica
6.4,2.7,5.3,1.9,Iris-virginica
6.8,3.0,5.5,2.1,Iris-virginica
5.7,2.5,5.0,2.0,Iris-virginica
5.8,2.8,5.1,2.4,Iris-virginica
6.4,3.2,5.3,2.3,Iris-virginica
6.5,3.0,5.5,1.8,Iris-virginica
7.7,3.8,6.7,2.2,Iris-virginica
7.7,2.6,6.9,2.3,Iris-virginica
6.0,2.2,5.0,1.5,Iris-virginica
6.9,3.2,5.7,2.3,Iris-virginica
5.6,2.8,4.9,2.0,Iris-virginica
7.7,2.8,6.7,2.0,Iris-virginica
6.3,2.7,4.9,1.8,Iris-virginica
6.7,3.3,5.7,2.1,Iris-virginica
7.2,3.2,6.0,1.8,Iris-virginica
6.2,2.8,4.8,1.8,Iris-virginica
6.1,3.0,4.9,1.8,Iris-virginica
6.4,2.8,5.6,2.1,Iris-virginica
7.2,3.0,5.8,1.6,Iris-virginica
7.4,2.8,6.1,1.9,Iris-virginica
7.9,3.8,6.4,2.0,Iris-virginica
6.4,2.8,5.6,2.2,Iris-virginica
6.3,2.8,5.1,1.5,Iris-virginica
6.1,2.6,5.6,1.4,Iris-virginica
7.7,3.0,6.1,2.3,Iris-virginica
6.3,3.4,5.6,2.4,Iris-virginica
6.4,3.1,5.5,1.8,Iris-virginica
6.0,3.0,4.8,1.8,Iris-virginica
6.9,3.1,5.4,2.1,Iris-virginica
6.7,3.1,5.6,2.4,Iris-virginica
6.9,3.1,5.1,2.3,Iris-virginica
5.8,2.7,5.1,1.9,Iris-virginica
6.8,3.2,5.9,2.3,Iris-virginica
6.7,3.3,5.7,2.5,Iris-virginica
6.7,3.0,5.2,2.3,Iris-virginica
6.3,2.5,5.0,1.9,Iris-virginica
6.5,3.0,5.2,2.0,Iris-virginica
6.2,3.4,5.4,2.3,Iris-virginica
5.9,3.0,5.1,1.8,Iris-virginica
]]]]><![CDATA[>
</data>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DataMining.IrisDatasetD</DataLocation>
<DefaultData>IrisDatasetDefaultData</DefaultData>
<IdLocation>^DataMining.IrisDatasetD</IdLocation>
<IndexLocation>^DataMining.IrisDatasetI</IndexLocation>
<StreamLocation>^DataMining.IrisDatasetS</StreamLocation>
<Data name="IrisDatasetDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SepalLength</Value>
</Value>
<Value name="3">
<Value>SepalWidth</Value>
</Value>
<Value name="4">
<Value>PetalLength</Value>
</Value>
<Value name="5">
<Value>PetalWidth</Value>
</Value>
<Value name="6">
<Value>Species</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DataMining.PMML.Iris">
<Description><![CDATA[
Sample PMML file based on Iris measurements in <class>DataMining.IrisDataset</class>.]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.PMML.Definition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62888,42919.529995</TimeCreated>
<DependsOn>DataMining.IrisCube</DependsOn>

<XData name="PMML">
<XMLNamespace>http://www.intersystems.com/deepsee/pmml</XMLNamespace>
<Data><![CDATA[
<PMML version="4.1">
<Header>
<Application name="KNIME" version="2.8.2"/>
<Timestamp>03/11/2013 11:54:41</Timestamp>
</Header>
<DataDictionary numberOfFields="5">

<!-- This custom extension allows mapping table or cube data to model input -->
<Extension name="isc:datasource">
<X-SQLDataSource name="Analysis dataset" idField="ID">
<X-FieldMap fieldName="PetalLength" spec="PetalLength" />
<X-FieldMap fieldName="PetalWidth" spec="PetalWidth" />
<X-FieldMap fieldName="SepalLength" spec="SepalLength" />
<X-FieldMap fieldName="SepalWidth" spec="SepalWidth" />
<X-FieldMap fieldName="Species" spec="Species" />
<X-SQL>SELECT ID, PetalLength, PetalWidth, SepalLength, SepalWidth, Species FROM DataMining.IrisDataset</X-SQL>
</X-SQLDataSource>

<X-DeepSeeDataSource name="Cube mapping" cubeName="IrisCube" idField="ID">
<X-FieldMap fieldName="Species" spec="[ActualSpecies].[H1].[ActualSpecies]" />
<X-FieldMap fieldName="PetalLength" spec="[MEASURES].[PetalLength]" />
<X-FieldMap fieldName="PetalWidth" spec="[MEASURES].[PetalWidth]" />
<X-FieldMap fieldName="SepalLength" spec="[MEASURES].[SepalLength]" />
<X-FieldMap fieldName="SepalWidth" spec="[MEASURES].[SepalWidth]" />
</X-DeepSeeDataSource>
</Extension>

<DataField name="Species" optype="categorical" dataType="string">
<Value value="Iris-setosa"/>
<Value value="Iris-versicolor"/>
<Value value="Iris-virginica"/>
</DataField>
<DataField name="PetalLength" optype="continuous" dataType="double" />
<DataField name="PetalWidth" optype="continuous" dataType="double" />
<DataField name="SepalLength" optype="continuous" dataType="double" />
<DataField name="SepalWidth" optype="continuous" dataType="double" />
</DataDictionary>

<TreeModel modelName="DecisionTree" functionName="classification" splitCharacteristic="binarySplit" missingValueStrategy="lastPrediction" noTrueChildStrategy="returnNullPrediction">
<MiningSchema>
<MiningField name="PetalLength" invalidValueTreatment="asIs"/>
<MiningField name="PetalWidth" invalidValueTreatment="asIs"/>
<MiningField name="SepalLength" invalidValueTreatment="asIs"/>
<MiningField name="SepalWidth" invalidValueTreatment="asIs"/>
<MiningField name="Species" invalidValueTreatment="asIs" usageType="predicted"/>
</MiningSchema>
<Output>
<OutputField name="Species" feature="predictedValue" />
<OutputField name="Probability" feature="probability" />
</Output>
<Node id="0" score="Iris-setosa" recordCount="150.0">
<True/>
<ScoreDistribution value="Iris-setosa" recordCount="50.0"/>
<ScoreDistribution value="Iris-versicolor" recordCount="50.0"/>
<ScoreDistribution value="Iris-virginica" recordCount="50.0"/>
<Node id="1" score="Iris-setosa" recordCount="50.0">
<SimplePredicate field="PetalWidth" operator="lessOrEqual" value="0.8"/>
<ScoreDistribution value="Iris-setosa" recordCount="50.0"/>
<ScoreDistribution value="Iris-versicolor" recordCount="0.0"/>
<ScoreDistribution value="Iris-virginica" recordCount="0.0"/>
</Node>
<Node id="2" score="Iris-versicolor" recordCount="100.0">
<SimplePredicate field="PetalWidth" operator="greaterThan" value="0.8"/>
<ScoreDistribution value="Iris-setosa" recordCount="0.0"/>
<ScoreDistribution value="Iris-versicolor" recordCount="50.0"/>
<ScoreDistribution value="Iris-virginica" recordCount="50.0"/>
<Node id="3" score="Iris-versicolor" recordCount="54.0">
<SimplePredicate field="PetalWidth" operator="lessOrEqual" value="1.75"/>
<ScoreDistribution value="Iris-setosa" recordCount="0.0"/>
<ScoreDistribution value="Iris-versicolor" recordCount="49.0"/>
<ScoreDistribution value="Iris-virginica" recordCount="5.0"/>
<Node id="4" score="Iris-versicolor" recordCount="48.0">
<SimplePredicate field="PetalLength" operator="lessOrEqual" value="4.95"/>
<ScoreDistribution value="Iris-setosa" recordCount="0.0"/>
<ScoreDistribution value="Iris-versicolor" recordCount="47.0"/>
<ScoreDistribution value="Iris-virginica" recordCount="1.0"/>
</Node>
<Node id="7" score="Iris-virginica" recordCount="6.0">
<SimplePredicate field="PetalLength" operator="greaterThan" value="4.95"/>
<ScoreDistribution value="Iris-setosa" recordCount="0.0"/>
<ScoreDistribution value="Iris-versicolor" recordCount="2.0"/>
<ScoreDistribution value="Iris-virginica" recordCount="4.0"/>
<Node id="8" score="Iris-virginica" recordCount="3.0">
<SimplePredicate field="PetalWidth" operator="lessOrEqual" value="1.55"/>
<ScoreDistribution value="Iris-setosa" recordCount="0.0"/>
<ScoreDistribution value="Iris-versicolor" recordCount="0.0"/>
<ScoreDistribution value="Iris-virginica" recordCount="3.0"/>
</Node>
<Node id="9" score="Iris-versicolor" recordCount="3.0">
<SimplePredicate field="PetalWidth" operator="greaterThan" value="1.55"/>
<ScoreDistribution value="Iris-setosa" recordCount="0.0"/>
<ScoreDistribution value="Iris-versicolor" recordCount="2.0"/>
<ScoreDistribution value="Iris-virginica" recordCount="1.0"/>
</Node>
</Node>
</Node>
<Node id="10" score="Iris-virginica" recordCount="46.0">
<SimplePredicate field="PetalWidth" operator="greaterThan" value="1.75"/>
<ScoreDistribution value="Iris-setosa" recordCount="0.0"/>
<ScoreDistribution value="Iris-versicolor" recordCount="1.0"/>
<ScoreDistribution value="Iris-virginica" recordCount="45.0"/>
</Node>
</Node>
</Node>
</TreeModel>


<GeneralRegressionModel modelName="SepalLength Regression" modelType="generalizedLinear" 
functionName="regression" algorithmName="glm" distribution="normal" linkFunction="identity">
<MiningSchema>
<MiningField name="SepalLength" usageType="predicted"/>
<MiningField name="SepalWidth" usageType="active"/>
<MiningField name="PetalLength" usageType="active"/>
<MiningField name="PetalWidth" usageType="active"/>
<MiningField name="Species" usageType="active"/>
</MiningSchema>

<ParameterList>
<Parameter name="p0" label="Intercept"/>
<Parameter name="p1" label="SepalWidth"/>
<Parameter name="p2" label="PetalLength"/>
<Parameter name="p3" label="PetalWidth"/>
<Parameter name="p4" label="classIris-versicolor"/>
<Parameter name="p5" label="classIris-virginica"/>
</ParameterList>
<FactorList>
<Predictor name="Species"/>
</FactorList>
<CovariateList>
<Predictor name="SepalWidth"/>
<Predictor name="PetalLength"/>
<Predictor name="PetalWidth"/>
</CovariateList>
<PPMatrix>
<PPCell value="1" predictorName="SepalWidth" parameterName="p1"/>
<PPCell value="1" predictorName="PetalLength" parameterName="p2"/>
<PPCell value="1" predictorName="PetalWidth" parameterName="p3"/>
<PPCell value="Iris-versicolor" predictorName="Species" parameterName="p4"/>
<PPCell value="Iris-virginica" predictorName="Species" parameterName="p5"/>
</PPMatrix>
<ParamMatrix>
<PCell parameterName="p0" df="1" beta="2.22413677241697"/>
<PCell parameterName="p1" df="1" beta="0.462828301295544"/>
<PCell parameterName="p2" df="1" beta="0.912364461921148"/>
<PCell parameterName="p3" df="1" beta="-0.384539403624331"/>
<PCell parameterName="p4" df="1" beta="-0.944151669544111"/>
<PCell parameterName="p5" df="1" beta="-1.33483727247749"/>
</ParamMatrix>
</GeneralRegressionModel>
</PMML>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.APISamples">
<IncludeCode>%occInclude</IncludeCode>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62077,55333.044707</TimeCreated>

<Method name="RunQuery1">
<Description>
Executes a hardcoded query and prints the results.
Returns the result set as output.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*result:%DeepSee.ResultSet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set rset=##class(%DeepSee.ResultSet).%New()
    Set query="SELECT MEASURES.[%COUNT] ON 0, diagd.MEMBERS ON 1 FROM patients"
    Set status=rset.%PrepareMDX(query)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit status}

    Set status=rset.%Execute()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit status}
   
    Write !, "Full results are as follows ***************",!
    Do rset.%Print()
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="RunQuery2">
<Description>
Executes a query that uses a named parameter and prints the results.
Returns the result set as output.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>city:%String="Magnolia",*result:%DeepSee.ResultSet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set rset=##class(%DeepSee.ResultSet).%New()
    Set query="WITH %PARM c AS 'value:Magnolia'"
    _"SELECT homed.[city].@c ON 0 FROM patients"
    Set status=rset.%PrepareMDX(query)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit status}

    Set myparms("c")=city
    Set status=rset.%Execute(.myparms)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit status}
   
    Write !, "Full results are as follows ***************",!
    Do rset.%Print()
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="RunQuery3">
<Description>
Executes a query that does a detail listing and prints the results.
Returns the result set as output</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    Set rset=##class(%DeepSee.ResultSet).%New()
    
    Set query="DRILLTHROUGH SELECT gend.female ON 0,birthd.[1913] ON 1 "
             _"FROM patients RETURN PatientID,PrimaryCarePhysician->LastName"

    Set status=rset.%PrepareMDX(query)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}

    Set status=rset.%Execute()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    
    Write !, "Listing details for the first cell are as follows ***************",!
    Do rset.%PrintListing()
]]></Implementation>
</Method>

<Method name="ShowCell">
<Description>
Executes a query and prints the results.
Then for comparison, displays a specific cell.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set rset=##class(%DeepSee.ResultSet).%New()
    Set query="SELECT MEASURES.[avg age] ON 0, homed.[city].MEMBERS ON 1 "
             _"FROM patients"
    Set status=rset.%PrepareMDX(query)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit status}

    Set status=rset.%Execute()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit status}
    
    Write !, "Full results are as follows ***************",!
    Do rset.%Print()
    
    Write !, "Cell 1,5 is as follows  ***************",!
    Write rset.%GetOrdinalValue(1,5)
    Quit status
]]></Implementation>
</Method>

<Method name="ShowRowLabels">
<Description>
Executes a query and prints the results.
Then for comparison, displays information about the row labels.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set rset=##class(%DeepSee.ResultSet).%New()
    Set query="SELECT CROSSJOIN(aged.[age group].MEMBERS,"
             _"gend.gender.MEMBERS) ON 1 FROM patients"
    Set status=rset.%PrepareMDX(query)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit status}

    Set status=rset.%Execute()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit status}
    
    Write !, "Full results are as follows ***************",!
    Do rset.%Print()
    
    Write !, "Labels used on the rows are as follows ***************",!
    For j=1:1:rset.%GetRowCount() {
        Write !, "Row ",j
        Set labelcount=rset.%GetOrdinalLabel(.pLabel,2,j)
        For i=1:1:labelcount {
            Write !, "    label("_i_") is "_pLabel(i)
            }
       }
    
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="ShowQueryMetadata">
<Description>
Given a result set as input, this method generates a report on
the query metadata.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rset:%DeepSee.ResultSet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set cubename=rset.%GetCubeName()
    Write !, "This result set comes from the following cube: ",cubename,!
    
    Set status=rset.%GetParameterInfo(.pParms)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit status}
    If $DATA(pParms) {
        Write "The query uses the following parameters:",!
        Set p = $ORDER(pParms(""))
            While (p '= "") {
                Write $$$UPPER(p), " = " ,$GET(pParms(p,"VALUE")),!
                Set p = $ORDER(pParms(p))
        }
    }
    Set query=rset.%GetQueryText()
    Write "The query is as follows:",!, query,!

    Set isdrill=rset.%IsDrillThrough()
    If isdrill {
        Set listingsql=rset.%GetListingSQL()
        Write !!, "It uses the following SQL to drill into the source table:"
        Write !, listingsql
        }
]]></Implementation>
</Method>

<Method name="ShowResultMetadata">
<Description>
Given a result set as input, this method generates a report on
the result metadata.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rset:%DeepSee.ResultSet</FormalSpec>
<Implementation><![CDATA[
    Set cubename=rset.%GetCubeName()
    Write !, "This result set comes from the cube ",cubename
    
    Set querykey=rset.%GetQueryKey()
    Set cellcount=##class(%DeepSee.ResultSet).%GetCellCount(cubename,querykey)
    Write !, "It has ", cellcount, " cells"
    
    //For i=1:1:cellcount{
      //  Write !, "cell number ",i," has the value ",rset.%GetOrdinalValue(i)
        //}
]]></Implementation>
</Method>

<Method name="ShowSlicerStatement">
<Description>
Given a result set as input, this method generates a report on
the slicer statement for a given cell range.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rset:%DeepSee.ResultSet,Row1:%Integer=1,Col1:%Integer=1,Row2:%Integer,Col2:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    If '$DATA(Row2) {Set Row2=Row1}
    If '$DATA(Col2) {Set Col2=Col1}

    Set status=rset.%GetSlicerForCellRange(.slicer,Row1,Col1,Row2,Col2)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit status}
    
    Write !, "The requested cell range:"
    Write !, "   Columns ",Col1, " through ", Col2
    Write !, "   Rows    ",Row1, " through ", Row2

    Write !, "The slicer statement for the given cell range is as follows:"
    Write !, slicer
    
    If 'rset.%IsDrillThrough(){
        Write !!, "For comparison, the query results are as follows:",!
        Do rset.%Print()
    }
    Else {
	    Write !!, "This is a drillthrough query and %Print "
	    _"does not provide a useful basis of comparison"
	    }
]]></Implementation>
</Method>

<Method name="GetResultSet1">
<Description>
executes a hardcoded query and returns a result set</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%DeepSee.ResultSet</ReturnType>
<Implementation><![CDATA[
    Set rset=##class(%DeepSee.ResultSet).%New()
    Set query="SELECT {MEASURES.[avg test score],MEASURES.[%COUNT]} ON 0, "
             _"diagd.h1.diagnoses.MEMBERS ON 1 FROM patients"
    Set status=rset.%PrepareMDX(query)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit $$$NULLOREF}

    Set status=rset.%Execute()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit $$$NULLOREF}
    
    Quit rset
]]></Implementation>
</Method>

<Method name="GetResultSet2">
<Description>
executes a hardcoded query and returns a result set</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>city:%String="Magnolia"</FormalSpec>
<ReturnType>%DeepSee.ResultSet</ReturnType>
<Implementation><![CDATA[
    Set rset=##class(%DeepSee.ResultSet).%New()
    Set query="WITH %PARM c AS 'value:Magnolia'"
             _"SELECT homed.h1.[city].@c ON 0 FROM patients"

    Set status=rset.%PrepareMDX(query)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit $$$NULLOREF}

    Set myparms("c")=city
    Set status=rset.%Execute(.myparms)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit $$$NULLOREF}
    
    Quit rset
]]></Implementation>
</Method>

<Method name="GetResultSet3">
<Description>
executes a hardcoded query and returns a result set</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%DeepSee.ResultSet</ReturnType>
<Implementation><![CDATA[
    Set rset=##class(%DeepSee.ResultSet).%New()
    Set query="DRILLTHROUGH SELECT gend.h1.gender.female ON 0,birthd.h1.year.[1913] ON 1 "
             _"FROM patients RETURN PatientID,PrimaryCarePhysician->LastName"

    Set status=rset.%PrepareMDX(query)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit $$$NULLOREF}

    Set status=rset.%Execute()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit $$$NULLOREF}
    
    Quit rset
]]></Implementation>
</Method>

<Method name="GetResultSet4">
<ClassMethod>1</ClassMethod>
<ReturnType>%DeepSee.ResultSet</ReturnType>
<Implementation><![CDATA[
    Set rset=##class(%DeepSee.ResultSet).%New()
    Set query="SELECT CROSSJOIN(gend.h1.gender.MEMBERS,MEASURES.[%COUNT]) ON 0, "
             _"aged.h1.[age bucket].MEMBERS ON 1 FROM patients"
    Set status=rset.%PrepareMDX(query)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit $$$NULLOREF}

    Set status=rset.%Execute()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit $$$NULLOREF}
    
    Quit rset
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.DashboardsEtc">
<Description>
Defines the dashboards and pivot tables associated with the Patients sample.</Description>
<Super>%DeepSee.UserLibrary.Container</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61895,36924</TimeCreated>

<XData name="Contents">
<XMLNamespace>http://www.intersystems.com/deepsee/library</XMLNamespace>
<Data><![CDATA[
<items>

<!-- Basic Dashboard Demo.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Basic Dashboard Demo" folderName="" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.454Z" createdBy="" category="" bookCover="{background: {style:&apos;background-color:white;opacity:0.45;&apos;,src:&apos;covers/14489721_s.jpg&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(255, 255, 255);left:12.5px;left:12.5px;width:107.5px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;deepsee/ds2_layers2_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="2" snapTo="true" snapGrid="true" gridRows="10" gridCols="6" canResize="true" canModify="true" showTitleBar="true" titleBarOpacity="" titleBarColor="" selectedTitleBarOpacity="" selectedTitleBarColor="" titleBarTextColor="" selectedTitleBarTextColor="" titleBarFont="" companyName="Patients Sample" companyLogo="" companyStyle="" backgroundColor="white" backgroundImage="none" backgroundRepeat="no-repeat" backgroundSize="100% 100%" backgroundOpacity="1" widgetBorders="1px solid #F0F0F0" widgetBordersSwitch="edit" widgetBordersColor="#F0F0F0" widgetBordersStyle="solid" widgetBordersWidth="1" widgetBordersToggle="true">
  <widget name="Widget1" type="pivot" subtype="barChart" subtypeClass="barChart" title="Patient Counts &amp; Allergy Counts" dataSource="Use in Dashboards/Patient Counts &amp; Allergy Counts.pivot" dataLink="" drillDownDataSource="" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="5" rowSpanL="5" showToolbar="true" showToolbarOnlyWhenMaximized="false" colorToolbar="#F0F0F0" opacityToolbar="1" backgroundColor="#F0F0F0" opacity="1" theme="" dataColorList="">
    <control name="" action="applyFilter" target="*" targetProperty="[HomeD].[H1].[ZIP]" location="dashboard" type="auto" controlClass="" label="Home ZIP Code" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="applyFilter" target="*" targetProperty="[PatGrpD].[H1].[Patient Group]" location="dashboard" type="auto" controlClass="" label="Patient Group" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="applyFilter" target="*" targetProperty="[DiagD].[H1].[Diagnoses]" location="dashboard" type="auto" controlClass="" label="Diagnoses" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <property name="XgridLines">0</property>
    <property name="YgridLines">0</property>
    <property name="analyzer">1</property>
    <property name="chartToggle">table</property>
    <property name="dimensionSource"></property>
    <property name="excel">1</property>
    <property name="hasZoom">1</property>
    <property name="labelStyle"></property>
    <property name="labels">1</property>
    <property name="legendPos">right</property>
    <property name="pivotSelect"></property>
    <property name="print">1</property>
    <property name="showDimensions">1</property>
    <property name="title"></property>
    <property name="valueLabels">0</property>
  </widget>
  <widget name="Widget2" type="pivot" subtype="barChart" subtypeClass="pieChart" title="Patients by Favorite Color" dataSource="Use in Dashboards/Patients by Favorite Color.pivot" dataLink="" drillDownDataSource="" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="5" homeColL="0" colSpanL="5" rowSpanL="5" showToolbar="true" showToolbarOnlyWhenMaximized="false" colorToolbar="#F0F0F0" opacityToolbar="1" backgroundColor="#F0F0F0" opacity="1" theme="" dataColorList="">
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="chooseChartType" target="" targetProperty="columnChart,table,swirlChart,pieChart" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <property name="XgridLines">0</property>
    <property name="YgridLines">0</property>
    <property name="analyzer">1</property>
    <property name="chartToggle">chart</property>
    <property name="dimensionSource"></property>
    <property name="excel">1</property>
    <property name="hasZoom">1</property>
    <property name="labelStyle"></property>
    <property name="labels">1</property>
    <property name="legendPos">none</property>
    <property name="pivotSelect"></property>
    <property name="print">1</property>
    <property name="showDimensions">1</property>
    <property name="title"></property>
    <property name="valueLabels">1</property>
    <dataSeries type="" markerShape="" color="rgb(176, 176, 255)" yAxisIndex="0" hasLegend="true"></dataSeries>
  </widget>
</dashboard>

<!-- Calculated Members/Alternative Avg Allergy Count.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Alternative Avg Allergy Count" folderName="Calculated Members" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.676Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;,src:&apos;covers/10455200_s.jpg&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;font-variant: small-caps;color:rgb(38, 62, 86);top:81.25px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;covers/10455200_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},subtitle: {text:&apos;calculated member demo&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DocD].[H1].[Doctor Group].Members" key="" value="" text="Doctor Group" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Allergy Count]" key="" value="" text="Allergy Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[MEASURES].[AVG ALLERGY COUNT (ALTERNATIVE)]" key="" value="" text="Avg Allergy Count (alternative)" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <calculatedMember dimension="MEASURES" memberName="Avg Allergy Count (alternative)" valueExpression="[MEASURES].[allergy count]/[MEASURES].[%Count]" formatString=""></calculatedMember>
</pivot>

<!-- Calculated Members/Average Patient Count per Decade.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Average Patient Count per Decade" folderName="Calculated Members" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.682Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background-color:skyblue;opacity:0.28;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;color:navy;font-family:century schoolbook;top:21.875px;&apos;},image: {style:&apos;top:59.375px;&apos;,src:&apos;covers/radiology_128.gif&apos;},subtitle: {text:&apos;calculated member demo&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[BirthD].[H1].[Decade].Members" key="" value="" text="Decade" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[CALCD].[Average]" key="" value="" text="Average" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <calculatedMember dimension="CalcD" memberName="Average" valueExpression="AVG([birthd].[h1].[decade].members)" formatString=""></calculatedMember>
</pivot>

<!-- Calculated Members/Primary Color Example.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Primary Color Example" folderName="Calculated Members" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.688Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background-color:white;opacity:0.16;&apos;,src:&apos;covers/11886201_s.jpg&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(224, 0, 0);font-family:comic sans ms;font-size:27px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;covers/15239020_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},subtitle: {text:&apos;calculated member demo&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[ColorD].[H1].[Favorite Color].Members" key="" value="" text="Favorite Color" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[CALCD].[Primary Colors]" key="" value="" text="Primary Colors" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <calculatedMember dimension="CalcD" memberName="Primary Colors" valueExpression="AGGREGATE({[colord].[h1].[favorite color].[red],[colord].[h1].[favorite color].[blue],[colord].[h1].[favorite color].[yellow]})" formatString=""></calculatedMember>
</pivot>

<!-- Calculated Members/Unique Doctor Count.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Unique Doctor Count" folderName="Calculated Members" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.694Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;,src:&apos;covers/10302135_s.jpg&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: center;color:rgb(0, 0, 240);font-family:georgia;font-size:20px;&apos;},image: {src:&apos;covers/niche_128.gif&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},subtitle: {text:&apos;calculated member demo&apos;,style:&apos;background-color:rgb(255, 255, 255);&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[BirthD].[H1].[Decade].Members" key="" value="" text="Decade" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[MEASURES].[UNIQUE DOCTOR COUNT]" key="" value="" text="Unique Doctor Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Dynamic Dashboard.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Dynamic Dashboard" folderName="" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-25T19:49:52.493Z" createdBy="" category="" bookCover="{background: {style:&apos;background-color:white;top:93.75px;left:18.75px;left:18.75px;height:97.5px;&apos;,src:&apos;covers/8107796_s.jpg&apos;,imageStyle:&apos;height:97.5px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-variant: small-caps;color:rgb(54, 30, 8);top:25px;&apos;},image: {style:&apos;display: none;top:46.875px;&apos;,src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},subtitle: {text:&apos;Uses advanced options to select the data source&apos;,style:&apos;color:rgb(62, 49, 46);top:62.5px;&apos;},footer: {text:&apos;$owner&apos;,style:&apos;display: none;&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="6" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="widget1" type="pivot" subtype="pivot" subtypeClass="" title="Using Option chooseDataSource" dataSource="Use in Dashboards/For Patients Scorecard.pivot" dataLink="" drillDownDataSource="" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="4" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="chooseDataSource" target="" targetProperty="Patients Pivots.termlist" location="widget" type="auto" controlClass="" label="Choose a pivot table to display" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="analyzer">0</property>
  </widget>
  <widget name="widget2" type="pivot" subtype="pivot" subtypeClass="" title="Using Option chooseRowSpec" dataSource="Use in Dashboards/For Patients Scorecard.pivot" dataLink="" drillDownDataSource="" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="0" colSpanL="4" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="chooseRowSpec" target="" targetProperty="Patients RowSpecs.termlist" location="widget" type="auto" controlClass="" label="Choose the rows to display" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="analyzer">0</property>
  </widget>
</dashboard>


<!-- Filter Examples/Advanced Filter.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Advanced Filter" folderName="Filter Examples" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.7Z" createdBy="" category="How To" bookCover="{background: {style:&apos;opacity:1;&apos;,src:&apos;covers/8506133_s.jpg&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: left;font-weight: bold;color:rgb(255, 255, 255);font-family:lucida sans unicode;font-size:22px;padding:3.25px;&apos;},image: {style:&apos;text-align: left;display: none;padding:0px;&apos;,src:&apos;covers/6000799_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DiagD].[H1].[Diagnoses].Members" key="" value="" text="Diagnoses" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[AgeD].[All Patients]" key="" value="" text="All Patients" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <filter spec="([PatGrpD].[H1].[Tested].&amp;[Yes],[DocD].[H1].[Doctor Group].&amp;[&lt;null&gt;])" key="" value="" text="Advanced filter" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="true" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </filter>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Allergy Count]" key="" value="" text="Avg Allergy Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Filter Examples/One Member Filter.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="One Member Filter" folderName="Filter Examples" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.706Z" createdBy="" category="How To" bookCover="{background: {style:&apos;opacity:1;&apos;,src:&apos;covers/8506133_s.jpg&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: left;font-weight: bold;color:rgb(255, 255, 255);font-family:lucida sans unicode;font-size:22px;padding:3.25px;&apos;},image: {style:&apos;text-align: left;display: none;padding:0px;&apos;,src:&apos;covers/6000799_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DiagD].[H1].[Diagnoses].Members" key="" value="" text="Diagnoses" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[AgeD].[All Patients]" key="" value="" text="All Patients" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[GenD].[H1].[Gender].Members" key="" value="" text="Gender" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <filter spec="[AllerD].[H1].[Allergies].&amp;[wheat]" key="" value="" text="wheat" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </filter>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Filter Examples/Simple Filters.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Simple Filters" folderName="Filter Examples" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.712Z" createdBy="" category="How To" bookCover="{background: {style:&apos;opacity:1;&apos;,src:&apos;covers/8506133_s.jpg&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: left;font-weight: bold;color:rgb(255, 255, 255);font-family:lucida sans unicode;font-size:22px;padding:3.25px;&apos;},image: {style:&apos;text-align: left;display: none;padding:0px;&apos;,src:&apos;covers/6000799_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DiagD].[H1].[Diagnoses].Members" key="" value="" text="Diagnoses" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[AgeD].[All Patients]" key="" value="" text="All Patients" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <filter spec="[HomeD].[H1].[ZIP].Members" key="" value="" text="ZIP" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </filter>
  <filter spec="[ColorD].[H1].[Favorite Color].Members" key="" value="" text="Favorite Color" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </filter>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Allergy Count]" key="" value="" text="Avg Allergy Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Filter Examples/Using Searchable Measure.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Using Searchable Measure" folderName="Filter Examples" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.718Z" createdBy="" category="How To" bookCover="{background: {style:&apos;opacity:1;&apos;,src:&apos;covers/8506133_s.jpg&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: left;font-weight: bold;color:rgb(255, 255, 255);font-family:lucida sans unicode;font-size:22px;padding:3.25px;&apos;},image: {style:&apos;text-align: left;display: none;padding:0px;&apos;,src:&apos;covers/6000799_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DiagD].[H1].[Diagnoses].Members" key="" value="" text="Diagnoses" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[AgeD].[All Patients]" key="" value="" text="All Patients" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[GenD].[H1].[Gender].Members" key="" value="" text="Gender" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <filter spec="%Search.&amp;[[Measures].[Allergy Count]&gt;=2]" key="" value="" text="Advanced filter" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="true" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </filter>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- KPIs & Plugins/Demo Filter Interoperability.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Demo Filter Interoperability" folderName="KPIs &amp; Plugins" title="" description="Demonstrates that filters from KPIs can affect pivot tables, and vice versa" keywords="Patients,KPIs" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.459Z" createdBy="" category="How To" bookCover="{background: {},header: {text:&apos;$type&apos;,style:&apos;font-family:helvetica;&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: center;font-variant: small-caps;color:rgb(0, 80, 35);font-family:georgia;margin:0px;&apos;},image: {style:&apos;width:132.5px;height:105px;&apos;,src:&apos;covers/14170040_s.jpg&apos;,imageStyle:&apos;width:132.5px;height:105px;&apos;},subtitle: {},footer: {text:&apos;KPIs&apos;,style:&apos;background-color:teal;&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="8" gridCols="1" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="This widget displays a pivot table" dataSource="Use in Dashboards/Patient Allergy Counts by Age &amp; Gender.pivot" dataLink="" drillDownDataSource="" sidebarContent="Favor Color filter affects both widgets" showSidebar="true" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="1" rowSpanL="3" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="*" targetProperty="[ColorD].[H1].[Favorite Color]" location="widget" type="auto" controlClass="" label="Favorite Color" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="analyzer">0</property>
  </widget>
  <widget name="Widget2" type="pivot" subtype="pivot" subtypeClass="" title="This widget displays a KPI based on the same cube" dataSource="DemoInteroperability.kpi" dataLink="" drillDownDataSource="" sidebarContent="Doctor Group filter affects both widgets" showSidebar="true" sidebarWidth="" maximized="false" homeRowL="3" homeColL="0" colSpanL="1" rowSpanL="5" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="*" targetProperty="[DocD].[H1].[Doctor Group]" location="widget" type="auto" controlClass="" label="Doctor Group" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="Yaxis" location="widget" type="auto" controlClass="" label="Y axis" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- KPIs & Plugins/KPI with Crossjoin.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="KPI with Crossjoin" folderName="KPIs &amp; Plugins" title="" description="" keywords="Patients,KPIs" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.57Z" createdBy="" category="How To" bookCover="{background: {},header: {text:&apos;$type&apos;,style:&apos;font-family:helvetica;&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: center;font-variant: small-caps;color:rgb(0, 80, 35);font-family:georgia;margin:0px;&apos;},image: {style:&apos;width:132.5px;height:105px;&apos;,src:&apos;covers/14170040_s.jpg&apos;,imageStyle:&apos;width:132.5px;height:105px;&apos;},subtitle: {},footer: {text:&apos;KPIs&apos;,style:&apos;background-color:teal;&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="7" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="scoreCardWidget" subtype="regular" subtypeClass="" title="Scorecard that shows KPI with MDX CROSSJOIN query" dataSource="CrossjoinKPI.kpi" dataLink="" drillDownDataSource="" top="16" left="15" width="764" height="393" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="5" rowSpanL="1" showToolbar="true" theme="">
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="itemNo" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Age Grp / Patient Grp" width="" align="" subtype="" style="" display="label" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Patient Count" width="" align="" subtype="" style="" display="value" format="" showAs="value" valueColumn="true" summary="" summaryValue="" dataValue="Patient Count" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Avg Test Score" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Test Score" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Avg Allergy Count" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Allergy Count" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
  <widget name="Widget2" type="pivot" subtype="pivot" subtypeClass="" title="Pivot table that shows the same KPI" dataSource="CrossjoinKPI.kpi" dataLink="" drillDownDataSource="" top="452" left="15" width="544" height="342" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="0" colSpanL="4" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- KPIs & Plugins/MDX Based KPI.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="MDX Based KPI" folderName="KPIs &amp; Plugins" title="" description="" keywords="Patients,KPIs" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.495Z" createdBy="" category="How To" bookCover="{background: {},header: {text:&apos;$type&apos;,style:&apos;font-family:helvetica;&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: center;font-variant: small-caps;color:rgb(0, 80, 35);font-family:georgia;margin:0px;&apos;},image: {style:&apos;width:132.5px;height:105px;&apos;,src:&apos;covers/14170040_s.jpg&apos;,imageStyle:&apos;width:132.5px;height:105px;&apos;},subtitle: {},footer: {text:&apos;KPIs&apos;,style:&apos;background-color:teal;&apos;}}" scheme="" worklistCount="2" snapTo="false" snapGrid="true" gridRows="2" gridCols="3" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="Pivot table widget that displays an MDX-based KPI" dataSource="DemoMDX.kpi" dataLink="" drillDownDataSource="" top="16" left="15" width="468" height="342" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="2" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="*" targetProperty="[homed].[h1].[zip]" location="dashboard" type="auto" controlClass="" label="ZIP Code" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[gend].[h1].[gender]" location="dashboard" type="auto" controlClass="" label="Gender" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[aged].[h1].[age group]" location="dashboard" type="auto" controlClass="" label="Age Group" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <dataProperty name="" label="Patient Count" width="" align="" subtype="" style="" display="" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="PatCount" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Average Test Score" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="AvgTestScore" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
  <widget name="Widget2" type="scoreCardWidget" subtype="regular" subtypeClass="" title="Scorecard that displays the same KPI" dataSource="DemoMDX.kpi" dataLink="" drillDownDataSource="" top="396" left="15" width="549" height="403" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="0" colSpanL="2" rowSpanL="1" showToolbar="true" theme="">
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="label" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Patient Count" width="" align="" subtype="" style="" display="" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="PatCount" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Average \nTest Score" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="AvgTestScore" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
</dashboard>

<!-- KPIs & Plugins/Patients Plugins.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Patients Plugins" folderName="KPIs &amp; Plugins" title="" description="" keywords="Patients,plugins,KPIs" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-07T22:51:09.477Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;},image: {style:&apos;width:135px;&apos;,src:&apos;covers/isc_general.png&apos;,imageStyle:&apos;width:135px;height:64px;&apos;},footer: {text:&apos;plugins&apos;,style:&apos;background-color:rgb(224, 0, 0);&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="Median and Percentile Plugins" dataSource="KPIs &amp; Plugins/Patients1.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <property name="analyzer">0</property>
  </widget>
  <widget name="Widget2" type="pivot" subtype="pivot" subtypeClass="" title="DeepSee.PluginDemo class" dataSource="KPIs &amp; Plugins/Patients2.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="1" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- KPIs & Plugins/Patients1.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Patients1" folderName="KPIs &amp; Plugins" title="" description="" keywords="Patients,plugins,KPIs" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-07T22:48:41.31Z" createdBy="" category="How To" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DiagD].[H1].[Diagnoses].Members" key="" value="" text="Diagnoses" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Avg Test Score]" key="" value="" text="Avg Test Score" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[MEASURES].[MEDIAN TEST SCORE]" key="" value="" text="Median Test Score" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[MEASURES].[90TH PERCENTILE TEST SCORE]" key="" value="" text="90th Percentile Test Score" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- KPIs & Plugins/Patients2.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Patients2" folderName="KPIs &amp; Plugins" title="" description="" keywords="Patients,plugins,KPIs" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T15:34:44.213Z" createdBy="" category="How To" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[PatGrpD].[H1].[Patient Group].Members" key="" value="" text="Patient Group" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="%KPI(&quot;PluginDemo&quot;,&quot;PatientCount&quot;,,&quot;%CONTEXT&quot;)" key="" value="" text="PatientCount" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="%KPI(&quot;PluginDemo&quot;,&quot;HighScoreCount&quot;,,&quot;%CONTEXT&quot;)" key="" value="" text="HighScoreCount" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- KPIs & Plugins/SQL Based KPI.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="SQL Based KPI" folderName="KPIs &amp; Plugins" title="" description="" keywords="Patients,KPIs" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.499Z" createdBy="" category="How To" bookCover="{background: {},header: {text:&apos;$type&apos;,style:&apos;font-family:helvetica;&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: center;font-variant: small-caps;color:rgb(0, 80, 35);font-family:georgia;margin:0px;&apos;},image: {style:&apos;width:132.5px;height:105px;&apos;,src:&apos;covers/14170040_s.jpg&apos;,imageStyle:&apos;width:132.5px;height:105px;&apos;},subtitle: {},footer: {text:&apos;KPIs&apos;,style:&apos;background-color:teal;&apos;}}" scheme="" worklistCount="2" snapTo="false" snapGrid="true" gridRows="2" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="SQL-Based KPI" dataSource="DemoSQL.kpi" dataLink="" drillDownDataSource="" top="16" left="15" width="462" height="336" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="0" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="*" targetProperty="ZipCode" location="dashboard" type="auto" controlClass="" label="Zip Code" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <dataProperty name="" label="Patient Count" width="" align="" subtype="" style="" display="" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="PatCount" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Average Age" width="" align="" subtype="" style="" display="" format="#.##" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="AvgAge" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
  <widget name="Widget2" type="scoreCardWidget" subtype="regular" subtypeClass="" title="SQL-Based KPI" dataSource="DemoSQL.kpi" dataLink="" drillDownDataSource="" top="389" left="15" width="543" height="397" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="label" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Patient Count" width="" align="" subtype="" style="" display="" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="PatCount" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Average Age" width="" align="" subtype="" style="" display="" format="#.##" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="AvgAge" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
</dashboard>

<!-- Listing with Filters.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Listing with Filters" folderName="" title="" description="" keywords="Patients,listings" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.595Z" createdBy="" category="" bookCover="{background: {style:&apos;background-color:white;opacity:0.39;&apos;,src:&apos;covers/10954578_s.jpg&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;font-family:verdana;left:21.875px;left:21.875px;width:102.5px;&apos;},image: {style:&apos;width:135px;height:122.5px;&apos;,src:&apos;covers/views_128.gif&apos;,imageStyle:&apos;width:135px;height:122.5px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="false" gridRows="2" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="" dataSource="Use in Dashboards/Patients Listing.pivot" dataLink="" drillDownDataSource="" top="0" left="0" width="699" height="690" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="*" targetProperty="[HomeD].[H1].[ZIP]" location="widget" type="auto" controlClass="" label="Home ZIP Code" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[AgeD].[H1].[Age Group]" location="widget" type="auto" controlClass="" label="Age Group" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[DiagD].[H1].[Diagnoses]" location="widget" type="auto" controlClass="" label="Diagnoses" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- Patients Compound Cube.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Patients Compound Cube" folderName="" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.566Z" createdBy="" category="Advanced Modeling" bookCover="{background: {style:&apos;background-color:white;opacity:0.25;&apos;,src:&apos;covers/9937753_s.jpg&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-variant: small-caps;color:rgb(192, 0, 0);&apos;},image: {style:&apos;left:18.75px;left:18.75px;width:97.5px;height:102.5px;&apos;,src:&apos;covers/appointment_scheduler_128.gif&apos;,imageStyle:&apos;width:97.5px;height:102.5px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="false" snapGrid="true" gridRows="4" gridCols="5" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="Pivot table using dimension shared by two cubes" dataSource="Use in Dashboards/Compound Cube Demo 3.pivot" dataLink="" drillDownDataSource="" top="17" left="587" width="760" height="294" sidebarContent="Second measure ignores the dimension used for rows" showSidebar="true" sidebarWidth="" maximized="false" homeRowL="0" homeColL="2" colSpanL="3" rowSpanL="2" showToolbar="true" theme="">
    <property name="analyzer">0</property>
  </widget>
  <widget name="Widget2" type="pivot" subtype="pivot" subtypeClass="" title="Pivot table using dimension shared by all cubes" dataSource="Use in Dashboards/Compound Cube Demo 1.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="563" height="387" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="2" rowSpanL="3" showToolbar="true" theme="">
    <property name="analyzer">0</property>
  </widget>
  <widget name="Widget3" type="pivot" subtype="pivot" subtypeClass="" title="Pivot table using dimension shared by two cubes" dataSource="Use in Dashboards/Compound Cube Demo 2.pivot" dataLink="" drillDownDataSource="" top="315" left="587" width="760" height="338" sidebarContent="Third measure ignores the dimension used for rows" showSidebar="true" sidebarWidth="" maximized="false" homeRowL="2" homeColL="2" colSpanL="3" rowSpanL="2" showToolbar="true" theme="">
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- Pivot Features/Conditional Formatting.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Conditional Formatting" folderName="Pivot Features" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;},image: {src:&apos;covers/8534551_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="" maxRows="" borderLeftCell="" borderRightCell="" borderTopCell="" borderBottomCell="" borderLeftCol="" borderRightCol="" borderTopCol="" borderBottomCol="" borderLeftRow="" borderRightRow="" borderTopRow="" borderBottomRow="" showFilters="" filterTableStyle="" filterTableCaptionStyle="" filterTableItemStyle="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[AllerSevD].[H1].[Allergy Severities].Members" key="" value="" text="Allergy Severities" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[%COUNT]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Avg Age]" key="" value="" text="Avg Age" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="Avg Age (ex. 1)" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Avg Age]" key="" value="" text="Avg Age" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="Avg Age (ex. 2)" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Avg Age]" key="" value="" text="Avg Age" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="Avg Age (ex. 3)" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <formatRule range=",2" operator="&lt;" value="35" style="background:rgb(240, 0, 0);" text="" icon="" iconCount="1"></formatRule>
  <formatRule range=",3" operator="&lt;" value="35" style="" text="replacement text" icon="" iconCount="1"></formatRule>
  <formatRule range=",4" operator="&lt;" value="35" style="" text="" icon="deepsee/red_dot_24.gif" iconCount="1"></formatRule>
</pivot>

<!-- Pivot Features/Members Sorted by Measure Value.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Members Sorted by Measure Value" folderName="Pivot Features" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T21:08:18.213Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;color:rgb(10, 92, 116);font-family:impact;&apos;},image: {style:&apos;height:107.5px;&apos;,src:&apos;covers/11965112_s.jpg&apos;,imageStyle:&apos;width:64px;height:107.5px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[HomeD].[H1].[City].Members" key="" value="" text="City" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="true" orderExpression="Measures.[Avg Age]" orderDirection="BDESC" aggEnabled="false" aggFunction="SUM" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].%COUNT" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Age]" key="" value="" text="Avg Age" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Pivot Features/Summary with All Member.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Summary with All Member" folderName="Pivot Features" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.724Z" createdBy="" category="How To" bookCover="{background: {style:&apos;opacity:0.17;&apos;},header: {text:&apos;$type&apos;,style:&apos;display: none;&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(136, 50, 10);font-family:courier new;&apos;},image: {style:&apos;top:53.125px;left:15.625px;left:15.625px;width:115px;height:112.5px;&apos;,src:&apos;covers/14790293_s.jpg&apos;,imageStyle:&apos;width:115px;height:112.5px;&apos;},subtitle: {text:&apos;summary lines&apos;,style:&apos;top:159.375px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[AgeD].[H1].[Age Group].Members" key="" value="" text="Age Group" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[AgeD].[All Patients]" key="" value="" text="All Patients" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Test Score]" key="" value="" text="Avg Test Score" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Pivot Features/Summary with SUM function.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Summary with SUM function" folderName="Pivot Features" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.729Z" createdBy="" category="How To" bookCover="{background: {style:&apos;opacity:0.17;&apos;},header: {text:&apos;$type&apos;,style:&apos;display: none;&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(0, 80, 35);font-family:courier new;&apos;},image: {style:&apos;top:53.125px;left:15.625px;left:15.625px;width:115px;height:112.5px;&apos;,src:&apos;covers/14790293_s.jpg&apos;,imageStyle:&apos;width:115px;height:112.5px;&apos;},subtitle: {text:&apos;summary lines&apos;,style:&apos;top:159.375px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[HomeD].[H1].[City].Members" key="" value="" text="City" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[HomeD].[H1].[City].Members" key="" value="" text="City" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="true" aggFunction="SUM" aggFunctionParm="" levelCaption="Summary" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[HomeD].[H1].[City].CurrentMember.Properties(&quot;Population&quot;)" key="" value="" text="Population" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[HomeD].[H1].[City].CurrentMember.Properties(&quot;Principal Export&quot;)" key="" value="" text="Principal Export" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Pivot Features/Summary with Total Row.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Summary with Total Row" folderName="Pivot Features" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.735Z" createdBy="" category="How To" bookCover="{background: {style:&apos;opacity:0.17;&apos;},header: {text:&apos;$type&apos;,style:&apos;display: none;&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(0, 75, 152);font-family:courier new;&apos;},image: {style:&apos;top:53.125px;left:15.625px;left:15.625px;width:115px;height:112.5px;&apos;,src:&apos;covers/14790293_s.jpg&apos;,imageStyle:&apos;width:115px;height:112.5px;&apos;},subtitle: {text:&apos;summary lines&apos;,style:&apos;top:159.375px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="true" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[HomeD].[H1].[City].Members" key="" value="" text="City" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[HomeD].[H1].[City].CurrentMember.Properties(&quot;Population&quot;)" key="" value="" text="Population" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[HomeD].[H1].[City].CurrentMember.Properties(&quot;Principal Export&quot;)" key="" value="" text="Principal Export" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Pivot Features/Top 5 Example.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Top 5 Example" folderName="Pivot Features" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-08T20:05:42.742Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(224, 0, 0);&apos;},image: {style:&apos;left:21.875px;left:21.875px;width:95px;height:90px;&apos;,src:&apos;covers/11074205_s.jpg&apos;,imageStyle:&apos;width:95px;height:90px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[ProfD].[H1].[Industry].Members" key="" value="" text="Industry" headEnabled="true" headCount="5" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="false" aggFunction="SUM" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Pivot Variables/Year Variable In Patients.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Year Variable In Patients" folderName="Pivot Variables" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-12-16T22:41:53.329Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;color:rgb(0, 75, 152);&apos;},image: {src:&apos;covers/10302135_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},subtitle: {text:&apos;pivot variables&apos;,style:&apos;color:rgb(0, 75, 152);&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printSubtitleOn="" showUser="" printPageSize="" printOrientation="1" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="" maxRows="" borderLeftCell="" borderRightCell="" borderTopCell="" borderBottomCell="" borderLeftCol="" borderRightCol="" borderTopCol="" borderBottomCol="" borderLeftRow="" borderRightRow="" borderTopRow="" borderBottomRow="" showFilters="" showListingFilters="" showDate="" listingFontSize="" showZebraStripes="" filterTableStyle="" filterTableCaptionStyle="" filterTableItemStyle="" nowDisplayFormat="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnAxisOptions>
  <rowLevel spec="[BirthD].[H1].[Year].Members" key="" value="" text="Year" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </rowLevel>
  <filter spec="[BIRTHD].[SELECTEDYEAR]" key="SELECTEDYEAR" value="" text="SelectedYear" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </filter>
  <measure spec="[Measures].[%COUNT]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </measure>
  <measure spec="[Measures].[Allergy Count]" key="" value="" text="Allergy Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </measure>
  <calculatedMember dimension="BirthD" memberName="SelectedYear" valueExpression="[BirthD].[H1].[Year].$VARIABLE.Year" formatString="" solveOrder="0"></calculatedMember>
</pivot>

<!-- Real Time Updates.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Real Time Updates" folderName="" title="" description="" keywords="Patients,KPIs" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.467Z" createdBy="" category="" bookCover="{background: {style:&apos;background-color:white;top:12.5px;&apos;,src:&apos;covers/9160582_s.jpg&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;,style:&apos;text-align: left;&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: left;font-weight: bold;color:rgb(0, 75, 152);font-family:arial narrow;top:12.5px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;,style:&apos;display: none;&apos;}}" scheme="" worklistCount="2" snapTo="true" snapGrid="true" gridRows="9" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="Patients by Patient Group" dataSource="Use in Dashboards/Patients by Group.pivot" dataLink="" drillDownDataSource="" top="16" left="13" width="716" height="242" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="8" rowSpanL="3" showToolbar="true" theme="">
    <property name="analyzer">0</property>
  </widget>
  <widget name="Widget2" type="meter" subtype="textMeter" subtypeClass="" title="Sample Size" dataSource="DemoDataChanges.kpi" dataLink="" drillDownDataSource="" top="497" left="13" width="248" height="148" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="6" homeColL="0" colSpanL="4" rowSpanL="2" showToolbar="true" theme="">
    <control name="" action="AddPatients" target="" targetProperty="" location="dashboard" type="auto" controlClass="" label="Add Patients" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="ChangeFavoriteColors" target="" targetProperty="" location="dashboard" type="auto" controlClass="" label="Change Favorite Colors" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="ChangePatientGroups" target="" targetProperty="" location="dashboard" type="auto" controlClass="" label="Change Patient Groups" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="AddEncounters" target="" targetProperty="" location="dashboard" type="auto" controlClass="" label="Add Encounters" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="DeleteSomePatients" target="" targetProperty="" location="dashboard" type="auto" controlClass="" label="Delete Some Patients" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="ChangeSomeDoctors" target="" targetProperty="" location="dashboard" type="auto" controlClass="" label="Change Some Doctors" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="refresh" target="*" targetProperty="" location="dashboard" type="timer" controlClass="" timeout="5" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <dataProperty name="" label="Patient Count" width="" align="" subtype="" style="" display="" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="PatCount" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
  <widget name="Widget3" type="pivot" subtype="pivot" subtypeClass="" title="Patients by Doctor Group" dataSource="Use in Dashboards/Patients by Doctor Group.pivot" dataLink="" drillDownDataSource="" top="235" left="13" width="245" height="256" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="3" homeColL="0" colSpanL="4" rowSpanL="3" showToolbar="true" theme="">
    <property name="analyzer">0</property>
  </widget>
  <widget name="Widget4" type="pivot" subtype="pivot" subtypeClass="" title="Patients by Favorite Color" dataSource="Use in Dashboards/Patients by Favorite Color.pivot" dataLink="" drillDownDataSource="" top="235" left="274" width="275" height="353" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="3" homeColL="4" colSpanL="4" rowSpanL="5" showToolbar="true" theme="">
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- Two Subject Areas Together.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Two Subject Areas Together" folderName="" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.477Z" createdBy="" category="Advanced Modeling" bookCover="{background: {style:&apos;background-color:white;opacity:1;&apos;,src:&apos;covers/10001316_s.jpg&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: left;font-weight: bold;color:white;padding:7px;top:9.375px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="2" snapTo="false" snapGrid="true" gridRows="10" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="Patients by Age &amp; Gender" dataSource="Use in Dashboards/Patients by Age Bucket &amp; Gender.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="347" height="388" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="1" rowSpanL="5" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="*" targetProperty="[HomeD].[H1].[City]" location="dashboard" type="auto" controlClass="" label="City" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <property name="analyzer">0</property>
    <property name="chartToggle">none</property>
  </widget>
  <widget name="Widget2" type="pivot" subtype="pivot" subtypeClass="" title="Rainfall by Period" dataSource="Use in Dashboards/Rainfall by Period.pivot" dataLink="" drillDownDataSource="" top="16" left="365" width="314" height="586" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="1" colSpanL="1" rowSpanL="10" showToolbar="true" theme="">
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <property name="analyzer">0</property>
    <property name="chartToggle">none</property>
  </widget>
</dashboard>

<!-- Use in Dashboards/Compound Cube Demo 1.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Compound Cube Demo 1" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.83Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="CompoundCube/CompoundCube" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[HomeD].[H1].[ZIP].Members" key="" value="" text="ZIP" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
    <childLevels spec="[HomeD].[H1].[City].Members" key="" value="" text="City" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
    </childLevels>
  </rowLevel>
  <measure spec="[Measures].[Patient Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Doctor Count]" key="" value="" text="Doctor Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Monthly Rainfall Inches]" key="" value="" text="Avg Monthly Rainfall Inches" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Compound Cube Demo 2.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Compound Cube Demo 2" folderName="Use in Dashboards" title="" description="Note that the Avg Monthly Rainfall Inches measure is aggregated across all records; this is because its parent cube does not define the DocTypeD dimension." keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.836Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="CompoundCube/CompoundCube" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DocTypeD].[H1].[Doctor Type].Members" key="" value="" text="Doctor Type" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[Patient Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Doctor Count]" key="" value="" text="Doctor Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Monthly Rainfall Inches]" key="" value="" text="Avg Monthly Rainfall Inches" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Compound Cube Demo 3.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Compound Cube Demo 3" folderName="Use in Dashboards" title="" description="Note that the Doctor Count measure is aggregated across all records; this is because its parent cube does not define the BirthD dimension." keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.842Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="CompoundCube/CompoundCube" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[BirthD].[H1].[Decade].Members" key="" value="" text="Decade" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[Patient Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Doctor Count]" key="" value="" text="Doctor Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Monthly Rainfall Inches]" key="" value="" text="Avg Monthly Rainfall Inches" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Demo Bubble Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Demo Bubble Chart" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.812Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[HomeD].[H1].[City].Members" key="" value="" text="City" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[%COUNT]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[HomeD].[H1].[City].CurrentMember.Properties(&quot;Population&quot;)" key="" value="" text="Population" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Use in Dashboards/Demo Combo Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Demo Combo Chart" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.818Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[AgeD].[H1].[Age Bucket].Members" key="" value="" text="Age Bucket" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[MEASURES].[AVG ALLERGY COUNT]" key="" value="" text="Avg Allergy Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Demo High Low Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Demo High Low Chart" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.824Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[HomeD].[H1].[City].Members" key="" value="" text="City" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <filter spec="[AllerD].[H1].[Allergies].Members" key="%NOT &amp;[&lt;null&gt;]" value="" text="NOT&amp;#160;No Data Available" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </filter>
  <measure spec="[Measures].[Age]" key="" value="" text="Age" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="false" aggFunction="MIN" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Age]" key="" value="" text="Age" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="false" aggFunction="MAX" aggFunctionParm="" levelCaption="Maximum Age" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Age]" key="" value="" text="Avg Age" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </measure>
</pivot>

<!-- Use in Dashboards/For Cities Scorecard.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="For Cities Scorecard" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.753Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[HomeD].[H1].[City].Members" key="" value="" text="City" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[%COUNT]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[HomeD].[H1].[City].CurrentMember.Properties(&quot;Population&quot;)" key="" value="" text="Population" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Use in Dashboards/For Meter Demos.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="For Meter Demos" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.747Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <measure spec="[Measures].[%COUNT]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Test Score]" key="" value="" text="Avg Test Score" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[MEASURES].[UNIQUE DOCTOR COUNT]" key="" value="" text="Unique Doctor Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/For Patients Scorecard.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="For Patients Scorecard" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-08-31T21:50:04.786Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DiagD].[H1].[Diagnoses].Members" key="" value="" text="Diagnoses" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <filter spec="[DiagD].[H1].[Diagnoses].Members" key="%NOT &amp;[&lt;null&gt;]" value="" text="NOT&amp;#160;None" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </filter>
  <measure spec="[Measures].[%COUNT]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Age]" key="" value="" text="Avg Age" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Test Score]" key="" value="" text="Avg Test Score" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Patient Allergy Counts by Age & Gender.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Patient Allergy Counts by Age &amp; Gender" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.765Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[AgeD].[H1].[Age Group].Members" key="" value="" text="Age Group" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[AgeD].[All Patients]" key="" value="" text="All Patients" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[GenD].%TopMembers" key="" value="" text="GenD" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Allergy Count]" key="" value="" text="Allergy Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Patient Counts & Allergy Counts.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Patient Counts &amp; Allergy Counts" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.801Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[AgeD].[H1].[Age Group].Members" key="" value="" text="Age Group" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
    <childLevels spec="[AgeD].[H1].[Age Bucket].Members" key="" value="" text="Age Bucket" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
    </childLevels>
  </rowLevel>
  <columnLevel spec="[GenD].[H1].[Gender].Members" key="" value="" text="Gender" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[MEASURES].[AVG ALLERGY COUNT]" key="" value="" text="Avg Allergy Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Patients by Age Bucket & Gender (with All).pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Patients by Age Bucket &amp; Gender (with All)" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.794Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[AgeD].[H1].[Age Bucket].Members" key="" value="" text="Age Bucket" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[AgeD].[All Patients]" key="" value="" text="All Patients" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[GenD].[H1].[Gender].Members" key="" value="" text="Gender" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[AgeD].[All Patients]" key="" value="" text="All Patients" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Patients by Age Bucket & Gender.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Patients by Age Bucket &amp; Gender" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.789Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[AgeD].[H1].[Age Bucket].Members" key="" value="" text="Age Bucket" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[GenD].[H1].[Gender].Members" key="" value="" text="Gender" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Patients by Doctor Group.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Patients by Doctor Group" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.783Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DocD].[H1].[Doctor Group].Members" key="" value="" text="Doctor Group" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[AgeD].[All Patients]" key="" value="" text="All Patients" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[%COUNT]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Use in Dashboards/Patients by Favorite Color.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Patients by Favorite Color" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.777Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="true" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[ColorD].[H1].[Favorite Color].Members" key="" value="" text="Favorite Color" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[%COUNT]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Use in Dashboards/Patients by Group.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Patients by Group" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.771Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[PatGrpD].[H1].[Patient Group].Members" key="" value="" text="Patient Group" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[AgeD].[All Patients]" key="" value="" text="All Patients" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[%Count]" key="" value="" text="Patient Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Age]" key="" value="" text="Avg Age" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Test Score]" key="" value="" text="Avg Test Score" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Avg Enc Count]" key="" value="" text="Avg Enc Count" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Patients Listing.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Patients Listing" folderName="Use in Dashboards" title="" description="" keywords="Patients,listings" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.848Z" createdBy="" category="" bookCover="" mdx="DRILLTHROUGH SELECT FROM [Patients]" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="Patients" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
</pivot>

<!-- Use in Dashboards/Rainfall by Period.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Rainfall by Period" folderName="Use in Dashboards" title="" description="" keywords="Patients" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.807Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="CityRainfall" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[BirthD].[H1].[Period].Members" key="" value="" text="Period" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Rainfall Inches]" key="" value="" text="Rainfall Inches" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Widget Examples/Bubble Charts.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Bubble Charts" folderName="Widget Examples" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.503Z" createdBy="" category="Widgets" bookCover="{background: {style:&apos;background:white;&apos;,src:&apos;covers/bubble_chart.png&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;color:teal;font-family:lucida sans unicode;font-size:28px;top:50px;&apos;},image: {style:&apos;display: none;top:34.375px;left:12.5px;left:12.5px;width:115px;height:115px;&apos;,imageStyle:&apos;width:115px;height:115px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="bubbleChart" subtypeClass="bubbleChart" title="Sample Bubble Chart" dataSource="Use in Dashboards/Demo Bubble Chart.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="589" height="479" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="1" rowSpanL="2" showToolbar="true" theme="" dataColorList="">
    <control name="" action="applyFilter" target="" targetProperty="[HomeD].[H1].[ZIP]" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="XgridLines">1</property>
    <property name="YgridLines">1</property>
    <property name="analyzer">1</property>
    <property name="chartToggle">chart</property>
    <property name="labelStyle"></property>
    <property name="labels">1</property>
    <property name="legendPos">none</property>
    <property name="showQuadrant">1</property>
    <property name="showRegression">0</property>
    <property name="title">City Populations and Patient Counts</property>
    <property name="valueLabels">1</property>
  </widget>
  <widget name="Sample with Five Series" type="pivot" subtype="bubbleChart" subtypeClass="bubbleChart" title="Sample with Five Series" dataSource="BubbleChartDemo.kpi" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="1" colSpanL="1" rowSpanL="2" showToolbar="true" theme="" dataColorList="">
    <property name="legendPos">none</property>
    <override name="legend">{hidden:true,legendLabels:'radius',legendPosition:'right',_type:'chartLegend'}</override>
  </widget>
</dashboard>

<!-- Widget Examples/Combo Chart.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Combo Chart" folderName="Widget Examples" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.507Z" createdBy="" category="Widgets" bookCover="{background: {style:&apos;background-color:white;&apos;,src:&apos;covers/combo_chart.png&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:green;font-family:courier new;font-size:19px;top:103.125px;left:18.75px;left:18.75px;width:100px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},subtitle: {},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="comboChart" subtypeClass="comboChart" title="Sample Combo Chart with Two Y-Axes" dataSource="Use in Dashboards/Demo Combo Chart.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="735" height="515" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="2" rowSpanL="2" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="XgridLines">1</property>
    <property name="YgridLines">1</property>
    <property name="analyzer">1</property>
    <property name="chartToggle">chart</property>
    <property name="legendPos">none</property>
    <property name="valueLabels">1</property>
    <dataSeries type="bar" markerShape="" color="" yAxisIndex="0" hasLegend="true"></dataSeries>
    <dataSeries type="bar" markerShape="" color="" yAxisIndex="1" hasLegend="true"></dataSeries>
    <override name="comboChart">{legendVisible:'false',plotAreaStyle:'stroke:black;fill:none;',seriesColorsOverride:',',seriesYAxes:'0,1',valueLabelsVisible:true,xAxis:{minorGridLines:true,_type:'axis'},yAxisList:[{_type:'axis'},{labelPosition:'right',_type:'axis'}],seriesTypes:'area,line',_type:'comboChart'}</override>
  </widget>
</dashboard>

<!-- Widget Examples/Custom Portlet.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Custom Portlet" folderName="Widget Examples" title="" description="" keywords="Custom" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.467Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;},image: {style:&apos;top:53.125px;left:12.5px;left:12.5px;width:115px;height:112.5px;&apos;,src:&apos;covers/clock_128.gif&apos;,imageStyle:&apos;width:115px;height:112.5px;&apos;},footer: {text:&apos;custom&apos;,style:&apos;background-color:rgb(224, 0, 0);&apos;}}" scheme="" worklistCount="2" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="Your Logo Here" companyLogo="" companyStyle="">
  <widget name="Widget1" type="portlet" subtype="DeepSee.Model.PortletDemo.ClockPortlet" subtypeClass="" title="Custom Portlet with Settings" dataSource="" dataLink="" drillDownDataSource="" top="235" left="552" width="180" height="236" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="5" rowSpanL="4" showToolbar="true" theme="">
    <property name="CIRCLE">1</property>
    <property name="LOGO">Local Time</property>
    <property name="OFFSET">0</property>
    <property name="STEP">10</property>
    <property name="UTC">0</property>
  </widget>
</dashboard>

<!-- Widget Examples/High Low Chart.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="High Low Chart" folderName="Widget Examples" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.511Z" createdBy="" category="Widgets" bookCover="{background: {style:&apos;background-color:white;top:25px;&apos;,src:&apos;covers/high_low_chart.png&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(55, 42, 15);font-family:verdana;top:140.625px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="hilowChart" subtypeClass="hilowChart" title="Sample High Low Chart" dataSource="Use in Dashboards/Demo High Low Chart.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="840" height="459" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="1" rowSpanL="2" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="" targetProperty="[DiagD].[H1].[Diagnoses]" location="widget" type="auto" controlClass="" label="Diagnoses" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="[PatGrpD].[H1].[Patient Group]" location="widget" type="auto" controlClass="" label="Patient Group" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="XgridLines">1</property>
    <property name="YgridLines">0</property>
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
    <property name="title">High and Low Ages by City</property>
    <property name="valueLabels">1</property>
    <override name="hilowChart">{legendVisible:'false',maxLabelLen:8,plotAreaStyle:'stroke:black;fill:none;',plotStyle:'fill:rgb(231,192,80);',selectedItemStyle:'fill: none;stroke: red;stroke-width:0.1;',seriesColorsOverride:'rgb(0,185,255)',title:'High and Low Ages by City',valueLabelsVisible:true,xAxis:{majorGridLines:false,minorGridLines:true,_type:'axis'},yAxisList:[{minorGridLines:true,title:'Age',_type:'axis'}],_type:'hilowChart'}</override>
    <override name="legend">{hidden:true,_type:'chartLegend'}</override>
  </widget>
</dashboard>

<!-- Widget Examples/Meter with Range & Threshold.dashboard -->
<!--
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Meter with Range &amp; Threshold" folderName="Widget Examples" title="" description="" keywords="Patients,KPIs" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.573Z" createdBy="" category="Widgets" bookCover="" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="3" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="" type="meter" subtype="speedometer" subtypeClass="" title="Diastolic" dataSource="BPDiastolic.kpi" dataLink="" drillDownDataSource="" top="16" left="347" width="322" height="374" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="1" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="Diastolic" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
  <widget name="" type="meter" subtype="speedometer" subtypeClass="" title="Systolic" dataSource="BPSystolic.kpi" dataLink="" drillDownDataSource="" top="16" left="15" width="329" height="374" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="value" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Systolic" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
</dashboard>
-->

<!-- Widget Examples/Meters A.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Meters A" folderName="Widget Examples" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-06T03:45:52.508Z" createdBy="" category="Widgets" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:indigo;font-family:lucida sans unicode;font-size:22px;top:28.125px;&apos;},image: {style:&apos;top:81.25px;height:95px;&apos;,src:&apos;covers/speedometer.png&apos;,imageStyle:&apos;height:95px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="5" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="meter" subtype="textMeter" subtypeClass="" title="Sample text meter with 3 properties" dataSource="Use in Dashboards/For Meter Demos.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="684" height="152" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="*" targetProperty="[AllerD].[H1].[Allergies]" location="widget" type="auto" controlClass="" label="Allergies" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[AllerSevD].[H1].[Allergy Severities]" location="widget" type="auto" controlClass="" label="Allergy Severities" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <dataProperty name="" label="Patient Count" width="" align="" subtype="" style="" display="value" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Patient Count" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="50000" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Avg Test Score" width="" align="" subtype="textMeter" style="" display="" format="#.##" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="Avg Test Score" targetValue="" thresholdLower="75" thresholdUpper="100" rangeLower="" rangeUpper="" baseValue="" override="{height:55,width:223,x:223,y:0,dataBinding:&apos;Avg Test Score&apos;,label:&apos;Avg Test Score&apos;,thresholdLower:&apos;70&apos;,value:73.89733840304183,format:&apos;#.##&apos;,_type:&apos;textMeter&apos;}"></dataProperty>
    <dataProperty name="" label="Unique Doctor Count" width="" align="" subtype="" style="" display="" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="Unique Doctor Count" targetValue="" thresholdLower="" thresholdUpper="50" rangeLower="" rangeUpper="50" baseValue="" override=""></dataProperty>
    <property name="analyzer">0</property>
  </widget>
  <widget name="Widget2" type="meter" subtype="speedometer" subtypeClass="" title="Sample speedometer with 3 properties" dataSource="Use in Dashboards/For Meter Demos.pivot" dataLink="" drillDownDataSource="" top="187" left="15" width="683" height="333" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="0" colSpanL="1" rowSpanL="2" showToolbar="true" theme="">
    <dataProperty name="" label="Patient Count" width="" align="" subtype="speedometer" style="" display="value" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Patient Count" targetValue="" thresholdLower="" thresholdUpper="1000000" rangeLower="" rangeUpper="" baseValue="" override="{height:223,width:223,dataBinding:&apos;Patient Count&apos;,label:&apos;Patient Count&apos;,thresholdUpper:&apos;1000000&apos;,value:1000,_type:&apos;speedometer&apos;}"></dataProperty>
    <dataProperty name="" label="Avg Test Score" width="" align="" subtype="speedometer" style="" display="" format="#.##" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="Avg Test Score" targetValue="" thresholdLower="75" thresholdUpper="100" rangeLower="" rangeUpper="100" baseValue="" override="{height:223,width:223,x:223,y:0,dataBinding:&apos;Avg Test Score&apos;,label:&apos;Avg Test Score&apos;,rangeUpper:&apos;100&apos;,thresholdLower:&apos;70&apos;,thresholdUpper:&apos;100&apos;,value:73.89733840304183,odometerFormat:&apos;#.##&apos;,_type:&apos;speedometer&apos;}"></dataProperty>
    <dataProperty name="" label="Unique Doctor Count" width="" align="" subtype="speedometer" style="" display="" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="Unique Doctor Count" targetValue="" thresholdLower="" thresholdUpper="50" rangeLower="" rangeUpper="50" baseValue="" override="{height:223,width:223,x:446,y:0,dataBinding:&apos;Unique Doctor Count&apos;,label:&apos;Unique Doctor Count&apos;,rangeUpper:&apos;50&apos;,thresholdUpper:&apos;50&apos;,value:41,_type:&apos;speedometer&apos;}"></dataProperty>
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- Widget Examples/Meters B.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Meters B" folderName="Widget Examples" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.485Z" createdBy="" category="Widgets" bookCover="{background: {style:&apos;display: none;background-color:white;opacity:0.34;&apos;,src:&apos;covers/mixed_chart.png&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:indigo;font-family:lucida sans unicode;font-size:22px;top:28.125px;&apos;},image: {style:&apos;width:132.5px;height:125px;&apos;,src:&apos;covers/12353881_s.jpg&apos;,imageStyle:&apos;width:132.5px;height:125px;&apos;},footer: {text:&apos;$owner&apos;,style:&apos;display: none;&apos;}}" scheme="" worklistCount="2" snapTo="false" snapGrid="true" gridRows="2" gridCols="3" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="meter" subtype="fuelGauge" subtypeClass="" title="Fuel gauge" dataSource="Use in Dashboards/For Meter Demos.pivot" dataLink="" drillDownDataSource="" top="16" left="502" width="275" height="329" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="0" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <dataProperty name="" label="Avg Test Score" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Test Score" targetValue="" thresholdLower="50" thresholdUpper="100" rangeLower="50" rangeUpper="100" baseValue="" override=""></dataProperty>
  </widget>
  <widget name="Widget2" type="meter" subtype="speedometer" subtypeClass="" title="Speedometer" dataSource="Use in Dashboards/For Meter Demos.pivot" dataLink="" drillDownDataSource="" top="16" left="271" width="228" height="330" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="2" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <dataProperty name="" label="Avg Test Score" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Test Score" targetValue="" thresholdLower="50" thresholdUpper="100" rangeLower="50" rangeUpper="100" baseValue="" override=""></dataProperty>
  </widget>
  <widget name="Widget3" type="meter" subtype="trafficLight" subtypeClass="" title="Traffic light" dataSource="Use in Dashboards/For Meter Demos.pivot" dataLink="" drillDownDataSource="" top="383" left="501" width="273" height="288" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="1" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <dataProperty name="" label="Avg Test Score" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Test Score" targetValue="" thresholdLower="50" thresholdUpper="100" rangeLower="50" rangeUpper="100" baseValue="" override=""></dataProperty>
  </widget>
  <widget name="Widget4" type="meter" subtype="lightBar" subtypeClass="" title="Light bar" dataSource="Use in Dashboards/For Meter Demos.pivot" dataLink="" drillDownDataSource="" top="383" left="15" width="226" height="285" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="2" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <dataProperty name="" label="Avg Test Score" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Test Score" targetValue="" thresholdLower="50" thresholdUpper="100" rangeLower="50" rangeUpper="100" baseValue="" override=""></dataProperty>
  </widget>
  <widget name="Widget5" type="meter" subtype="smiley" subtypeClass="" title="Smiley face" dataSource="Use in Dashboards/For Meter Demos.pivot" dataLink="" drillDownDataSource="" top="383" left="244" width="254" height="288" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="1" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <dataProperty name="" label="Avg Test Score" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Test Score" targetValue="" thresholdLower="50" thresholdUpper="100" rangeLower="50" rangeUpper="100" baseValue="" override=""></dataProperty>
  </widget>
  <widget name="Widget6" type="meter" subtype="textMeter" subtypeClass="" title="Text meter" dataSource="Use in Dashboards/For Meter Demos.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="253" height="331" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="*" targetProperty="[PatGrpD].[H1].[Patient Group]" location="dashboard" type="auto" controlClass="" label="Patient Group" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[DiagD].[H1].[Diagnoses]" location="dashboard" type="auto" controlClass="" label="Diagnoses" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <dataProperty name="" label="Avg Test Score" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Test Score" targetValue="" thresholdLower="" thresholdUpper="100" rangeLower="" rangeUpper="100" baseValue="" override=""></dataProperty>
  </widget>
</dashboard>

<!-- Widget Examples/Scorecard with Plot Boxes.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Scorecard with Plot Boxes" folderName="Widget Examples" title="" description="" keywords="Patients" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-08-31T21:50:04.739Z" createdBy="" category="Widgets" bookCover="{background: {style:&apos;background-color:white;opacity:0.3;&apos;,src:&apos;covers/plotboxes.png&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(252, 0, 0);font-size:21px;top:46.875px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="scoreCardWidget" subtype="regular" subtypeClass="" title="Patients by Diagnosis" dataSource="Use in Dashboards/For Patients Scorecard.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="783" height="275" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="7" rowSpanL="4" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="*" targetProperty="[AgeD].[H1].[Age Group]" location="widget" type="auto" controlClass="" label="Age Group" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[PatGrpD].[H1].[Patient Group]" location="widget" type="auto" controlClass="" label="Patient Group" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="itemNo" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="label" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Patient \nCount" width="" align="" subtype="" style="" display="value" format="#" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="400" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Avg Age" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Age" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Avg Age" width="" align="" subtype="" style="" display="plotBox" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Age" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="0" rangeUpper="100" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Avg \nTest Score" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Avg Test Score" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <property name="analyzer">0</property>
  </widget>
  <widget name="Widget2" type="scoreCardWidget" subtype="regular" subtypeClass="" title="Patients by City" dataSource="Use in Dashboards/For Cities Scorecard.pivot" dataLink="" drillDownDataSource="" top="322" left="15" width="783" height="415" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="4" homeColL="0" colSpanL="7" rowSpanL="6" showToolbar="true" theme="">
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="itemNo" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="label" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Patient \nCount" width="" align="" subtype="" style="" display="value" format="" showAs="value" valueColumn="false" summary="sum" summaryValue="" dataValue="Patient Count" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Patient \nCount" width="" align="" subtype="" style="" display="plotBox" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Patient Count" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="150" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Population" width="" align="" subtype="" style="" display="value" format="" showAs="value" valueColumn="false" summary="sum" summaryValue="" dataValue="Population" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="% of \nPopulation" width="" align="" subtype="" style="" display="value" format="" showAs="target%" valueColumn="false" summary="" summaryValue="" dataValue="Patient Count" targetValue="Population" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- Widget Examples/Scorecard with Trend Lines.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Scorecard with Trend Lines" folderName="Widget Examples" title="" description="" keywords="Patients,KPIs,trendlines" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-09T17:18:48.473Z" createdBy="" category="Widgets" bookCover="{background: {style:&apos;background-color:white;opacity:0.41;&apos;,src:&apos;covers/trend_lines.png&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-variant: small-caps;color:crimson;font-family:verdana;font-size:19px;top:50px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;}}" scheme="" worklistCount="0" snapTo="false" snapGrid="true" gridRows="3" gridCols="3" canResize="true" canModify="true" showTitleBar="true" companyName="Patients Sample" companyLogo="" companyStyle="">
  <widget name="Widget1" type="scoreCardWidget" subtype="regular" subtypeClass="" title="Birth Trend by Decade" dataSource="DemoTrendLines.kpi" dataLink="" drillDownDataSource="" top="16" left="15" width="714" height="800" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="3" rowSpanL="3" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="" targetProperty="[homed].[h1].[zip]" location="widget" type="auto" controlClass="" label="ZIP Code" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="[gend].[h1].[gender]" location="widget" type="auto" controlClass="" label="Gender" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="label" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Patient Count" width="" align="" subtype="" style="" display="" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="PatCount" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Birth Trend by Decade" width="" align="" subtype="" style="" display="trendLine" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="BirthTrendByDecade" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
</dashboard>



</items>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.CityCube">
<Description><![CDATA[
This class defines a cube based on DeepSee.Study.City. 
<p>Where applicable, the dimension, hierarchy, and level definitions here use the same names
as in the Patients cube, so that these cubes can be used together.
]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61859,40028</TimeCreated>
<DependsOn>DeepSee.Study.City</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="Cities"  displayName="Cities"  
 owner="_SYSTEM"
 caption="Cities"
 sourceClass="DeepSee.Study.City"
 >

<measure name="City Count" displayName="City Count" 
sourceExpression="1" 
aggregate="SUM" />

<measure name="Population" displayName="Population" 
sourceProperty="Population" 
aggregate="SUM"/>

<measure name="Avg Population" displayName="Avg Population" 
sourceProperty="Population" 
aggregate="AVG"/>

<dimension name="HomeD" displayName="CityD" 
allCaption="All Cities" allDisplayName="All Cities">
<hierarchy name="H1">
<level name="ZIP" displayName="ZIP" 
sourceProperty="PostalCode" />
<level name="City" displayName="City" 
sourceProperty="Name" >
<property name="Population" displayName="Population" 
sourceProperty="Population" />
<property name="Principal Export" displayName="Principal Export" 
sourceProperty="PrincipalExport"  />
</level>
</hierarchy>
</dimension>

<listing name="Details" displayName="Details" 
fieldList='Name as "City",Population,PostalCode as "ZIP Code",PrincipalExport as "Principal Export"'>
</listing>

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.CompoundCube.CityRainfall">
<Description><![CDATA[
This class is for use in a compound cube (and can also be used on its own).
<p>To view the cube definition, open this class in Studio.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62005,60754.811179</TimeCreated>
<DependsOn>DeepSee.Study.CityRainfall,DeepSee.Model.CompoundCube.Patients</DependsOn>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="CompoundCube/CityRainfall" 
displayName="CompoundCube/CityRainfall"  
owner="_SYSTEM"
sourceClass="DeepSee.Study.CityRainfall"
countMeasureName="Rainfall Observation Count"
 >

<dimension name="BirthD" displayName="DateD" 
type="time" sourceProperty="MonthAndYear" 
allCaption="All Dates" allDisplayName="All Dates" 
sharesFrom="CompoundCube/Patients">
<hierarchy name="H1" displayName="H1" >
<level name="Year" displayName="Year" timeFunction="Year" />
<level name="MonthYear" displayName="MonthYear" timeFunction="MonthYear" />
</hierarchy>
<hierarchy name="H2" displayName="H2">
<level name="Month" displayName="Month" timeFunction="MonthNumber" />
</hierarchy>
</dimension>

<dimension name="HomeD" 
displayName="CitiesD" 
allCaption="All Locations"
allDisplayName="All Locations" 
sharesFrom="CompoundCube/Patients">
<hierarchy name="H1" >
<level name="ZIP" displayName="ZIP" 
sourceProperty="City.PostalCode" />
<level name="City" displayName="City" 
sourceProperty="City.Name" >
<property name="Population" displayName="Population" 
sourceProperty="City.Population" />
<property name="Principal Export" displayName="Principal Export" 
sourceProperty="City.PrincipalExport"  />
</level>
</hierarchy>
</dimension>



<measure name="Monthly Rainfall Inches" 
displayName="Monthly Rainfall Inches"
sourceProperty="InchesOfRain" 
 aggregate="SUM"/>

<measure name="Avg Monthly Rainfall Inches" 
displayName="Avg Monthly Rainfall Inches"
sourceProperty="InchesOfRain" 
 aggregate="AVG"/>

<listing name="Details" displayName="Details" 
  fieldList='City->Name as "City",MonthAndYear as "Date",InchesOfRain as "Inches of Rain"'>
</listing>

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.CompoundCube.CompoundCube">
<Description><![CDATA[
This class defines a compound cube.
<p>To view the cube definition, open this class in Studio.]]></Description>
<Super>%DeepSee.SubjectArea</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>
<DependsOn>DeepSee.Model.CompoundCube.Patients,DeepSee.Model.CompoundCube.Doctors,DeepSee.Model.CompoundCube.CityRainfall</DependsOn>

<XData name="SubjectArea">
<Description>
This XData definition defines the SubjectArea.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/subjectarea</XMLNamespace>
<Data><![CDATA[
<subjectArea name="CompoundCube/CompoundCube"  displayName="CompoundCube/CompoundCube"
	baseCube="CompoundCube/Patients,CompoundCube/Doctors,CompoundCube/CityRainfall"  >
	</subjectArea>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.CompoundCube.Doctors">
<Description><![CDATA[
This class is for use in a compound cube (and can also be used on its own).
<p>To view the cube definition, open this class in Studio.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62005,60778.817319</TimeCreated>
<DependsOn>DeepSee.Study.Doctor,DeepSee.Model.CompoundCube.Patients</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="CompoundCube/Doctors" 
displayName="CompoundCube/Doctors" 
owner="_SYSTEM"
sourceClass="DeepSee.Study.Doctor"
nullReplacement="None"
 disabled="false"
 countMeasureName="Doctor Count"
>

<dimension name="DocD" displayName="DocD" 
allCaption="All Doctors"  allDisplayName="All Doctors"
sharesFrom="CompoundCube/Patients">
<hierarchy name="H1" displayName="H1">
<level name="Doctor Group" displayName="Doctor Group" 
sourceProperty="DoctorGroup" 
 factName="DxDocGroup"/>
<level name="Doctor" displayName="Doctor" 
sourceExpression="%source.%ID" 
factName="DxDoc">
<property name="Name" displayName="Name" 
isName="true" 
sort="asc" 
sourceExpression='%source.LastName_", "_%source.FirstName'
 factName="PxDoc"/>
</level>
</hierarchy>
</dimension>

<dimension name="DocTypeD" displayName="DocTypeD" 
hasAll="false" sharesFrom="CompoundCube/Patients" >
<hierarchy name="H1" displayName="H1">
<level name="Doctor Type" displayName="Doctor Type"
sourceProperty="DoctorType"
factName="DxDocType" />
</hierarchy>
</dimension>

<dimension name="HomeD" 
displayName="CitiesD" 
allCaption="All Locations"
allDisplayName="All Locations" 
sharesFrom="CompoundCube/Patients">
<hierarchy name="H1" >
<level name="ZIP" displayName="ZIP" 
sourceProperty="MainCity.PostalCode" />
<level name="City" displayName="City" 
sourceProperty="MainCity.Name" >
<property name="Population" displayName="Population" 
sourceProperty="MainCity.Population" />
<property name="Principal Export" displayName="Principal Export" 
sourceProperty="MainCity.PrincipalExport"  />
</level>
</hierarchy>
</dimension>

<measure name="Patients Per Week" 
displayName="Patients Per Week" 
sourceProperty="PatientsPerWeek" 
 aggregate="SUM"/>

<measure name="Avg Patients Per Week" 
displayName="Avg Patients Per Week" 
sourceProperty="PatientsPerWeek" 
 aggregate="AVG"/>
 
<listing name="Details" displayName="Details" 
  fieldList='FirstName as "First Name",LastName as "Last Name",DoctorType as "Doctor Type",DoctorGroup as "Doctor Group",PatientsPerWeek as "Patients Per Week",MainCity->Name AS "Main City"'>
</listing>

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.CompoundCube.Patients">
<Description><![CDATA[
This class is for use in a compound cube (and can also be used on its own).
<p>To view the cube definition, open this class in Studio.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62005,60800.822584</TimeCreated>
<DependsOn>DeepSee.Study.Patient</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="CompoundCube/Patients" 
displayName="CompoundCube/Patients" 
owner="_SYSTEM"
sourceClass="DeepSee.Study.Patient"
nullReplacement="None"
disabled="false"
countMeasureName="Patient Count"
>

<dimension name="BirthD" displayName="BirthD" type="time" 
sourceProperty="BirthDate" hasAll="true" allDisplayName="All Patients"
description="These levels group patients by birth date">
<hierarchy name="H1" displayName="H1">
<level name="Decade" displayName="Decade" timeFunction="Decade" />
<level name="Year"  displayName="Year" timeFunction="Year"  />
<level name="Quarter Year" displayName="Quarter Year" timeFunction="QuarterYear" />
<level name="Period" displayName="Period" timeFunction="MonthYear" />
<level name="Date" displayName="Date" timeFunction="DayMonthYear" />
</hierarchy>
</dimension>

<dimension name="DocD" displayName="DocD" hasAll="false"
description="These levels group patients by their primary care physician (if any)."
>
<hierarchy name="H1" displayName="H1">
<level name="Doctor Group" displayName="Doctor Group" 
sourceProperty="PrimaryCarePhysician.DoctorGroup" 
 factName="DxDocGroup" description="Doctors are assigned to Doctor Groups, in this fictitious study."/>
<level name="Doctor" displayName="Doctor" 
sourceExpression="%source.PrimaryCarePhysician" 
factName="DxDoc" description="Duplicate names are possible. Keys are forced to be unique.">
<property name="Name" displayName="Name" 
isName="true" 
sort="asc" 
sourceExpression='%source.PrimaryCarePhysician.LastName_", "_%source.PrimaryCarePhysician.FirstName'
 factName="PxDoc"/>
</level>
</hierarchy>
</dimension>

<dimension name="DocTypeD" displayName="DocTypeD" 
hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Doctor Type" displayName="Doctor Type"
sourceProperty="PrimaryCarePhysician.DoctorType"
factName="DxDocType" />
</hierarchy>
</dimension>

<dimension name="HomeD" displayName="HomeD" hasAll="false" 
description="These levels group patients by home address.">
<hierarchy name="H1" displayName="H1">
<level name="ZIP" displayName="ZIP" 
sourceProperty="HomeCity.PostalCode" 
 factName="DxHomeZIP"
 description="In this demo, cities are contained inside ZIP codes."/>
<level name="City" displayName="City" 
sourceProperty="HomeCity.Name"
factName="DxHomeCity" 
description="This level has two properties: one string and one numeric.">
<property name="Population" displayName="Population" 
sourceProperty="HomeCity.Population" 
 factName="PxPopulation"/>
<property name="Principal Export" displayName="Principal Export" 
sourceProperty="HomeCity.PrincipalExport" 
 factName="PxExport" />
</level>
</hierarchy>
</dimension>

<measure name="Avg Allergy Count" displayName="Avg Allergy Count" 
type="integer"
sourceExpression='##class(DeepSee.Model.PatientsCube).GetAllergyCount(%source.%ID)' 
 aggregate="AVG" />

<measure name="Avg Test Score" displayName="Avg Test Score" 
sourceProperty="TestScore" 
 aggregate="AVG"/>

<listing name="Details" displayName="Details" 
 fieldList='PatientID,Age,Gender,HomeCity->Name AS "Home City",TestScore AS "Test Score"'
  orderBy="Age,Gender" /> 

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.ConnectorCube">
<Description>
This class contains a cube based on DeepSee.Model.ConnectorExample. </Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61899,61234.157329</TimeCreated>
<DependsOn>DeepSee.Model.ConnectorExample</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="ConnectorCube" displayName="ConnectorCube"  
 owner="_SYSTEM"
 sourceClass="DeepSee.Model.ConnectorExample"
 nullReplacement="None"
>

<dimension name="AgeD" displayName="AgeD" 
sourceProperty="Age" 
allCaption="All Patients"  allDisplayName="All Patients">
<hierarchy name="H1" displayName="H1">
<level name="Age Group" displayName="Age Group"
rangeExpression="(,29]:0 to 29;[30,59]:30 to 59;[60,):60+;"
 factName="DxAgeGroup" />
<level name="Age Bucket" displayName="Age Bucket"
rangeExpression="(,9]:0 to 9;[10,19]:10 to 19;[20,29]:20 to 29;[30,39]:30 to 39;[40,49]:40 to 49;[50,59]:50 to 59;[60,69]:60 to 69;[70,79]:70 to 79;[80,):80+;"
 factName="DxAgeBucket"/>
<level name="Age" displayName="Age"
factName="DxAge">
</level>
</hierarchy>
</dimension>

<dimension name="GenD" displayName="GenD" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Gender" displayName="Gender"  
sourceProperty="Gender" 
rangeExpression="F:Female;M:Male;" 
 factName="DxGender"/>
</hierarchy>
</dimension>

<dimension name="HomeD" displayName="HomeD" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="City" displayName="City" 
sourceProperty="HomeCity" 
factName="DxHomeCity">
</level>
</hierarchy>
</dimension>

<dimension name="PatGrpD" displayName="PatGrpD" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Patient Group" displayName="Patient Group" 
sourceProperty="PatientGroup"
 factName="DxPatGroup"/>
</hierarchy>
</dimension>

<measure name="Patient Count" displayName="Patient Count" 
sourceExpression="1" 
 aggregate="SUM" />
 
<measure name="Age" displayName="Age" 
sourceProperty="Age" 
aggregate="SUM" 
 factName="MxAge"/>

<measure name="Avg Age" displayName="Avg Age" 
sourceProperty="Age" 
 aggregate="AVG"/>

<measure name="Test Score" displayName="Test Score" 
sourceProperty="TestScore" 
 aggregate="SUM" searchable="true"/>

<measure name="Avg Test Score" displayName="Avg Test Score" 
sourceProperty="TestScore" 
 aggregate="AVG"/>

<listing name="Default listing" disabled="false" listingType="table" 
fieldList="ID,PatientID,Gender,Age,HomeCity,PatientGroup,TestScore" 
 sourceClass="DeepSee.Model.ConnectorExample">
 </listing>

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.ConnectorExample">
<Description>
This class defines an example of a data connector.
The query for this connector uses a local table.</Description>
<Super>%DeepSee.DataConnector</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61899,61234.157329</TimeCreated>

<Parameter name="SUPPORTSIDLIST">
<Description>
This connector supports "idlist" mode</Description>
<Default>1</Default>
</Parameter>

<Parameter name="SUPPORTSSINGLE">
<Description>
This connector supports "single" mode</Description>
<Default>1</Default>
</Parameter>

<XData name="Output">
<Description>
This XData definition defines the output of this connector.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/connector/output</XMLNamespace>
<Data><![CDATA[
<connector> 
<property name="ID" displayName="ID" 
idKey="true"
 sourceProperty="%ID" /> 

<property name="PatientID" displayName="PatientID" 
sourceProperty="PatientID" /> 

<property name="Gender" displayName="Gender" 
sourceProperty="Gender" /> 

<property name="Age" displayName="Age" 
sourceProperty="Age" type="%Integer"/>

<property name="HomeCity" displayName="Home City" 
sourceProperty="HomeCity"/>

<property name="PatientGroup" displayName="Patient Group" 
sourceProperty="PatientGroup" 
 transform='$CASE(%val,"A":"Group A","B":"Group B",:%val)' />

<property name="TestScore" displayName="Test Score" 
sourceProperty="TestScore" type="%Integer"/>

</connector>
]]></Data>
</XData>

<Method name="%OnGetSourceResultSet">
<Description>
Implementation</Description>
<FormalSpec><![CDATA[&pParameters,*pResultSet]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set tSC = $$$OK
  set pResultSet = ""
  try {
      //write the basic SQL query
      set sql="SELECT %ID,PatientID,Gender,Age,HomeCity->Name AS ""HomeCity"""
             _",PatientGroup,TestScore From DeepSee_Study.Patient "

    if (..%mode="single") {
        set sql=sql_"WHERE %ID = ?"
    } elseif (..%mode="idlist") {
        set sql = sql _ "WHERE %ID in (select _DSsourceId from " 
                  _ ..%listingTable _ " where _DSqueryKey = ?)"
    }

    set tStatement = ##class(%SQL.Statement).%New()
    set tSC = tStatement.%Prepare(.sql)

    If $$$ISERR(tSC) {
        set ex = ##class(%Exception.StatusException).CreateFromStatus(tSC)
        throw ex
    }

    if (..%mode="single") {
        // pass the ID as a parameter
        set pResultSet = tStatement.%Execute(..%singleId)
    } elseif (..%mode="idlist") {
        // pass in the listing key as a parameter
        set pResultSet = tStatement.%Execute(..%listingKey)
    } else {
        set pResultSet = tStatement.%Execute()
    }

    //check %SQLCODE and report if there's an error
    If pResultSet.%SQLCODE {
        set sqlcode=pResultSet.%SQLCODE
        set message=pResultSet.%Message
        set ex = ##class(%Exception.SQL).CreateFromSQLCODE(sqlcode, message)
        throw ex
        } 

  }
  catch(ex) {
      Set tSC = ex.AsStatus()
  }

  Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.BPDiastolic">
<Description>
1-row hardcoded KPI for use in demonstrating ranges and thresholds in a *meter*</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62014,57342.189447</TimeCreated>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="BPDiastolic" sourceType="mdx" 
mdx='SELECT {70} ON 0 FROM [PATIENTS]'
>
<property name="Diastolic"  columnNo="1" />

</kpi>
]]></Data>
</XData>

<Method name="%OnLoadKPI">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ..%rangeLower=40
    set ..%thresholdLower=60
    set ..%thresholdUpper=80
    set ..%rangeUpper=100
    quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.BPSystolic">
<Description>
1-row hardcoded KPI for use in demonstrating ranges and thresholds in a *meter*</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62014,57342.189447</TimeCreated>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="BPSystolic" sourceType="mdx" 
mdx='SELECT {110} ON 0 FROM [PATIENTS]'
>
<property name="Systolic"  columnNo="1" />

</kpi>
]]></Data>
</XData>

<Method name="%OnLoadKPI">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ..%rangeLower=70
    set ..%thresholdLower=90
    set ..%thresholdUpper=120
    set ..%rangeUpper=190
    quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.BubbleChartDemo">
<Description>
Sample KPI for HoleFoods Demo.
This KPI provides synthetic corporate data and defines some simple actions.</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63174,57007.385199</TimeCreated>

<XData name="KPI">
<Description>
This XData definition defines the KPI.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="BubbleChartDemo" sourceType="manual">
<property name="x"/>
<property name="y"/>
<property name="radius"/>
<property name="color"/>
<property name="opacity"/>

</kpi>
]]></Data>
</XData>

<Method name="%OnLoadKPI">
<Description>
Notify subclass that KPI is has just be executed.
This is a good place to override properties, such as range and threshold.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set n=1
	set ..%seriesNames(n)="Alpha"
	set ..%data(n,"x")=15
	set ..%data(n,"y")=327
	set ..%data(n,"radius")=$R(6)+4
	set ..%data(n,"color")=$R(3)
	set ..%data(n,"opacity")=$R(7)+4
	
	set n=2
	set ..%seriesNames(n)="Beta"
	set ..%data(n,"x")=10
	set ..%data(n,"y")=200
	set ..%data(n,"radius")=$R(6)+4
	set ..%data(n,"color")=$R(3)
	set ..%data(n,"opacity")=$R(7)+4
	
	set n=3
	set ..%seriesNames(n)="Gamma"
	set ..%data(n,"x")=22
	set ..%data(n,"y")=256
	set ..%data(n,"radius")=$R(6)+4
	set ..%data(n,"color")=$R(3)
	set ..%data(n,"opacity")=$R(7)+4

	set n=4
	set ..%seriesNames(n)="Delta"
	set ..%data(n,"x")=17
	set ..%data(n,"y")=193
	set ..%data(n,"radius")=$R(6)+4
	set ..%data(n,"color")=$R(3)
	set ..%data(n,"opacity")=$R(7)+4

	set n=5
	set ..%seriesNames(n)="Epsilon"
	set ..%data(n,"x")=27
	set ..%data(n,"y")=281
	set ..%data(n,"radius")=$R(6)+4
	set ..%data(n,"color")=$R(3)
	set ..%data(n,"opacity")=$R(7)+4

	set n=6
	set ..%seriesNames(n)="Zeta"
	set ..%data(n,"x")=33
	set ..%data(n,"y")=301
	set ..%data(n,"radius")=$R(6)+4
	set ..%data(n,"color")=$R(3)
	set ..%data(n,"opacity")=$R(7)+4

	set n=7
	set ..%seriesNames(n)="Eta"
	set ..%data(n,"x")=25
	set ..%data(n,"y")=310
	set ..%data(n,"radius")=$R(6)+4
	set ..%data(n,"color")=$R(3)
	set ..%data(n,"opacity")=$R(7)+4

	set n=8
	set ..%seriesNames(n)="Theta"
	set ..%data(n,"x")=17
	set ..%data(n,"y")=399
	set ..%data(n,"radius")=$R(6)+4
	set ..%data(n,"color")=$R(3)
	set ..%data(n,"opacity")=$R(7)+4

	set n=9
	set ..%seriesNames(n)="Iota"
	set ..%data(n,"x")=35
	set ..%data(n,"y")=175
	set ..%data(n,"radius")=$R(6)+4
	set ..%data(n,"color")=$R(3)
	set ..%data(n,"opacity")=$R(7)+4

	set n=10
	set ..%seriesNames(n)="Kappa"
	set ..%data(n,"x")=28
	set ..%data(n,"y")=255
	set ..%data(n,"radius")=$R(6)+4
	set ..%data(n,"color")=$R(3)
	set ..%data(n,"opacity")=$R(7)+4

	set ..%seriesCount=n
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.DemoCrossjoin">
<Description>
This KPI demonstrates how to use a crossjoin query in a KPI
</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62549,42378.158893</TimeCreated>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="CrossjoinKPI" displayName="CrossjoinKPI" sourceType="manual" >
<property columnNo="1" name="Patient Count" />
<property columnNo="2" name="Avg Test Score"/>
<property columnNo="3" name="Avg Allergy Count"/>

</kpi>
]]></Data>
</XData>

<Method name="%OnExecute">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set tSC = $$$OK
 try
 {
  set MDX = "SELECT {[Measures].[%COUNT],[Measures].[Avg Test Score],"
  _"[Measures].[Avg Allergy Count]} ON 0,"
  _"NONEMPTYCROSSJOIN([AgeD].[Age Group].Members,[PatGrpD].[Patient Group].Members) ON 1 "
  _"FROM [Patients]"
 
 //create a result set from the query
 set dsRS=##class(%DeepSee.ResultSet).%New()
 set status = dsRS.%PrepareMDX(MDX)
 set status = dsRS.%Execute()
 
 //Get the number of rows and columns
 set rowCount = dsRS.%GetRowCount()
 set colCount = dsRS.%GetColumnCount()

 set ..%seriesCount=rowCount

 //Iterate through rows
 for rows = 1:1:..%seriesCount
 {
  //row dimensions are stored as labels. The second parameter is 2 for rows (columns would be 1)
  do dsRS.%GetOrdinalLabel(.label,2,rows)
        
   //Fetch the two labels and concatenate them to create name of series
   set ..%seriesNames(rows)=label(2)_" / "_label(1)

  //Iterate through the columns 
  for col = 1:1:colCount
   {
   //Get value in cell
   set tValue= dsRS.%GetOrdinalValue(col,rows)
            
   //The measures can be taken out of the cells in the ResultSet
   Set:col=1 ..%data(rows,"Patient Count") = tValue
   Set:col=2 ..%data(rows,"Avg Test Score") = tValue
   Set:col=3 ..%data(rows,"Avg Allergy Count") = tValue
   }
  }    
}
 catch(ex) {
     Set tSC = ex.AsStatus()
 }
 quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.DemoDataChanges">
<Description><![CDATA[
<p>This KPI class is intended for use in a dashboard that demos real-time updates using
the Patients sample. The actions in this class invoke methods in that sample
that add, change, or delete data.
<p>The actions are defined in the %OnDashboardAction() callback. The XData block in
this class contains one <action> element for each action, to advertise these actions
to the widget builder in the user interface.
<p>This KPI class also defines a simple one-cell KPI which is displayed in a text meter 
widget on that dashboard. (An alternative way to access these actions from ANY dashboard 
would be to use this class as the actionClass for the Patients cube.)
<p>To see the full KPI definition, open this class in Studio.]]></Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61895,55216</TimeCreated>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="DemoDataChanges" 
displayName="DemoDataChanges"
sourceType="mdx" 
mdx="SELECT MEASURES.[%COUNT] ON 0 FROM [PATIENTS]">

<property name="PatCount" 
displayName="PatCount" 
 columnNo="1" />

<action name="AddPatients" 
displayName="AddPatients" />

<action name="ChangeFavoriteColors" 
displayName="ChangeFavoriteColors" />

<action name="ChangePatientGroups" 
displayName="ChangePatientGroups" />

<action name="AddEncounters" 
displayName="AddEncounters" />

<action name="DeleteSomePatients" 
displayName="DeleteSomePatients" />

<action name="ChangeSomeDoctors" 
displayName="ChangeSomeDoctors" />

</kpi>
]]></Data>
</XData>

<Method name="%OnDashboardAction">
<ClassMethod>1</ClassMethod>
<FormalSpec>pAction:%String,pContext:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set sc = $$$OK
 Try {
      If (pAction = "AddPatients") {
	      Job ##class(DeepSee.Study.Patient).AddPatients()
          }
         Elseif (pAction="ChangeFavoriteColors")
         {
	         Job ##class(DeepSee.Study.PatientDetails).ChangePatientDetails()
               }
         Elseif (pAction="ChangePatientGroups")
         {
	         Job ##class(DeepSee.Study.Patient).ChangePatientGroups()
               }
         Elseif (pAction="AddEncounters")
         {
	         Job ##class(DeepSee.Study.PatientEncounter).AddEncounters()
               }
         Elseif (pAction="DeleteSomePatients")
         {
	         Job ##class(DeepSee.Study.Patient).DeleteSomePatients()
               }
         Elseif (pAction="ChangeSomeDoctors")
         {
	         Job ##class(DeepSee.Study.Doctor).ChangeSomeDoctors()
               }
         }
        Catch(ex) {
                Set sc = ex.AsStatus()
        }
 Quit sc
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.DemoInteroperability">
<Super>DeepSee.Utils.MDXAutoFiltersKPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62235,59016.286755</TimeCreated>

<Parameter name="CUBE">
<Default>PATIENTS</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="DemoInteroperability" displayName="DemoInteroperability"  
sourceType="mdx">

<property name="Patient Count" displayName="Patient Count" columnNo="1" />
<property name="Avg Age" displayName="Avg Age" columnNo="2" />

</kpi>
]]></Data>
</XData>

<Method name="%OnGetMDX">
<FormalSpec><![CDATA[&pMDX:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set yaxis=", NON EMPTY [profd].[h1].[profession].MEMBERS ON 1"
 //check custom filter value
 if (..%filterValues."Yaxis"'="") {
	 set yaxis=", NON EMPTY "_..%filterValues.Yaxis_".MEMBERS ON 1"
 }
 set pMDX="SELECT {MEASURES.[%COUNT],MEASURES.[avg age]} on 0"_yaxis_" FROM "_..#CUBE

 /// append a %FILTER clause to handle any other filter values
 Set pMDX = pMDX _ ..FilterBuilder() 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetFilterList">
<Description>
Implementation.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pFilters:%List,pDataSourceName:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//call method in superclass so we can get filters of the associated cube
	set tSC=##super(.pFilters,pDataSourceName)
	quit:$$$ISERR(tSC) tSC
	
	//update pFilters array to include the custom filter
	set pFilters($i(pFilters)) = $lb("Yaxis","Yaxis",,0)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetFilterMembers">
<Description>
Implementation.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilter:%String,*pMembers:%List,pSearchKey:%String="",pDataSourceName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pMembers=""
	if (pFilter="Yaxis") {
		set pMembers($I(pMembers))=$LB("Home City","[homed].[h1].[city]")
		set pMembers($I(pMembers))=$LB("Favorite Color","[colord].[h1].[favorite color]")
		set pMembers($I(pMembers))=$LB("Profession","[profd].[h1].[profession]")
		set pMembers($I(pMembers))=$LB("Diagnoses","[diagd].[h1].[diagnoses]")
	} else {
    	//call method in superclass so we can get filter members for the associated cube
 		do ..%GetMembersForFilter(..#CUBE,pFilter,.pMembers,pSearchKey)
	}
    quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.DemoMDX">
<Description><![CDATA[
This KPI class uses an MDX query and has three filters.
For each filter, multiSelect is false, which simplifies the query construction.
<p>To see the full KPI definition, open this class in Studio.]]></Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61986,40301.723206</TimeCreated>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="DemoMDX" 
displayName="DemoMDX"  
sourceType="mdx"
mdx="SELECT {[MEASURES].[%COUNT],MEASURES.[avg test score]} ON 0,NON EMPTY [homed].[h1].[city].MEMBERS ON 1 FROM [patients]" 
>

<property name="PatCount" 
displayName="PatCount" 
 columnNo="1" />

<property name="AvgTestScore" 
displayName="AvgTestScore" 
 columnNo="2"/>

<filter name="[aged].[h1].[age group]" 
displayName="AgeGroup"
 multiSelect="false"/>

<filter name="[gend].[h1].[gender]" 
displayName="Gender"
 multiSelect="false" />

<filter name="[homed].[h1].[zip]" 
displayName="ZipCode" 
 multiSelect="false" />

</kpi>
]]></Data>
</XData>

<Method name="%OnGetFilterMembers">
<Description>
In this implementation: Given a filter (in this case an MDX level identifier), 
this method returns the list of members in the internal form needed by the KPI.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilter:%String,*pMembers:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
	
    try {
        do ..%GetMembersForFilter("Patients.cube",pFilter,.pMembers)
    }
    catch(ex) {
        set status = ex.AsStatus()
    }

    quit status
]]></Implementation>
</Method>

<Method name="%OnGetMDX">
<Description>
In this implementation: This method adds a %FILTER clause for each non-null 
filter value. Because multiselect is off, query construction is fairly simple.</Description>
<FormalSpec><![CDATA[&pMDX:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 if (..%filterValues."[homed].[h1].[zip]"'="") 
 {
    set pMDX = pMDX _ " %FILTER [homed].[h1].[zip]." _..%filterValues."[homed].[h1].[zip]"
 } 

 if (..%filterValues."[gend].[h1].[gender]"'="") 
 {
    set pMDX = pMDX _ " %FILTER [gend].[h1].[gender]." _..%filterValues."[gend].[h1].[gender]"
 } 

 if (..%filterValues."[aged].[h1].[age group]"'="") 
 {
    set pMDX = pMDX _ " %FILTER [aged].[h1].[age group]." _..%filterValues."[aged].[h1].[age group]"
 } 

 quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.DemoMDXAutoFilters">
<Super>DeepSee.Utils.MDXAutoFiltersKPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62014,57342.189447</TimeCreated>

<Parameter name="CUBE">
<Default>PATIENTS</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="DemoMDXAutoFilters" displayName="DemoMDXAutoFilters"  
sourceType="mdx"
mdx="SELECT {[Measures].[%COUNT],[Measures].[Avg Age],[Measures].[Avg Allergy Count]} ON 0,NON EMPTY [DiagD].[H1].[Diagnoses].Members ON 1 FROM [Patients]">

<property name="Patient Count" displayName="Patient Count" columnNo="1" />
<property name="Avg Age" displayName="Avg Age" columnNo="2" />
<property name="Avg Allergy Count" displayName="Avg Allergy Count" columnNo="3" />

</kpi>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.KPIs.DemoSQL">
<Description><![CDATA[
This KPI class uses an SQL query and defines one filter.
<p>To see the full KPI definition, open this class in Studio.]]></Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61986,40328.701581</TimeCreated>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="DemoSQL" 
displayName="DemoSQL" 
sourceType="sql">

<property name="PatCount" 
displayName="PatCount" 
 columnNo="2" />

<property name="AvgAge" 
displayName="AvgAge" 
 columnNo="3"/>

<filter name="ZipCode" 
displayName="ZipCode" 
 sql="SELECT DISTINCT PostalCode FROM DeepSee_Study.City"/>

</kpi>
]]></Data>
</XData>

<Method name="%OnGetSQL">
<Description><![CDATA[
This callback defines the basic SQL query and also checks for the current values
in the filter. The callback adds an SQL WHERE clause with one of the following forms,
depending on the user's selections:
<ul>
<li> WHERE HomeCity->PostalCode = zip_code_selected_by_user
<li> WHERE HomeCity->PostalCode IN (zip_code_1,zip_code_2,...)
<li> WHERE HomeCity->PostalCode <> zip_code_selected_by_user
<li> WHERE HomeCity->PostalCode NOT IN (zip_code_1,zip_code_2,...)
</ul>]]></Description>
<FormalSpec><![CDATA[&pSQL:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //this is the start of the SQL query for this KPI
    Set pSQL = "SELECT HomeCity->Name, Count(*),AVG(Age) FROM DeepSee_Study.Patient "
    
    Set where = ""
    //look at %filterValues to see if a filter has been applied to this KPI instance
    If $IsObject(..%filterValues) {
        If (..%filterValues.ZipCode'="") 
        {
            // Call utility method that returns filter data in convenient format
            Set sqlstring=..%GetSQLForFilter("HomeCity->PostalCode","ZipCode")
            Set where = "WHERE "_sqlstring
            
            // Old version -- this works but only if you disable multiselect for this fitler
            // Set where = "WHERE HomeCity->PostalCode = '" _ ..%filterValues.ZipCode _ "' "
        } 
    }

    Set groupby="GROUP BY HomeCity "
    Set orderby="ORDER BY HomeCity "
    // assemble the SQL statement
    Set pSQL=pSQL_where_groupby_orderby
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.DemoTrendLines">
<Description><![CDATA[
This KPI class uses an MDX query that uses %LIST to return a list of values
for use as a trend line in a scorecard.
<p>For each filter, multiSelect is false, which simplifies the query construction.
(The KPI query would be incorrectly formed if the user selected multiple values
or used the EXCLUDE option.) 
The KPI will not work if a URL parameter specifies multiple values or %NOT.
<p>To see the full KPI definition, open this class in Studio.]]></Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62235,59016.286755</TimeCreated>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="DemoTrendLines" 
displayName="DemoTrendLines"  
sourceType="mdx"
mdx="SELECT {MEASURES.[%COUNT],%LIST(birthd.decade.MEMBERS)} ON 0, NON EMPTY homed.city.MEMBERS ON 1 FROM patients"
>

<property name="PatCount" 
displayName="PatCount" 
 columnNo="1" />

<property name="BirthTrendByDecade" 
displayName="BirthTrendByDecade" 
 columnNo="2"/>

<filter name="[gend].[h1].[gender]" 
displayName="Gender"
 multiSelect="false" />

<filter name="[homed].[h1].[zip]" 
displayName="ZipCode" 
 multiSelect="false" />

</kpi>
]]></Data>
</XData>

<Method name="%OnGetFilterMembers">
<Description>
In this implementation: Given a filter (in this case an MDX level identifier), 
this method returns the list of members in the internal form needed by the KPI.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilter:%String,*pMembers:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
	
    try {
        do ..%GetMembersForFilter("Patients.cube",pFilter,.pMembers)
    }
    catch(ex) {
        set status = ex.AsStatus()
    }

    quit status
]]></Implementation>
</Method>

<Method name="%OnGetMDX">
<Description>
In this implementation: Given a filter (in this case an MDX level identifier), 
this method returns the list of members in the internal form needed by the KPI.</Description>
<FormalSpec><![CDATA[&pMDX:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

 if (..%filterValues."[gend].[h1].[gender]"'="") 
 {
    set pMDX = pMDX _ " %FILTER [gend].[h1].[gender]." _..%filterValues."[gend].[h1].[gender]"
 } 

 if (..%filterValues."[homed].[h1].[zip]"'="") 
 {
    set pMDX = pMDX _ " %FILTER [homed].[h1].[zip]." _..%filterValues."[homed].[h1].[zip]"
 } 

 quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.PluginDemo">
<Description><![CDATA[
This simple plug-in demo provides two properties:
<ul>
<li>PatientCount, which behaves the same as the %COUNT measure </li>
<li>HighScoreCount, which counts the patients with TestScore greater than 95. </li>
</ul>]]></Description>
<Super>%DeepSee.KPIPlugIn</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62585,62735.713299</TimeCreated>

<Parameter name="PUBLIC">
<Description>
Display this one in the Analyzer</Description>
<Default>1</Default>
</Parameter>

<Parameter name="BASECUBE">
<Description>
This plug-in works only with one cube</Description>
<Default>Patients</Default>
</Parameter>

<Parameter name="LISTINGSOURCE">
<Description>
Query the fact table rather than the source table</Description>
<Default>FactTable</Default>
</Parameter>

<Parameter name="PLUGINTYPE">
<Description><![CDATA[
Display this plug-in in the Analyzer for drag & drop use]]></Description>
<Default>Pivot</Default>
</Parameter>

<Parameter name="LISTINGFIELDS">
<Description>
Specifies the field list (RETURN clause) of the listing used to supply data for this
plug-in.</Description>
<Type>STRING</Type>
<Default>MxTestScore</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="PluginDemo" displayName="PluginDemo" caption="PluginDemo" >

<property name="PatientCount" displayName="PatientCount" description="Count the records" />
<property name="HighScoreCount" displayName="HighScoreCount" 
description="Count the patients with a high test score (>95)" />

</kpi>
]]></Data>
</XData>

<Method name="%OnGetMDX">
<Description>
Get the base query for this plug-in.</Description>
<FormalSpec><![CDATA[&pMDX:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set pMDX = "SELECT FROM "_..#BASECUBE
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnCompute">
<Description>
As input, this method receives a statement result that is the result of a listing query</Description>
<FormalSpec>pSQLRS:%SQL.StatementResult,pFactCount:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		// place answer in KPI output
		Set ..%seriesCount = 1
		Set ..%seriesNames(1) = "PluginDemo"
		//set Count property of KPI -- just use received pFactCount
        Set ..%data(1,"PatientCount") = pFactCount

		// iterate through result set to get HighScoreCount 
		set n = 0
		Set highcount = 0
		While (pSQLRS.%Next(.tSC)) {
			If $$$ISERR(tSC) Quit
			set n = n + 1
			
			Set testscore = pSQLRS.MxTestScore
			if (testscore>95) {
   			    Set highcount = highcount + 1
			}

 			// update pct complete
			If (n#100 = 0) {
				Do ..%SetPercentComplete(100*(n/pFactCount))
			}
		}
		Set ..%data(1,"HighScoreCount") = highcount

	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.KPIs.Years">
<Description>
This KPI class provides the list of values for the 
Years pivot variable of the Patients cube.</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63173,38875.231848</TimeCreated>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="PatientsYears" 
displayName="PatientsYears"  
sourceType="mdx"
mdx="SELECT [BirthD].[H1].[Year].CURRENTMEMBER.Properties(&quot;Key&quot;) ON 0,NON EMPTY [BirthD].[H1].[Year].Members ON 1 FROM [patients]" 
>

<property name="Value" 
displayName="Value" 
 columnNo="1" />

</kpi>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.PatientsCube">
<Description><![CDATA[
This class contains a cube based on DeepSee.Study.Patients. 
<p>This class also contains utility methods used by this cube.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61894,59044</TimeCreated>
<DependsOn>DeepSee.Study.Patient</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="Patients"  displayName="Patients" 
 owner="_SYSTEM"
 sourceClass="DeepSee.Study.Patient"
 nullReplacement="None"
 defaultListing="Patient details"
 countMeasureCaption="Patient Count"
 description="Represents patients in a fictitious study"
 >

<dimension name="AgeD" displayName="AgeD" 
allCaption="All Patients"  allDisplayName="All Patients"
description="These levels group patients by age at study date. This is a data dimension, not an age dimension.">
<hierarchy name="H1" displayName="H1">
<level name="Age Group" displayName="Age Group"
sourceProperty="Age" 
rangeExpression="(,29]:0 to 29;[30,59]:30 to 59;[60,):60+;"
 factName="DxAgeGroup" 
 description="Group patients by large age ranges"/>
<level name="Age Bucket" displayName="Age Bucket"
sourceExpression="##class(DeepSee.Model.PatientsCube).GetAgeBucket(%source.Age)" 
 factName="DxAgeBucket"
  description="Group patients by age in ten-year bands"/>
<level name="Age" displayName="Age"
sourceProperty="Age"
factName="DxAge"
description="Group patients by age in years" sort="asc numeric"> 
</level>
</hierarchy>
</dimension>

<dimension name="AllerD" displayName="AllerD" hasAll="false" 
description="This level groups patients by their allergies (possibly more than one per patient). No Data Available means the allergy data is null.">
<hierarchy name="H1" displayName="H1">
<level name="Allergies" displayName="Allergies" 
list="true" 
sourceExpression='##class(DeepSee.Model.PatientsCube).GetAllergies(%source.%ID)' nullReplacement="No Data Available"
 factName="DxAllergies" /> 
</hierarchy>
</dimension>

<dimension name="AllerSevD" displayName="AllerSevD" hasAll="false" 
description="This level groups patients by their allergy severities (possibly more than one per patient). No Data Available means the allergy data is null."
>
<hierarchy name="H1" displayName="H1">
<level name="Allergy Severities" displayName="Allergy Severities" 
list="true" 
sourceExpression='##class(DeepSee.Model.PatientsCube).GetAllergySeverities(%source.%ID)'
factName="DxAllergySeverities"  
nullReplacement="No Data Available"> 
 <property name="SeveritySort"  displayName="SeveritySort" 
 sourceExpression="##class(DeepSee.Model.PatientsCube).GetSeveritySort(%value)" 
 factName="PxSort"
  sort="asc numeric" />
</level>
</hierarchy>
</dimension>

<dimension name="BirthD" displayName="BirthD" type="time" 
sourceProperty="BirthDate" hasAll="false"
description="These levels group patients by birth date">
<hierarchy name="H1" displayName="H1">
<level name="Decade" displayName="Decade" timeFunction="Decade" />
<level name="Year"  displayName="Year" timeFunction="Year"  />
<level name="Quarter Year" displayName="Quarter Year" timeFunction="QuarterYear" />
<level name="Period" displayName="Period" timeFunction="MonthYear" />
<level name="Date" displayName="Date" timeFunction="DayMonthYear" />
</hierarchy>
</dimension>

<dimension name="BirthQD" displayName="BirthQD" type="time" 
sourceProperty="BirthDate" hasAll="false" 
description="This level groups patients by birth quarter. This lets you see seasonality, independent of year.">
<hierarchy name="H1" displayName="H1">
<level name="Quarter" displayName="Quarter" timeFunction="QuarterNumber" />
<level name="Month" displayName="Month" timeFunction="MonthNumber" />
</hierarchy>
</dimension>

<dimension name="BirthTD" displayName="BirthTD" type="time" 
sourceProperty="BirthDateTimeStamp" hasAll="false" 
description="This level groups patients by birth time. This lets you see hourly variations, independent of day.">
<hierarchy name="H1" displayName="H1">
<level name="Birth Time" displayName="Birth Time" timeFunction="HourNumber" 
factName="DxBirthTime"/>
</hierarchy>
</dimension>

<dimension name="BirthWeekdayD" displayName="BirthWeekdayD" type="data" 
hasAll="false" disabled="false"
description="This level groups patients by the day of the week on which each patient was born. This lets you see periodicity, independent of year or month.">
<hierarchy name="H1" displayName="H1">
<level name="Weekday" displayName="Weekday" 
sourceExpression="$system.SQL.DAYNAME(%source.BirthDate)"  >
<member name="Sunday" displayName="Sunday" />
<member name="Monday" displayName="Monday" />
<member name="Tuesday" displayName="Tuesday" />
<member name="Wednesday" displayName="Wednesday" />
<member name="Thursday" displayName="Thursday" />
<member name="Friday" displayName="Friday" />
<member name="Saturday" displayName="Saturday" />
</level>
</hierarchy>
</dimension>

<dimension name="ColorD" displayName="ColorD" hasAll="false" 
description="This level groups patients by their favorite color, if known">
<hierarchy name="H1" displayName="H1">
<level name="Favorite Color" displayName="Favorite Color" 
sourceExpression='##class(DeepSee.Model.PatientsCube).GetFavoriteColor(%source.PatientID)' 
 factName="DxColor"/>
</hierarchy>
</dimension>

<dimension name="DiagD" displayName="DiagD" hasAll="false" 
description="This level groups patients by their diagnoses (possibly more than one per patient). None means no diagnosis relevant to the study."
>
<hierarchy name="H1" displayName="H1">
<level name="Diagnoses" displayName="Diagnoses"
list="true" 
sourceProperty="DiagnosesAsLB" 
factName="DxDiagnoses"> 
</level>
</hierarchy>
</dimension>

<dimension name="DocD" displayName="DocD" hasAll="false"
description="These levels group patients by their primary care physician (if any)."
 showHierarchies="false">
<hierarchy name="H1" displayName="H1">
<level name="Doctor Group" displayName="Doctor Group" 
sourceProperty="PrimaryCarePhysician.DoctorGroup" 
 factName="DxDocGroup" description="Doctors are assigned to Doctor Groups, in this fictitious study."/>
<level name="Doctor" displayName="Doctor" 
sourceExpression="%source.PrimaryCarePhysician" 
factName="DxDoc" description="Duplicate names are possible. Keys are forced to be unique.">
<property name="Name" displayName="Name" 
isName="true" hidden="true" 
sort="asc" 
sourceExpression='%source.PrimaryCarePhysician.LastName_", "_%source.PrimaryCarePhysician.FirstName'
 factName="PxDoc"/>
</level>
</hierarchy>
<hierarchy name="H2" displayName="H2">
<level name="Doctor Type" displayName="Doctor Type" sourceProperty="PrimaryCarePhysician.DoctorType"
factName="DxDocType" description="Primary discipline of the doctor"/>
</hierarchy>
</dimension>

<dimension name="GenD" displayName="GenD" hasAll="false" 
description="This level groups patients by gender.">
<hierarchy name="H1" displayName="H1">
<level name="Gender" displayName="Gender"  
sourceProperty="Gender" 
 useDisplayValue="true" factName="DxGender"/>
</hierarchy>
</dimension>

<dimension name="HomeD" displayName="HomeD" hasAll="false" 
description="These levels group patients by home address.">
<hierarchy name="H1" displayName="H1">
<level name="ZIP" displayName="ZIP" 
sourceProperty="HomeCity.PostalCode" 
 factName="DxHomeZIP"
 description="In this demo, cities are contained inside ZIP codes."/>
<level name="City" displayName="City" 
sourceProperty="HomeCity"
factName="DxHomeCity" 
description="This level has three properties. One property is used as the city name; this one is hidden.">
<property name="Population" displayName="Population" 
sourceProperty="HomeCity.Population" 
isReference="true" 
factName="PxPopulation"  
 />
<property name="Principal Export" displayName="Principal Export" 
sourceProperty="HomeCity.PrincipalExport" 
isReference="true" 
factName="PxExport" 
 />
 <property name="Name" displayName="Name"
 sourceProperty="HomeCity.Name" 
 isReference="true"
   factName="PxName" 
   isName="true" hidden="true" />
</level>
</hierarchy>
</dimension>

<dimension name="PatGrpD" displayName="PatGrpD" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Tested" displayName="Tested" 
sourceExpression='$SELECT(%source.TestScore="":"No",1:"Yes")' 
 factName="DxTested" description="We have test scores only for patients in groups A and B."/>
<level name="Patient Group" displayName="Patient Group" 
sourceExpression='$CASE(%source.PatientGroup,"A":"Group A","B":"Group B",:"None")'
 factName="DxPatGroup" description="Patients are assigned to Patient Groups, in this fictitious study."/>
</hierarchy>
</dimension>

<dimension name="ProfD" displayName="ProfD" hasAll="false"
description="These levels group patients by profession and industry.">
<hierarchy name="H1" displayName="H1">
<level name="Industry" displayName="Industry" 
sourceExpression='##class(DeepSee.Model.PatientsCube).GetIndustry(%source.PatientID)' 
 factName="DxIndustry"/>
<level name="Profession" displayName="Profession" 
sourceExpression='##class(DeepSee.Model.PatientsCube).GetProfession(%source.PatientID)' 
 factName="DxProfession" />
</hierarchy>
</dimension>

<dimension name="ComputedD" displayName="ComputedD" 
  disabled="false" 
  hasAll="false" 
  type="computed" 
  dimensionClass="%DeepSee.ComputedDimension.SQL">
    <hierarchy name="H1" displayName="H1">
      <level name="Computed" displayName="Computed" >
        <member name="member 1" displayName="member 1" 
        spec="select ID from DeepSee_Model_PatientsCube.Fact WHERE MxAge&lt;50 AND DxHomeCity->PxName='Elm Heights'" 
         description="This computed member is defined by an SQL query"/>
        <member name="member 2" displayName="member 2" 
        spec="select ID from $$$TABLE WHERE MxAge=40 AND DxHomeCity->PxName='Juniper'"
         description="This computed member is defined by an SQL query"/>
      </level>
    </hierarchy>
</dimension>
  
<measure name="Age" displayName="Age" 
sourceProperty="Age" 
aggregate="SUM" 
 factName="MxAge"/>

<measure name="Avg Age" displayName="Avg Age" 
sourceProperty="Age" 
 aggregate="AVG"/>

<measure name="Allergy Count" displayName="Allergy Count" 
type="integer"
sourceExpression='##class(DeepSee.Model.PatientsCube).GetAllergyCount(%source.%ID)' 
aggregate="SUM" 
 searchable="true"/>

<measure name="Avg Allergy Count" displayName="Avg Allergy Count" 
type="integer"
sourceExpression='##class(DeepSee.Model.PatientsCube).GetAllergyCount(%source.%ID)' 
 aggregate="AVG" />

<measure name="Encounter Count" displayName="Encounter Count" 
 type="integer"
 sourceExpression='##class(DeepSee.Model.PatientsCube).GetEncounterCount(%source.%ID)' 
 aggregate="SUM" 
  searchable="true"/>

<measure name="Avg Enc Count" displayName="Avg Enc Count" 
type="integer"
sourceExpression='##class(DeepSee.Model.PatientsCube).GetEncounterCount(%source.%ID)' 
 aggregate="AVG"/>

<measure name="Test Score" displayName="Test Score" 
sourceProperty="TestScore" 
 aggregate="SUM" searchable="true"/>

<measure name="Avg Test Score" displayName="Avg Test Score" 
sourceProperty="TestScore" 
 aggregate="AVG"/>


<calculatedMember name="Unique Doctor Count" displayName="Unique Doctor Count" 
dimension="Measures"
valueExpression="COUNT([docd].[h1].[doctor].MEMBERS,EXCLUDEEMPTY)"  
 description="This calculated measure counts members of the DocD dimension"/>

<calculatedMember name="Median Test Score" displayName="Median Test Score" 
dimension="Measures"
valueExpression='%KPI("%DeepSee.Median","MEDIAN",1,"%measure","Test Score","%CONTEXT")' 
formatString="#.##"
 description="This calculated member demos the sample median plugin"/>

<calculatedMember name="90th Percentile Test Score" displayName="90th Percentile Test Score" 
dimension="Measures"
valueExpression='%KPI("%DeepSee.Percentile","PERCENTILE",1,"%measure","Test Score","%percentile","90","%CONTEXT")' 
formatString="#.##"
 description="This calculated member demos the sample percentile plugin"/>

<calculatedMember name="Primary Colors" displayName="Primary Colors"
dimension="ColorD"
valueExpression="%OR({[COLORD].[H1].[FAVORITE COLOR].&amp;[Blue],[COLORD].[H1].[FAVORITE COLOR].&amp;[Red],[COLORD].[H1].[FAVORITE COLOR].&amp;[Yellow]})"
 description="This calculated member uses %OR to combine members of the ColorD dimension" />

<calculatedMember name="Secondary Colors" displayName="Secondary Colors"
dimension="ColorD"
valueExpression="%OR({[COLORD].[H1].[FAVORITE COLOR].&amp;[Green],[COLORD].[H1].[FAVORITE COLOR].&amp;[Orange],[COLORD].[H1].[FAVORITE COLOR].&amp;[Purple]})"
 description="This calculated member uses %OR to combine members of the ColorD dimension" />


<listing name="Patient details" displayName="Patient details" 
 fieldList='PatientID,Age,Gender,HomeCity->Name AS "Home City",TestScore AS "Test Score"'
  orderBy="Age,Gender" /> 

<listing name="Doctor details" displayName="Doctor details" 
 fieldList='PatientID,PrimaryCarePhysician->LastName As "Doctor Last Name",PrimaryCarePhysician->FirstName AS "Doctor First Name",PrimaryCarePhysician->DoctorType AS "Doctor Type",PrimaryCarePhysician->DoctorGroup AS "Doctor Group"' 
  orderBy="PatientID" /> 

<listing name="Custom SQL listing" displayName="Custom SQL listing" 
 sql="SELECT source.PatientID,FavoriteColor FROM $$$SOURCE, DeepSee_Study.PatientDetails details 
 WHERE $$$RESTRICT AND source.PatientID=details.PatientID ORDER BY source.PatientID"/>


<namedSet name="Sample Set" displayName="Sample Set" 
setExpression="homed.h1.city.MEMBERS" />

<namedSet name="Sample Set 2" displayName="Sample Set 2"
setExpression="{colord.h1.[favorite color].red,allerd.h1.allergies.wheat,aged.h1.age.75}" />

</cube>
]]></Data>
</XData>

<Method name="GetAllergyCount">
<Description>
Returns the number of allergies the patient has or null if there are no recorded allergies; 
used by the Allergy Count measure.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ID:%Numeric</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	Set allergies=##class(DeepSee.Study.Patient).%OpenId(ID,0).Allergies
    //check to see if patient has any recorded allergy data
    //if not, count is null
    
    If allergies.Count()=0 {
		Set allcount=""
		}
		 //check to see if patient has "Nil known allergies"
		 //in this case, the patient has one "allergen" whose code is 000
		Elseif ((allergies.Count()=1) && (allergies.GetAt(1).Allergen.Code="000")) {
		        Set allcount=0
		        }
		Else {
	        Set allcount=allergies.Count()
	        }		        
	    
	Quit allcount
	
	//Quit allergies.Count() ; old simple version doesn't handle case where "allergen"
	//is "Nil known allergies"
]]></Implementation>
</Method>

<Method name="GetEncounterCount">
<Description>
Returns the number of encounters recorded for the patient; 
used by the Encounter Count measure.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ID:%Numeric</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
    Set myquery="SELECT Count(*) AS ReturnValue FROM DeepSee_Study.PatientEncounter "
              _ "WHERE Patient=?"
    Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
    Set status=rset.Prepare(myquery)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write "Prepare error"}
    Set status=rset.Execute(ID)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write "Execute error"}
    While rset.Next() {
     Set ReturnValue=rset.Data("ReturnValue")
     }
    If ReturnValue="" {
        Set ReturnValue=0
        }        
    Quit ReturnValue
]]></Implementation>
</Method>

<Method name="GetAllergies">
<Description>
Returns a $LIST of the allergies of the patient; 
used by the [AllerD].[H1].[Allergies] level."</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ID:%Numeric</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
    Set allergies=##class(DeepSee.Study.Patient).%OpenId(ID,0).Allergies
    If (allergies.Count()=0) {Quit $LISTFROMSTRING("")}
    Set list=""
    For i=1:1:allergies.Count() {
        Set $LI(list,i)=allergies.GetAt(i).Allergen.Description
        }
    Quit list
]]></Implementation>
</Method>

<Method name="GetAllergySeverities">
<Description><![CDATA[
Returns a $LIST of the allergy severities of the patient; 
used by the [AllerSevD].[H1].[Allergy Severities] level.
<p>Not currently used.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ID:%Numeric</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
    Set allergies=##class(DeepSee.Study.Patient).%OpenId(ID,0).Allergies
    If (allergies.Count()=0) {
	    Set list=$LISTFROMSTRING("")
	    }
        //check to see if patient has "Nil known allergies"
		//in this case, the patient has one "allergen" whose code is 000
	    Elseif ((allergies.Count()=1) && (allergies.GetAt(1).Allergen.Code="000")) {
		    Set list=$LISTFROMSTRING("Nil known allergies")
		    }
    	Else {
	    	Set list=""
            For i=1:1:allergies.Count() {
                Set $LI(list,i)=allergies.GetAt(i).Severity.Description
                }
	        }
    Quit list
]]></Implementation>
</Method>

<Method name="GetAllergySeverities2">
<Description><![CDATA[
Returns a $LIST of the allergy severities of the patient; 
used by the [AllerSevD].[H1].[Allergy Severities] level.
<p> In this version, prepend each severity with the corresponding numeric code
(or an invented code), in order to force the members to sort as wanted.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ID:%Numeric</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
    Set allergies=##class(DeepSee.Study.Patient).%OpenId(ID,0).Allergies
    If (allergies.Count()=0) {
	    Set list=$LISTFROMSTRING("999 No Data Available")
	    }
        //check to see if patient has "Nil known allergies"
		//in this case, the patient has one "allergen" whose code is 000
	    Elseif ((allergies.Count()=1) && (allergies.GetAt(1).Allergen.Code="000")) {
		    Set list=$LISTFROMSTRING("000 Nil known allergies")
		    }
    	Else {
	    	Set list=""
            For i=1:1:allergies.Count() {
	            //get the code, check to see if null
	            //if so, replace with standard no data available string
	            Set code=allergies.GetAt(i).Severity.Code
	            If code="" { Set code="999 No Data Available"}
                Set $LI(list,i)=code_" "_allergies.GetAt(i).Severity.Description
                }
	        }
    Quit list
]]></Implementation>
</Method>

<Method name="GetDiagnoses">
<Description>
Returns a $LIST of the diagnoses of the patient; 
used by the [DiagD].[H1].[Diagnoses] level.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ID:%Numeric</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
    Set diagnoses=##class(DeepSee.Study.Patient).%OpenId(ID,0).DiagnosesAsChildren
    If (diagnoses.Count()=0) {Quit $LISTFROMSTRING("")}
    Set list=""
    For i=1:1:diagnoses.Count() {
        Set $LI(list,i)=diagnoses.GetAt(i).DiagnosisCode
        }
    Quit list
]]></Implementation>
</Method>

<Method name="GetFavoriteColor">
<Description>
Returns the favorite color of the patient; 
used by the [ColorD].[H1].[Favorite Color] level.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patientID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    New SQLCODE
    &sql(SELECT FavoriteColor INTO :ReturnValue 
    FROM DeepSee_Study.PatientDetails 
    WHERE PatientID=:patientID)
    If (SQLCODE'=0) {
        Set ReturnValue=""
        }
    Quit ReturnValue
]]></Implementation>
</Method>

<Method name="GetProfession">
<Description>
Returns the profession of the patient; 
used by the [ProfD].[H1].[Profession] level.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patientID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    New SQLCODE
    &sql(SELECT Profession->Profession INTO :ReturnValue 
    FROM DeepSee_Study.PatientDetails 
    WHERE PatientID=:patientID)
    If (SQLCODE'=0) {
        Set ReturnValue=""
        }
    Quit ReturnValue
]]></Implementation>
</Method>

<Method name="GetIndustry">
<Description>
Returns the industry of the patient; 
used by the [ProfD].[H1].[Industry] level.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patientID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    New SQLCODE
    &sql(SELECT Profession->Industry INTO :ReturnValue 
    FROM DeepSee_Study.PatientDetails 
    WHERE PatientID=:patientID)
    If (SQLCODE'=0) {
        Set ReturnValue=""
        }
    Quit ReturnValue
]]></Implementation>
</Method>

<Method name="GetDocName">
<Description>
Returns the name of the patient's primary care physician. 
Not used by the cube but included as an example of a utility method.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ID:%Numeric</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set pat=##class(DeepSee.Study.Patient).%OpenId(ID,0)
    Set doc=pat.PrimaryCarePhysician
    
    Set docname=""
    If (doc'="") {
	      Set docname=doc.LastName_", "_doc.FirstName
		  }
	Quit docname
]]></Implementation>
</Method>

<Method name="GetAgeBucket">
<Description>
Given a number, returns one of the strings "0 to 9", "10 to 19", "20 to 29", etc. 
Used by the cube as an alternative to rangeExpression</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>age:%Numeric</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    If (age="") {Set return=""}
    ElseIf (age<10) {Set return="0 to 9"}
    ElseIf (age<20) {Set return="10 to 19"}
    ElseIf (age<30) {Set return="20 to 29"}
    ElseIf (age<40) {Set return="30 to 39"}
    ElseIf (age<50) {Set return="40 to 49"}
    ElseIf (age<60) {Set return="50 to 59"}
    ElseIf (age<70) {Set return="60 to 69"}
    ElseIf (age<80) {Set return="70 to 79"}
    Else {Set return="80+"}
    Quit return
]]></Implementation>
</Method>

<Method name="GetAgeGroup">
<Description>
Given a number, returns one of the strings "0 to 29", "30 to 59",or "60+". 
Not used by the cube, but included as an example of a utility method.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>age:%Numeric</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    If (age="") {Set return=""}
    ElseIf (age<30) {Set return="0 to 29"}
    ElseIf (age<60) {Set return="30 to 59"}
    Else {Set return="60+"}
    Quit return
]]></Implementation>
</Method>

<Method name="GetLastDoctor">
<Description>
Given a patient, returns the name of the doctor at the patient's last encounter, if any.
Not used by the cube but included as an example of a utility method.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pat:%Numeric</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    New SQLCODE
    Set docname=""
    &sql(select TOP 1 PrimaryDoctor INTO :doctor 
	FROM Deepsee_Study.PatientEncounter 
	WHERE Patient=:pat ORDER BY EncounterNumber )
    If (SQLCODE'=0) {
        Quit ""
        }
    Set doc=##class(DeepSee.Study.Doctor).%OpenId(doctor,0)
    Set docname=doc.LastName_", "_doc.FirstName
    Quit docname
]]></Implementation>
</Method>

<Method name="GetSeveritySort">
<Description>
used to control sort order of Allergy Severity level</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>severity:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
   if (severity="Nil known allergies") {
	   set sort=1
   } elseif (severity="Minor") {
		set sort=2
   } elseif (severity="Moderate") {
		set sort=3
   } elseif (severity="Life-threatening") {
		set sort=4
   } elseif (severity="Inactive") {
		set sort=5
   } elseif (severity="Unable to determine") {
		set sort=6
   } else {
	   set sort=99
   }
   quit sort
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.PatientsQuery">
<Description>
This Data Connector uses a UNION query that combines the main DeepSee patient table with
the "extra" patient set (DeepSee.Study.PatientSet2).</Description>
<Super>%DeepSee.DataConnector</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61899,61234.157329</TimeCreated>

<XData name="SourceQuery">
<XMLNamespace>http://www.intersystems.com/deepsee/connector/query</XMLNamespace>
<Data><![CDATA[
<sql>
SELECT %ID,PatientID,Gender,Age,HomeCity->Name AS "HomeCity",
PatientGroup,TestScore From DeepSee_Study.Patient 
UNION
SELECT %ID,PatientID,Gender,Age,HomeCity,
PatientGroup,TestScore From DeepSee_Study.PatientSet2
</sql>
]]></Data>
</XData>

<XData name="Output">
<Description>
This XData definition defines the output of this connector.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/connector/output</XMLNamespace>
<Data><![CDATA[
<connector> 
<property name="ID" displayName="ID" idKey="true"
sourceProperty="%ID" /> 

<property name="PatientID" displayName="PatientID" 
sourceProperty="PatientID" /> 

<property name="Gender" displayName="Gender" 
sourceProperty="Gender" /> 

<property name="Age" displayName="Age" 
sourceProperty="Age" type="%ZEN.Datatype.integer"/>

<property name="HomeCity" displayName="Home City" 
sourceProperty="HomeCity"/>

<property name="PatientGroup" displayName="Patient Group" 
sourceProperty="PatientGroup" transform='$CASE(%val,"A":"Group A","B":"Group B",:%val)' />

<property name="TestScore" displayName="Test Score" 
sourceProperty="TestScore" type="%ZEN.Datatype.integer"/>

</connector>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.PatientsQueryCube">
<Description><![CDATA[
This class contains a cube based on DeepSee.Model.PatientsQuery 
<p>This cube is not built by default.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61899,61165.096452</TimeCreated>
<DependsOn>DeepSee.Model.PatientsQuery</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="PatientsQueryCube" displayName="PatientsQueryCube"  
 owner="_SYSTEM"
 sourceClass="DeepSee.Model.PatientsQuery"
 nullReplacement="None"
>

<dimension name="AgeD" displayName="AgeD" 
sourceProperty="Age" 
allCaption="All Patients"  allDisplayName="All Patients">
<hierarchy name="H1" displayName="H1">
<level name="Age Group" displayName="Age Group"
rangeExpression="(,29]:0 to 29;[30,59]:30 to 59;[60,):60+;"
 factName="DxAgeGroup" />
<level name="Age Bucket" displayName="Age Bucket"
rangeExpression="(,9]:0 to 9;[10,19]:10 to 19;[20,29]:20 to 29;[30,39]:30 to 39;[40,49]:40 to 49;[50,59]:50 to 59;[60,69]:60 to 69;[70,79]:70 to 79;[80,):80+;"
 factName="DxAgeBucket"/>
<level name="Age" displayName="Age"
factName="DxAge">
</level>
</hierarchy>
</dimension>

<dimension name="GenD" displayName="GenD" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Gender" displayName="Gender"  
sourceProperty="Gender" 
rangeExpression="F:Female;M:Male;" 
 factName="DxGender"/>
</hierarchy>
</dimension>

<dimension name="HomeD" displayName="HomeD" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="City" displayName="City" 
sourceProperty="HomeCity" 
factName="DxHomeCity">
</level>
</hierarchy>
</dimension>

<dimension name="PatGrpD" displayName="PatGrpD" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Patient Group" displayName="Patient Group" 
sourceProperty="PatientGroup"
 factName="DxPatGroup"/>
</hierarchy>
</dimension>

<measure name="Patient Count" displayName="Patient Count" 
sourceExpression="1" 
 aggregate="SUM" />
 
<measure name="Age" displayName="Age" 
sourceProperty="Age" 
aggregate="SUM" 
 factName="MxAge"/>

<measure name="Avg Age" displayName="Avg Age" 
sourceProperty="Age" 
 aggregate="AVG"/>

<measure name="Test Score" displayName="Test Score" 
sourceProperty="TestScore" 
 aggregate="SUM" searchable="true"/>

<measure name="Avg Test Score" displayName="Avg Test Score" 
sourceProperty="TestScore" 
 aggregate="AVG"/>

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.PortletDemo.ClockPortlet">
<Super>%DeepSee.Component.Portlet.abstractPortlet</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62024,56454.564868</TimeCreated>

<Property name="srcparams">
<Type>%String</Type>
</Property>

<Method name="%DrawHTML">
<Description>
Static HTML display method: draw the BODY of this component as HTML.</Description>
<Implementation><![CDATA[
	set size=$G(..settings("SIZE"))
	set ..srcparams=""
	for val="LOGO","STEP","OFFSET","CIRCLE","UTC","SIZE" set ..srcparams=..srcparams_val_"="_$G(..settings(val))_"&"
	
		&html<<div class="Clock" style="overflow:hidden;"> 
		<embed style="overflow:hidden;" id="frame_2" type="image/svg+xml" 
		src="DeepSee.Model.PortletDemo.svgClock.cls?#(..srcparams)#" height="#(size)#" width="#(size)#"/>
		</div>>
]]></Implementation>
</Method>

<Method name="%OnGetPortletIcon">
<Description>
Return the URL of the icon to display for this portlet.
This is displayed in the Widget Builder dialog.
This should be overridden in subclasses.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "../broker/deepsee/insert_table_clock_48.png"
]]></Implementation>
</Method>

<Method name="%OnGetPortletName">
<Description>
Return the localized caption of this portlet.
This is displayed in the Widget Builder dialog.
This should be overridden in subclasses.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "AnalogClock"
]]></Implementation>
</Method>

<Method name="%OnGetPortletSettings">
<Description><![CDATA[
Return an optional array of "settings" values for this portlet.<br/>
The list of settings is displayed in the Widget Builder where the user can view and
edit them.
When the portlet is rendered, the values of all settings is made available to the
portlet's <method>%DrawHTML</method> method via the <property>settings</property>--a
multidimensional array subscripted by setting name.<br/>
On return, <var>pInfo</var> can contain a list of settings in the form:<br/>
pInfo(n) = $LB(name,value,type,caption,title)<br/>
<var>name</var> is the logical name of the setting.<br/>
<var>value</var> is the default value of the setting.<br/>
<var>type</var> indicates the type of the setting. This determines the control
displayed to get the value of the setting. If omitted the type is assumed to be a string.
The type can be: "%Integer", "%Boolean", or "ENUM^caption1:value1,caption2:value2".<br/>
<var>caption</var> is the localized caption of the setting.<br/>
<var>title</var> is an optional tooltip displayed for the setting.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[*pInfo:%List,&pSettings]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Kill pInfo
  Set pInfo($I(pInfo)) = $LB("LOGO",$G(pSettings("LOGO")),"","Clock logo","Logo displayed on top of clock")
  Set pInfo($I(pInfo)) = $LB("STEP",$G(pSettings("STEP"),"10"),"%Integer","Second hand redraw interval (msec)","milliseconds steps of second hand")
  Set pInfo($I(pInfo)) = $LB("OFFSET",$G(pSettings("OFFSET"),"0"),"%Integer","Offset from base time (min)","minutes difference from base time (Local or UTC)")
  Set pInfo($I(pInfo)) = $LB("UTC",$G(pSettings("UTC"),"0"),"%Boolean","UTC","Time Base: local (default) or UTC")
  Set pInfo($I(pInfo)) = $LB("CIRCLE",$G(pSettings("CIRCLE"),"1"),"%Boolean","Circle","Shape: square (default) or circle")
  Set pInfo($I(pInfo)) = $LB("SIZE",$G(pSettings("SIZE"),"150"),"%Integer","Size","Size of the clock")
     
  Quit pInfo
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.PortletDemo.svgClock">
<Super>%CSP.Page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62024,56411.056835</TimeCreated>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set %response.ContentType="image/svg+xml"
	quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set size=$G(%request.Data("SIZE",1),200)
	set uri="?"
	for par="LOGO","CIRCLE","UTC","OFFSET","STEP" {
		if $d(%request.Data(par,1),val) set uri=uri_par_"="_val_"&amp;"
	}
 &html<<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' 
		width="#(size)#" height="#(size)#" viewBox="0 0 400 400" onload="clockInit(evt);">
<defs>
	<filter id="dropShadow" x="-2%" y="-2%" height="120%" width="120%">
		<feGaussianBlur in="SourceAlpha" stdDeviation="3" />
		<feOffset dx="6" dy="6" result="offsetBlur" />
		<feMerge>
			<feMergeNode in="offsetBlur"/>
			<feMergeNode in="SourceGraphic"/>
		</feMerge>
	</filter>
</defs>
<rect id="rect" x="10" y="10" height="380" width="380"
    style="stroke:black; fill:lightgreen; filter:url(#dropShadow)"/>
<circle id="circle" cx="200" cy="200" r="190" 
	style="stroke:black; fill:lightgreen; filter:url(#dropShadow)" />

<g id="watch" style="stroke:none; stroke-width:2px; filter:url(#dropShadow)">
	<path id="path1" d="M 80,200 a120,120 0 1,1 0,0.001" 
		fill="none" stroke="none" />
	<g id="quarter" fill="yellow" stroke="yellow" stroke-width="10" >
	  	<circle cx="50" cy="200" id="circ" r="8" />
  		<path d="M 45 200 l 20 0" transform="rotate(30,200,200)" />
  		<path d="M 45 200 l 20 0" transform="rotate(60,200,200)" />
		</g>
	<use xlink:href="#quarter" transform="rotate(90,200,200)"/>
	<use xlink:href="#quarter" transform="rotate(180,200,200)"/>
	<use xlink:href="#quarter" transform="rotate(270,200,200)"/>

	<g id="hour" stroke="grey" fill="black" stroke-width="2">
		<path d="M 200,100 l -10,110 10,20 10,-20 z" />
	 	</g>
	<g id="min" stroke="grey" fill="black" stroke-width="8"> 
		<path d="M 200,80 l 0,160" /> 
		<path d="M 200,80 l -7,30 14,0 z" stroke-width="4"/>
 		</g>
 	<circle cx="200" cy="200" r="15" fill="red" stroke="black" stroke-width="4" />
	<g id="sec" >
		<path d="M 200,200 l 0,30 0,-200" stroke="red" stroke-width="4"/>
		</g>
  	<circle cx="200" cy="200" r="2" fill="black" stroke="black" stroke-width="2" />
</g>  
<text id="logo" x="200" y="120" text-anchor="middle" 
	style="pointer-events:none; font-size:20pt; fill:gray; stroke:none;	font-family:tahoma verdana;" >
	</text>
>
 		Write "<script language='text/ecmascript'>",!	
 		Write "function uri() { return '"_uri_"' ; }",!
 &html<
 </script>
 <script language='text/ecmascript'>
 function clockInit(evt)
{
	svgRoot = evt.target.ownerDocument;
	hr=svgRoot.getElementById('hour');
	min=svgRoot.getElementById('min');
 	sec=svgRoot.getElementById('sec');
 	logo=svgRoot.getElementById('logo');
 	rect=svgRoot.getElementById('rect');
 	circle=svgRoot.getElementById('circle');	
 	// uri=svgRoot.baseURI; I hate IE
 	uri=uri();
 	val=uri.split('UTC=');
 	UTC=val[1]?parseInt(val[1]):0;
 	val=uri.split('CIRCLE=');
 	shape=val[1]?parseInt(val[1]):0;
 	if (shape>0) { 
		rect.setAttribute('style','stroke:none; fill:none; visibility:hidden;');
 	} else {
	 	circle.setAttribute('style','stroke:none; fill:none; visibility:hidden;');
 	}
 	val=uri.split('LOGO=');
 	if (val[1]) { 
 		val=val[1].split('&amp;');
 		logo.firstChild.data=decodeURI(val[0]);
 		// UTC=(val[0]=='UTC');
 	}
 	val=uri.split("OFFSET=");
 	offset=val[1]?parseInt(val[1]):0;
 	val=uri.split("STEP=");
 	step=val[1]?parseInt(val[1]):100;
 	step=Math.max(step,10);
 	tick();
}
function tick() {
	move();
  	aktiv = window.setTimeout("tick()",step);
}
function move() {
	var now = new Date();
	if (UTC) {
		var h = now.getUTCHours()+(offset/60);
		var m = now.getUTCMinutes()+(offset%60);
 	} else {
		var h = now.getHours()+(offset/60);
		var m = now.getMinutes()+(offset%60);
		}
	var s=now.getSeconds();
	var f=now.getMilliseconds();
	hr.setAttribute('transform','rotate('+((m/60+h)*30)+',200,200)');
	min.setAttribute('transform','rotate('+((s/60+m)*6)+',200,200)');
	sec.setAttribute('transform','rotate('+((f/1000+s)*6)+',200,200)');
}
</script>
</svg>
>
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Model.RainfallCube">
<Description><![CDATA[
This class contains a cube based on DeepSee.Study.CityRainfall. 
<p>The dimension, hierarchy, and level definitions here use the same names
as in the Patients cube, so that these cubes can be used together.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61859,41230</TimeCreated>
<DependsOn>DeepSee.Study.CityRainfall</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="CityRainfall" displayName="CityRainfall"   
 owner="_SYSTEM"
 caption="City Rainfall Data"
 sourceClass="DeepSee.Study.CityRainfall"
 >

<dimension name="HomeD" displayName="CityD" 
allCaption="All Cities"  allDisplayName="All Cities" >
<hierarchy name="H1" displayName="H1">
<level name="ZIP" displayName="ZIP" 
sourceProperty="City.PostalCode" />
<level name="City" displayName="City" 
sourceProperty="City">
<property name="Population" displayName="Population" 
sourceProperty="City.Population" />
<property name="Principal Export" displayName="Principal Export" 
sourceProperty="City.PrincipalExport" />
 <property name="Name" displayName="Name"
 sourceProperty="City.Name" 
 isReference="true"
  isName="true" hidden="true" />
</level>
</hierarchy>
</dimension>

<dimension name="BirthD" displayName="DateD" type="time" 
sourceProperty="MonthAndYear" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Decade" displayName="Decade"  timeFunction="Decade"  />
<level name="Year" displayName="Year" timeFunction="Year" />
<level name="Quarter Year" displayName="Quarter Year" timeFunction="QuarterYear" />
<level name="Period" displayName="Period" timeFunction="MonthYear" />
<level name="Date" displayName="Date" timeFunction="DayMonthYear" />
</hierarchy>
</dimension>

<dimension name="BirthQD" displayName="QuarterD" type="time" 
sourceProperty="MonthAndYear" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Quarter" displayName="Quarter" timeFunction="QuarterNumber" />
<level name="Month" displayName="Month" timeFunction="MonthNumber" />
</hierarchy>
</dimension>

<measure name="Rainfall Inches" displayName="Rainfall Inches" 
sourceProperty="InchesOfRain" 
aggregate="SUM"/>

<measure name="Avg Rainfall Inches" displayName="Avg Rainfall Inches" 
sourceProperty="InchesOfRain" 
aggregate="AVG"/>

<listing name="Details" displayName="Details" 
  fieldList='City->Name as "City",MonthAndYear as "Date",InchesOfRain as "Inches of Rain"'>
</listing>

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.RelCubes.RAllergies">
<Description><![CDATA[
This class is for use with DeepSee. 
<p>It contains a cube based on DeepSee.Study.PatientAllergy1. To view the cube definition, open
this class in Studio or the DeepSee Architect.
<p>The RelatedCubes/* cubes (like this one) use cube-to-cube relationships.]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63616,46123.180689</TimeCreated>
<DependsOn>DeepSee.Study.PatientAllergy1,DeepSee.Model.RelCubes.RPatients</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" 
name="RelatedCubes/Allergies" displayName="RelatedCubes/Allergies" 
sourceClass="DeepSee.Study.PatientAllergy1" countMeasureName="%COUNT" 
>
<relationship name="RelatedCubes/Patients" displayName="Patient"
relatedCube="RelatedCubes/Patients"
cardinality="one"
sourceProperty="Patient"
 nullReplacement="No Data Available"/>


  <dimension name="AllerD" hasAll="true" 
  allCaption="All Allergies" allDisplayName="All Allergies" type="data" >
    <hierarchy name="H1" disabled="false">
      <level name="Allergen" sourceProperty="Allergen.Description" nullReplacement="No Data Available">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="SevD" hasAll="false" type="data" >
    <hierarchy name="H1" disabled="false">
      <level name="Severity" sourceProperty="Severity.Description" nullReplacement="No Data Available">
      </level>
    </hierarchy>
  </dimension>
  <measure name="%ID" disabled="false" sourceProperty="%ID" aggregate="COUNT" type="integer" hidden="true" searchable="false" iKnowSource="string"></measure>
</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.RelCubes.RCities">
<Description><![CDATA[
This class is for use with DeepSee. 
<p>It contains a cube based on DeepSee.Study.City. To view the cube definition, open
this class in Studio or the DeepSee Architect.
<p>The RelatedCubes/* cubes (like this one) use cube-to-cube relationships.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62005,60717.102895</TimeCreated>
<DependsOn>DeepSee.Study.City</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube name="RelatedCubes/Cities" 
displayName="RelatedCubes/Cities"  
owner="_SYSTEM"
sourceClass="DeepSee.Study.City"
>
 
<relationship name="RelatedCubes/Doctors" displayName="Doctors"
relatedCube="RelatedCubes/Doctors"
cardinality="many"
inverse="RelatedCubes/Cities"
/>


<dimension name="CitiesD" 
displayName="CitiesD" 
allCaption="All Locations"
allDisplayName="All Locations">
<hierarchy name="H1">
<level name="ZIP" displayName="ZIP" 
sourceProperty="PostalCode" />
<level name="City" displayName="City" 
sourceProperty="Name" >
<property name="Population" displayName="Population" 
sourceProperty="Population" />
<property name="Principal Export" displayName="Principal Export" 
sourceProperty="PrincipalExport"  />
</level>
</hierarchy>
</dimension>

<measure name="Population" 
displayName="Population" 
sourceProperty="Population" 
 aggregate="SUM"/>

<measure name="Avg Population" 
displayName="Avg Population" 
sourceProperty="Population" 
 aggregate="AVG"/>

<listing name="Details" displayName="Details" 
fieldList='Name as "City",Population,PostalCode as "ZIP Code",PrincipalExport as "Principal Export"'>
</listing>

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.RelCubes.RCityRainfall">
<Description><![CDATA[
This class is for use with DeepSee. 
<p>It contains a cube based on DeepSee.Study.CityRainfall To view the cube definition, open
this class in Studio or the DeepSee Architect.
<p>The RelatedCubes/* cubes (like this one) use cube-to-cube relationships.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62005,60754.811179</TimeCreated>
<DependsOn>DeepSee.Study.CityRainfall,DeepSee.Model.RelCubes.RCities</DependsOn>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="RelatedCubes/CityRainfall" 
displayName="RelatedCubes/CityRainfall"  
owner="_SYSTEM"
sourceClass="DeepSee.Study.CityRainfall"
 >

<relationship name="RelatedCubes/Cities" 
displayName="Cities" 
relatedCube="RelatedCubes/Cities" 
cardinality="one"
sourceProperty="City"
 />

<dimension name="DateD" displayName="DateD" 
type="time" sourceProperty="MonthAndYear" 
allCaption="All Dates" allDisplayName="All Dates">
<hierarchy name="H1" displayName="H1">
<level name="Year" displayName="Year" timeFunction="Year" />
<level name="MonthYear" displayName="MonthYear" timeFunction="MonthYear" />
</hierarchy>
<hierarchy name="H2" displayName="H2">
<level name="Month" displayName="Month" timeFunction="MonthNumber" />
</hierarchy>
</dimension>

<measure name="Monthly Rainfall Inches" 
displayName="Monthly Rainfall Inches"
sourceProperty="InchesOfRain" 
 aggregate="SUM"/>

<measure name="Avg Monthly Rainfall Inches" 
displayName="Avg Monthly Rainfall Inches"
sourceProperty="InchesOfRain" 
 aggregate="AVG"/>

<listing name="Details" displayName="Details" 
  fieldList='City->Name as "City",MonthAndYear as "Date",InchesOfRain as "Inches of Rain"'>
</listing>

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.RelCubes.RDoctors">
<Description><![CDATA[
This class is for use with DeepSee II. 
<p>It contains a cube based on DeepSee.Study.Doctors. 
To view the cube definition, open this class in Studio or the DeepSee Architect.
<p>The RelatedCubes/* cubes (like this one) use cube-to-cube relationships.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62005,60778.817319</TimeCreated>
<DependsOn>DeepSee.Study.Doctor,DeepSee.Model.RelCubes.RCities</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="RelatedCubes/Doctors" displayName="RelatedCubes/Doctors" 
owner="_SYSTEM"
sourceClass="DeepSee.Study.Doctor"
nullReplacement="None"
 disabled="false">

<relationship name="RelatedCubes/Patients" 
  displayName="Patients"
  relatedCube="RelatedCubes/Patients" 
  inverse="RelatedCubes/Doctors" 
  cardinality="many"
   />

<relationship name="RelatedCubes/Cities" 
displayName="Cities" 
relatedCube="RelatedCubes/Cities" 
inverse="RelatedCubes/Doctors" 
cardinality="one"
sourceProperty="MainCity"
 />

<dimension name="DocD" displayName="DocD" 
allCaption="All Doctors"  allDisplayName="All Doctors">
<hierarchy name="H1" displayName="H1">
<level name="Doctor Group" displayName="Doctor Group" 
sourceProperty="DoctorGroup" 
 factName="DxDocGroup" nullReplacement="No Doctor Group"/>
<level name="Doctor" displayName="Doctor" 
sourceExpression="%source.%ID" 
factName="DxDoc">
<property name="Name" displayName="Name" 
isName="true" 
sort="asc" 
sourceExpression='%source.LastName_", "_%source.FirstName'
 factName="PxDoc"/>
</level>
</hierarchy>
</dimension>

<dimension name="DocTypeD" displayName="DocTypeD" 
hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Doctor Type" displayName="Doctor Type"
sourceProperty="DoctorType"
factName="DxDocType" />
</hierarchy>
</dimension>

<!-- See DeepSee.Study.SetBuilder: run its Build() method before enabling this dimension.
<dimension name="SetBuilderD" displayName="Sets" 
type="computed" dimensionClass="%DeepSee.SetBuilder.ComputedDimension" >
<hierarchy name="H1" >
<level name="Set" />
</hierarchy>
</dimension>
-->

<measure name="Patients Per Week" 
displayName="Patients Per Week" 
sourceProperty="PatientsPerWeek" 
 aggregate="SUM"/>

<measure name="Avg Patients Per Week" 
displayName="Avg Patients Per Week" 
sourceProperty="PatientsPerWeek" 
 aggregate="AVG"/>
 
<listing name="Details" displayName="Details" 
  fieldList='FirstName as "First Name",LastName as "Last Name",DoctorType as "Doctor Type",DoctorGroup as "Doctor Group",PatientsPerWeek as "Patients Per Week",MainCity->Name AS "Main City"'>
</listing>

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.RelCubes.RPatients">
<Description><![CDATA[
This class is for use with DeepSee. 
<p>It contains a cube based on DeepSee.Study.Patients. 
To view the cube definition, open this class in Studio or the DeepSee Architect.
<p>The RelatedCubes/* cubes (like this one) use cube-to-cube relationships.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62005,60800.822584</TimeCreated>
<DependsOn>DeepSee.Study.Patient,DeepSee.Model.RelCubes.RDoctors,DeepSee.Model.RelCubes.RCities</DependsOn>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Cube">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube 
name="RelatedCubes/Patients" displayName="RelatedCubes/Patients" 
owner="_SYSTEM"
sourceClass="DeepSee.Study.Patient"
nullReplacement="None"
disabled="false"
>

<relationship name="RelatedCubes/Allergies" displayName="Allergies"
relatedCube="RelatedCubes/Allergies"
cardinality="many" inverse="RelatedCubes/Patients"
 nullReplacement="No Data Available"/>

<relationship name="RelatedCubes/Cities" displayName="Cities"
relatedCube="RelatedCubes/Cities"
cardinality="one"
 sourceProperty="HomeCity"/>

<relationship name="RelatedCubes/Doctors" displayName="Doctors"
relatedCube="RelatedCubes/Doctors"
cardinality="one"
 sourceProperty="PrimaryCarePhysician"  nullReplacement="No Doctor"/>
 
<dimension name="AgeD" displayName="AgeD" 
allCaption="All Patients"  allDisplayName="All Patients">
<hierarchy name="H1" displayName="H1">
<level name="Age Group" displayName="Age Group"
sourceProperty="Age" 
rangeExpression="(,29]:0 to 29;[30,59]:30 to 59;[60,):60+;"
 factName="DxAgeGroup" />
<level name="Age Bucket" displayName="Age Bucket"
sourceExpression="##class(DeepSee.Model.PatientsCube).GetAgeBucket(%source.Age)" 
 factName="DxAgeBucket"/>
<level name="Age" displayName="Age"
sourceProperty="Age"
factName="DxAge">
<property name="Age" displayName="Age"
sourceExpression='$CASE($LENGTH(%source.Age),2:%source.Age,:"0"_%source.Age)'
sort="asc"
 factName="PxAge"/>
</level>
</hierarchy>
</dimension>

<dimension name="DiagD" displayName="DiagD" hasAll="false" >
<hierarchy name="H1" displayName="H1">
<level name="Diagnoses" displayName="Diagnoses"
list="true" 
sourceProperty="DiagnosesAsLB" 
factName="DxDiagnoses"> 
</level>
</hierarchy>
</dimension>

<dimension name="GenD" displayName="GenD" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Gender" displayName="Gender"  
sourceProperty="Gender" 
 useDisplayValue="true" factName="DxGender"/>
</hierarchy>
</dimension>

<dimension name="ColorD" displayName="ColorD" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Favorite Color" displayName="Favorite Color" 
sourceExpression='##class(DeepSee.Model.PatientsCube).GetFavoriteColor(%source.PatientID)' 
 factName="DxColor"/>
</hierarchy>
</dimension>

<dimension name="PatGrpD" displayName="PatGrpD" hasAll="false">
<hierarchy name="H1" displayName="H1">
<level name="Tested" displayName="Tested" 
sourceExpression='$SELECT(%source.TestScore="":"No",1:"Yes")' 
 factName="DxTested"/>
<level name="Patient Group" displayName="Patient Group" 
sourceExpression='$CASE(%source.PatientGroup,"A":"Group A","B":"Group B",:"None")'
 factName="DxPatGroup"/>
</hierarchy>
</dimension>

<measure name="Avg Age" displayName="Avg Age" 
sourceProperty="Age" 
 aggregate="AVG"/>

<measure name="Avg Allergy Count" displayName="Avg Allergy Count" 
type="integer"
sourceExpression='##class(DeepSee.Model.PatientsCube).GetAllergyCount(%source.%ID)' 
 aggregate="AVG" />

<measure name="Avg Test Score" displayName="Avg Test Score" 
sourceProperty="TestScore" 
 aggregate="AVG"/>

<listing name="Details" displayName="Details" 
 fieldList='PatientID,Age,Gender,HomeCity->Name AS "Home City",TestScore AS "Test Score",PrimaryCarePhysician'
  orderBy="Age,Gender" /> 

</cube>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.SampleListingGroup">
<Description><![CDATA[
This class defines a listing group for the DeepSee Patients sample. 
To see the definition of this listing group, use the DeepSee > Tools > Listing Group Manager menu option
or open this class in Studio.]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>%DeepSee.ListingGroupDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63616,56716.962884</TimeCreated>
<DependsOn>DeepSee.Model.PatientsCube,DeepSee.Model.RelCubes.RPatients,DeepSee.Model.SubjectAreas.AsthmaPatients,DeepSee.Model.SubjectAreas.YoungPatients</DependsOn>

<Parameter name="XMLTYPE">
<Description>
Need this because we have another listing group class with the same short class name.
We use the XMLTYPE parameter to make sure these two classes project differently to XML.</Description>
<Default>PatientsSampleListingGroup</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="Listings">
<XMLNamespace>http://www.intersystems.com/deepsee/listinggroup</XMLNamespace>
<Data><![CDATA[
<listingGroup xmlns="http://www.intersystems.com/deepsee/listinggroup" name="Additional Listings for Patients Sample" disabled="false" targetCubes="PATIENTS,RELATEDCUBES/PATIENTS,ASTHMAPATIENTS,YOUNGPATIENTS">
  <listing name="Sample Listing 1" displayName="Sample Listing 1" disabled="false" listingType="table" fieldList="PatientID,Gender,BirthDate,Age,HomeCity-&gt;PostalCode ZIP,HomeCity-&gt;Name City,PatientGroup"></listing>
  <listing name="Sample Listing 2" disabled="false" listingType="table" fieldList="PatientID,PatientGroup,DiagnosesAsString,TestScore"></listing>
</listingGroup>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.SubjectAreas.AsthmaPatients">
<Description><![CDATA[
This class is for use with DeepSee II. 
<p>It contains a subject area based on the patients cube (DeepSee.Model.PatientsCube). 
To view the subject area definition, open this class in Studio.
]]></Description>
<Super>%DeepSee.SubjectArea</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>
<DependsOn>DeepSee.Model.PatientsCube</DependsOn>

<XData name="SubjectArea">
<Description>
This XData definition defines the SubjectArea.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/subjectarea</XMLNamespace>
<Data><![CDATA[
<subjectArea name="AsthmaPatients" 
    displayName="Asthma Patients"
	baseCube="Patients" filterSpec="diagd.h1.diagnoses.asthma" >
	</subjectArea>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.SubjectAreas.DemoMDX">
<Description><![CDATA[
This class is for use with DeepSee II. 
<p>It contains a subject area based on the patients cube (DeepSee.Model.PatientsCube). 
To view the subject area definition, open this class in Studio.
]]></Description>
<Super>%DeepSee.SubjectArea</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61956,58385</TimeCreated>
<DependsOn>DeepSee.Model.PatientsCube</DependsOn>

<XData name="SubjectArea">
<Description>
This XData definition defines the SubjectArea.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/subjectarea</XMLNamespace>
<Data><![CDATA[
<subjectArea name="DemoMDX" 
	baseCube="Patients" 
	countMeasureCaption="%COUNT" >
  <dimension name="AgeD" hidden="false">
    <hierarchy name="H1" hidden="false">
      <level name="Age" hidden="true"></level>
    </hierarchy>
  </dimension>

  <dimension name="AllerSevD" hidden="true">
  </dimension>

  <dimension name="BirthD" hidden="false">
    <hierarchy name="H1" hidden="false">
      <level name="Decade" hidden="true"></level>
      <level name="Period" hidden="true"></level>
      <level name="Date" hidden="true"></level>
    </hierarchy>
  </dimension>

  <dimension name="BirthTD" hidden="true">
  </dimension>

  <dimension name="DocD" hidden="false">
    <hierarchy name="H1" hidden="false">
      <level name="Doctor Group" hidden="true"></level>
    </hierarchy>
  </dimension>

  <dimension name="PatGrpD" hidden="true">
  </dimension>

  <dimension name="ProfD" hidden="true">
  </dimension>

<measure name="Encounter Count" hidden="true"/>

<measure name="Avg Enc Count" hidden="true"/>


</subjectArea>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Model.SubjectAreas.YoungPatients">
<Description><![CDATA[
This class is for use with DeepSee II. 
<p>It contains a subject area based on the patients cube (DeepSee.Model.PatientsCube). 
To view the subject area definition, open this class in Studio.
]]></Description>
<Super>%DeepSee.SubjectArea</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>
<DependsOn>DeepSee.Model.PatientsCube</DependsOn>

<XData name="SubjectArea">
<Description>
This XData definition defines the SubjectArea.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/subjectarea</XMLNamespace>
<Data><![CDATA[
<subjectArea name="YoungPatients" 
    displayName="Young Patients"
	baseCube="Patients" filterSpec="aged.h1.[age group].[0 to 29]" >
	</subjectArea>
]]></Data>
</XData>
</Class>


<Class name="DeepSee.Populate">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>It defines overall methods to generate data for this sample.
It also contains general-purpose utilities for populating these tables. 
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61895,40724</TimeCreated>

<Method name="Setup">
<Description>
Add this alias so that each DeepSee sample has a Setup() method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patCount:%Integer=1000,options:%String="ADTR",restore:%Boolean=0</FormalSpec>
<Implementation><![CDATA[	do ..GenerateAll(patCount,options,restore)
]]></Implementation>
</Method>

<Method name="GenerateAll">
<Description>
invoke this method to set up all the data for these classes
NB: restore argument no longer does anything</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patCount:%Integer=1000,options:%String="ADTR",restore:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
	//generates patients & rainfall data
	//also builds patients and cityrainfall cube 
	//(because DSTIME="auto" in the source classes)
	//don't generate encounter data by default
	do ..GenerateData(patCount,,options)
	
	//build CityCube
	do ##class(%DeepSee.Utils).%BuildCube("Cities")

	//build cube for new connector example
	do ##class(%DeepSee.Utils).%BuildCube("ConnectorCube")

	//generate another 100 patients in the disconnected second set & build cube
	//do ..GeneratePatientQuerySample(100)
		
	//must build related cubes in correct order
	do ..BuildRelatedCubes()

	//must build cubes with shared dimensions in correct order
	do ..BuildCompoundCubes()
	
	//set up term lists used by controls on dashboards
	do ..SetupTermLists()

    //define pivot variables
    do ..SetupVariables()
]]></Implementation>
</Method>

<Method name="GenerateData">
<Description><![CDATA[
This method generates the sample data for the patients and related classes.
<p>patCount specifies the number of patients to generate in DeepSee.Study.Patients.
<p>patientsPerDoc specifies the approximate ratio of patients per doctor.
At least one doctor is always created.
<p>options is a case-insensitive string that controls whether certain child data is also generated.
<ul>
<li>If it includes the letter A, allergy data is generated. This option is on by default.</li>
<li>If it includes the letter D, diagnosis data is generated. This option is on by default.</li>
<li>If it includes the letter T, the PatientDetails table is populated. This option is on by default.</li>
<li>If it includes the letter E, the PatientEncounter table is populated. This option is off by default.</li>
<li>If it includes the letter R, the CityRainfall table is populated. This option is off by default.</li>
<li>If it includes the letter X, half the patients are written to the DeepSee.Study.PatientSet2 
table (the "extra" Set) and half are written to DeepSee.Study.Patients. This option is off by default.</li>
</ul>
genNulls specifies whether to insert random null values. By default, this option is on, and the
GenerateData method sets the patient's primary care physician, part of the allergy data, and assorted
other data to null in a percentage of cases (or in some cases, it simply does not generate child data).
<p>genDateNulls specifies whether to insert random null values for birth dates. 
By default, this option is off.
<p>For DeepSee I, it is recommended that you disable the DeepSee incremental update feature 
while generating any large amounts of data (Site Options > ETL > Incremental Updates).
<p>This method does not rebuild the DeepSee I indices. See the DeepSee I documentation.
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patCount:%Integer=10000,patientsPerDoc:%Numeric=25,options:%String="ADT",genNulls:%Boolean=1,genDateNulls:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set start=$PIECE($HOROLOG,",",2)

    Set status=$$$OK
    If ($FIND(options,"X")) {
        Set generateextraset=1
        Set mainpatcount=patCount\2
        Set extrapatcount=patCount\2
        }
        Else {
            Set generateextraset=0
            Set mainpatcount=patCount
            }

    //first set up code tables
    Write !, "Setting up code tables"
    Set status=..SetUpCodeTables()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    
    If ($FIND(options,"R")) {
	    Set status=##class(DeepSee.Study.CityRainfall).GenerateData()
        If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
	    }
    
    //Set up doctors
    If (patientsPerDoc<1) {
        Set patientsPerDoc=1
        }
        
    Set docCount=patCount\patientsPerDoc
    If (docCount < 1) {
        Set docCount=1
        }

    Write !, "Setting up "_ docCount_" doctors"
    Set status=##class(DeepSee.Study.Doctor).GenerateData(docCount,genNulls)
    If $$$ISERR(status) {Quit $System.Status.DisplayError(status)}
    
    //Set up patients
    Set status=##class(DeepSee.Study.Patient).GenerateData(mainpatcount,options,genNulls,genDateNulls)
    If $$$ISERR(status) {Quit $System.Status.DisplayError(status)}

    If generateextraset {
        Set status=##class(DeepSee.Study.PatientSet2).GenerateData(extrapatcount,options,genNulls)
        If $$$ISERR(status) {Quit $System.Status.DisplayError(status)}
        }
        
    Write !,"Elapsed time: ",($PIECE($HOROLOG,",",2)-start)," seconds"
    Quit status
]]></Implementation>
</Method>

<Method name="SetUpCodeTables">
<Description>
Called by GenerateData</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Kill ^DeepSee.Study.SetupData
    Set ^DeepSee.Study.SetupData="This global is created by setup methods in the DeepSee.Study package."
    Set status=##class(DeepSee.Study.Allergen).Setup()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Set status=##class(DeepSee.Study.AllergySeverity).Setup()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Set status=##class(DeepSee.Study.City).Setup()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Set status=##class(DeepSee.Study.Diagnosis).Setup()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Set status=##class(DeepSee.Study.Profession).Setup()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Quit status
]]></Implementation>
</Method>

<Method name="RandomTrue">
<Description>
Returns true randomly some percentage of the time.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cutoff:%Numeric,scale:%Numeric=1000000</FormalSpec>
<Implementation><![CDATA[
    //scale everything up to deal with fractional cutoff values
    Set scaledcutoff=scale*cutoff
    Set lotterypick=$random(scale*100)
    
    If (lotterypick<scaledcutoff) {
        Set maybetrue=1
        }
        Else {
            Set maybetrue=0
            }
    Quit maybetrue
]]></Implementation>
</Method>

<Method name="BirthDateODBC">
<Description>
Given an age, returns an appropriate birthdate as a string.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>age:%Numeric</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set currentyear=$PIECE($ZDATE($h,6)," ",3)  ; YYYY
    Set birthyear=currentyear-age
    
    Set birthdate=..RandomODBCDateString(birthyear) ; returns YYYY-MM-DD
    
    Quit birthdate
]]></Implementation>
</Method>

<Method name="RandomODBCDateString">
<Description><![CDATA[
Given a year, returns a suitable date in that year, in 
the form "YYYY-MM-DD" 
<p>For example: 2008-07-01 ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>year:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set month=$RANDOM(12)+1

    //figure out how many days in this month
    Set daycount=$CASE(month,1:31,2:28,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31)
    Set isleapyear=$S((year)#4=0:$S('((((year)#100)=0)&&(((year)#400)'=0)):1,1:0),1:0) ; got this from Joe
    If (isleapyear && (month="2")) {Set daycount=29}

    Set day=$RANDOM(daycount)+1

    Set padday=$TR($J(day,2)," ",0)         ; adds 0 to start of 1-digit days
    Set padmonth=$TR($J(month,2)," ",0)     ; adds 0 to start of 1-digit months
    Quit year_"-"_padmonth_"-"_padday
]]></Implementation>
</Method>

<Method name="RandomMMMD">
<Description><![CDATA[
Given a year, returns a suitable date in that year, in
the form "MMM D, YYYY" 
<p>For example: Jul 1, 2003 
<p>Note: This is not currently used.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>year:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set monthlist=$LB("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sept","Oct","Nov","Dec")
    Set month=$LI(monthlist,$RANDOM(12)+1)

    //figure out how many days in this month
    Set daycount=$CASE(month,"Jan":31,"Feb":28,"Mar":31,"Apr":30,"May":31,"Jun":30,"Jul":31,"Aug":31,"Sept":30,"Oct":31,"Nov":30,"Dec":31)
    Set isleapyear=$S((%y)#4=0:$S('((((%y)#100)=0)&&(((%y)#400)'=0)):1,1:0),1:0)
    If (isleapyear && (month="Feb")) {Set daycount=29}

    Set day=$RANDOM(daycount)+1

    Quit month_" "_day_", "_year
]]></Implementation>
</Method>

<Method name="RandomGenderAndAge">
<Description><![CDATA[
Returns a string containing age+gender chosen from 2000 census distribution
<p>format: gender,age 
<p>gender is M or F]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    //draw a number from the lottery
    Set rand=$RANDOM(100000)+1 
        
    //now select a bucket and generate an age, based on the lottery
    //this is not compact but is easy to compare to my spreadsheet
    If (rand<3486) {
        Set age=$R(5)       ; 0 < =age <= 4
        }
        Elseif ((rand>=3486) && (rand<7225)) {
            Set age=5+$R(5)     ; 5 < =age <= 9
            }
        Elseif ((rand>=7225) && (rand<10964)) {
            Set age=10+$R(5)    ; 10 <= age <= 14
            }
        Elseif ((rand>=10964) && (rand<14656)) {
            Set age=15+$R(5)    ; 15 <= age <= 19
            }
        Elseif ((rand>=14656) && (rand<18098)) {
            Set age=20+$R(5)    ; 20 <= age <= 24
            }
        Elseif ((rand>=18098) && (rand<21580)) {
            Set age=25+$R(5)    ; 25 <=age <= 29
            }
        Elseif ((rand>=21580) && (rand<25248)) {
            Set age=30+$R(5)    ; 30 <=age <= 34
            }
        Elseif ((rand>=25248) && (rand<29270)) {
            Set age=35+$R(5)    ; 35 <=age <= 39
            }
        Elseif ((rand>=29270) && (rand<33225)) {
            Set age=40+$R(5)    ; 40 <=age <= 44
            }
        Elseif ((rand>=33225) && (rand<36736)) {
            Set age=45+$R(5)    ; 45 <=age <= 49
            }
        Elseif ((rand>=36736) && (rand<39797)) {
            Set age=50+$R(5)    ; 50 <=age <= 54
            }
        Elseif ((rand>=39797) && (rand<42110)) {
            Set age=55+$R(5)    ; 55 <=age <= 59
            }
        Elseif ((rand>=42110) && (rand<43935)) {
            Set age=60+$R(5)    ; 60 <=age <= 64
            }
        Elseif ((rand>=43935) && (rand<45449)) {
            Set age=65+$R(5)    ; 65 <=age <= 69
            }
        Elseif ((rand>=45449) && (rand<46886)) {
            Set age=70+$R(5)    ; 70 <=age <= 74
            }
        Elseif ((rand>=46886) && (rand<47968)) {
            Set age=75+$R(5)    ; 75 <=age <= 79
            }
        Elseif ((rand>=47968) && (rand<48620)) {
            Set age=80+$R(5)    ; 80 <=age <= 84
            }
        Elseif ((rand>=48620) && (rand<49056)) {
            Set age=85+$R(8)    ; 85 <=age
            }       
        //start on female part of the lottery
        Elseif ((rand>=49056) && (rand<52383)) {
            Set age=$R(5)       ; 0 < =age <= 4
            }
        Elseif ((rand>=52383) && (rand<55946)) {
            Set age=5+$R(5)     ; 5 < =age <= 9
            }
        Elseif ((rand>=55946) && (rand<59502)) {
            Set age=10+$R(5)    ; 10 <= age <= 14
            }
        Elseif ((rand>=59502) && (rand<62995)) {
            Set age=15+$R(5)    ; 15 <= age <= 19
            }   
        Elseif ((rand>=62995) && (rand<66291)) {
            Set age=20+$R(5)    ; 20 <= age <= 24
            }
        Elseif ((rand>=66291) && (rand<69696)) {
            Set age=25+$R(5)    ; 25 <=age <= 29
            }
        Elseif ((rand>=69696) && (rand<73317)) {
            Set age=30+$R(5)    ; 30 <=age <= 34
            }
        Elseif ((rand>=73317) && (rand<77363)) {
            Set age=35+$R(5)    ; 35 <=age <= 39
            }
        Elseif ((rand>=77363) && (rand<81383)) {
            Set age=40+$R(5)    ; 40 <=age <= 44
            }
        Elseif ((rand>=81383) && (rand<85009)) {
            Set age=45+$R(5)    ; 45 <=age <= 49
            }
        Elseif ((rand>=85009) && (rand<88199)) {
            Set age=50+$R(5)    ; 50 <=age <= 54
            }
        Elseif ((rand>=88199) && (rand<90672)) {
            Set age=55+$R(5)    ; 55 <=age <= 59
            }
        Elseif ((rand>=90672) && (rand<92686)) {
            Set age=60+$R(5)    ; 60 <=age <= 64
            }
        Elseif ((rand>=92686) && (rand<94510)) {
            Set age=65+$R(5)    ; 65 <=age <= 69
            }
        Elseif ((rand>=94510) && (rand<96271)) {
            Set age=70+$R(5)    ; 70 <=age <= 74
            }
        Elseif ((rand>=96271) && (rand<97824)) {
            Set age=75+$R(5)    ; 75 <=age <= 79
            }
        Elseif ((rand>=97824) && (rand<98930)) {
            Set age=80+$R(5)    ; 80 <=age <= 84
            }
        Elseif (rand>=98930) {
            Set age=85+$R(15)   ; 85 <=age
            }
        
    //now append gender string
    If (rand<49056) {
        Set return="M,"_age
        }
        Else {
            Set return="F,"_age
            }
    
    Quit return
]]></Implementation>
</Method>

<Method name="Count">
<Description>
Returns count of IDs in the given extent or 0 if none.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cls</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
    //convert class name to table name; assume first period needs to
    //be converted to an underscore (this is not a general-purpose method)
    Set periodpos=$FIND(cls,".")
    Set part1=$EXTRACT(cls,0,periodpos-2)
    Set part2=$EXTRACT(cls,periodpos,*)
    Set tname=part1_"_"_part2
 
    Set myquery="SELECT Count(*) as RecCount FROM "_tname
    Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
    Set status=rset.Prepare(myquery)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Set status=rset.Execute()
    
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "error with query" Quit}
    Set reccount=0
    Do rset.Next()
    Set reccount=rset.Data("RecCount")
    Quit reccount
]]></Implementation>
</Method>

<Method name="UpdateIdCache">
<Description>
Given a class, creates a cache that contains all the current IDs for
that class. Use GetRandomId() to get a random ID from this cache.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cls</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   Set reccount = ..Count(cls)
   Set periodpos=$FIND(cls,".")
   Set part1=$EXTRACT(cls,0,periodpos-2)
   Set part2=$EXTRACT(cls,periodpos,*)
   Set tname=part1_"_"_part2

   //allocate a temporary pointer
   Set tp=$INCREMENT(^CacheTemp)
   //save this so we can use it later to find this cache
   Set ^DeepSee.Study.SetupData("ExtentSetPointers",cls)=tp
   
   //use same unique tp for temporary pointer and for "name" of
   //the extent set
   Set status=##class(%PopulateUtils).BuildValueSetSQL(tp,tp,tname,"%ID",reccount)
   
   Quit status
]]></Implementation>
</Method>

<Method name="GetRandomId">
<Description>
Returns a random ID from the given class.
This method assumes that you have already run UpdateIdCache().</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cls</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   Set test=$DATA(^DeepSee.Study.SetupData("ExtentSetPointers",cls))
   If test {Set tp=^DeepSee.Study.SetupData("ExtentSetPointers",cls)}
   Else {Quit "no id"}

   //use same unique tp for temporary pointer and for "name" of
   //the extent set
   Set randomid=##class(%PopulateUtils).ExtentValue(tp,tp)
   Quit randomid
]]></Implementation>
</Method>

<Method name="GeneratePatientQuerySample">
<ClassMethod>1</ClassMethod>
<FormalSpec>patCount:%Integer=100</FormalSpec>
<Implementation><![CDATA[
	//generate additional patients in the disconnected second set
	//for the benefit of PatientsQuery cube
	do ##class(DeepSee.Study.PatientSet2).GenerateData(patCount)
	//build PatientsQueryCube
	do ##class(%DeepSee.Utils).%BuildCube("PatientsQueryCube")
]]></Implementation>
</Method>

<Method name="BuildRelatedCubes">
<Description>
Builds the related cubes in the correct order.
This is useful as a separate method in case you want to experiment with
the definitions of these cubes.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ##class(%DeepSee.Utils).%BuildCube("relatedcubes/cities")
    do ##class(%DeepSee.Utils).%BuildCube("relatedcubes/doctors")

    //can build these in either order:
    do ##class(%DeepSee.Utils).%BuildCube("relatedcubes/patients")
    do ##class(%DeepSee.Utils).%BuildCube("relatedcubes/cityrainfall")

    //build this one after relatedcubes/patients
    do ##class(%DeepSee.Utils).%BuildCube("relatedcubes/allergies")
]]></Implementation>
</Method>

<Method name="BuildCompoundCubes">
<Description>
Builds the cubes in the correct order for the compound cube example.
These cubes have shared dimensions and so must be built in a specific order.
This is useful as a separate method in case you want to experiment with
the definitions of these cubes.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    do ##class(%DeepSee.Utils).%BuildCube("compoundcube/patients")

    //can build these in any order:
    do ##class(%DeepSee.Utils).%BuildCube("compoundcube/cityrainfall")
    do ##class(%DeepSee.Utils).%BuildCube("compoundcube/doctors")
]]></Implementation>
</Method>

<Method name="ReassignPatients">
<Description><![CDATA[
Use this to try out <level> dependsOn attribute]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set query = "SELECT %Id as ID,PatientGroup FROM DeepSee_Study.Patient WHERE HomeCity->PostalCode IN (32006,32007)"
    set statement=##class(%SQL.Statement).%New()
    set sc = statement.%Prepare(query)
    IF 'sc { WRITE "%Prepare failed",$System.Status.DisplayError(sc) QUIT}
    set rset = statement.%Execute()
    WHILE rset.%Next() {
	    if rset.%Get("PatientGroup")="A" {
		    set id=rset.%Get("ID")
		    set p=##class(DeepSee.Study.Patient).%OpenId(id)
		    set p.PatientGroup="B"
		    do p.%Save()
		    }
     }

	set query = "SELECT %Id as ID,PatientGroup FROM DeepSee_Study.Patient WHERE HomeCity->PostalCode IN (34577,36711,38928)"
    set statement=##class(%SQL.Statement).%New()
    set sc = statement.%Prepare(query)
    IF 'sc { WRITE "%Prepare failed",$System.Status.DisplayError(sc) QUIT}
    set rset = statement.%Execute()
    WHILE rset.%Next() {
	    if rset.%Get("PatientGroup")="B" {
		    set id=rset.%Get("ID")
		    set p=##class(DeepSee.Study.Patient).%OpenId(id)
		    set p.PatientGroup="A"
		    do p.%Save()
		    }
     }
     Do ##class(%DeepSee.Utils).%SynchronizeCube("patients")
]]></Implementation>
</Method>

<Method name="Restore">
<Description>
restore initial state of generated data</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    kill ^DeepSee.Study.SetupData
    merge ^DeepSee.Study.SetupData			=^DeepSee.Study.Saved("SetupData")

    //never use this method in a real application
    do ##class(DeepSee.Study.Allergen).%KillExtent()
    do ##class(DeepSee.Study.AllergySeverity).%KillExtent()
    do ##class(DeepSee.Study.City).%KillExtent()
    do ##class(DeepSee.Study.CityRainfall).%KillExtent()
    do ##class(DeepSee.Study.Doctor).%KillExtent()
    do ##class(DeepSee.Study.Diagnosis).%KillExtent()
    do ##class(DeepSee.Study.Patient).%KillExtent()
    do ##class(DeepSee.Study.PatientDetails).%KillExtent()
    do ##class(DeepSee.Study.Profession).%KillExtent()

    merge ^DeepSee.Study.AllergenD			=^DeepSee.Study.Saved("AllergenD")
    merge ^DeepSee.Study.AllergySeverityD   =^DeepSee.Study.Saved("AllergySeverityD")
    merge ^DeepSee.Study.CityD				=^DeepSee.Study.Saved("CityD")
    merge ^DeepSee.Study.CityRainfallD		=^DeepSee.Study.Saved("CityRainfallD")
    merge ^DeepSee.Study.DoctorD			=^DeepSee.Study.Saved("DoctorD")
    merge ^DeepSee.Study.DiagnosisD			=^DeepSee.Study.Saved("DiagnosisD")
	merge ^DeepSee.Study.PatientC			=^DeepSee.Study.Saved("PatientC") 
	merge ^DeepSee.Study.PatientD			=^DeepSee.Study.Saved("PatientD") 
    merge ^DeepSee.Study.PatientDetailsD	=^DeepSee.Study.Saved("PatientDetailsD")
    merge ^DeepSee.Study.PatientDiag6F71D	=^DeepSee.Study.Saved("PatientDiag6F71D")
    merge ^DeepSee.Study.ProfessionD		=^DeepSee.Study.Saved("ProfessionD")
    
    //rebuild indices
    do ##class(DeepSee.Study.PatientDetails).%BuildIndices()
    do ##class(DeepSee.Study.PatientDiagnosis1).%BuildIndices()
    do ##class(DeepSee.Study.PatientDiagnosis2).%BuildIndices()
]]></Implementation>
</Method>

<Method name="SetupTermLists">
<Description>
Purely for demo purposes, this method defines term lists used by this sample.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set name="Patients Pivots"
	set uname="PATIENTS PIVOTS"
	write "Defining term list ",name,"...",!
	
	//cannot assume the following will work from release to release; replace with use of API when available
	kill ^DeepSee.TermList(uname)
	set ^DeepSee.TermList(uname,"name")=name
	set ^DeepSee.TermList(uname,"modDate")=$zdt($h,3)
	set ^DeepSee.TermList(uname,"data","Patients by Diagnosis","VALUE")="Use in Dashboards/For Patients Scorecard.pivot"
	set ^DeepSee.TermList(uname,"data","Patients by Age & Gender","VALUE")="Use in Dashboards/Patient Allergy Counts by Age & Gender.pivot"
	set ^DeepSee.TermList(uname,"data","Patients by Color","VALUE")="Use in Dashboards/Patients by Favorite Color.pivot"
	set ^DeepSee.TermList(uname,"data","Patients by Group","VALUE")="Use in Dashboards/Patients by Group.pivot"

	set name="Patients RowSpecs"
	set uname="PATIENTS ROWSPECS"
	write "Defining term list ",name,"...",!
	set ^DeepSee.TermList(uname,"modDate")=$zdt($h,3)
	set ^DeepSee.TermList(uname,"data","Age Groups","VALUE")="[aged].[h1].[age group].MEMBERS"
	set ^DeepSee.TermList(uname,"data","Allergies","VALUE")="[allerd].[h1].[allergies].MEMBERS"
	set ^DeepSee.TermList(uname,"data","Cities","VALUE")="[homed].[h1].[city].MEMBERS"
	set ^DeepSee.TermList(uname,"data","Diagnoses","VALUE")="[diagd].[h1].[diagnoses].MEMBERS"
	set ^DeepSee.TermList(uname,"data","Favorite Colors","VALUE")="[colord].[h1].[favorite color].MEMBERS"
	set ^DeepSee.TermList(uname,"data","Industries","VALUE")="[profd].[h1].[industry].MEMBERS"
	set ^DeepSee.TermList(uname,"data","Professions","VALUE")="[profd].[h1].[profession].MEMBERS"
	set ^DeepSee.TermList(uname,"data","ZIP Codes","VALUE")="[homed].[h1].[zip].MEMBERS"
]]></Implementation>
</Method>

<Method name="SetupVariables">
<Description>
Purely for demo purposes, this method defines pivot variables used by this sample.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//cannot assume the following will work from release to release; replace with use of API when available

	write "Defining YEAR pivot variable in PATIENTS cube",!
	kill ^DeepSee.Variables("PATIENTS","YEAR")
	set ^DeepSee.Variables("PATIENTS","YEAR")=$lb("Year","Year","","2012","literal","string","kpi","PatientsYears.kpi","","")
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.RESTClient">
<Description><![CDATA[
REST Application test bed <br/>
This is just a quick graphical alternative to cURL for people who 
need to exercise the API but hate to type <br />
Out of the box, this sample was designed to run against the DocServer example
in SAMPLES, but this can be customized by changing the SERVERCLASS parameter
to point to a different subclass of %CSP.REST, and changing the cspApplication
property to match the dispatch application defined in the management portal.<br />
This page should be hosted on the same server that provides the REST services as
it uses its own location.hostname properties for getting the host and port number of
the server<br />
<b>Additionally, the processRequest() method has a username and password pair hardcoded
into the method to save typing, this is fine for personal desk checking but should
be customized or removed before sharing this code</b>]]></Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>64182,59171.392689</TimeChanged>
<TimeCreated>63475,43575.281824</TimeCreated>

<Parameter name="JSINCLUDES">
<Default>zenCSLM.js,zenESVG.js,DeepSee.js</Default>
</Parameter>

<Parameter name="SERVERCLASS">
<Description>
This is the name of the CLASS that defines the UrlMap (the core of a REST service)
that you wish to explore, it should be a subclass of %CSP.REST</Description>
<Default>%DeepSee.REST.v1</Default>
</Parameter>

<Property name="serverClass">
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>..#SERVERCLASS</InitialExpression>
</Property>

<Property name="namespace">
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"SAMPLES"</InitialExpression>
</Property>

<Property name="server">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="requestUrl">
<Description>
Container for the current URL actually being used to send the request</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="cspApplication">
<Description>
This is the name of the REST dispatcher as defined in the SMP</Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"/api/deepsee"</InitialExpression>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
.heading {
	font:bold 18px Arial;
	text-align: center;
}

.routeDiv {
	border-top:1px solid #000042;
	border-bottom:1px solid #000042;
	position:relative;
	width:100%;
	height:25px;
	display:block;
	font:16px monospace;
}

.routeURL {
	border-right:1px solid #000042;
	position:absolute;
	top:0px;
	bottom:0px;
	left:10px;
	width:550px;
}
.routeMethod {
	border-right:1px solid #000042;
	position:absolute;
	top:0px;
	bottom:0px;
	left:560px;
	width:70px;
	text-align:center;
}

.routeService {
	position:absolute;
	top:0px;
	bottom:0px;
	left:640px;
	width:250px;
}

.responseText {
	position:absolute;
	top:45px;
	left:5px;
	right:5px;
	bottom:8px;
}

.reqForm {
	position:absolute;
	top:3px;
	left:10px;
	right:10px;
	bottom:3px;
}

.targetUrl {
	font-weight:bold;
	border-bottom:2px solid #000042;
	margin-bottom:5px;
	margin-top:5px;
}

.parameterBlock {
	position:relative;
	width:100%;
}

.parameterName {
	position:absolute;
	top:0px;
	left:5px;
}

.parameterValue {
	position:relative;
	left:45%;
	width:50%;
	top:0px;
}

#bodyCtrl {
	width:98%;
	height:50px;
}

#submit {
	margin:5%;
	width:90%;
}

#urlMap {
	position:absolute;
	top:60px;
	left:0px;
	right:0px;
	bottom:0px;
	overflow:auto;
	background:#fafaff;
}

#requestArea {
	position:absolute;
	top:00px;
	left:0px;
	right:0px;
	bottom:0px;
	overflow:auto;
	background:#eeeeff;
}

#responseArea {
	position:absolute;
	top:0px;
	left:0px;
	right:0px;
	bottom:0px;
	overflow:hidden;
	background:#eeffee;
}

.directions {
	font-weight:bold;
	text-align:center;
}

#mapClass {
	position:absolute;
	font:bold 16px monospace;
	top:5px;
	right:10px;
}

#appPrefix {
	position:absolute;
	font:bold 16px monospace;
	top:5px;
	left:10px;
}

#namespace {
	position:absolute;
	font:bold 16px monospace;
	top:5px;
	left:190px;
}


</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="" layout="none">
<activeVGroup split="50%" handleThickness="3px">
<html>
<div class="heading">DeepSee REST Services Test Page</div>
<div class="directions">Click on a service to generate a request form</div>
<div id="mapClass">
</div>
<div id="appPrefix">
</div>
<div id="namespace">
</div>
<div id="urlMap">
</div>
</html>
<activeHGroup split="25%" handleThickness="3px">
<group id="requestArea" layout="none"></group>
<vgroup>
<group id="responseArea" layout="none"></group>
</vgroup>
</activeHGroup>
</activeVGroup>
</page>
]]></Data>
</XData>

<Method name="onloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.currentRoute = -1;
	
	this.setRouting();

	// Add a little context for the user
	
	var div = document.getElementById("mapClass");
	div.innerHTML = zenEscapeHTML(this.serverClass);
	
	var div = document.getElementById("appPrefix");
	var html = [];
	html.push('<div class="appPrefix">');
	html.push('<div>Application</div>');
	html.push('<input class="appPrefix" id="appInput" type="text" value="'+this.cspApplication+'" onchange="zenPage.changeApplication()"/>');
	html.push('</div>');
	//div.innerHTML = zenEscapeHTML(this.cspApplication + ' on ' + this.server);
	div.innerHTML = html.join('\n');
	
	var div = document.getElementById("namespace");
	var html = [];
	html.push('<div class="namespace">');
	html.push('<div>Namespace</div>');
	html.push('<input class="namespace" id="nsInput" type="text" value="'+this.namespace+'" onchange="zenPage.changeNamespace()"/>');
	html.push('</div>');
	div.innerHTML = html.join('\n');
]]></Implementation>
</Method>

<Method name="setRouting">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (this.isSystemApplication()) {
		this.prefix = "//"+location.host+this.cspApplication+'/v1/'+encodeURIComponent(this.namespace);
	}
	else {
		this.prefix = "//"+location.host+this.cspApplication;
	}

	this.routes = this.getRoutes();
	this.renderRoutes(this.routes);
	this.renderRequestForm(0);
]]></Implementation>
</Method>

<Method name="changeApplication">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var cspApplication = document.getElementById('appInput').value;
	if ('/'==cspApplication[cspApplication.length-1]) {
		cspApplication = cspApplication.substr(0,cspApplication.length-1);
		document.getElementById('appInput').value = cspApplication;
	}

	this.cspApplication = cspApplication;
	
	document.getElementById('nsInput').disabled = (!this.isSystemApplication());
	if (this.isSystemApplication()) {
		document.getElementById('nsInput').value = this.namespace;
	}
	else {
		document.getElementById('nsInput').value = '';
	}

	this.setRouting();
]]></Implementation>
</Method>

<Method name="changeNamespace">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.namespace = document.getElementById('nsInput').value;
	this.setRouting();
]]></Implementation>
</Method>

<Method name="isSystemApplication">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return ('/api/deepsee'==this.cspApplication.toLowerCase())
]]></Implementation>
</Method>

<Method name="selectRoute">
<Description>
Callback function to highlight the last clicked-upon service and
call out to generate a form</Description>
<FormalSpec>idx</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (this.currentRoute>=0) {
		var div = document.getElementById("route_"+this.currentRoute);
		div.style.background = "";
	}
	var div = document.getElementById("route_"+idx);
	div.style.background = "#f0f0ff";
	this.renderRequestForm(idx);
]]></Implementation>
</Method>

<Method name="renderRoutes">
<Description>
Renderer for client-side projection of the URL</Description>
<FormalSpec>rd</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var div = document.getElementById("urlMap");
	var html = [];
	for (var i=0;i<rd.length;i++) {
		var o = rd[i];
		html.push('<div id="route_'+i+'" class="routeDiv" dataIdx="'+i+'" onclick="zenPage.selectRoute('+i+');">');
		html.push('<div class="routeURL">'+o.url+'</div>');
		html.push('<div class="routeMethod">'+o.method+'</div>');
		html.push('<div class="routeService">'+o.call+'</div>');
		html.push('</div>');
	}
	div.innerHTML=html.join("\n");
]]></Implementation>
</Method>

<Method name="renderRequestForm">
<Description>
Generate a basic form for the most common options people are likely to 
need when desk checking a REST url Map.  For GET requests the options
are fairly limited.  For PUT and POST requests, you have the option of entering
text for the body of the request, or selecting a file from disk.  If a disk
file is selected, the contents of the text area widget on screen is ignored.</Description>
<FormalSpec>idx</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.currentRoute = -1;
	var div = document.getElementById("requestArea");
	var o = this.routes[parseInt(idx)];
	if (o) {
		var html = [];
		this.currentRoute = parseInt(idx);
		html.push('<div class="reqForm">');
		html.push('<div class="heading">Request</div>');
		html.push('<div class="targetUrl">'+o.method+' '+o.url+'</div>');
		if (o.parms) {
			for (var i=0;i<o.parms.length;i++) {
				html.push('<div class="parameterBlock">');
				html.push('<div class="parameterName">'+o.parms[i]+'</div>');
				html.push('<input class="parameterValue" id="parm_'+i+'_Ctrl" type="text" />');
				html.push('</div>');				
			}
		}
		html.push('<div>Accept: <select id="acceptCtrl">');
		html.push('<option value="application/json">JSON</option>');
		html.push('<option value="text/plain">Text</option>');
		html.push('</select></div>');
		if (o.method=="POST") {
			html.push('<div>Content-Type: <select id="contentCtrl">');
			html.push('<option value="application/json">JSON</option>');
			html.push('<option value="text/plain">Text</option>');
			html.push('</select></div>');
			html.push('<textArea id="bodyCtrl"></textArea>');
			html.push('<input type="file" id="fileCtrl" />');	
		}
		html.push('<button type="button" id="submit" onclick="zenPage.processRequest()">SUBMIT</button>');
		html.push('</div>');
		div.innerHTML=html.join("\n");
	}
]]></Implementation>
</Method>

<Method name="processRequest">
<Description>
This builds up an abstract model of a request object based on 
values entered into the generated form.  NOTE that the username and
password have been hard-coded here for speed of testing.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// Enter REST server authentication here for testing
	var userName = "";
	var userPassword = "";

	var r = {};
	if (this.currentRoute==-1) return;
	var o = this.routes[this.currentRoute];
	
	var tmp = o.url;
	if (o.parms) {
		for (var i=0;i<o.parms.length;i++) {
			//var val = encodeURIComponent(document.getElementById('parm_'+i+'_Ctrl').value);
			var val = document.getElementById('parm_'+i+'_Ctrl').value;
			tmp = tmp.split(o.parms[i]).join(val);
		}
	}
	r.url = this.prefix+tmp;
	r.method = o.method;
	r.user = userName;
	r.passwd = userPassword;
	r.callback = zenPage.processResponse;
	r.acceptType = document.getElementById("acceptCtrl").value;
	if (r.method=="POST" || r.method=="PUT") {
		r.contentType = document.getElementById("contentCtrl").value;
		r.body = document.getElementById("bodyCtrl").value;
		
		var fileHandle = document.getElementById("fileCtrl").files[0];
		if (fileHandle) {
			r.body = fileHandle;
		}
	}
	
	zenPage.requestUrl = r.url;	// Store the URL for display
	
	zenPage.clearResponseArea(0);		// Needs to be called after the requestUrl is set!
	
	this.submitRequest(r);
]]></Implementation>
</Method>

<Method name="submitRequest">
<Description><![CDATA[
This generic method takes a request profile in the form of a JS object
and initiates a simple HTTP Request.
The request profile may include the any of the following: <br />
url - the resourse to request <br />
method - the method to use, one of GET, PUT, POST or DELETE <br />
user - user name for authentication purposes <br />
passwd - user password for authentication purposes <br />
acceptType - preferred MIME type for the response <br />
contentType - MIME type of request body <br />
body - content of request body <br />
async - flag to indicate request should be made asynchronously <br />
callback - method to when complete (request object will be passed in as sole parameter) <br />]]></Description>
<FormalSpec>r</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// check for required properties
	if (!r || !r.method || !r.url ) return;
	// create gemeric request
	var xhr = new XMLHttpRequest();

	// customize for our request, async calls by default
	if (r.async=='undefined') r.async = true;
	
	xhr.open(r.method,r.url,r.async);

	// set up callback handler
	xhr.onload = function () {
  		if (xhr.status === 200) {
    		if (r.callback) {
				r.callback(xhr);
    		}
			else {
   				alert('done');
			}
  		} else {
    		alert('An error occurred\nUse the browsers Developer Tools to inspect headers.');
  		}
  	}

	if (r.user) {
		var tmp=r.user;
		if (r.passwd) tmp=r.user+':'+r.passwd;
		var authStr = "Basic "+btoa(tmp);
		xhr.setRequestHeader("Authorization",authStr);
	}
		
	if (r.acceptType) {
		xhr.setRequestHeader("Accept",r.acceptType);
	}
	var contents = null;
	if (r.method=='POST'||r.method=='PUT') {
		if (r.contentType) {
			xhr.setRequestHeader("Content-Type",r.contentType);
		}
		if (r.body) {
			contents = r.body;
		}
	}
	// kick off the request
	xhr.send(contents);
]]></Implementation>
</Method>

<Method name="processResponse">
<Description>
Local method to just spit out the body of the response object</Description>
<FormalSpec>xhr</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (xhr) {
		var body = xhr.responseText;
		var bodyObject = JSON.parse(body);
	}
	
	var div = document.getElementById("responseArea");
	var html=[];
	html.push('<div class="heading">Response</div>');
	html.push('<div class="targetURL" style="position:absolute;left:10px;">'+zenPage.requestUrl+'</div>');
	html.push('<div class="responseText">');
	html.push('<textArea style="width:100%;height:100%;">');
	if (bodyObject) {
		html.push(JSON.stringify(bodyObject,null,2));
	}
	html.push("</textArea>");
	html.push('</div>');
	div.innerHTML=html.join("\n");
]]></Implementation>
</Method>

<Method name="getRoutes">
<Description><![CDATA[
The route data comes down from the server as an XML block (from the XData section
of whatever SERVERCLASS was defined) and needs to be converted to a JavaScript 
object for local processing. The server side call here is the <i>only</i> reason this 
page happens to be a Zen page, all the work done creating XMLHttpRequest objects
could have been done from any HTML5 web page, REST does not require the client to be 
Zen or even CSP.]]></Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var routeData = [];
	var xmlData = this.GetRouteData();
	if (xmlData.indexOf("!!")!=0) {
		var xRoot = ESVG.xmlParse(xmlData);
		if (!xRoot) return(null);
		var rInfo = ESVG.xmlGetChildByNodeName(xRoot,"Routes");
		if (rInfo==null) return(null);
		for (var k = rInfo.firstChild;k!=null;k=k.nextSibling) {
			if (k.nodeName=="Route") {
				routeData.push(this.buildRouteObject(k));
			}
			else if (k.nodeName=="Map") {
				// N.B.:  This only supports a single Forward. Multiple forward chains would
				// require recursive handling.
				var newDispatchClass = k.getAttributeByName("Forward").nodeValue;
				if (newDispatchClass) {
					var fwdData = this.GetRouteData(newDispatchClass);
					
					if (fwdData.indexOf("!!")!=0) {
						var fRoot = ESVG.xmlParse(fwdData);
						if (!fRoot) return(null);
						var fInfo = ESVG.xmlGetChildByNodeName(fRoot,"Routes");
						if (fInfo==null) return(null);
						for (var f = fInfo.firstChild;f!=null;f=f.nextSibling) {
							if (f.nodeName=="Route") {
								routeData.push(this.buildRouteObject(f,k.getAttributeByName("Prefix").nodeValue));
							}
						}
					}
				}
			}
		}
	}
	return(routeData);
]]></Implementation>
</Method>

<Method name="buildRouteObject">
<FormalSpec>xmlNode,prefix</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var o={};
	o.url = (prefix ? prefix : '') + xmlNode.getAttributeByName("Url").nodeValue;
	var a = o.url.split('/');
	var parms = [];
	for (var i=0;i<a.length;i++) {
		if (a[i].indexOf(':')==0) parms.push(a[i]);
	}
	if (parms.length>0) o.parms = parms;
	o.method = xmlNode.getAttributeByName("Method").nodeValue;
	o.call = xmlNode.getAttributeByName("Call").nodeValue;
	return o;
]]></Implementation>
</Method>

<Method name="clearResponseArea">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.processResponse()
	/*
	var div = document.getElementById("responseArea");
	var html=[];
	html.push('<div class="heading">Response</div>');
	html.push('<div class="responseText">');
	html.push('<textArea style="width:100%;height:100%;">');
	html.push('');
	html.push("</textArea>");
	html.push('</div>');
	div.innerHTML=html.join("\n");
	*/
]]></Implementation>
</Method>

<Method name="GetRouteData">
<Description>
Read the UrlMap XData section from the class given in the SERVERCLASS parameter
and export it as a block of XML.  This is used by the client page to generate
on-screen request forms for exercising the various paths.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDispatchClass=""</FormalSpec>
<ReturnType>%ZEN.Datatype.string</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set tDispatchClass = $S(pDispatchClass'="":pDispatchClass,1:..#SERVERCLASS)
   	Set xdataID = tDispatchClass_"||UrlMap"
	Set m = ""
	If (xdataID="") {
	   Set m = "!!NOCLASS"
	}
	Else {
	   // Get a stream of XML from the XData block contained in this class
	   Set compiledXdata=##class(%Dictionary.CompiledXData).%OpenId(xdataID)
	   If '$IsObject(compiledXdata) {
		   Set m = "!!OPENFAILED"
	   }
	   Else {
		   Set tStream=compiledXdata.Data
		   If '$IsObject(tStream) {
			   Set tSC=%objlasterror 
			   Set m = "!!NODATA"
		   }
		   Else {
			   //iterate through document, node by node
			   Do tStream.Rewind()
			   While (tStream.AtEnd = 0) {
				   Set l = tStream.ReadLine()
				   
				   // +DTB297 - A regEx catch-all (.*) is used to add support the / character
				   // in these elements. Replace this with the known parameters to drive the
				   // test page controls.
				   If (l["/FilterMembers/") {
					   Set l = $Replace(l,"(.*)",":dataSource/:filterSpec")
				   }
				   ElseIf (l["/PivotVariableDetails/") {
					   Set l = $Replace(l,"(.*)",":cube/:variable")
				   }
				   ElseIf (l["/Filters/") {
					   Set l = $Replace(l,"(.*)",":dataSource")
				   }
				   ElseIf (l["(.*)") {
					   Set l = $Replace(l,"(.*)",":cube")
				   }
				   // -DTB297
				   
			 	   Set m = m_$CHAR(10)_l
			   }
		   }
	   }
	}	
	Quit m
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br/>
Subclasses can override this to add, remove, or modify 
items within the page object model, or to provide values
for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..server = $P($SYSTEM,":",2)
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="DeepSee.Study.Allergen">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>This class contains the allergen code lookup table. 
<p>You can extend or modify the data contained here by editing the XData block in this class. ]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="Code">
<Description>
Unique code for the allergen</Description>
<Type>%String</Type>
</Property>

<Property name="Description">
<Description>
Unique description (user-visible name) for the allergen</Description>
<Type>%String</Type>
</Property>

<XData name="LoadData">
<Description><![CDATA[
Format: code^description <p>
The first row is special: this is the "allergen" that represents no known allergies.
We treat this one differently when creating patient allergens.]]></Description>
<Data><![CDATA[
<table>
 <row>000^nil known allergies</row>
 <row>001^additive/coloring agent</row>
 <row>002^animal dander</row>
 <row>003^ant bites</row>
 <row>004^bee stings</row>
 <row>005^dairy products</row>
 <row>006^dust mites</row>
 <row>007^eggs</row>
 <row>008^fish</row>
 <row>009^mold</row>
 <row>010^peanuts</row>
 <row>011^pollen</row>
 <row>012^shellfish</row>
 <row>013^soy</row>
 <row>014^tree nuts</row>
 <row>015^wheat</row>
</table>
]]></Data>
</XData>

<Method name="Setup">
<Description>
This method reads the XData block in this class and uses it to populate the table. 
This method is called by DeepSee.Populate:GenerateData().</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   Set status=$$$OK
   //first kill extent
   //never use %KillExtent() in a real application
   Do ..%KillExtent()
   
   // Get a stream of XML from the XData block contained in this class
   Set tStream=##class(%Dictionary.CompiledXData).IDKEYOpen($CLASSNAME(),"LoadData").Data
   If '$IsObject(tStream) {Set tSC=%objlasterror Quit}
   
   Set status=##class(%XML.TextReader).ParseStream(tStream,.textreader)
   //check status
   If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
   
   //iterate through document, node by node
   While textreader.Read()
   {
       If (textreader.NodeType="chars")
       {
           Set value=textreader.Value
           //write !, "value is: ", value
           Set obj=..%New()
           Set obj.Code=$Piece(value,"^",1)
           Set obj.Description=$Piece(value,"^",2)
           Set status=obj.%Save()
           If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
           }
   }
   Quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.AllergenD</DataLocation>
<DefaultData>AllergenDefaultData</DefaultData>
<IdLocation>^DeepSee.Study.AllergenD</IdLocation>
<IndexLocation>^DeepSee.Study.AllergenI</IndexLocation>
<StreamLocation>^DeepSee.Study.AllergenS</StreamLocation>
<Data name="AllergenDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Code</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.AllergySeverity">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>This class contains the allergy severity lookup table.
<p>You can extend or modify the data contained here by editing the XData block in this class. ]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61857,43511</TimeCreated>

<Property name="Code">
<Description>
Unique code for the allergy severity</Description>
<Type>%String</Type>
</Property>

<Property name="Description">
<Description>
Unique description (user-visible name) for the allergy severity</Description>
<Type>%String</Type>
</Property>

<XData name="LoadData">
<Data><![CDATA[
<table>
 <row>001^Minor</row>
 <row>002^Moderate</row>
 <row>003^Life-threatening</row>
 <row>009^Inactive</row>
 <row>099^Unable to determine</row>
</table>
]]></Data>
</XData>

<Method name="Setup">
<Description>
This method reads the XData block in this class and uses it to populate the table. 
This method is called by DeepSee.Populate:GenerateData().</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   Set status=$$$OK
   //first kill extent
   //never use %KillExtent() in a real application
   Do ..%KillExtent()
   
   // Get a stream of XML from the XData block contained in this class
   Set tStream=##class(%Dictionary.CompiledXData).IDKEYOpen($CLASSNAME(),"LoadData").Data
   If '$IsObject(tStream) {Set tSC=%objlasterror Quit}
   
   Set status=##class(%XML.TextReader).ParseStream(tStream,.textreader)
   //check status
   If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
   
   //iterate through document, node by node
   While textreader.Read()
   {
       If (textreader.NodeType="chars")
       {
           Set value=textreader.Value
           //write !, "value is: ", value
           Set obj=..%New()
           Set obj.Code=$Piece(value,"^",1)
           Set obj.Description=$Piece(value,"^",2)
           Set status=obj.%Save()
           If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
           }
   }

   Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())

   Quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.AllergySeverityD</DataLocation>
<DefaultData>AllergySeverityDefaultData</DefaultData>
<IdLocation>^DeepSee.Study.AllergySeverityD</IdLocation>
<IndexLocation>^DeepSee.Study.AllergySeverityI</IndexLocation>
<StreamLocation>^DeepSee.Study.AllergySeverityS</StreamLocation>
<Data name="AllergySeverityDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Code</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.City">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>This class contains the cities and the ZIP codes to which they belong, as
well as city-specific properties to use as level properties in DeepSee II.
<p>You can extend or modify the data contained here by editing the XData block in this class. ]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="PostalCode">
<Type>%String</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Population">
<Type>%Integer</Type>
</Property>

<Property name="PrincipalExport">
<Type>%String</Type>
</Property>

<XData name="LoadData">
<Description>
fields: postal code^city^city population^principal export
there are multiple cities in most postal codes</Description>
<Data><![CDATA[
<table>
 <row>36711^Centerville^49000^video games</row>
 <row>34577^Cypress^3000^gravel</row>
 <row>34577^Magnolia^4503^bundt cake</row>
 <row>34577^Pine^15060^spaghetti</row>
 <row>38928^Cedar Falls^90000^iron</row>
 <row>38928^Elm Heights^33194^lettuce</row>
 <row>32006^Juniper^10333^wheat</row>
 <row>32006^Spruce^5900^mud</row>
 <row>32007^Redwood^29192^peaches</row>
</table>
]]></Data>
</XData>

<Method name="Setup">
<Description>
This method reads the XData block in this class and uses it to populate the table. 
This method is called by DeepSee.Populate:GenerateData().</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   Set status=$$$OK
   //first kill extent and child extent
   //never use %KillExtent() in a real application
   Do ..%KillExtent()

   // Get a stream of XML from the XData block contained in this class
   Set tStream=##class(%Dictionary.CompiledXData).IDKEYOpen($CLASSNAME(),"LoadData").Data
   If '$IsObject(tStream) {Set tSC=%objlasterror Quit}
   
   Set status=##class(%XML.TextReader).ParseStream(tStream,.textreader)
   //check status
   If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
   
   //iterate through document, node by node
   While textreader.Read()
   {
       If (textreader.NodeType="chars")
       {
           Set value=textreader.Value
           //write !, "value is: ", value
           Set obj=..%New()
           Set obj.PostalCode=$Piece(value,"^",1)
           Set obj.Name=$Piece(value,"^",2)
           Set obj.Population=$Piece(value,"^",3)
           Set obj.PrincipalExport=$Piece(value,"^",4)
           Set status=obj.%Save()
           If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
           }
   }

   //create an "extent set" from which we can later get random IDs
   Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())
   
   Quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.CityD</DataLocation>
<DefaultData>CityDefaultData</DefaultData>
<IdLocation>^DeepSee.Study.CityD</IdLocation>
<IndexLocation>^DeepSee.Study.CityI</IndexLocation>
<StreamLocation>^DeepSee.Study.CityS</StreamLocation>
<Data name="CityDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PostalCode</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>Population</Value>
</Value>
<Value name="5">
<Value>PrincipalExport</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.CityRainfall">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>This class contains the rainfall for the cities, by year and month, and is meant
for use as an additional DeepSee model/cube.
<p>This table is populated only if you use the R option when running the 
GenerateData() method in DeepSee.Populate. You can also use
the GenerateData() method in this class if you have already populated the main
sample.
<p>
You can extend or modify the data contained here by editing the XData block in this class.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62103,72354</TimeCreated>

<Parameter name="DSTIME">
<Description>
This parameter setting enables the DSTIME feature for DeepSee II</Description>
<Default>AUTO</Default>
</Parameter>

<Property name="City">
<Type>DeepSee.Study.City</Type>
</Property>

<Property name="MonthAndYear">
<Type>%Date</Type>
</Property>

<Property name="InchesOfRain">
<Type>%Numeric</Type>
</Property>

<XData name="LoadData">
<Description>
fields: month number^average rainfall in inches^variance in inches</Description>
<Data><![CDATA[
<table>
 <row>1^1.13^0.25</row>
 <row>2^1.56^0.25</row>
 <row>3^2.71^0.25</row>
 <row>4^2.77^0.5</row>
 <row>5^5.22^0.5</row>
 <row>6^4.31^0.5</row>
 <row>7^2.61^0.35</row>
 <row>8^2.60^0.35</row>
 <row>9^3.84^0.5</row>
 <row>10^3.23^0.5</row>
 <row>11^1.98^0.35</row>
 <row>12^1.40^0.25</row>
</table>
]]></Data>
</XData>

<Method name="GenerateData">
<Description>
Call this after the cities have been set up; this means we reopen each city once.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Write !, "Creating rainfall data for the cities..."
    //never use %KillExtent() in a real application
    Do ..%KillExtent()

    // Get a stream of XML from the XData block contained in this class
    Set tStream=##class(%Dictionary.CompiledXData).IDKEYOpen($CLASSNAME(),"LoadData").Data
    If '$IsObject(tStream) {Set tSC=%objlasterror Quit}
   
    Set status=##class(%XML.TextReader).ParseStream(tStream,.textreader)
    //check status
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
   
    //iterate through document, node by node
    While textreader.Read()
    {
        If (textreader.NodeType="chars")
        {
            Set value=textreader.Value

            Set month=$Piece(value,"^",1)
            Set avgrainfall=$Piece(value,"^",2)
            Set var=$Piece(value,"^",3)
            Set ^||myvar("rainfall",month,"min")=avgrainfall-var
            Set ^||myvar("rainfall",month,"max")=avgrainfall+var
            }
    }
   
    Set myquery="select ID from DeepSee_Study.City"
    Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
    Set status=rset.Prepare(myquery)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Set status=rset.Execute()
    
    While (rset.Next(.status)) {
	    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
	    Set cityid=rset.Data("ID")
	    Set city=##class(DeepSee.Study.City).%OpenId(cityid,0)
	    	        
        //we have rainfall data for a particular span of years
        set separator=##class(%SYS.NLS.Format).GetFormatItem("DateSeparator")
        For year=1900:1:$Piece($Zdate($h,1),separator,3) {
	        For month=1:1:12 {
		        Set record=..%New()
		   		Set record.City=city
		   		If (month<10) {
			   		Set monthstring="0"_month
			   		}
			   		Else {
				   		Set monthstring=month
				   		}
		    Set datestring=year_"-"_monthstring_"-01"
    	    Set min=^||myvar("rainfall",month,"min")
    	    Set max=^||myvar("rainfall",month,"max")
    	    Set rainfall=min + ($RANDOM(max*100)+1)/100	


    	    Set record.MonthAndYear=$ZDATEH(datestring,3)
	        Set record.InchesOfRain=rainfall
	        Set status=record.%Save()
            If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
		   }
	   }
	   
    }
     
    Do ##class(%DeepSee.Utils).%SynchronizeCube("cityrainfall")

    Quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.CityRainfallD</DataLocation>
<DefaultData>CityRainfallDefaultData</DefaultData>
<IdLocation>^DeepSee.Study.CityRainfallD</IdLocation>
<IndexLocation>^DeepSee.Study.CityRainfallI</IndexLocation>
<StreamLocation>^DeepSee.Study.CityRainfallS</StreamLocation>
<Data name="CityRainfallDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>City</Value>
</Value>
<Value name="3">
<Value>MonthAndYear</Value>
</Value>
<Value name="4">
<Value>InchesOfRain</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.Diagnosis">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
This class contains the diagnosis code lookup table, with a small set of possible
diagnoses. It also defines the incidence rates for these diagnoses, by age and gender.
<p>
You can extend or modify the data contained here by editing the XData block in this class.
<p>
Use the GetPercentChance() method to retrieve the chance of having
a specific diagnosis, given an age and gender.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="Code">
<Description>
Unique code for the diagnosis;</Description>
<Type>%String</Type>
</Property>

<Property name="Description">
<Description>
Unique description (user-visible name) for the diagnosis</Description>
<Type>%String</Type>
</Property>

<XData name="LoadData">
<Description><![CDATA[
A row element is a pieced string with the following format:
<pre>diagnosis code^diagnosis description^fpiece^mpiece </pre>
fpiece gives rates for females, and mpiece gives rates for males.
Both fpiece and mpiece have the following format:
<pre>bucket1 details,bucket2 details,bucket3 details, ... </pre>
Each bucket represents an age bucket and the number of current (not lifetime)
diagnoses of this type per hundred patients of this age and gender.
Each bucket has the following format:
<pre>lowerAge_upperAge_countPerHundredPatientsOfThisAgeAndGender</pre>
Each row must have data for all ages for patients of either gender.
<ul>
<li>asthma source: ASTHMA06FINAL.PDF from www.lungusa.org/atf/cf/</li>
<li>CHD: www.heartstats.org (used numbers for 1998)</li>
<li>diabetes: www.mchd.com/data_reports/mccha/12_Morbidity_and_Hospitalizations.html (Used U.S. values)</li>
<li>osteoporosis source: http://www.surgeongeneral.gov/library/bonehealth/ (No data for patients under 65)</li>
<li>epilepsy: wikipedia (55 cases per 100000 people)</li>
</ul>
]]></Description>
<Data><![CDATA[
<table>
 <row>diabetes^diabetes
 ^0_17_0, 18_24_1.5, 25_34_3.2, 35_44_5.2, 45_54_7.9, 55_64_13.4, 65_999_17.1
 ^0_17_0, 18_24_1.5, 25_34_3.2, 35_44_5.2, 45_54_7.9, 55_64_13.4, 65_999_17.1
 </row>
 <row>asthma^asthma
 ^0_17_06.71, 18_999_8.25
 ^0_17_10.15, 18_999_4.97
 </row>
 <row>CHD^coronary heart disease
 ^0_15_0, 16_24_0,  25_34_.3, 35_44_.6, 45_54_1.8, 55_64_6.3,  65_74_12.5, 75_999_18.4
 ^0_15_0, 16_24_.1, 25_34_.4, 35_44_.9, 45_54_4.3, 55_64_13.6, 65_74_20.2, 75_999_23.4
  </row>
<row>osteoporosis^osteoporosis
 ^0_64_0, 65_74_19.0, 75_84_32.5, 85_999_50.5
 ^0_64_0, 65_74_02.0, 75_84_06.4, 85_999_13.7
  </row>
<row>epilepsy^epilepsy
 ^0_999_.00055
 ^0_999_.00055
</row>
</table>
]]></Data>
</XData>

<Method name="Setup">
<Description>
This method reads the XData block in this class and uses it to populate the table. 
This method is called by DeepSee.Populate:GenerateData().
It also writes related data to a global for use when creating patients.
The diagnosis incidence rates are deliberately NOT put into a table where
DeepSee can access them. The idea of the sample is to simulate real-life
patterns. </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   Set status=$$$OK
   //first kill extent and related global
   //never use %KillExtent() in a real application
   Do ..%KillExtent()
   Kill ^DeepSee.Study.SetupData("diagnoses")
   
   // Get a stream of XML from the XData block contained in this class
   Set tStream=##class(%Dictionary.CompiledXData).IDKEYOpen($CLASSNAME(),"LoadData").Data
   If '$IsObject(tStream) {Set tSC=%objlasterror Quit}
   
   Set status=##class(%XML.TextReader).ParseStream(tStream,.textreader)
   //check status
   If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
   
   //iterate through document, node by node
   While textreader.Read()
   {
       If (textreader.NodeType="chars")
       {
           Set value=textreader.Value
           Set obj=..%New()
           Set diagcode=$Piece(value,"^",1) ;use this below in multiple places
           Set obj.Code=diagcode
           Set obj.Description=$Piece(value,"^",2)
           Set status=obj.%Save()
           If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
           
           //now set global to contain occurrence rates by gender and age
           Set fpiece=$ZSTRIP($Piece(value,"^",3),"*CW")    ; strip out line feed & white space
           Set mpiece=$ZSTRIP($Piece(value,"^",4),"*CW")    ; strip out line feed & white space
           
           Set ^DeepSee.Study.SetupData("diagnoses",diagcode,"F")=fpiece
           Set ^DeepSee.Study.SetupData("diagnoses",diagcode,"M")=mpiece
           }
               
       }

   Quit status
]]></Implementation>
</Method>

<Method name="GetPercentChance">
<Description>
For use when generating data; called by Setup method.
Can also use this at the command line for testing purposes.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String,gender:%String,age:%Numeric</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
    //get appropriate global node & convert it to a list
    Set list=$LISTFROMSTRING(^DeepSee.Study.SetupData("diagnoses",code,gender))
    
    Set chance=0
    // iterate through list and find appropriate bucket
    for i=1:1:$LISTLENGTH(list) {
        //get list item and its upper and lower ages
        Set item=$LISTGET(list,i)
        Set itemlowerage=+$Piece(item,"_",1)
        Set itemupperage=+$Piece(item,"_",2)

        If ((age>itemlowerage) && (age<=itemupperage)) {
            Set chance=$Piece(item,"_",3)
            }
        }
    
    Quit chance
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.DiagnosisD</DataLocation>
<DefaultData>DiagnosisDefaultData</DefaultData>
<IdLocation>^DeepSee.Study.DiagnosisD</IdLocation>
<IndexLocation>^DeepSee.Study.DiagnosisI</IndexLocation>
<StreamLocation>^DeepSee.Study.DiagnosisS</StreamLocation>
<Data name="DiagnosisDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Code</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.Doctor">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>This class contains the doctors. ]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61956,54785</TimeCreated>

<Property name="FirstName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="LastName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="MainCity">
<Description>
City where this doctor primarily works;</Description>
<Type>DeepSee.Study.City</Type>
</Property>

<Property name="DoctorGroup">
<Description>
Group into which this "study" places this doctor</Description>
<Type>%String</Type>
</Property>

<Property name="DoctorType">
<Description>
Primary focus of this doctor's work;</Description>
<Type>%String</Type>
</Property>

<Property name="PatientsPerWeek">
<Description>
Average number of patients that this doctor sees per week
(included to provide a numeric value in this table)</Description>
<Type>%Numeric</Type>
</Property>

<Method name="GenerateData">
<Description>
This method reads the XData block in this class and uses it to populate the table. 
This method is called by DeepSee.Populate:GenerateData().</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>count:%Integer=100,genNulls=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set status=$$$OK
    //first kill extent
    //never use %KillExtent() in a real application
    Do ..%KillExtent()
    set ^DeepSee.Study.SetupData("Pediatricians")=""
    set ^DeepSee.Study.SetupData("OBGYNs")=""
    set ^DeepSee.Study.SetupData("OtherDoctors")=""
    

    For n = 1:1:count {
        Set doc = ##class(DeepSee.Study.Doctor).%New()
        Set doc.FirstName = ##class(%PopulateUtils).FirstName()
        Set doc.LastName = ##class(%PopulateUtils).LastName()
        
        //assign to a doctor group
        Set grouplist=$LB("I","II","III")
        Set groupID=$RANDOM($LISTLENGTH(grouplist))+1
        Set doc.DoctorGroup=$LI(grouplist,groupID)

        //Set PatientsPerWeek property
        Set doc.PatientsPerWeek=130+$RANDOM(40)
        
        //null out the previous two properties in some cases
        If (genNulls && ##class(DeepSee.Populate).RandomTrue(20)){
            Set doc.PatientsPerWeek=""
            Set doc.DoctorGroup=""
            }
        

        //Select a city
        Set cityid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.City")          
        Set doc.MainCity=##class(DeepSee.Study.City).%OpenId(cityid,0)

        //Specify the doctor type; these are assigned somewhat randomly
        If ##class(DeepSee.Populate).RandomTrue(70) {
            Set typelist=$LB("General Physician","Internist","Pediatrician","OB/GYN")
            Set typeid=$RANDOM($LISTLENGTH(typelist))+1
            Set doc.DoctorType=$LI(typelist,typeid)
            }
        Else {
            Set typelist=$LB("Anesthesiologist","Allergist","Cardiologist","Dermatologist",
                        "Emergency Physician","Gastroenterologist","Radiologist","Surgeon")
            Set typeid=$RANDOM($LISTLENGTH(typelist))+1
            Set doc.DoctorType=$LI(typelist,typeid)
	    }
	    if (doc.DoctorType="Pediatrician") {
		    set ^DeepSee.Study.SetupData("Pediatricians")=^DeepSee.Study.SetupData("Pediatricians")_","_n
	    } elseif (doc.DoctorType="OB/GYN") {
		    set ^DeepSee.Study.SetupData("OBGYNs")=^DeepSee.Study.SetupData("OBGYNs")_","_n
	    } else {
		    set ^DeepSee.Study.SetupData("OtherDoctors")=^DeepSee.Study.SetupData("OtherDoctors")_","_n
	    }

        Set status=doc.%Save()
        If $$$ISERR(status) {Do $System.Status.DisplayError(status)}

   }
   set ^DeepSee.Study.SetupData("Pediatricians")=$ZSTRIP(^DeepSee.Study.SetupData("Pediatricians"),"<",",")
   set ^DeepSee.Study.SetupData("OBGYNs")=$ZSTRIP(^DeepSee.Study.SetupData("OBGYNs"),"<",",")

   //create an "extent set" from which we can later get random IDs
   Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())
   Quit status
]]></Implementation>
</Method>

<Method name="ChangeSomeDoctors">
<Description>
Randomly change doctor group and patients per week for some doctors. 
If rebuild is 1, this method updates the DeepSee indices for each patient affected
by these changes. For DeepSee I, use this option only if you have enabled incremental updates
(otherwise, you needlessly slow down the method).</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>percent:%Numeric=20,rebuild:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Changing some doctor data..."

    //create an "extent set" from which we can later get random IDs
    Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())

    Set changecount=0
    Set listLength=##class(DeepSee.Populate).Count($CLASSNAME())
    //throw the dice once as many times as we have doctors; not the same as 
    //looping through doctors but close in overall effect
    For i=1:1:listLength {
         If ##class(DeepSee.Populate).RandomTrue(percent)
         {
            Set docid=##class(DeepSee.Populate).GetRandomId($CLASSNAME())
            Set doc=..%OpenId(docid)

            //assign to a doctor group
            Set grouplist=$LB("I","II","III")
            Set groupID=$RANDOM($LISTLENGTH(grouplist))+1
            Set doc.DoctorGroup=$LI(grouplist,groupID)

            //Set PatientsPerWeek property
            Set doc.PatientsPerWeek=130+$RANDOM(40)
            Do doc.%Save()
            
            If rebuild {
	            //Because doctors are in a separate table, changing info for a 
                //doctor does NOT fire any triggers for the patients, 
                //so it is necessary to figure out which patients are affected 
                //and update the indices for those patients
            
                Set myquery="SELECT ID FROM DeepSee_Study.Patient WHERE PrimaryCarePhysician=?"
                Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
                Set status=rset.Prepare(myquery)
                If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
                Set status=rset.Execute(docid)
                If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
                    While rset.Next() {
                    Set patid=rset.Data("ID")
                  
                    //The following line applies to DeepSee I
                    //Do ##class(DeepSee.Study.Patient).zzBuildOne(patid)
                    
                    //The following line applies to DeepSee II
                    Do ##class(%DeepSee.Utils).%ProcessFact("patients",patid)

                    }
                }
          Set changecount=changecount+1
         }
        } 

    //If rebuild {Kill %this} ; needed because zzBuildOne doesn't clean this up
    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" "_changecount_" doctors changed"
]]></Implementation>
</Method>

<Method name="GetDoctorId">
<Description>
Based on patient age (in years) and gender ("F" or "M"), return the ID of a suitable doctor</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patientAge:%Integer="",patientGender:%String=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    if (patientAge="") {
	    quit ..GetRandomOtherDoctor()
    } elseif (patientAge<12)	{
	    If ##class(DeepSee.Populate).RandomTrue(90) {
		    quit ..GetRandomPediatrician()
	    } else {
		    quit ..GetRandomOtherDoctor()
	    }
    } 
    
    if (patientGender="") {
	    quit ..GetRandomOtherDoctor()
    } elseif (patientGender="F") {
	    If ##class(DeepSee.Populate).RandomTrue(70) {
		    quit ..GetRandomOBGYN()
	    } else {
		    quit ..GetRandomOtherDoctor()
	    }
    } else {
	    quit ..GetRandomOtherDoctor()
    }
]]></Implementation>
</Method>

<Method name="GetRandomPediatrician">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
   set choosefrom=^DeepSee.Study.SetupData("Pediatricians")
   set choosenumber=$L(choosefrom,",")
   set randomnumber=$RANDOM(choosenumber)+1
   set randomdoc=$P(choosefrom,",",randomnumber)
   quit randomdoc
]]></Implementation>
</Method>

<Method name="GetRandomOBGYN">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   set choosefrom=^DeepSee.Study.SetupData("OBGYNs")
   set choosenumber=$L(choosefrom,",")
   set randomnumber=$RANDOM(choosenumber)+1
   set randomdoc=$P(choosefrom,",",randomnumber)
   quit randomdoc
]]></Implementation>
</Method>

<Method name="GetRandomOtherDoctor">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   set choosefrom=^DeepSee.Study.SetupData("OtherDoctors")
   set choosenumber=$L(choosefrom,",")
   set randomnumber=$RANDOM(choosenumber)+1
   set randomdoc=$P(choosefrom,",",randomnumber)
   quit randomdoc
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.DoctorD</DataLocation>
<DefaultData>DoctorDefaultData</DefaultData>
<IdLocation>^DeepSee.Study.DoctorD</IdLocation>
<IndexLocation>^DeepSee.Study.DoctorI</IndexLocation>
<StreamLocation>^DeepSee.Study.DoctorS</StreamLocation>
<Data name="DoctorDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FirstName</Value>
</Value>
<Value name="3">
<Value>LastName</Value>
</Value>
<Value name="4">
<Value>MainCity</Value>
</Value>
<Value name="5">
<Value>DoctorGroup</Value>
</Value>
<Value name="6">
<Value>DoctorType</Value>
</Value>
<Value name="7">
<Value>PatientsPerWeek</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.Patient">
<Description>
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. </Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61895,57625</TimeCreated>

<Parameter name="DSTIME">
<Description>
This parameter setting enables the DSTIME feature for DeepSee II</Description>
<Default>AUTO</Default>
</Parameter>

<Property name="PatientID">
<Description>
ID of this patient, as assigned within this fictitious study;
useful as a detail listing field.</Description>
<Type>%String</Type>
</Property>

<Property name="Gender">
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",Female,Male"/>
<Parameter name="VALUELIST" value=",F,M"/>
</Property>

<Property name="Age">
<Type>%Integer</Type>
</Property>

<Property name="BirthDate">
<Description>
%Date version of the birth date.
This property contains same data as the BirthDateTimeStamp property. 
This class contains multiple birth date properties so that you can
try the supported data types.</Description>
<Type>%Date</Type>
</Property>

<Property name="BirthTime">
<Description>
Birth time as %Time.
This class contains the birth time data in two properties (this property and 
BirthDateTimeStamp) so that you can try the time data in both formats.</Description>
<Type>%Time</Type>
</Property>

<Property name="BirthDateTimeStamp">
<Description>
%TimeStamp version of the birth date.
This property contains same date as the BirthDate property. 
Also see BirthTime.</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="BirthDateMV">
<Description>
%MV.Date version of the birth date.
This property contains same date as the BirthDateTimeStamp property. </Description>
<Type>%MV.Date</Type>
</Property>

<Property name="PrimaryCarePhysician">
<Type>DeepSee.Study.Doctor</Type>
</Property>

<Property name="Allergies">
<Type>DeepSee.Study.PatientAllergy</Type>
<Collection>list</Collection>
</Property>

<Property name="Diagnoses">
<Description>
Diagnoses of this patient. This class contains multiple versions of this property
each of which contains the same general diagnosis data. These versions enable you to
create DeepSee dimensions on a variety of types of collections.
Use this variation to see how DeepSee handles lists of objects.</Description>
<Type>DeepSee.Study.PatientDiagnosis</Type>
<Collection>list</Collection>
</Property>

<Property name="DiagnosesAsArray">
<Description>
Use this variation to see how DeepSee handles arrays.
See comments for the Diagnoses property.</Description>
<Type>%String</Type>
<Collection>array</Collection>
</Property>

<Property name="DiagnosesAsLB">
<Description>
Use this variation to see how DeepSee handles $LB lists of strings.
See comments for the Diagnoses property.</Description>
<Type>%List</Type>
</Property>

<Property name="DiagnosesAsString">
<Description>
Use this variation to see how DeepSee handles pieced strings.
See comments for the Diagnoses property.</Description>
<Type>%String</Type>
</Property>

<Property name="DiagnosesAsChildren">
<Description>
Use this variation to see how DeepSee handles parent-child relationships
See comments for the Diagnoses property.</Description>
<Type>DeepSee.Study.PatientDiagnosis1</Type>
<Cardinality>children</Cardinality>
<Inverse>Patient</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="DiagnosesAsMany">
<Description>
Use this variation to see how DeepSee handles one-to-many relationships
See comments for the Diagnoses property.</Description>
<Type>DeepSee.Study.PatientDiagnosis2</Type>
<Cardinality>many</Cardinality>
<Inverse>Patient</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="HomeCity">
<Type>DeepSee.Study.City</Type>
</Property>

<Property name="PatientGroup">
<Description>
This property represents some grouping of the patients in this fictitious study.
Use this as a DeepSee dimension.</Description>
<Type>%String</Type>
</Property>

<Property name="TestScore">
<Description>
Value of some fictitious test; will use this as a measure; can be null.
When using as a measure, probably more suitable to average across the patients.</Description>
<Type>%Integer</Type>
</Property>

<Method name="GenerateData">
<Description>
Called by DeepSee.Populate:GenerateData(); see the comments for that method.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patCount:%Integer=500,options:%String="ADET",genNulls:%Boolean=1,genNullDates:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set status=$$$OK
    Write !, "Deleting patient data..."

    //first kill extent and kill extents of child tables
    Do ..%KillExtent()
    Do ##class(DeepSee.Study.PatientDiagnosis1).%KillExtent()
    Do ##class(DeepSee.Study.PatientDiagnosis2).%KillExtent()
    Do ##class(DeepSee.Study.PatientDetails).%KillExtent()
    Do ##class(DeepSee.Study.PatientEncounter).%KillExtent()
    Do ##class(DeepSee.Study.PatientAllergy1).%KillExtent()
   
    Write !, "Adding patients..."
    Set status=..AddPatients(patCount,options,genNulls,1,genNullDates)
    Quit status
]]></Implementation>
</Method>

<Method name="AddPatients">
<Description>
Called by GenerateData(); see the comments for that method.
Can also be called directly to add patients after the initial setup.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patCount:%Integer=100,options:%String="ADT",genNulls:%Boolean=1,initSetup:%Boolean=0,genNullDates:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    If initSetup {Kill ^DeepSee.Study.Log}
    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Adding patients..."


    //create or update the "ID extent sets" from which we can later get random IDs
    Set status=##class(DeepSee.Populate).UpdateIdCache("DeepSee.Study.Doctor")
    Set status=##class(DeepSee.Populate).UpdateIdCache("DeepSee.Study.City")

    
    //check options; what do we need to generate?
    If ($FIND(options,"A")) {Set generateallergies=1}
        Else {Set generateallergies=0}
    If ($FIND(options,"D")) {Set generatediagnoses=1}
        Else {Set generatediagnoses=0}
    If ($FIND(options,"E")) {Set generateencounters=1}
        Else {Set generateencounters=0}
    If ($FIND(options,"T")) {Set generatedetails=1}
        Else {Set generatedetails=0}
    

    //get diagnosis and current patient count
    Set dcount=##class(DeepSee.Populate).Count("DeepSee.Study.Diagnosis")
    Set currentpatcount=##class(DeepSee.Populate).Count($CLASSNAME())
    
    //initialize counters
    If (currentpatcount=0) {
        Set initPat=100300
        }
        Else {
            //get highest PatientID in use
            Set highest=..GetHighestPatientID()
            Set initPat=$PIECE(highest,"_",2)
            }

    Set idnumber=initPat

    For n = 1:1:patCount {
        Set pat=##class(DeepSee.Study.Patient).%New()
        Set idnumber=idnumber+1     ; increment without any gaps
        Set patid="SUBJ_"_idnumber
        Set pat.PatientID=patid
        
        //get age+gender combination
        Set agegender=##class(DeepSee.Populate).RandomGenderAndAge()
        Set pat.Gender=$Piece(agegender,",",1)
        Set pat.Age=$Piece(agegender,",",2)

        //get birthdate as a string YYYY-MM-DD
        Set birthdate=##class(DeepSee.Populate).BirthDateODBC(pat.Age)
        Set pat.BirthDate=$ZDATEH(birthdate,6)  ; convert to $h explicitly and write value
 
        //get birthtime as random time hh:mm:ss
        Set timestamp=##class(%PopulateUtils).TimeStamp()   
        Set timepart=$Piece(timestamp," ",2)
        Set timestring=$Piece(timepart,":",1)_":"_$Piece(timepart,":",2)
        Set pat.BirthTime=$ZTIMEH(timestring,2) ; convert to $h and write value
 
        //combine date and time
        Set birthdateandtime=birthdate_" "_timepart
        Set pat.BirthDateTimeStamp=birthdateandtime ; write in ODBC format 
    
        //set MV version
        Set pat.BirthDateMV = pat.BirthDate - 46385
    
        //assign a doctor
        //Set docid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.Doctor")
        Set docid=##class(DeepSee.Study.Doctor).GetDoctorId(pat.Age,pat.Gender)
        Set doctor=##class(DeepSee.Study.Doctor).%OpenId(docid,0)
        Set pat.PrimaryCarePhysician=doctor

        // null out this property randomly to simulate missing data
        If genNulls &&##class(DeepSee.Populate).RandomTrue(5){
            Set pat.PrimaryCarePhysician=""
        }

        //assign to a patient group
        Set grouplist=$LB("A","B")
        Set groupID=$RANDOM($LISTLENGTH(grouplist))+1
        Set pat.PatientGroup=$LI(grouplist,groupID)

        //Set TestScore property
        Set pat.TestScore=50+$RANDOM(50)
        
        //null out the previous two properties in some cases
        //score can be null but won't be 0 (see above)
        //this lets us see how measures treat null values
        If (genNulls && ##class(DeepSee.Populate).RandomTrue(20)){
            Set pat.TestScore=""
            Set pat.PatientGroup=""
            }
        
        //Select a city
        Set cityid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.City")          
        Set pat.HomeCity=##class(DeepSee.Study.City).%OpenId(cityid,0)

        //If asked, update PatientDetails table
        If generatedetails {
            Set status=##class(PatientDetails).CreatePatientDetails(pat.PatientID,pat.Age,genNulls)
            If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "Patient details error"}
            }
        
        //If asked, generate some allergies
        If generateallergies {
            Set status=##class(DeepSee.Study.PatientAllergy).GenerateAllergies(pat,genNulls)
            If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "Allergies insert error"}
            }
         
         //If asked, generate some diagnoses
         If generatediagnoses {
             //iterate through available diagnoses, look up chance of patient's
             //receiving this diagnosis, based on gender & age
             //save diagnosis data in all diagnosis properties
             Set diagnosiscount=0    ; initialize this so we know if we're on the first one
             Set diaglist = ""
             Set diagstring=""
             For k=1:1:dcount{
                 Set potentialdiagnosis=##class(DeepSee.Study.Diagnosis).%OpenId(k,0)

                 //get the code
                 Set code=potentialdiagnosis.Code
                 //look up how likely this patient is to have this diagnosis
                 Set chance=##class(DeepSee.Study.Diagnosis).GetPercentChance(code,pat.Gender,pat.Age)
                
                 If ##class(DeepSee.Populate).RandomTrue(chance) {
                     Set diagnosiscount=diagnosiscount+1
                     Set desc=potentialdiagnosis.Description
                                        
                     //Build basic diagnosis properties
                     Set $LI(diaglist,diagnosiscount)=code 
                     Set diagstring=diagstring_","_code
                     Do pat.DiagnosesAsArray.SetAt(code,diagnosiscount)
                    
                     //now for the more complex properties, choose a random diagnosing doctor
                     Set diagdocid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.Doctor")
                     Set diagdoc=##class(DeepSee.Study.Doctor).%OpenId(diagdocid,0)

                     //populate Diagnoses property
                     Set patdiag=##class(DeepSee.Study.PatientDiagnosis).%New()    ; this object is serial
                     Set patdiag.DiagnosisCode=code
                     Set patdiag.DiagnosedBy=diagdoc
                     Set status=pat.Diagnoses.Insert(patdiag)
                     If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "Diagnoses error"}

                     //use same data in DiagnosesAsChildren relationship
                     Set patdiag1=##class(DeepSee.Study.PatientDiagnosis1).%New()
                     Set patdiag1.DiagnosisCode=code
                     Set patdiag1.DiagnosedBy=diagdoc
                     //link the objects
                     Set patdiag1.Patient=pat
                     Set status=patdiag1.%Save()
                     If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "DiagnosesAsChildren error"}
                    
                     //use same data in DiagnosesAsMany relationship
                     Set patdiag2=##class(DeepSee.Study.PatientDiagnosis2).%New()
                     Set patdiag2.DiagnosisCode=code
                     Set patdiag2.DiagnosedBy=diagdoc
                     //link the objects
                     Set patdiag2.Patient=pat
                     Set status=patdiag2.%Save()
                     If $$$ISERR(status) {Do $System.Status.DisplayError(status)  Write !, "DiagnosesAsMany error"}
                 }
                 Set pat.DiagnosesAsLB=diaglist
                 Set pat.DiagnosesAsString=diagstring
                 }
             
             }

        // now that we have used the age data,
        // null out birth date & age randomly to simulate missing data
        If genNullDates &&##class(DeepSee.Populate).RandomTrue(2){
            Set pat.Age=""
            Set pat.BirthDate=""
            Set pat.BirthTime=""
            Set pat.BirthDateTimeStamp=""
            Set pat.BirthDateMV = ""
            }
        
       Set status=pat.%Save()
       If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "Patient save error"}

       //If asked, generate some encounters (but not necessarily for everyone)
       If genNulls {
           Set chance=##class(DeepSee.Populate).RandomTrue(84)
           }
           Else {
               Set chance=1
               }
                
       If generateencounters && chance {
           Set status=##class(DeepSee.Study.PatientEncounter).CreateEncounters(pat)
           If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "Encounter creation error"}
           }
        
       //The following line applies to DeepSee II
        If 'initSetup {Do ##class(%DeepSee.Utils).%SynchronizeCube("patients")}

       If ('(n#1000)) {Write $C(13,27)_"[0J"_$FN(n,",",0)_" patients created in DeepSee.Study.Patient"}
       }

    //create or update the "ID extent sets" from which we can later get random IDs
    Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())
    Set status=##class(DeepSee.Populate).UpdateIdCache("DeepSee.Study.PatientDetails")
   
    //Store highest PatientID for later use
    Set ^DeepSee.Study.SetupData("PatientID")=pat.PatientID
    
    Write !
    Write $C(13,27)_"[0J"_$FN(+$G(n),",",0)_" patient(s) created in DeepSee.Study.Patient"

    Set currentcount=##class(DeepSee.Populate).Count($CLASSNAME())
    Write !, "Current patient count is ",currentcount
    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Current patient count is "_currentcount

    //The following lines applies to DeepSee II
    If initSetup {
        Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Building the cube..."
        Do ##class(%DeepSee.Utils).%BuildCube("patients")
        Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Finished building the cube"
    }

    Quit status
]]></Implementation>
</Method>

<Method name="DeleteSomePatients">
<Description>
Delete a few patients randomly. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>percent:%Numeric=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Deleting some patients..."

    //create or update the "ID extent set" from which we can later get random IDs
    Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())
    
    Set patcount=##class(DeepSee.Populate).Count($CLASSNAME())
    For i=1:1:patcount {
         If ##class(DeepSee.Populate).RandomTrue(percent) 
         {
             Set patid=##class(DeepSee.Populate).GetRandomId($CLASSNAME())
             Set status=..DeletePatient(patid)
             If $$$ISERR(status) {
                 Do $System.Status.DisplayError(status) Write !, "Delete error for patient ", patid
                 }
             }
  
         }
    Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())
    Set currentcount=##class(DeepSee.Populate).Count($CLASSNAME())
    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Current patient count is "_currentcount
    Quit status
]]></Implementation>
</Method>

<Method name="DeletePatient">
<Description>
Deletes a patient, given its ID. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patid:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //first let's find out what we really need to do;
    //if we have 0 records in a child table, we can skip processing that table
    Set deletedetails=##class(DeepSee.Populate).Count("DeepSee.Study.PatientDetails")
    Set deleteencounters=##class(DeepSee.Populate).Count("DeepSee.Study.PatientEncounter")
    Set deletediagnoses=##class(DeepSee.Populate).Count("DeepSee.Study.PatientDiagnosis1")

    //clear out records in PatientDetails
    If deletedetails {
	    Set status=##class(PatientDetails).DeletePatientDetails(patid)
        If $$$ISERR(status) {
	        Do $System.Status.DisplayError(status) 
            Write !,"Error deleting record in PatientDetails for PatientID ",patid 
            Quit
            }
        Set status=##class(DeepSee.Populate).UpdateIdCache("DeepSee.Study.PatientDetails")
    }

    //clear out records in PatientEncounter
    If deleteencounters {
	    Set patoref=..%OpenId(patid,0)
        Set status=##class(DeepSee.Study.PatientEncounter).DeleteEncounters(patoref)
        If $$$ISERR(status) {
	        Do $System.Status.DisplayError(status) 
	        Write !,"Error deleting records in PatientEncounter for patient ",patid 
	        Quit
	        }
	    Kill patoref
    }
    
    
    //clear out records in PatientDiagnosis1 (must delete children before deleting parent)
    If deletediagnoses {
        Set myquery="DELETE FROM DeepSee_Study.PatientDiagnosis1 WHERE Patient=?"
        Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
        Set status=rset.Prepare(myquery)
        If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
        Set status=rset.Execute(patid)
        If $$$ISERR(status) {
	        Do $System.Status.DisplayError(status) 
	        Write !, "Error deleting records in PatientDiagnosis1" 
	        Quit
	        }
    }

    //clear out records in PatientDiagnosis2
    If deletediagnoses {
        Set myquery="DELETE FROM DeepSee_Study.PatientDiagnosis2 WHERE Patient=?"
        Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
        Set status=rset.Prepare(myquery)
        If $$$ISERR(status) {
	        Do $System.Status.DisplayError(status) 
	        Quit
	        }
        Set status=rset.Execute(patid)
        If $$$ISERR(status) {
	        Do $System.Status.DisplayError(status) 
    	    Write !, "Error deleting records in PatientDiagnosis2" 
	        Quit
	        }
    }

    Set status=##class(DeepSee.Study.Patient).%DeleteId(patid)

    //every time we add or delete records, we need to update the ID cache
    Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())

    //The following line applies to DeepSee II
    Do ##class(%DeepSee.Utils).%SynchronizeCube("patients")

    Quit status
]]></Implementation>
</Method>

<Method name="ChangePatientGroups">
<Description>
Randomly reassign some patients to different patient groups. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>percent:%Numeric=10</FormalSpec>
<Implementation><![CDATA[
    //initialize this just in case
    Set status=##class(DeepSee.Populate).UpdateIdCache("DeepSee.Study.Patient")
    
    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Changing some patient group assignments..."

    Set patcount=##class(DeepSee.Populate).Count($CLASSNAME())
    Set changecount=0
    For i=1:1:patcount {
        If ##class(DeepSee.Populate).RandomTrue(percent) 
        {
            Set randomid=##class(DeepSee.Populate).GetRandomId($CLASSNAME())
            Set pat=..%OpenId(randomid)
        
            //assign to a patient group if already assigned
            //want to avoid putting patient into group if not currently assigned
            //because logic elsewhere ensures TestScore is null for unassigned patients
            if '(pat.PatientGroup="")
            {
                Set grouplist=$LB("A","B")
                Set groupID=$RANDOM($LISTLENGTH(grouplist))+1
                Set pat.PatientGroup=$LI(grouplist,groupID)
                Do pat.%Save()
                Set changecount=changecount+1
            }

            //The following line applies to DeepSee II
            Do ##class(%DeepSee.Utils).%SynchronizeCube("patients")
            }
    }

    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" "_changecount_" patients changed to other groups"
]]></Implementation>
</Method>

<Method name="ChangeSomePatients">
<Description>
Changes some patient data in various tables.
If rebuild is 1, this method updates the DeepSee indices (I and II) for each patient affected
by these changes. For DeepSee I, use this option only if you have enabled incremental updates 
(otherwise, you needlessly slow down the method).</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>percent:%Numeric=20,rebuild:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
 Set currentcount=##class(DeepSee.Populate).Count($CLASSNAME())
 Write !, "Current patient count is ",currentcount, " and this will not change"
 Do ##class(DeepSee.Study.Patient).ChangePatientGroups(percent)
 Do ##class(DeepSee.Study.PatientDetails).ChangePatientDetails(percent, rebuild)
 Do ##class(DeepSee.Study.PatientEncounter).AddEncounters(percent, rebuild)

 Quit
]]></Implementation>
</Method>

<Method name="GetHighestPatientID">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    Quit ^DeepSee.Study.SetupData("PatientID")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.PatientD</DataLocation>
<DefaultData>PatientDefaultData</DefaultData>
<IdLocation>^DeepSee.Study.PatientD</IdLocation>
<IndexLocation>^DeepSee.Study.PatientI</IndexLocation>
<StreamLocation>^DeepSee.Study.PatientS</StreamLocation>
<Data name="DiagnosesAsArray">
<Attribute>DiagnosesAsArray</Attribute>
<Structure>subnode</Structure>
<Subscript>"DiagnosesAsArray"</Subscript>
</Data>
<Data name="PatientDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PatientID</Value>
</Value>
<Value name="3">
<Value>Gender</Value>
</Value>
<Value name="4">
<Value>Age</Value>
</Value>
<Value name="5">
<Value>BirthDate</Value>
</Value>
<Value name="6">
<Value>BirthTime</Value>
</Value>
<Value name="7">
<Value>BirthDateTimeStamp</Value>
</Value>
<Value name="8">
<Value>BirthDateMV</Value>
</Value>
<Value name="9">
<Value>PrimaryCarePhysician</Value>
</Value>
<Value name="10">
<Value>Allergies</Value>
</Value>
<Value name="11">
<Value>Diagnoses</Value>
</Value>
<Value name="12">
<Value>DiagnosesAsLB</Value>
</Value>
<Value name="13">
<Value>DiagnosesAsString</Value>
</Value>
<Value name="14">
<Value>HomeCity</Value>
</Value>
<Value name="15">
<Value>PatientGroup</Value>
</Value>
<Value name="16">
<Value>TestScore</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.PatientAllergy">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>
An allergy has multiple pieces of information,
which you can use separately or in combination to create dimensions, depending
on what you want to see.]]></Description>
<Super>%SerialObject</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="Allergen">
<Description>
A substance to which the patient is allergic.</Description>
<Type>DeepSee.Study.Allergen</Type>
</Property>

<Property name="Severity">
<Description>
Severity of this allergic reaction.</Description>
<Type>DeepSee.Study.AllergySeverity</Type>
</Property>

<Property name="DiagnosedBy">
<Description>
Doctor who recorded this allergic reaction.</Description>
<Type>DeepSee.Study.Doctor</Type>
</Property>

<Method name="GenerateAllergies">
<Description>
Called by DeepSee.Study.Patient:GenerateData() or by DeepSee.Study.PatientSet2:GenerateData().
Pat argument could be either DeepSee.Study.Patient or DeepSee.Study.PatientSet2.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pat,genNulls:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set status=$$$OK

    //First decide if patient has no known allergies
    If ##class(DeepSee.Populate).RandomTrue(15) {
	    // assume ID 1 is the nil allergen
	    Set allergen=##class(DeepSee.Study.Allergen).%OpenId(1,0)
	    Set status=..AddAllergy(pat,allergen,genNulls)
	    Quit status
	    }
    
    //iterate through remaining allergens and randomly assign to patient
    Set allergencount=##class(DeepSee.Populate).Count("DeepSee.Study.Allergen")
    For i=2:1:allergencount {
	    If ##class(DeepSee.Populate).RandomTrue(5) {
		    Set allergen=##class(DeepSee.Study.Allergen).%OpenId(i,0)
	        Set status=..AddAllergy(pat,allergen,genNulls)
	        }
	    }
    
    Quit status
]]></Implementation>
</Method>

<Method name="AddAllergy">
<Description>
adds the given allergen to the patient and returns the patient by reference</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pat,allergen:DeepSee.Study.Allergen,genNulls:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set status=$$$OK

    Set allergy=..%New()
    Set allergy.Allergen=allergen
    
	if (allergen.Code'="000") {

		Set sevid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.AllergySeverity")
		Set allergy.Severity=##class(DeepSee.Study.AllergySeverity).%OpenId(sevid,0)

		Set docid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.Doctor")
		Set allergy.DiagnosedBy=##class(DeepSee.Study.Doctor).%OpenId(docid,0)
	}
            
	If genNulls {
		//for some percent of allergies, severity is not recorded
		If ##class(DeepSee.Populate).RandomTrue(2){
			Set allergy.Severity=""
		}
		//for some percent of allergies, diagnosing doctor is not recorded
		If ##class(DeepSee.Populate).RandomTrue(8){
			Set allergy.DiagnosedBy=""
		}
	}

    //now add this to the patient 
    Set status=pat.Allergies.Insert(allergy)

    //create the same data in the PatientAllergy1 table 
    set status=##class(DeepSee.Study.PatientAllergy1).CreateOne(pat,allergen,allergy.Severity,allergy.DiagnosedBy)
            
    Quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>PatientAllergyState</State>
<StreamLocation>^DeepSee.Study.PatientAllergyS</StreamLocation>
<Data name="PatientAllergyState">
<Value name="1">
<Value>Allergen</Value>
</Value>
<Value name="2">
<Value>Severity</Value>
</Value>
<Value name="3">
<Value>DiagnosedBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.PatientAllergy1">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>
An allergy has multiple pieces of information,
which you can use separately or in combination to create dimensions, depending
on what you want to see.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63616,45898.755071</TimeCreated>

<Property name="Patient">
<Description>
Patient who has this allergy</Description>
<Type>DeepSee.Study.Patient</Type>
</Property>

<Property name="Allergen">
<Description>
A substance to which the patient is allergic.</Description>
<Type>DeepSee.Study.Allergen</Type>
</Property>

<Property name="Severity">
<Description>
Severity of this allergic reaction.</Description>
<Type>DeepSee.Study.AllergySeverity</Type>
</Property>

<Property name="DiagnosedBy">
<Description>
Doctor who recorded this allergic reaction.</Description>
<Type>DeepSee.Study.Doctor</Type>
</Property>

<Method name="CreateOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>patient:DeepSee.Study.Patient,allergen:DeepSee.Study.Allergen="",severity:DeepSee.Study.AllergySeverity="",diagnosedBy:DeepSee.Study.Doctor=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set new=..%New()
	set new.Patient=patient
	if (allergen'="") {
		set new.Allergen=allergen
	}
	if (severity'="") {
		set new.Severity=severity
	}
	if (diagnosedBy'="") {
		set new.DiagnosedBy=diagnosedBy
	}
	set status=new.%Save()
	quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.PatientAllergy1D</DataLocation>
<DefaultData>PatientAllergy1DefaultData</DefaultData>
<IdLocation>^DeepSee.Study.PatientAllergy1D</IdLocation>
<IndexLocation>^DeepSee.Study.PatientAllergy1I</IndexLocation>
<StreamLocation>^DeepSee.Study.PatientAllergy1S</StreamLocation>
<Data name="PatientAllergy1DefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Allergen</Value>
</Value>
<Value name="3">
<Value>Severity</Value>
</Value>
<Value name="4">
<Value>DiagnosedBy</Value>
</Value>
<Value name="5">
<Value>Patient</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.PatientDetails">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
It represents an additional table of data,
perhaps entered by a separate research team, and its only connection to
DeepSee.Study.Patient is that both tables have the same PatientID field. Thus to use
fields of this table as DeepSee dimensions/levels, it is necessary to use an SQL query
in the dimension definition. 
<p>This table is populated only if you use the T option when running the
GenerateData() method in DeepSee.Populate.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="Profession">
<Type>DeepSee.Study.Profession</Type>
</Property>

<Property name="FavoriteColor">
<Type>%String</Type>
</Property>

<Index name="PatientIDIndex">
<Description>
This index is meant to improve performance when the DeepSee indices are built. 
The DeepSee data model for DeepSee.Study.Patient uses an SQL query that refers 
to PatientID.</Description>
<Properties>PatientID</Properties>
<Unique>1</Unique>
</Index>

<Method name="CreatePatientDetails">
<Description>
Called by DeepSee.Study.Patient:AddPatients().</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>PatientID:%String,age:%Numeric=35,genNulls:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set status=$$$OK
    Set patdetails=##class(PatientDetails).%New()
    Set patdetails.PatientID=PatientID

    //get random color
    Set colorlist=$LB("Red","Blue","Green","Purple","Yellow","Orange")
    Set colorid=$RANDOM($LISTLENGTH(colorlist))+1
    Set patdetails.FavoriteColor=$LI(colorlist,colorid)

    If ((age>17) && (age<70)) 
    {
        //not everyone in this age range is employed
        If ##class(DeepSee.Populate).RandomTrue(87){
            //get random profession
            Set profid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.Profession")
            Set patdetails.Profession=##class(DeepSee.Study.Profession).%OpenId(profid,0)
            }
        }
                
    If 'genNulls
    {
        //If genNulls is off, save details in all cases
        Set status=patdetails.%Save()
        If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "Details error"}
        }
        Else 
        {
            //If genNulls is on, roll the dice and 
            //save the details only some of the time
            If ##class(DeepSee.Populate).RandomTrue(76)
            {
                Set status=patdetails.%Save()
                If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "Patient details save error"}
                }
   }
   
   Quit status
]]></Implementation>
</Method>

<Method name="ChangePatientDetails">
<Description>
Iterate through patient extent and change color for some percentage of patients.
If rebuild is 1, this method updates the DeepSee indices (I and II) for each patient 
affected by these changes. For DeepSee I, use this option only if you have enabled 
incremental updates (otherwise, you needlessly slow down the method).</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>percent:%Numeric=10,rebuild:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Changing some patient details..."

    //create or update the "ID extent sets" from which we can later get random IDs
    Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())

    Set recordcount=##class(DeepSee.Populate).Count($CLASSNAME())
    Set changecount=0
    
    Set colorlist=$LB("Red","Blue","Green","Purple","Yellow","Orange")
    
    For i=1:1:recordcount 
    {
        If ##class(DeepSee.Populate).RandomTrue(percent) 
        {
            Set colorid=$RANDOM($LISTLENGTH(colorlist))+1

            Set randomid=##class(DeepSee.Populate).GetRandomId($CLASSNAME())
            Set patdetails=..%OpenId(randomid)
            Set patdetails.FavoriteColor=$LI(colorlist,colorid)
            Do patdetails.%Save()
            Set changecount=changecount+1   
            
            If rebuild {
                //Because the DeepSee.Study.Patient table is unaware of the DeepSee.Study.PatientDetails
                //table, changing info in PatientDetails does NOT fire any triggers for
                //the patients, so it is necessary to figure out which patients are 
                //affected and update the indices for those patients
            
                Set patID=patdetails.PatientID
            
                Set myquery="SELECT ID FROM DeepSee_Study.Patient WHERE PatientID=?"
                Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
                Set status=rset.Prepare(myquery)
                If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
                Set status=rset.Execute(patID)
                If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
                While rset.Next() {
                    Set id=rset.Data("ID")

                    //The following line applies to DeepSee I
                    //Do ##class(DeepSee.Study.Patient).zzBuildOne(id)

                    //The following line applies to DeepSee II
                    Do ##class(%DeepSee.Utils).%ProcessFact("patients",id)

                    }
                Kill rset              
               
            }
          }
        }
        If rebuild {Kill %this} ; needed because zzBuildOne doesn't clean this up
        Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Details changed for "_ changecount _" patients"
]]></Implementation>
</Method>

<Method name="DeletePatientDetails">
<Description>
Clear out patient details</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>PatientID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
            
    Set myquery="DELETE FROM DeepSee_Study.PatientDetails WHERE PatientID=?"
    Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
    Set status=rset.Prepare(myquery)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Set status=rset.Execute(PatientID)
    Quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.PatientDetailsD</DataLocation>
<DefaultData>PatientDetailsDefaultData</DefaultData>
<IdLocation>^DeepSee.Study.PatientDetailsD</IdLocation>
<IndexLocation>^DeepSee.Study.PatientDetailsI</IndexLocation>
<StreamLocation>^DeepSee.Study.PatientDetailsS</StreamLocation>
<Data name="PatientDetailsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PatientID</Value>
</Value>
<Value name="3">
<Value>Profession</Value>
</Value>
<Value name="4">
<Value>FavoriteColor</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.PatientDiagnosis">
<Description>
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
See the comments for the Diagnoses property in DeepSee.Study.Patient.</Description>
<Super>%SerialObject</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="DiagnosisCode">
<Type>%String</Type>
</Property>

<Property name="DiagnosedBy">
<Type>DeepSee.Study.Doctor</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>PatientDiagnosisState</State>
<StreamLocation>^DeepSee.Study.PatientDiagB1A7S</StreamLocation>
<Data name="PatientDiagnosisState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>DiagnosisCode</Value>
</Value>
<Value name="2">
<Value>DiagnosedBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.PatientDiagnosis1">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
See the comments for the Diagnoses property in DeepSee.Study.Patient.
<p>This table is populated only if you use the D option when running the
GenerateData() method in DeepSee.Populate.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="Patient">
<Type>DeepSee.Study.Patient</Type>
<Cardinality>parent</Cardinality>
<Inverse>DiagnosesAsChildren</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="DiagnosisCode">
<Type>%String</Type>
</Property>

<Property name="DiagnosedBy">
<Type>DeepSee.Study.Doctor</Type>
</Property>

<Index name="PatientIndex">
<Properties>Patient</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("DiagnosesAsChildren")</DataLocation>
<DefaultData>PatientDiagnosis1DefaultData</DefaultData>
<IdLocation>^DeepSee.Study.PatientC("DiagnosesAsChildren")</IdLocation>
<IndexLocation>^DeepSee.Study.PatientDiag6E31I</IndexLocation>
<StreamLocation>^DeepSee.Study.PatientDiag6E31S</StreamLocation>
<Data name="PatientDiagnosis1DefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DiagnosisCode</Value>
</Value>
<Value name="3">
<Value>DiagnosedBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.PatientDiagnosis2">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
See the comments for the Diagnoses property in DeepSee.Study.Patient.
<p>This table is populated only if you use the D option when running the 
GenerateData() method in DeepSee.Populate.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="Patient">
<Type>DeepSee.Study.Patient</Type>
<Cardinality>one</Cardinality>
<Inverse>DiagnosesAsMany</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="DiagnosisCode">
<Type>%String</Type>
</Property>

<Property name="DiagnosedBy">
<Type>DeepSee.Study.Doctor</Type>
</Property>

<Index name="PatientIndex">
<Properties>Patient</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.PatientDiag6F71D</DataLocation>
<DefaultData>PatientDiagnosis2DefaultData</DefaultData>
<IdLocation>^DeepSee.Study.PatientDiag6F71D</IdLocation>
<IndexLocation>^DeepSee.Study.PatientDiag6F71I</IndexLocation>
<StreamLocation>^DeepSee.Study.PatientDiag6F71S</StreamLocation>
<Data name="PatientDiagnosis2DefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Patient</Value>
</Value>
<Value name="3">
<Value>DiagnosisCode</Value>
</Value>
<Value name="4">
<Value>DiagnosedBy</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.PatientEncounter">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>A patient can have multiple encounters 
(interactions with a medical professional). The encounter data here is minimal, but you 
can create dimensions/levels based on the number of encounters a patient has, as well as 
on the attending physician for those encounters. 
<p>This table is populated only if you use the E option when running the GenerateData() 
method in DeepSee.Populate. You can also use the AddEncounters() method 
of this class to add encounters to existing patients.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="Patient">
<Type>DeepSee.Study.Patient</Type>
</Property>

<Property name="EncounterNumber">
<Type>%String</Type>
</Property>

<Property name="PrimaryDoctor">
<Type>DeepSee.Study.Doctor</Type>
</Property>

<Property name="EncounterType">
<Type>%String</Type>
</Property>

<Method name="CreateEncounters">
<Description>
Called by DeepSee.Study.Patient:AddPatients().</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pat:DeepSee.Study.Patient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

    Set encNo=100 ; starting value

    Set encountercount=..GetRandomEncounterCount(pat.Age) 	
    
    Set patnumber=$PIECE(pat.PatientID,"_",2)   ; get number part from this string
    For i=1:1:encountercount {
        Set encounter=##class(DeepSee.Study.PatientEncounter).%New()
        Set encounter.Patient=pat
        Set encounter.EncounterNumber=patnumber_"-"_encNo

        Set docid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.Doctor")
        Set encounter.PrimaryDoctor=##class(DeepSee.Study.Doctor).%OpenId(docid,0)
        Set encounter.EncounterType=..GetRandomEncounterType()

        Set status=encounter.%Save()
        Set encNo=encNo+1
        }
    Quit status
]]></Implementation>
</Method>

<Method name="AddEncounters">
<Description>
Iterate through patients and add encounters randomly to some percentage.
If rebuild is 1, this method updates the DeepSee indices (I and II) for each patient 
affectedby these changes. For DeepSee I, use this option only if you have enabled 
incremental updates (otherwise, you needlessly slow down the method).</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>percent:%Numeric=20,rebuild:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Adding encounters..."

    //create or update the "ID extent sets" from which we can later get random IDs
    Set status=##class(DeepSee.Populate).UpdateIdCache("DeepSee.Study.Patient")
    Set status=##class(DeepSee.Populate).UpdateIdCache("DeepSee.Study.Doctor")

    Set patcount=##class(DeepSee.Populate).Count("DeepSee.Study.Patient")
    Set changecount=0
    
    //first check to see if we have any encounter data; if we don't, we can add
    //encounters more quickly
    Set myquery="SELECT Count(*) as ENCCOUNT FROM DeepSee_Study.PatientEncounter"
    Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
    Set status=rset.Prepare(myquery)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Set status=rset.Execute()
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Set enccount=0
    While rset.Next() {
        Set enccount=rset.Data("ENCCOUNT")
        }
    
    //roll the dice as many times as we have patients; this is not the same
    //as iterating through the patients but does provide similar coverage
    For i=1:1:patcount    
    {
        If ##class(DeepSee.Populate).RandomTrue(percent) 
        {
            Set changecount=changecount+1
            Set id=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.Patient")
            Set pat=##class(DeepSee.Study.Patient).%OpenId(id,0)
            Set patID=pat.%Id() ; use when querying extent
            
            //if we already have encounter data, we must 
            //get highest number encounter for this patient, if any
            If (enccount>0) {
	            Set myquery="SELECT EncounterNumber FROM DeepSee_Study.PatientEncounter WHERE Patient=? ORDER BY EncounterNumber"
                Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
                Set status=rset.Prepare(myquery)
                If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
                Set status=rset.Execute(patID)
                If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
                Set result=""
                While rset.Next() {
                    Set result=rset.Data("EncounterNumber")
                    }
                If (result'="") {
	                Set highestencno=result
                    Set encNo=$PIECE(highestencno,"-",2) + 1    ; increment by 1 from what's there
                    }
                    Else {
	                    //this patient has no encounters yet
	                    Set encNo=100
	                    }
                }
                Else {
	                Set encNo=100
	                }
                   
            //number of encounters to add
            Set encountercount=$RANDOM(2)+1   ; ADD 1 or 2 encounters
            
            //base part for encounter number
            Set patnumber=$PIECE(pat.PatientID,"_",2)   ; get number part from this string

            For j=1:1:encountercount {
                Set encounter=##class(DeepSee.Study.PatientEncounter).%New()
                Set encounter.Patient=pat
                Set encounter.EncounterNumber=patnumber_"-"_encNo
                Set docid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.Doctor")
                Set encounter.PrimaryDoctor=##class(DeepSee.Study.Doctor).%OpenId(docid,0)
                Set encounter.EncounterType=..GetRandomEncounterType()

                Set status=encounter.%Save()
                Set encNo=encNo+1
                }

            If rebuild {
                //Because the DeepSee.Study.Patient table is unaware of the DeepSee.Study.PatientEncounter
                //table, changing info in DeepSee.Study.PatientEncounter does NOT fire any triggers for
                //the patients, so it is necessary to update the indices for those patients
                Set id=pat.%Id()

                //The following line applies to DeepSee I
                //Do ##class(DeepSee.Study.Patient).zzBuildOne(id)

                //The following line applies to DeepSee II
                Do ##class(%DeepSee.Utils).%ProcessFact("patients",id)
             }
            }
        }
    Set ^DeepSee.Study.Log($I(^DeepSee.Study.Log))=$zdatetime($h,2,3)_" Added encounters for "_changecount_" patients"
    //If rebuild {Kill %this}	; needed because zzBuildOne doesn't clean this up
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteEncounters">
<Description>
Clear out records in PatientEncounter; called when you delete patients.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pat:DeepSee.Study.Patient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set patid=pat.%Id()
    Set myquery="DELETE FROM DeepSee_Study.PatientEncounter WHERE Patient=?"
    Set rset=##class(%ResultSet).%New("%DynamicQuery:SQL")
    Set status=rset.Prepare(myquery)
    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
    Set status=rset.Execute(patid)
    Quit status
]]></Implementation>
</Method>

<Method name="GetRandomEncounterType">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    If ##class(DeepSee.Populate).RandomTrue(5) {
	    Quit "Emergency"
	    }
	    Elseif ##class(DeepSee.Populate).RandomTrue(30) {
		    Quit "Outpatient"
		    }
		    Else {
			    Quit "Inpatient"
			    }
]]></Implementation>
</Method>

<Method name="GetRandomEncounterCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>age:%Numeric</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    Set factor=(age+1)*1.5
    Set count=3 + $RANDOM(20) + $RANDOM(factor)
    Quit count
]]></Implementation>
</Method>

<Index name="PatientIndex">
<Properties>Patient</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.PatientEncoB0D9D</DataLocation>
<DefaultData>PatientEncounterDefaultData</DefaultData>
<IdLocation>^DeepSee.Study.PatientEncoB0D9D</IdLocation>
<IndexLocation>^DeepSee.Study.PatientEncoB0D9I</IndexLocation>
<StreamLocation>^DeepSee.Study.PatientEncoB0D9S</StreamLocation>
<Data name="PatientEncounterDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Patient</Value>
</Value>
<Value name="3">
<Value>EncounterNumber</Value>
</Value>
<Value name="4">
<Value>PrimaryDoctor</Value>
</Value>
<Value name="5">
<Value>EncounterType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.PatientSet2">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>This class represents an additional set of patients collected
by a separate research team and put into a separate table. It does
not have all the properties that DeepSee.Study.Patient has.
For information on these properties and methods, see the corresponding
comments in DeepSee.Study.Patient.
<p>This table is populated only if you use the X option when running the 
GenerateData() method in DeepSee.Populate.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="PatientID">
<Type>%String</Type>
</Property>

<Property name="Gender">
<Type>%String</Type>
</Property>

<Property name="Age">
<Type>%Integer</Type>
</Property>

<Property name="PrimaryCarePhysician">
<Type>DeepSee.Study.Doctor</Type>
</Property>

<Property name="Allergies">
<Type>DeepSee.Study.PatientAllergy</Type>
<Collection>list</Collection>
</Property>

<Property name="Diagnoses">
<Type>DeepSee.Study.PatientDiagnosis</Type>
<Collection>list</Collection>
</Property>

<Property name="HomeCity">
<Type>%String</Type>
</Property>

<Property name="PatientGroup">
<Type>%String</Type>
</Property>

<Property name="TestScore">
<Type>%Numeric</Type>
</Property>

<Method name="GenerateData">
<Description>
Called by DeepSee.Populate:GenerateData(); see the comments for that method.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patCount:%Integer=500,options:%String="ADT",genNulls:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
     Set status=$$$OK
     //first kill extent and kill extents of child tables
     //never use %KillExtent() in a real application
     Do ..%KillExtent()
     Set status=..AddPatients(patCount,options,genNulls)
     Quit status
]]></Implementation>
</Method>

<Method name="AddPatients">
<Description>
Called by DeepSee.Populate:GenerateData(); see the comments for that method.
Can also be called directly to add patients after the initial setup.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>patCount:%Integer=500,options:%String="AD",genNulls=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set status=$$$OK
    
    //check options; what Do we need to generate?
    If ($FIND(options,"A")) {Set generateallergies=1}
        Else {Set generateallergies=0}
    If ($FIND(options,"D")) {Set generatediagnoses=1}
        Else {Set generatediagnoses=0}
    
    Set dcount=##class(DeepSee.Populate).Count("DeepSee.Study.Diagnosis")
    Set currentpatcount=##class(DeepSee.Populate).Count($CLASSNAME())
    If (currentpatcount=0) {Set initPat=5000}
        Else {Set initPat=patcount+1}
    Set idnumber=initPat

    For n = 1:1:patCount {
        Set pat=##class(DeepSee.Study.PatientSet2).%New()
        Set idnumber=idnumber+1     ; increment without any gaps
        Set patid="SET2_"_idnumber
        Set pat.PatientID=patid
        
        //get age+gender combination
        Set agegender=##class(DeepSee.Populate).RandomGenderAndAge()
        Set pat.Gender=$Piece(agegender,",",1)
        Set pat.Age=$Piece(agegender,",",2)
   
        //assign a doctor
        Set docid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.Doctor")
        Set doctor=##class(DeepSee.Study.Doctor).%OpenId(docid,0)
        Set pat.PrimaryCarePhysician=doctor

        // null out this property randomly to simulate missing data
        If genNulls &&##class(DeepSee.Populate).RandomTrue(15){
            Set pat.PrimaryCarePhysician=""
            }

        //assign to a patient group
        Set grouplist=$LB("Group A","Group B")
        Set groupID=$RANDOM($LISTLENGTH(grouplist))+1
        Set pat.PatientGroup=$LI(grouplist,groupID)

        //Set TestScore property and assign a test version
        Set pat.TestScore=50+$RANDOM(50)
        
        //null out the previous two properties in some cases
        //score can be null but won't be 0 (see above)
        //this lets us see how measures treat null values
        If (genNulls && ##class(DeepSee.Populate).RandomTrue(20)){
            Set pat.TestScore=""
            Set pat.PatientGroup=""
            }

        //Select a city
        Set cityid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.City")
        Set city=##class(DeepSee.Study.City).%OpenId(cityid,0)
        Set pat.HomeCity=city.Name

        //If asked, generate some allergies
        If generateallergies {
            Set status=##class(DeepSee.Study.PatientAllergy).GenerateAllergies(pat,genNulls)
            If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "Allergies insert error"}
            }
         
         //If asked, generate some diagnoses
         If generatediagnoses {
            //iterate through available diagnoses, look up chance of patient's
            //receiving this diagnosis, based on gender & age
            //save diagnosis data in all diagnosis properties
            Set diagnosiscount=0    ; initialize this so we know If we're on the first one
            Set diaglist=""
            For k=1:1:dcount{
                Set potentialdiagnosis=##class(DeepSee.Study.Diagnosis).%OpenId(k,0)

                //get the code
                Set code=potentialdiagnosis.Code
                //look up how likely this patient is to have this diagnosis
                Set chance=##class(DeepSee.Study.Diagnosis).GetPercentChance(code,pat.Gender,pat.Age)
                
                If ##class(DeepSee.Populate).RandomTrue(chance) {
                    Set diagnosiscount=diagnosiscount+1
                    Set desc=potentialdiagnosis.Description                             
                    Set diagdocid=##class(DeepSee.Populate).GetRandomId("DeepSee.Study.Doctor")
                    Set diagdoc=##class(DeepSee.Study.Doctor).%OpenId(diagdocid,0)

                    //populate Diagnoses property
                    Set patdiag=##class(DeepSee.Study.PatientDiagnosis).%New()    ; this object is serial
                    Set patdiag.DiagnosisCode=code
                    Set patdiag.DiagnosedBy=diagdoc
                    Set status=pat.Diagnoses.Insert(patdiag)
                    If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "Diagnoses error"}
                    }
                }
             
             }

        Set status=pat.%Save()
        If $$$ISERR(status) {Do $System.Status.DisplayError(status) Write !, "Patient save error"}
        If ('(n#1000)) {Write $C(13,27)_"[0J"_$FN(n,",",0)_" patients created in DeepSee.Study.Patient"}
}

   //create an "extent set" from which we can later get random IDs
   Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())
   
   Write !
   Write $C(13,27)_"[0J"_$FN(+$G(n),",",0)_" patient(s) created in DeepSee.Study.PatientSet2"
   Quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.PatientSet2D</DataLocation>
<DefaultData>PatientSet2DefaultData</DefaultData>
<IdLocation>^DeepSee.Study.PatientSet2D</IdLocation>
<IndexLocation>^DeepSee.Study.PatientSet2I</IndexLocation>
<StreamLocation>^DeepSee.Study.PatientSet2S</StreamLocation>
<Data name="PatientSet2DefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PatientID</Value>
</Value>
<Value name="3">
<Value>Gender</Value>
</Value>
<Value name="4">
<Value>Age</Value>
</Value>
<Value name="5">
<Value>PrimaryCarePhysician</Value>
</Value>
<Value name="6">
<Value>Allergies</Value>
</Value>
<Value name="7">
<Value>Diagnoses</Value>
</Value>
<Value name="8">
<Value>HomeCity</Value>
</Value>
<Value name="9">
<Value>PatientGroup</Value>
</Value>
<Value name="10">
<Value>TestScore</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Study.Profession">
<Description><![CDATA[
This class is part of the DeepSee Patients sample, whose purpose is to provide
sample data for use with DeepSee. 
<p>This class contains the professions and their industries.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61919,20786</TimeCreated>

<Property name="Profession">
<Type>%String</Type>
</Property>

<Property name="Industry">
<Type>%String</Type>
</Property>

<XData name="LoadData">
<Description><![CDATA[
Used by Setup method. The format of <row> is: 
<pre>industry^profession</pre>
<p>
Industries taken from http://www.census.gov/epcd/susb/latest/us/US--.HTM 
<p>Only a few industries and professions are included.]]></Description>
<Data><![CDATA[
<table>
 <row>Accommodation and Food Services^Baker</row>
 <row>Accommodation and Food Services^Cook</row>
 <row>Construction^Electrician</row>
 <row>Construction^Carpenter</row>
 <row>Construction^Plumber</row>
 <row>Educational Services^Teacher</row>
 <row>Educational Services^Corporate Trainer</row>
 <row>Finance and Insurance^Insurance Agent</row>
 <row>Finance and Insurance^Bank Teller</row>
 <row>Finance and Insurance^Benefits Coordinator</row>
 <row>Health Care and Social Assistance^Doctor</row>
 <row>Health Care and Social Assistance^Nurse</row>
 <row>Professional, Scientific, and Technical Services^Veterinarian</row>
 <row>Professional, Scientific, and Technical Services^Programmer</row>
 <row>Professional, Scientific, and Technical Services^Architect</row>
 <row>Professional, Scientific, and Technical Services^Accountant</row>
 <row>Real Estate and Leasing^Real Estate Agent</row>
 <row>Retail Trade^Retail Clerk</row>
 <row>Retail Trade^Store Manager</row>
 <row>Transportation and Warehousing^Truck Driver</row>
 <row>Transportation and Warehousing^Warehouse Manager</row>
 <row>Other Services^Appliance Repair Specialist</row>
 <row>Other Services^Other</row>
 </table>
]]></Data>
</XData>

<Method name="Setup">
<Description>
This method reads the XData block in this class and uses it to populate the table. 
This method is called by DeepSee.Populate:GenerateData().</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   Set status=$$$OK
   //first kill extent
   //never use %KillExtent() in a real application
   Do ..%KillExtent()
   
   // Get a stream of XML from the XData block contained in this class
   Set tStream=##class(%Dictionary.CompiledXData).IDKEYOpen($CLASSNAME(),"LoadData").Data
   If '$IsObject(tStream) {Set tSC=%objlasterror Quit}
   
   Set status=##class(%XML.TextReader).ParseStream(tStream,.textreader)
   //check status
   If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
   
   Set count=0
   //iterate through document, node by node
   While textreader.Read()
   {
       If (textreader.NodeType="chars")
       {
           Set value=textreader.Value
           //write !, "value is: ", value
           Set obj=..%New()
           Set obj.Industry=$Piece(value,"^",1)
           Set obj.Profession=$Piece(value,"^",2)
           Set status=obj.%Save()
           If $$$ISERR(status) {Do $System.Status.DisplayError(status) Quit}
           Set count=count+1
           }
   }

   //create an "extent set" from which we can later get random IDs
   Set status=##class(DeepSee.Populate).UpdateIdCache($CLASSNAME())

   Quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^DeepSee.Study.ProfessionD</DataLocation>
<DefaultData>ProfessionDefaultData</DefaultData>
<IdLocation>^DeepSee.Study.ProfessionD</IdLocation>
<IndexLocation>^DeepSee.Study.ProfessionI</IndexLocation>
<StreamLocation>^DeepSee.Study.ProfessionS</StreamLocation>
<Data name="ProfessionDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Profession</Value>
</Value>
<Value name="3">
<Value>Industry</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="DeepSee.Utils.MDXAutoFiltersKPI">
<Description><![CDATA[
Use this superclass to create an MDX-based KPI that automatically 
adds a %FILTER clause to your MDX query. The %FILTER clause includes
any selections in any filters that use levels from the appropriate cube.
<p>To use this superclass:
<ul>
<li>Specify sourceType="mdx" in &lt;kpi>.</li>
<li>Specify a query within the mdx attribute of &lt;kpi></li>
<li>Specify the CUBE parameter so that we can automatically fetch the members
of the levels for use as filters.</li>
Instead, all levels of the associated cube are automatically available as filters.
</ul>
<p>Or, if you want more control over the form of the query, override %OnGetMDX() as usual
and include the following line after creating your basic MDX query:
<p>set pMDX=pMDX_..FilterBuilder()
<p>This method gets the current filter state, creates the %FILTER clause, 
and tacks it on to the end of your query.
<p>If you want more control over the members of one or more filters, override 
%OnGetFilterMembers() as usual. To get all the members for a given level/filter, 
use this: 
<p>set sc=..%GetMembersForFilter(..#CUBE,pFilter,.pMembers)
<p>And then do something different as needed in other scenarios.
<p>To add additional filters (to be used in a different way):
<ul>
<li>Within &lt;kpi>, declare the filters that you want to make available. 
The logical name for each filter must be of the form of an MDX level specifier, e.g.,
[dimension].[hierarchy].[level]. This is needed so that we can retrieve the 
level members.</li>
<li>Override %OnGetFilters(). In your implementation, get the filters from the 
cube by calling #super() and then add your custom filters to the array.</li>
</ul>]]></Description>
<Abstract>1</Abstract>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62557,53139.853805</TimeCreated>

<Parameter name="CUBE">
<Description>
Specifies the cube that this KPI uses. Specify the logical cube name.</Description>
<Type>%String</Type>
</Parameter>

<Method name="%OnGetFilterMembers">
<Description>
Implementation; can be overridden.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilter:%String,*pMembers:%List,pSearchKey:%String="",pDataSourceName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set sc=..%GetMembersForFilter(..#CUBE_".cube",pFilter,.pMembers)
	Quit sc
]]></Implementation>
</Method>

<Method name="%OnGetMDX">
<Description>
Implementation; can be overridden.</Description>
<FormalSpec><![CDATA[&pMDX:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
     set pMDX=pMDX_..FilterBuilder()
     quit $$$OK
]]></Implementation>
</Method>

<Method name="FilterBuilder">
<Description>
Examines the filters defined in the cube, determines the current value of each, 
returns a string that can be used as the %FILTER clause.</Description>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	set tFilters=""
 	set tSC = ##class(%DeepSee.Dashboard.Utils).%GetFiltersForDataSource(..#CUBE_".cube",.tFilters)
	quit:$$$ISERR(tSC) ""
   
    //iterate through defined filters and build up usedFilters array
	set i = "",usedFilters=0
	for {
		set i = $order(tFilters(i))
		quit:i=""

	    set filter=tFilters(i)
	   	set filterName=$LI(filter,2)
		set filterValue=$PROPERTY(..%filterValues,filterName)

		if filterValue'="" { 
		    set usedFilters=usedFilters+1
			do ..ParseFilterValue(filterValue,.FilterStateArray)
			// create usedFilters array
	    	//used FilterStateArray and build the string for this filter
	    	set string=..BuildString(filterName,.FilterStateArray)
	    	set usedFilters(usedFilters)=string
	    } ; end of looking at non-null filters

    } ; end of looking at defined filters
    
    set where=""
    if usedFilters>=1 {
       set where=..CombineFilterStrings(.usedFilters)
    }
    quit where
]]></Implementation>
</Method>

<Method name="CombineFilterStrings">
<Description>
Uses usedFilters array and returns a string that can be used
as the %FILTER clause of a MDX query.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&usedFilters]]></FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set where=""
	if (usedFilters=1) {
	    set where=" %FILTER "_usedFilters(1)
   } elseif (usedFilters>1) {
	    set where=usedFilters(1)
		for i=2:1:usedFilters {
			set where="NONEMPTYCROSSJOIN("_usedFilters(i)_","_where_")"
	  	}
	  	set where=" %FILTER "_where
    }
    quit where
]]></Implementation>
</Method>

<Method name="ParseFilterValue">
<Description>
Given a filter value, returns, by reference, a FilterStateArray, 
which describes the filter state.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>filterValue:%String,*FilterStateArray</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //initialize this node 
    kill FilterStateArray  
    set FilterStateArray("not")=0
    
	Set filterValue = $ZSTRIP(filterValue,"<>W")
	set firstbit=$EXTRACT(filterValue,1,4)
	if firstbit="%NOT" {
		set FilterStateArray("not")=1
		set filterValue=$EXTRACT(filterValue,6,*)
	}

    //now check if we have a set
    set nextbit=$EXTRACT(filterValue)
    if nextbit="{" {
	    //take off { from the start and } from the end
	    set filterValue=$EXTRACT(filterValue,2,*-1)
        
		//parse the list of values the same way that Joe does
		Set valueCount=..%SplitList(filterValue,.tList)
		set FilterStateArray=valueCount
		for i=1:1:valueCount {
			set FilterStateArray(i)=tList(i)
			}
	    
	} else {
		//list has only 1 item; put it into the array
		set FilterStateArray=1
		set FilterStateArray(1)=filterValue
	}

	quit $$$OK
]]></Implementation>
</Method>

<Method name="BuildString">
<Description>
Given a filter name and a FilterStateArray, 
returns a string that can be used as an MDX set.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[filterName,&FilterStateArray]]></FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if (FilterStateArray = 1) {
	    set string=filterName_"."_FilterStateArray(1)
        if (FilterStateArray("not")=1) {
	       set string=string_".%NOT"
	       }
    } else {
	    set string="%OR({"
	    for i=1:1:FilterStateArray{
		   set string=string_filterName_"."_FilterStateArray(i)_","
		   } 
        //remove trailing comma and close set (which is wrapped in %OR)
        set string=$EXTRACT(string,1,*-1)
	    set string=string_"})"
	   
        //deal with NOT case
        if FilterStateArray("not")=1 {
	       set string="EXCEPT("_filterName_".MEMBERS,"_string_")"
	       }
	}
	quit string
]]></Implementation>
</Method>

<Method name="%OnGetFilterList">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pFilters:%List,pDataSourceName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		set tSC = ##class(%DeepSee.Dashboard.Utils).%GetFiltersForDataSource(..#CUBE_".cube",.tFilters)
		quit:$$$ISERR(tSC)
		
		set i = ""
		for {
			set i = $order(tFilters(i), 1, data)
			quit:i=""
			
			set pFilters($i(pFilters)) = $lb($lg(data,2), $lg(data,1),,1)
		}
        Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="HoleFoods.BudgetCube">
<Description><![CDATA[
This is a sample DeepSee data model.<br/>
This represents budget values for the HoleFoods model.
Refer to the <class>HoleFoods.BudgetCube</class> class for more details.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>62578,36234.107343</TimeChanged>
<TimeCreated>61102,65541.990914</TimeCreated>
<DependsOn>HoleFoods.Cube,HoleFoods.Transaction,HoleFoods.KPIAction</DependsOn>

<Parameter name="DOMAIN">
<Default>HOLEFOODS</Default>
</Parameter>

<XData name="Cube">
<Description>
This xml document defines the HoleFoods model.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube name="HoleFoodsBudget" 
caption="HoleFoods Budget"
defaultListing="Listing"
defaultMember="[Product].[All Product]"
nullReplacement="Missing Value"
buildRestriction="Actual=0"
actionClass="HoleFoods.KPIAction"
sourceClass="HoleFoods.Transaction">

<listing name="ListingX" sql="SELECT ID,UnitsSold,Outlet->City FROM $$$SOURCE WHERE $$$RESTRICT" />
<listing name="Listing" fieldList="%ID,DateOfSale,Outlet->City,%EXTERNAL(Channel) Channel,Product->Name,UnitsSold,AmountOfSale,(Discount*100)||'%' Discount,Comment" orderBy="DateOfSale,%ID"/>
<listing name="Listing By Date" fieldList="%ID,DateOfSale" orderBy="DateOfSale,%ID"/>
<listing name="Listing By Product" fieldList="%ID,Product->Name" orderBy="Product->Name,%ID"/>

<measure name="Target" sourceProperty="TargetAmount" aggregate="SUM" formatString="#,###.##"/>

<dimension name="DateOfSale" sharesFrom="HoleFoods"/>
<dimension name="Product" sharesFrom="HoleFoods"/>
<dimension name="Outlet" sharesFrom="HoleFoods"/>

</cube>
]]></Data>
</XData>
</Class>


<Class name="HoleFoods.CombinedCube">
<Description>
Sample of a DeepSee compound cube.
This combine the HoleFoods Sales data with the Holefoods budget data into one model.</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.SubjectArea</Super>
<TimeChanged>62575,55530.468355</TimeChanged>
<TimeCreated>62469,37916.138526</TimeCreated>
<DependsOn>HoleFoods.Cube,HoleFoods.BudgetCube</DependsOn>

<Parameter name="DOMAIN">
</Parameter>

<XData name="SubjectArea">
<Description>
SubjectArea definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/subjectarea</XMLNamespace>
<Data><![CDATA[
<subjectArea xmlns="http://www.intersystems.com/deepsee/subjectarea" name="HoleFoodsCombined" caption="HoleFoods Combined" disabled="false" baseCube="HoleFoods,HoleFoodsBudget">

<calculatedMember dimension="Measures" name="Variance" valueExpression="ISNULL([Measures].[Amount Sold],0)-ISNULL([Measures].[Target],0)" formatString="#,##.##;(#,##.##)"/>

</subjectArea>
]]></Data>
</XData>
</Class>


<Class name="HoleFoods.Country">
<Description>
This specifies the country within the HoleFoods demo.</Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61079,51385.591906</TimeCreated>

<Property name="Region">
<Description>
Region in which this country is located.</Description>
<Type>Region</Type>
</Property>

<Property name="Name">
<Description>
Name of this country.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="90"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^HoleFoods.CountryD</DataLocation>
<DefaultData>CountryDefaultData</DefaultData>
<IdLocation>^HoleFoods.CountryD</IdLocation>
<IndexLocation>^HoleFoods.CountryI</IndexLocation>
<StreamLocation>^HoleFoods.CountryS</StreamLocation>
<Data name="CountryDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Region</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HoleFoods.Cube">
<Description><![CDATA[
This is a sample DeepSee data model.<br/>
This cube represents a model for the fictional "HoleFoods" corporation.
It is based on the classes within the HoleFoods package.<br/>
To create data for this model, the easiest thing to do is to
use the BuildData method within the <class>HoleFoods.Utils</class> class:<br/>
From the command line:<br/>
<example language="cache">
Do ##class(HoleFoods.Utils).BuildData(1000000,1,1)
</example>
The first argument is the number of records to create, 
the second argument indicates that index building should be done in parallel,
the third is a verbose flag; if true, then progress is displayed as the data is built.]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61102,65541.990914</TimeCreated>
<DependsOn>HoleFoods.Transaction,HoleFoods.KPIAction</DependsOn>

<Parameter name="DOMAIN">
<Default>HOLEFOODS</Default>
</Parameter>

<XData name="Cube">
<Description>
This xml document defines the HoleFoods model.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube name="HoleFoods" 
caption="HoleFoods Sales"
defaultListing="Listing"
nullReplacement="Missing Value"
buildRestriction="Actual=1"
actionClass="HoleFoods.KPIAction"
sourceClass="HoleFoods.Transaction">

<listing name="ListingX" 
 sql="SELECT ID,UnitsSold,Outlet->City FROM $$$SOURCE WHERE $$$RESTRICT" />

<listing name="Listing" 
fieldList="%ID,DateOfSale,Outlet->City,%EXTERNAL(Channel) Channel,Product->Name Product,UnitsSold,AmountOfSale Revenue,(Discount*100)||'%' Discount,Comment" 
 orderBy="DateOfSale,%ID"/>

<listing name="Listing By Date" 
fieldList="%ID,DateOfSale" 
 orderBy="DateOfSale,%ID"/>

<listing name="Listing By Product" 
fieldList="%ID,Product->Name Product" 
 orderBy="Product->Name,%ID"/>

<listing name="Customer Info" 
listingType="map" 
 fieldList='%ID,Outlet->City "Store Location",Outlet->Country->Name Country,Product->Name Product,ZipCode "Customer ZipCode",Latitude,Longitude'/>

<listingField name="ID" fieldExpression="%ID" />
<listingField name="Channel" fieldExpression="%EXTERNAL(Channel) Channel" />
<listingField name="City" fieldExpression="Outlet->City" />
<listingField name="Comment" fieldExpression="Comment" />
<listingField name="Country" fieldExpression="Outlet->Country->Name Country" />
<listingField name="Date Of Sale" fieldExpression="DateOfSale" />
<listingField name="Latitude" fieldExpression="Latitude" />
<listingField name="Longitude" fieldExpression="Longitude" />
<listingField name="Product" fieldExpression="Product->Name Product" />
<listingField name="Product Category" fieldExpression="Product->Category" />
<listingField name="Revenue" fieldExpression="AmountOfSale Revenue" />
<listingField name="Units Sold" fieldExpression="UnitsSold" />
<listingField name="ZIP Code" fieldExpression="ZipCode" />

<index name="MxUnitsSold" properties="MxUnitsSold" type="bitmap"/>
<index name="MxAmountSold" properties="MxAmountOfSale" type="bitmap"/>

<measure name="Amount Sold" displayName="Revenue" sourceProperty="AmountOfSale" aggregate="SUM" formatString="$#,###.##"/>
<measure name="Units Sold" sourceProperty="UnitsSold" aggregate="SUM" searchable="true"/>
<measure name="Max Units" sourceProperty="UnitsSold" aggregate="MAX"/>
<measure name="Big Sale Count" sourceExpression='$S(%source.UnitsSold="":"",%source.UnitsSold>5:1,1:0)' type="boolean" />

<measure name="Comment" sourceProperty='Comment' type="text" factName="MxComment" />

<calculatedMember dimension="Measures" name="Pct Sold" valueExpression="Product.CurrentMember/Product.CurrentMember.Parent" formatString="###.##%"/>

<calculatedMember dimension="MyRegion" name="North" valueExpression="%OR({Outlet.[Boston],Outlet.[New York]})" />
<calculatedMember dimension="MyRegion" name="South" valueExpression="%OR({Outlet.[Atlanta],Outlet.[Paris]})" />
<calculatedMember dimension="MyRegion" name="West" valueExpression="%OR({Outlet.[Chicago],Outlet.[Tokyo]})" />

<namedSet name="Top Cities" setExpression="HEAD(Outlet.City.Members,3)" />

<!-- convenient named sets -->
<namedSet name="Last 5 Years" setExpression="DateOfSale.YearSold.[NOW-4]:[NOW]" />
<namedSet name="Current Year " setExpression="DateOfSale.YearSold.[NOW]" />

<calculatedMember dimension="Measures" name="5 year avg growth" displayName="5 Year Avg Growth" 
valueExpression="(DateOfSale.YearSold.[NOW]-DateOfSale.YearSold.[NOW-4])/(DateOfSale.YearSold.[NOW-4]*5)" 
formatString="###.##%"/>
<calculatedMember dimension="Measures" name="Growth over last period" displayName="Growth Over Last Period" 
valueExpression="(DateOfSale.CurrentMember-DateOfSale.CurrentMember.Lag(1))/DateOfSale.CurrentMember.Lag(1)" 
formatString="###.##%"/>
<calculatedMember dimension="Measures" name="Product percent of total" displayName="Product Percent of Total" 
valueExpression="Product.CurrentMember/Product.[All Product].%ALL" 
formatString="###.##%"/>

<calculatedMember name="Median Revenue" displayName="Median Revenue" 
dimension="Measures"
valueExpression='%KPI("%DeepSee.Median","MEDIAN",1,"%measure","Amount Sold","%CONTEXT")' 
formatString="$#,#.##"
 description="This calculated member demos the sample median plugin"/>

<calculatedMember name="90th Percentile Revenue" displayName="90th Percentile Revenue" 
dimension="Measures"
valueExpression='%KPI("%DeepSee.Percentile","PERCENTILE",1,"%measure","Amount Sold","%percentile","90","%CONTEXT")' 
formatString="$#,#.##"
 description="This calculated member demos the sample percentile plugin"/>

<!-- computed dimension based on comments -->
<dimension name="Comments" type="computed" dimensionClass="SQL" hasAll="false">
<hierarchy name="H1">
<level name="Comments" factName="DxComment">
<member name="Complaints" spec="WHERE MxComment %CONTAINSTERM('complained') OR MxComment %CONTAINSTERM('ranted')"/>
<member name="Compliments" spec="WHERE MxComment %CONTAINSTERM('happy')"/>
</level>
</hierarchy>
</dimension>

<dimension name="DateOfSale" displayName="Date Of Sale" type="time" sourceProperty="DateOfSale" allDisplayName="All Sales Dates">
<hierarchy name="Actual">
<level name="YearSold" timeFunction='Year'/>
<level name="MonthSold" timeFunction="MonthYear"/>
<level name="DaySold" timeFunction="DayMonthYear" />
</hierarchy>
</dimension>

<dimension name="Product" allDisplayName="All Products">
<hierarchy name="P1">
<level name="Product Category" sourceProperty="Product.Category"/>
 <level name="Product Name" sourceProperty="Product" dependsOn="[Outlet].[H1].[Region],[DateOfSale].[Actual].[YearSold]">
<property name="Name" sourceProperty="Product.Name" isName="true" isReference="true"/>
<property name="UnitPrice" sourceProperty="Product.Price" displayName="Unit Price" />
<property name="PriceSquared" sourceExpression='%source.Product.Price*%source.Product.Price' />
<property name="SKU" sourceProperty="Product.SKU" isDescription="true"/>
</level>
</hierarchy>
</dimension>

<dimension name="Outlet" allDisplayName="All Outlets">
<hierarchy name="H1">
<level name="Region" sourceProperty="Outlet.Country.Region.Name" />
<level name="Country" sourceProperty="Outlet.Country.Name" />
<level name="City" sourceProperty="Outlet">
<property name="Name" sourceProperty="Outlet.City" isName="true"/>
<property name="Population" sourceProperty="Outlet.Population"/>
<property name="Latitude" sourceProperty="Outlet.Latitude"/>
<property name="Longitude" sourceProperty="Outlet.Longitude"/>
</level>
</hierarchy>
</dimension>

<dimension name="Channel" allDisplayName="All Channels">
<hierarchy name="H1">
<level name="Channel Name" sourceProperty="Channel"  nullReplacement="No Channel">
<property name="Name" sourceProperty="Channel" useDisplayValue="true" isName="true"/>
</level>
</hierarchy>
</dimension>

<dimension name="Discount" allDisplayName="All Discount Types">
<hierarchy name="H1">
<level name="Discount Type" sourceProperty="Discount" rangeExpression="(,0]:None;(0,0.2):1-19%;[0.2,0.5):20-49%;[0.5,1]:50%+;"/>
</hierarchy>
</dimension>

<!-- this dimension is based on the number of Units Sold at one time -->
<dimension name="UnitsPerTransaction" displayName="Units Per Transaction" allDisplayName="All Units Per Transaction">
<hierarchy name="H1">
<level name="UnitsSold" sourceProperty="UnitsSold" />
</hierarchy>
</dimension>

</cube>
]]></Data>
</XData>
</Class>


<Class name="HoleFoods.DashboardsEtc">
<Description>
This class defines the dashboards and pivot tables for the HoleFoods sample.</Description>
<Super>%DeepSee.UserLibrary.Container</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61895,36924</TimeCreated>

<XData name="Contents">
<Description>
Pivots and dashboards are listed here in the same order 
in which Studio lists these folder items.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/library</XMLNamespace>
<Data><![CDATA[
<items>

<!-- Chart Demos/Area Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Area Chart" folderName="Chart Demos" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-11-27T15:55:49.228Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Discount].[H1].[Discount Type].Members" key="" value="" text="Discount Type" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Chart Demos/Bar Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Bar Chart" folderName="Chart Demos" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-11-27T15:53:48.365Z" createdBy="" category="" bookCover="{background: {style:&apos;background:white;&apos;,src:&apos;covers/pareto_chart.png&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: right;font-variant: small-caps;color:rgb(240, 0, 0);padding:3.5px;border-radius:7.5px 7.5px 7.5px 7.5px;&apos;},image: {style:&apos;display: none;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DateOfSale].[Actual].[YearSold].Members" key="" value="" text="YearSold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Chart Demos/Bubble Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Bubble Chart" folderName="Chart Demos" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.812Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Name].Members" key="" value="" text="Product Name" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="false" aggFunction="AVG" aggFunctionParm="" levelCaption="Avg Units Sold" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="false" aggFunction="AVG" aggFunctionParm="" levelCaption="Avg Revenue" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Chart Demos/Bullseye Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Bullseye Chart" folderName="Chart Demos" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-11-27T15:58:50.932Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[All Product]" key="" value="" text="All Product" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="false" aggFunction="SUM" aggFunctionParm="" levelCaption="All Products" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <rowLevel spec="[Product].[P1].[Product Name].&amp;[SKU-203]" key="" value="" text="Pretzels (bag)" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Chart Demos/Combo Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Combo Chart" folderName="Chart Demos" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.818Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DateOfSale].[Actual].[YearSold].Members" key="" value="" text="YearSold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Chart Demos/High Low Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="High Low Chart" folderName="Chart Demos" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.824Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Category].Members" key="" value="" text="Product Category" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="false" aggFunction="MIN" aggFunctionParm="" levelCaption="Min Revenue" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="false" aggFunction="MAX" aggFunctionParm="" levelCaption="Max Revenue" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Chart Demos/Line Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Line Chart" folderName="Chart Demos" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-11-27T15:55:49.228Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Discount].[H1].[Discount Type].Members" key="" value="" text="Discount Type" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Chart Demos/Pie Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Pie Chart" folderName="Chart Demos" category="Charts" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-11-27T15:58:50.932Z" createdBy="" bookCover="{background: {style:&apos;background:white;&apos;,src:&apos;covers/pareto_chart.png&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: right;font-variant: small-caps;color:rgb(240, 0, 0);padding:3.5px;border-radius:7.5px 7.5px 7.5px 7.5px;&apos;},image: {style:&apos;display: none;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Category].Members" key="" value="" text="Product Category" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Chart Demos/Time Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Time Chart" folderName="Chart Demos" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T21:08:18.275Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DateOfSale].[Actual].[DaySold].Members" key="" value="" text="DaySold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Chart Demos/Tree Map Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Tree Map Chart" folderName="Chart Demos" category="Charts" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-11-27T15:58:50.932Z" createdBy="" bookCover="{background: {style:&apos;background:white;&apos;,src:&apos;covers/pareto_chart.png&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: right;font-variant: small-caps;color:rgb(240, 0, 0);padding:3.5px;border-radius:7.5px 7.5px 7.5px 7.5px;&apos;},image: {style:&apos;display: none;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Category].Members" key="" value="" text="Product Category" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Chart Demos/XY Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="XY Chart" folderName="Chart Demos" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T20:05:42.812Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Name].Members" key="" value="" text="Product Name" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="true" orderExpression="Measures.[Units Sold]" orderDirection="BASC" aggEnabled="false" aggFunction="SUM" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Custom Drilldown Spec.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Custom Drilldown Spec" folderName="" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-12-16T19:48:32.073Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background-color:white;opacity:0.15;&apos;,src:&apos;covers/11008485_s.jpg&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-variant: small-caps;color:rgb(224, 0, 0);left:18.75px;left:18.75px;width:102.5px;&apos;},image: {style:&apos;width:135px;height:122.5px;&apos;,src:&apos;covers/views_128.gif&apos;,imageStyle:&apos;width:135px;height:122.5px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="false" gridRows="3" gridCols="3" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="barChart" subtypeClass="" title="Custom Drilldown Spec (double-click a row to see the behavior)" dataSource="Use in Dashboards/Custom Drilldown Spec.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="516" height="521" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="4" rowSpanL="4" showToolbar="true" theme="" dataColorList="">
    <property name="analyzer">0</property>
    <property name="chartToggle">table</property>
    <property name="drillDown">1</property>
  </widget>
</dashboard>

<!-- Data Driven Colors.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Data Driven Colors" folderName="" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2015-03-05T19:33:41.111Z" createdBy="" category="" bookCover="{background: {style:&apos;background-color:rgb(190, 226, 250);&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;},image: {style:&apos;top:103.125px;&apos;,src:&apos;covers/8945757_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="2" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" titleBarOpacity="" titleBarColor="" selectedTitleBarOpacity="" selectedTitleBarColor="" titleBarTextColor="" selectedTitleBarTextColor="" titleBarFont="" companyName="" companyLogo="" companyStyle="" backgroundColor="white" backgroundImage="none" backgroundRepeat="no-repeat" backgroundSize="100% 100%" backgroundOpacity="1" widgetBorders="1px solid #F0F0F0" widgetBordersSwitch="edit" widgetBordersColor="#F0F0F0" widgetBordersStyle="solid" widgetBordersWidth="1" widgetBordersToggle="true">
  <widget name="Widget1" type="pivot" subtype="barChart" subtypeClass="barChart" title="Data-Driven Colors (Tied to Regions)" dataSource="Use in Dashboards/Data-driven Colors.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="7" rowSpanL="5" showToolbar="true" showToolbarOnlyWhenMaximized="false" colorToolbar="#F0F0F0" opacityToolbar="1" backgroundColor="#F0F0F0" opacity="1" theme="" dataColorList="Region Colors.termlist">
    <control name="" action="applyFilter" target="*" targetProperty="[Outlet].[H1].[Region]" location="dashboard" type="auto" controlClass="" label="Region" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="applyFilter" target="*" targetProperty="[DateOfSale].[Actual].[YearSold]" location="dashboard" type="auto" controlClass="" label="Year Sold" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="applyFilter" target="*" targetProperty="[Product].[P1].[Product Name]" location="dashboard" type="auto" controlClass="" label="Product Name" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="setChartType" target="*" targetProperty="table" location="widget" type="auto" controlClass="" label="" title="Display as a table" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="setChartType" target="*" targetProperty="barChart" location="widget" type="auto" controlClass="" label="" title="Display as a bar chart" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="setChartType" target="*" targetProperty="columnChart" location="widget" type="auto" controlClass="" label="" title="Display as a column chart" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <property name="analyzer">0</property>
  </widget>
  <widget name="Widget2" type="pivot" subtype="barChart" subtypeClass="barChart" title="Standard Colors (Not Tied to Regions)" dataSource="Use in Dashboards/Data-driven Colors.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="5" homeColL="0" colSpanL="7" rowSpanL="5" showToolbar="true" showToolbarOnlyWhenMaximized="false" colorToolbar="#F0F0F0" opacityToolbar="1" backgroundColor="#F0F0F0" opacity="1" theme="" dataColorList="">
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- Date Filter Demo.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Date Filter Demo" folderName="" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2015-03-06T15:39:06.485Z" createdBy="" category="" bookCover="{background: {style:&apos;background-color:rgb(41, 41, 42);&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(255, 255, 255);font-family:verdana;top:131.25px;&apos;},image: {style:&apos;font-size:7px;top:46.875px;&apos;,src:&apos;covers/calendar_128.gif&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="2" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="lineChart" title="Widget with Year Filter" dataSource="Use in Dashboards/HoleFoods Sales by Product.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="5" rowSpanL="5" showToolbar="true" theme="" dataColorList="">
    <control name="" action="applyFilter" target="" targetProperty="[DateOfSale].[Actual].[YearSold]" location="widget" type="auto" controlClass="" label="Year Sold" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="chooseChartType" target="" targetProperty="columnChart,table,swirlChart,pieChart" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
<property name="analyzer">0</property>
  </widget>
  <widget name="Widget2" type="pivot" subtype="pivot" subtypeClass="lineChart" title="Widget with Year Month Filter" dataSource="Use in Dashboards/HoleFoods Sales by Product.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="5" homeColL="0" colSpanL="5" rowSpanL="5" showToolbar="true" theme="" dataColorList="">
    <control name="" action="applyFilter" target="" targetProperty="[DateOfSale].[Actual].[MonthSold]" location="widget" type="auto" controlClass="" label="Year+Month Sold" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="chooseChartType" target="" targetProperty="columnChart,table,swirlChart,pieChart" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- Drill Options.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Drill Options" folderName="" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-25T21:04:37.028Z" createdBy="" category="" bookCover="{background: {style:&apos;display: none;background-color:white;top:75px;height:117.5px;&apos;,src:&apos;covers/8211681_s.jpg&apos;,imageStyle:&apos;width:134px;height:117.5px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;font-variant: small-caps;color:rgb(0, 75, 152);font-size:18px;top:153.125px;&apos;},image: {style:&apos;top:46.875px;width:132.5px;height:105px;&apos;,src:&apos;covers/8211681_s.jpg&apos;,imageStyle:&apos;width:132.5px;height:105px;&apos;},footer: {text:&apos;$owner&apos;,style:&apos;display: none;&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="Drill down by double-clicking or using drill button" dataSource="Use in Dashboards/Drill Options.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="7" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="drillDown">1</property>
  </widget>
  <widget name="Widget2" type="pivot" subtype="barChart" subtypeClass="" title="Drill down by using drill button" dataSource="Use in Dashboards/Drill Options.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="0" colSpanL="7" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="drillDown">1</property>
  </widget>
</dashboard>

<!-- HoleFoods Compound Cube.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="HoleFoods Compound Cube" folderName="" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-06T06:07:08.172Z" createdBy="" category="Advanced Modeling" bookCover="{background: {style:&apos;top:78.125px;height:107.5px;&apos;,src:&apos;covers/donut.jpg&apos;,imageStyle:&apos;width:134px;height:107.5px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;font-variant: small-caps;color:rgb(0, 0, 0);&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="Sales + Budget Cubes" dataSource="Use in Dashboards/HoleFoods Combined Cube.pivot" dataLink="" drillDownDataSource="" top="0" left="0" width="881" height="768" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="2" rowSpanL="2" showToolbar="true" theme="">
    <control name="" action="showListing" target="" targetProperty="Listing" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="showGeoListing" target="" targetProperty="Customer Info" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="[Outlet].[H1].[Region]" location="widget" type="auto" controlClass="" label="Region" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="[Channel].[H1].[Channel Name]" location="widget" type="auto" controlClass="" label="Channel Name" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="[Discount].[H1].[Discount Type]" location="widget" type="auto" controlClass="" label="Discount Type" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- KPIs & Plugins/HoleFoods Plugins.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="HoleFoods Plugins" folderName="KPIs &amp; Plugins" title="" description="" keywords="HoleFoods,plugins,KPIs" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-07T22:51:09.477Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;},image: {style:&apos;left:21.875px;width:90px;height:90px;&apos;,src:&apos;covers/holefoods_disk.png&apos;,imageStyle:&apos;width:90px;height:90px;&apos;},footer: {text:&apos;plugins&apos;,style:&apos;background-color:rgb(224, 0, 0);&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="Median and Percentile Plugins" dataSource="KPIs &amp; Plugins/HoleFoods.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="6" rowSpanL="10" showToolbar="true" theme="">
     <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
   <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- KPIs & Plugins/HoleFoods.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="HoleFoods" folderName="KPIs &amp; Plugins" title="" description="" keywords="HoleFoods,plugins" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-07T22:48:41.31Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Name].Members" key="" value="" text="Product Name" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="false" aggFunction="AVG" aggFunctionParm="" levelCaption="Avg Revenue" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[MEASURES].[MEDIAN REVENUE]" key="" value="" text="Median Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[MEASURES].[90TH PERCENTILE REVENUE]" key="" value="" text="90th Percentile Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- KPIs & Plugins/KPI with Listing.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="KPI with Listing" folderName="KPIs &amp; Plugins" title="" description="" keywords="HoleFoods,KPIs,listings" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-06T06:07:08.172Z" createdBy="" category="How To" bookCover="{background: {},header: {text:&apos;$type&apos;,style:&apos;font-family:helvetica;&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: center;font-variant: small-caps;color:rgb(0, 80, 35);font-family:georgia;margin:0px;&apos;},image: {style:&apos;width:132.5px;height:105px;&apos;,src:&apos;covers/14170040_s.jpg&apos;,imageStyle:&apos;width:132.5px;height:105px;&apos;},subtitle: {},footer: {text:&apos;KPIs&apos;,style:&apos;background-color:teal;&apos;}}" scheme="" worklistCount="0" snapTo="false" snapGrid="true" gridRows="1" gridCols="3" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="Top Products" dataSource="HoleFoods/KPISQL.kpi" dataLink="" drillDownDataSource="" top="16" left="15" width="705" height="560" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="2" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="showListing" target="" targetProperty="Listing" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <dataProperty name="" label="Product Name" width="" align="" subtype="" style="" display="value" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Product" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Product SKU" width="" align="" subtype="" style="" display="value" format="" showAs="value" valueColumn="true" summary="" summaryValue="" dataValue="SKU" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="City" width="" align="" subtype="" style="" display="value" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="City" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Units Sold" width="" align="" subtype="" style="" display="value" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Count" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- KPIs & Plugins/KPI with Switchable Rows.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="KPI with Switchable Rows" folderName="KPIs &amp; Plugins" title="" description="" keywords="HoleFoods,KPIs" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-06T06:07:08.172Z" createdBy="" category="How To" bookCover="{background: {},header: {text:&apos;$type&apos;,style:&apos;font-family:helvetica;&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: center;font-variant: small-caps;color:rgb(0, 80, 35);font-family:georgia;margin:0px;&apos;},image: {style:&apos;width:132.5px;height:105px;&apos;,src:&apos;covers/14170040_s.jpg&apos;,imageStyle:&apos;width:132.5px;height:105px;&apos;},subtitle: {},footer: {text:&apos;KPIs&apos;,style:&apos;background-color:teal;&apos;}}" scheme="" worklistCount="0" snapTo="false" snapGrid="true" gridRows="2" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="KPI with Switchable Rows" dataSource="Holefoods/SalesAgainstTargets.kpi" dataLink="" drillDownDataSource="" top="16" left="15" width="717" height="690" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="2" rowSpanL="2" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="" targetProperty="ShowBy" location="widget" type="auto" controlClass="" label="Show By" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="label" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Amount of Sale" width="" align="" subtype="" style="" display="value" format="$#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="AmountOfSale" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Target" width="" align="" subtype="" style="" display="value" format="$#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Target" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
</dashboard>

<!-- KPIs & Plugins/Sales Against Targets.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Sales Against Targets" folderName="KPIs &amp; Plugins" title="" description="" keywords="HoleFoods,KPIs,trendlines" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-06T06:07:08.172Z" createdBy="" category="How To" bookCover="{background: {},header: {text:&apos;$type&apos;,style:&apos;font-family:helvetica;&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: center;font-variant: small-caps;color:rgb(0, 80, 35);font-family:georgia;margin:0px;&apos;},image: {style:&apos;width:132.5px;height:105px;&apos;,src:&apos;covers/14170040_s.jpg&apos;,imageStyle:&apos;width:132.5px;height:105px;&apos;},subtitle: {},footer: {text:&apos;KPIs&apos;,style:&apos;background-color:teal;&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Widget1" type="scoreCardWidget" subtype="regular" subtypeClass="" title="Products and History" dataSource="Holefoods/SalesAgainstTargets.kpi" dataLink="" drillDownDataSource="" top="16" left="15" width="709" height="682" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="2" rowSpanL="2" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="" targetProperty="Year" location="widget" type="auto" controlClass="" label="Year" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="Product" location="widget" type="auto" controlClass="" label="Product" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="Country" location="widget" type="auto" controlClass="" label="Country" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <dataProperty name="" label="" width="" align="" subtype="" style="" display="label" format="" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Amount of Sale" width="" align="" subtype="" style="" display="value" format="$#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="AmountOfSale" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Target" width="" align="" subtype="" style="" display="value" format="$#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Target" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="History" width="" align="" subtype="" style="" display="trendLine" format="" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="History" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
  </widget>
</dashboard>

<!-- Listing with OnClick Filter.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Listing with OnClick Filter" folderName="" title="" description="" keywords="HoleFoods,listings" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-09T00:54:25.751Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background-color:white;opacity:0.15;&apos;,src:&apos;covers/11008485_s.jpg&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-variant: small-caps;color:rgb(224, 0, 0);left:18.75px;left:18.75px;width:102.5px;&apos;},image: {style:&apos;width:135px;height:122.5px;&apos;,src:&apos;covers/views_128.gif&apos;,imageStyle:&apos;width:135px;height:122.5px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="false" gridRows="3" gridCols="3" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="main" type="pivot" subtype="pivot" subtypeClass="" title="Units Sold by Product Category (Cumulative)" dataSource="Use in Dashboards/Product Info.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="399" height="305" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="2" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="details" targetProperty="[Product].[P1].[Product Category]" location="click" type="auto" controlClass="" label="Product Category" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="XgridLines">0</property>
    <property name="YgridLines">0</property>
    <property name="analyzer">1</property>
    <property name="chartToggle">none</property>
    <property name="dimensionSource"></property>
    <property name="excel">1</property>
    <property name="hasZoom">1</property>
    <property name="initialExecute">1</property>
    <property name="labelStyle"></property>
    <property name="labels">1</property>
    <property name="legendPos">none</property>
    <property name="pivotSelect"></property>
    <property name="print">1</property>
    <property name="showDimensions">0</property>
    <property name="title"></property>
    <property name="titleStyle"></property>
    <property name="valueLabels">1</property>
  </widget>
  <widget name="details" type="pivot" subtype="pivot" subtypeClass="" title="Sale Details (Click a row in the table above)" dataSource="Use in Dashboards/HoleFoods Sales Listing.pivot" dataLink="" drillDownDataSource="" top="355" left="15" width="990" height="431" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="0" colSpanL="2" rowSpanL="2" showToolbar="true" theme="">
    <property name="analyzer">1</property>
    <property name="chartToggle">none</property>
    <property name="dimensionSource"></property>
    <property name="excel">1</property>
    <property name="initialExecute">0</property>
    <property name="pivotSelect"></property>
    <property name="print">1</property>
    <property name="showDimensions">0</property>
  </widget>
</dashboard>

<!-- Pareto Charts/Category Pareto Data.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Category Pareto Data" folderName="Pareto Charts" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-12-18T20:41:51.753Z" createdBy="" category="" bookCover="{background: {style:&apos;background-color:white;opacity:0.45;&apos;,src:&apos;covers/pareto_chart.png&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;},image: {src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="pct" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Category].Members" key="" value="" text="Product Category" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="true" orderExpression="Measures.[Amount Sold]" orderDirection="BDESC" aggEnabled="false" aggFunction="SUM" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[MEASURES].[REVENUE PERCENT CUMULATIVE]" key="" value="" text="Revenue Percent Cumulative" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <calculatedMember dimension="MEASURES" memberName="Revenue as Percent of Total" valueExpression="Measures.[Amount Sold] / %MDX(&quot;select Measures.[Amount sold]on 1 from holefoods&quot;,&quot;%CONTEXT&quot;,&quot;filters|columns&quot;)" formatString="##.##%;;;;" solveOrder="0"></calculatedMember>
  <calculatedMember dimension="MEASURES" memberName="Revenue Percent Cumulative" valueExpression="Measures.[Revenue as Percent of Total] + %CELL(0,-1)" formatString="##.##%;;;;" solveOrder="0"></calculatedMember>
</pivot>

<!-- Pareto Charts/Pareto Chart for Category.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Pareto Chart for Category" folderName="Pareto Charts" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-12-19T17:31:58.704Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background-color:white;opacity:0.45;&apos;,src:&apos;covers/pareto_chart.png&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-variant: small-caps;color:rgb(0, 80, 35);font-family:arial;top:53.125px;left:28.125px;left:28.125px;width:87.5px;&apos;},image: {style:&apos;display: none;top:-15.625px;&apos;,src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Category Pareto Chart" type="pivot" subtype="comboChart" subtypeClass="comboChart" title="Revenue by Category" dataSource="Pareto Charts/Category Pareto Data.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="6" rowSpanL="9" showToolbar="true" theme="">
    <control name="" action="refresh" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="[DateOfSale].[Actual].[YearSold]" location="widget" type="auto" controlClass="" label="YearSold" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="[Outlet].[H1].[Region]" location="widget" type="auto" controlClass="" label="Region" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="chartToggle">none</property>
    <property name="legendPos">none</property>
    <override name="comboChart">{legendVisible:'false',markerShapes:'circle,circle,down,square',markersVisible:true,selectedItem:2,selectedSeries:0,seriesYAxes:'0,1',title:'Pareto',xAxis:{labelPosition:'bottom',majorGridLines:false,_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'},{axisType:'percent',labelPosition:'right',maxValue:1,minValue:0,title:'Cumulative %',_type:'axis'}],seriesTypes:'bar,line,line',_type:'comboChart'}</override>
    <override name="legend">{hidden:true,_type:'chartLegend'}</override>
    <override name="lineChart">{legendVisible:'false',markersVisible:true,seriesYAxes:'0,1',title:'Pareto',xAxis:{labelPosition:'bottom',majorGridLines:false,title:'Products',_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'},{axisType:'percent',labelPosition:'right',maxValue:1,minValue:0,title:'Cumulative %',_type:'axis'}],_type:'lineChart'}</override>
  </widget>
</dashboard>

<!-- Pareto Charts/Pareto Chart for Product and Category.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Pareto Chart for Product and Category" folderName="Pareto Charts" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-12-18T20:31:05.144Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background-color:white;opacity:0.45;&apos;,src:&apos;covers/pareto_chart.png&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(64, 64, 208);background-color:rgb(255, 255, 255);padding:0.25px;border-radius:0px 0px 0px 0px;top:103.125px;left:12.5px;left:12.5px;width:100px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Product Pareto Chart" type="pivot" subtype="comboChart" subtypeClass="comboChart" title="Revenue by Product" dataSource="Pareto Charts/Product Pareto Data.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="5" rowSpanL="9" showToolbar="true" theme="">
    <control name="" action="refresh" target="*" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[DateOfSale].[Actual].[YearSold]" location="widget" type="auto" controlClass="" label="YearSold" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[Outlet].[H1].[Region]" location="widget" type="auto" controlClass="" label="Region" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="chartToggle">none</property>
    <property name="legendPos">none</property>
    <override name="comboChart">{currYAxis:0,legendVisible:'false',markerShapes:'circle,circle,down,square',markersVisible:true,selectedItem:2,selectedSeries:0,seriesYAxes:'0,1',title:'Pareto',xAxis:{labelPosition:'bottom',majorGridLines:false,_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'},{axisType:'percent',labelPosition:'right',maxValue:1,minValue:0,title:'Cumulative %',_type:'axis'}],seriesTypes:'bar,line,line',_type:'comboChart'}</override>
    <override name="legend">{hidden:true,orientation:'horizontal',_type:'chartLegend'}</override>
    <override name="lineChart">{legendVisible:'false',markersVisible:true,seriesYAxes:'0,1',title:'Pareto',xAxis:{labelPosition:'bottom',majorGridLines:false,title:'Products',_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'},{axisType:'percent',labelPosition:'right',maxValue:1,minValue:0,title:'Cumulative %',_type:'axis'}],_type:'lineChart'}</override>
  </widget>
  <widget name="Category Pareto Chart" type="pivot" subtype="comboChart" subtypeClass="comboChart" title="Revenue by Category" dataSource="Pareto Charts/Category Pareto Data.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="5" colSpanL="5" rowSpanL="9" showToolbar="true" theme="">
    <control name="" action="refresh" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="chartToggle">none</property>
    <property name="legendPos">none</property>
    <override name="comboChart">{legendVisible:'false',markerShapes:'circle,circle,down,square',markersVisible:true,selectedItem:2,selectedSeries:0,seriesYAxes:'0,1',title:'Pareto',xAxis:{labelPosition:'bottom',majorGridLines:false,_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'},{axisType:'percent',labelPosition:'right',maxValue:1,minValue:0,title:'Cumulative %',_type:'axis'}],seriesTypes:'bar,line,line',_type:'comboChart'}</override>
    <override name="legend">{hidden:true,_type:'chartLegend'}</override>
    <override name="lineChart">{legendVisible:'false',markersVisible:true,seriesYAxes:'0,1',title:'Pareto',xAxis:{labelPosition:'bottom',majorGridLines:false,title:'Products',_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'},{axisType:'percent',labelPosition:'right',maxValue:1,minValue:0,title:'Cumulative %',_type:'axis'}],_type:'lineChart'}</override>
  </widget>
</dashboard>

<!-- Pareto Charts/Pareto Chart for Product.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Pareto Chart for Product" folderName="Pareto Charts" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-12-19T17:29:08.314Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background-color:white;opacity:0.45;&apos;,src:&apos;covers/pareto_chart.png&apos;,imageStyle:&apos;width:134px;height:190px;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: right;font-style: italic;color:rgb(47, 60, 53);font-size:20px;top:34.375px;left:62.5px;left:62.5px;width:70px;&apos;},image: {style:&apos;display: none;&apos;,src:&apos;deepsee/ds2_dashboard_44.png&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Product Pareto Chart" type="pivot" subtype="comboChart" subtypeClass="comboChart" title="Revenue by Product" dataSource="Pareto Charts/Product Pareto Data.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="6" rowSpanL="9" showToolbar="true" theme="">
    <control name="" action="refresh" target="*" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[DateOfSale].[Actual].[YearSold]" location="widget" type="auto" controlClass="" label="YearSold" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="*" targetProperty="[Outlet].[H1].[Region]" location="widget" type="auto" controlClass="" label="Region" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="chartToggle">none</property>
    <property name="legendPos">none</property>
    <override name="comboChart">{currYAxis:0,legendVisible:'false',markerShapes:'circle,circle,down,square',markersVisible:true,selectedItem:2,selectedSeries:0,seriesYAxes:'0,1',title:'Pareto',xAxis:{labelPosition:'bottom',majorGridLines:false,_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'},{axisType:'percent',labelPosition:'right',maxValue:1,minValue:0,title:'Cumulative %',_type:'axis'}],seriesTypes:'bar,line,line',_type:'comboChart'}</override>
    <override name="legend">{hidden:true,orientation:'horizontal',_type:'chartLegend'}</override>
    <override name="lineChart">{legendVisible:'false',markersVisible:true,seriesYAxes:'0,1',title:'Pareto',xAxis:{labelPosition:'bottom',majorGridLines:false,title:'Products',_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'},{axisType:'percent',labelPosition:'right',maxValue:1,minValue:0,title:'Cumulative %',_type:'axis'}],_type:'lineChart'}</override>
  </widget>
</dashboard>

<!-- Pareto Charts/Product Pareto Data.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Product Pareto Data" folderName="Pareto Charts" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-12-18T20:41:38.472Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="pct" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Name].Members" key="" value="" text="Product Name" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="true" orderExpression="Measures.[Amount Sold]" orderDirection="BDESC" aggEnabled="false" aggFunction="SUM" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[MEASURES].[REVENUE PERCENT CUMULATIVE]" key="" value="" text="Revenue Percent Cumulative" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <calculatedMember dimension="MEASURES" memberName="Revenue as Percent of Total" valueExpression="Measures.[Amount Sold] / %MDX(&quot;select Measures.[Amount sold]on 1 from holefoods&quot;,&quot;%CONTEXT&quot;,&quot;filters|columns&quot;)" formatString="##.##%;;;;" solveOrder="0"></calculatedMember>
  <calculatedMember dimension="MEASURES" memberName="Revenue Percent Cumulative" valueExpression="Measures.[Revenue as Percent of Total] + %CELL(0,-1)" formatString="##.##%;;;;" solveOrder="0"></calculatedMember>
</pivot>

<!-- Pivot Features/Pivot with User Defined Listing.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Pivot with User Defined Listing" folderName="Pivot Features" title="" description="" keywords="HoleFoods,listings" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-25T18:45:10.946Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-variant: small-caps;color:indigo;&apos;},image: {style:&apos;width:135px;height:112.5px;&apos;,src:&apos;covers/8891476_s.jpg&apos;,imageStyle:&apos;width:135px;height:112.5px;&apos;},subtitle: {},footer: {text:&apos;$owner&apos;,style:&apos;display: none;&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="$$$CUSTOM" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DateOfSale].[Actual].[YearSold].Members" key="" value="" text="YearSold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <listingField spec="%ID" key="" value="" text="ID" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </listingField>
  <listingField spec="%EXTERNAL(Channel) Channel" key="" value="" text="Channel" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </listingField>
  <listingField spec="Outlet-&gt;Country-&gt;Name Country" key="" value="" text="Country" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </listingField>
  <listingField spec="Latitude" key="" value="" text="Latitude" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </listingField>
  <listingField spec="Longitude" key="" value="" text="Longitude" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </listingField>
  <listingField spec="UnitsSold" key="" value="" text="UnitsSold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </listingField>
  <listingField spec="AmountOfSale Revenue" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </listingField>
  <listingField spec="UnitsSold" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </listingField>
</pivot>

<!-- Pivot Variables/Commission Calculator.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Commission Calculator" folderName="Pivot Variables" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-12-16T22:13:45.375Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;color:rgb(0, 75, 152);&apos;},image: {src:&apos;covers/10302135_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},subtitle: {text:&apos;pivot variables&apos;,style:&apos;color:rgb(0, 75, 152);&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="lineChart" title="" dataSource="Pivot Variables/Commission Calculator.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="8" rowSpanL="7" showToolbar="true" theme="" dataColorList="">
    <control name="" action="applyVariable" target="" targetProperty="$variable.CommissionPercentage" location="widget" type="auto" controlClass="" label="Commission Percentage" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="analyzer">1</property>
  </widget>
</dashboard>

<!-- Pivot Variables/Commission Calculator.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Commission Calculator" folderName="Pivot Variables" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-12-16T22:10:28.537Z" createdBy="" category="How To" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printSubtitleOn="" showUser="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="" maxRows="" borderLeftCell="" borderRightCell="" borderTopCell="" borderBottomCell="" borderLeftCol="" borderRightCol="" borderTopCol="" borderBottomCol="" borderLeftRow="" borderRightRow="" borderTopRow="" borderBottomRow="" showFilters="" showListingFilters="" showDate="" listingFontSize="" showZebraStripes="" filterTableStyle="" filterTableCaptionStyle="" filterTableItemStyle="" nowDisplayFormat="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Name].Members" key="" value="" text="Product Name" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </rowLevel>
  <rowLevel spec="[Product].[All Product]" key="" value="" text="All Product" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnLevel>
  <columnLevel spec="[MEASURES].[COMMISSION]" key="" value="" text="Commission" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnLevel>
  <calculatedMember dimension="MEASURES" memberName="Commission" valueExpression="[Measures].[Amount Sold]*($variable.CommissionPercentage/100)" formatString="$#,#.##" solveOrder="0"></calculatedMember>
</pivot>

<!-- Pivot Variables/Year Variable.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Year Variable" folderName="Pivot Variables" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-12-16T22:47:38.104Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;color:rgb(0, 75, 152);&apos;},image: {src:&apos;covers/10302135_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},subtitle: {text:&apos;pivot variables&apos;,style:&apos;color:rgb(0, 75, 152);&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="2" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="lineChart" title="HoleFoods Data" dataSource="Pivot Variables/Year Variable In HoleFoods.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="6" rowSpanL="5" showToolbar="true" theme="" dataColorList="">
    <control name="" action="applyVariable" target="*" targetProperty="$variable.Year" location="dashboard" type="auto" controlClass="" label="Sales Date/Birth Date" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
  </widget>
  <widget name="Widget2" type="pivot" subtype="pivot" subtypeClass="lineChart" title="Patients Data" dataSource="Pivot Variables/Year Variable In Patients.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="5" homeColL="0" colSpanL="6" rowSpanL="5" showToolbar="true" theme="" dataColorList="">
  </widget>
</dashboard>

<!-- Pivot Variables/Year Variable In HoleFoods.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Year Variable In HoleFoods" folderName="Pivot Variables" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-12-16T22:28:04.038Z" createdBy="" category="How To" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;color:rgb(0, 75, 152);&apos;},image: {src:&apos;covers/10302135_s.jpg&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},subtitle: {text:&apos;pivot variables&apos;,style:&apos;color:rgb(0, 75, 152);&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printSubtitleOn="" showUser="" printPageSize="" printOrientation="1" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="" maxRows="" borderLeftCell="" borderRightCell="" borderTopCell="" borderBottomCell="" borderLeftCol="" borderRightCol="" borderTopCol="" borderBottomCol="" borderLeftRow="" borderRightRow="" borderTopRow="" borderBottomRow="" showFilters="" showListingFilters="" showDate="" listingFontSize="" showZebraStripes="" filterTableStyle="" filterTableCaptionStyle="" filterTableItemStyle="" nowDisplayFormat="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnAxisOptions>
  <rowLevel spec="[DateOfSale].[Actual].[YearSold].Members" key="" value="" text="YearSold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </rowLevel>
  <columnLevel spec="[Channel].[H1].[Channel Name].Members" key="" value="" text="Channel" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnLevel>
  <filter spec="[DATEOFSALE].[SELECTEDYEAR]" key="SELECTEDYEAR" value="" text="SelectedYear" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </filter>
  <calculatedMember dimension="DateOfSale" memberName="SelectedYear" valueExpression="[DateOfSale].[Actual].[YearSold].$VARIABLE.Year" formatString="" solveOrder="0"></calculatedMember>
</pivot>

<!-- Use in Dashboards/Custom Drilldown Spec.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Custom Drilldown Spec" folderName="Use in Dashboards" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-12-16T19:47:57.211Z" createdBy="" category="How To" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printSubtitleOn="" showUser="" printPageSize="" printOrientation="1" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="" maxRows="" borderLeftCell="" borderRightCell="" borderTopCell="" borderBottomCell="" borderLeftCol="" borderRightCol="" borderTopCol="" borderBottomCol="" borderLeftRow="" borderRightRow="" borderTopRow="" borderBottomRow="" showFilters="" showListingFilters="" showDate="" listingFontSize="" showZebraStripes="" filterTableStyle="" filterTableCaptionStyle="" filterTableItemStyle="" nowDisplayFormat="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="SUM" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="[Channel].[H1].[Channel Name].&amp;[1]^[Outlet].[H1].[Country].MEMBERS^[Discount].[H1].[Discount Type].MEMBERS">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Name].Members" key="" value="" text="Product Name" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </rowLevel>
  <columnLevel spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnLevel>
</pivot>

<!-- Use in Dashboards/Data Driven Colors.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Data-Driven Colors" folderName="Use in Dashboards" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-12-17T20:18:21.191Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printSubtitleOn="" showUser="" printPageSize="" printOrientation="1" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="" maxRows="" borderLeftCell="" borderRightCell="" borderTopCell="" borderBottomCell="" borderLeftCol="" borderRightCol="" borderTopCol="" borderBottomCol="" borderLeftRow="" borderRightRow="" borderTopRow="" borderBottomRow="" showFilters="" showListingFilters="" showDate="" listingFontSize="" showZebraStripes="" filterTableStyle="" filterTableCaptionStyle="" filterTableItemStyle="" nowDisplayFormat="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnAxisOptions>
  <rowLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </rowLevel>
  <columnLevel spec="[Outlet].[H1].[Region].Members" key="" value="" text="Region" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="">
  </columnLevel>
</pivot>

<!-- Use in Dashboards/Drill Options.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Drill Options" folderName="Use in Dashboards" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-25T21:01:52.824Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Category].Members" key="" value="" text="Product Category" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="Measures.[%COUNT]=0" orderEnabled="false" orderExpression="Measures.[%COUNT]" orderDirection="BDESC" aggEnabled="false" aggFunction="AVG" aggFunctionParm="" levelCaption="Avg Units Sold" levelFormat="#.##" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Use in Dashboards/For Time Chart.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="For Time Chart" folderName="Use in Dashboards" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2012-12-19T23:07:55.797Z" createdBy="" category="Time Charts" bookCover="{background: {style:&apos;background:white;&apos;,src:&apos;covers/time_chart.png&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;background-color:rgb(208, 255, 255);padding:3.5px;border-radius:7.5px 7.5px 7.5px 7.5px;left:18.75px;left:18.75px;width:87.5px;&apos;},image: {style:&apos;display: none;&apos;},footer: {text:&apos;$owner&apos;}}" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[DateOfSale].[Actual].[DaySold].Members" key="" value="" text="DaySold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/HoleFoods Map Widget.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="HoleFoods Map Widget" folderName="Use in Dashboards" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T21:08:18.223Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Outlet].[H1].[City].Members" key="" value="" text="City" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Outlet].[H1].[City].CurrentMember.Properties(&quot;Latitude&quot;)" key="" value="" text="Latitude" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Outlet].[H1].[City].CurrentMember.Properties(&quot;Longitude&quot;)" key="" value="" text="Longitude" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Amount Sold]" key="" value="" text="Amount Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
  <columnLevel spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- Use in Dashboards/HoleFoods Combined Cube.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="HoleFoods Combined Cube" folderName="Use in Dashboards" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T21:08:18.24Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoodsCombined" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Name].Members" key="" value="" text="Product Name" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[Amount Sold]" key="" value="" text="Amount Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Target]" key="" value="" text="Target" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/HoleFoods Sales by Product.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="HoleFoods Sales by Product" folderName="Use in Dashboards" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2015-03-06T15:38:17.251Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printSubtitleOn="" showUser="" printPageSize="" printOrientation="1" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="" maxRows="" borderLeftCell="" borderRightCell="" borderTopCell="" borderBottomCell="" borderLeftCol="" borderRightCol="" borderTopCol="" borderBottomCol="" borderLeftRow="" borderRightRow="" borderTopRow="" borderBottomRow="" showFilters="" showListingFilters="" showDate="" listingFontSize="" showZebraStripes="" filterTableStyle="" filterTableCaptionStyle="" filterTableItemStyle="" nowDisplayFormat="" measureLocation="columns" backgroundImage="" backgroundOpacity=".12">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Category].Members" key="" value="" text="Product Category" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </rowLevel>
  <rowLevel spec="[Product].[All Product]" key="" value="" text="All Product" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="SUM" aggFunctionParm="" levelCaption="All Products" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </rowLevel>
  <measure spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </measure>
  <measure spec="[Measures].[Amount Sold]" key="" value="" text="Revenue" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </measure>
</pivot>

<!-- Use in Dashboards/HoleFoods Sales Listing.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="HoleFoods Sales Listing" folderName="Use in Dashboards" title="" description="" keywords="HoleFoods,listings" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T21:08:18.235Z" createdBy="" category="" bookCover="" mdx="DRILLTHROUGH SELECT FROM [HoleFoods]" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
</pivot>

<!-- Use in Dashboards/Linked Widgets Demo.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Linked Widgets Demo" folderName="Use in Dashboards" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T21:08:18.207Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Outlet].[H1].[Region].Members" key="" value="" text="Region" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <measure spec="[Measures].[Amount Sold]" key="" value="" text="Amount Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
  <measure spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </measure>
</pivot>

<!-- Use in Dashboards/Product Info.pivot -->
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="Product Info" folderName="Use in Dashboards" title="" description="" keywords="HoleFoods" owner="" shared="true" public="false" locked="false" resource="" timeCreated="2013-01-08T21:08:18.228Z" createdBy="" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="HoleFoods" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printPageSize="" printOrientation="" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnAxisOptions>
  <rowLevel spec="[Product].[P1].[Product Category].Members" key="" value="" text="Product Category" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </rowLevel>
  <columnLevel spec="[Measures].[Units Sold]" key="" value="" text="Units Sold" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false">
  </columnLevel>
</pivot>

<!-- User Defined Listing.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="User Defined Listing" folderName="" title="" description="" keywords="HoleFoods,listings" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2013-01-25T18:52:42.655Z" createdBy="" category="" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-variant: small-caps;color:indigo;&apos;},image: {style:&apos;width:135px;height:112.5px;&apos;,src:&apos;covers/8891476_s.jpg&apos;,imageStyle:&apos;width:135px;height:112.5px;&apos;},subtitle: {},footer: {text:&apos;$owner&apos;,style:&apos;display: none;&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Widget1" type="pivot" subtype="pivot" subtypeClass="" title="Revenue by Date with User Defined Listing" dataSource="Pivot Features/Pivot with User Defined Listing.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="9" rowSpanL="5" showToolbar="true" theme="">
    <control name="" action="showListing" target="" targetProperty="$$$CUSTOM" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="analyzer">0</property>
  </widget>
</dashboard>

<!-- Widget Examples/All Charts.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="All Charts" folderName="Widget Examples" title="" description="All charts except for SwirlChart, the newest. There is just no room!" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-11-27T16:05:14.765Z" createdBy="" category="Widgets" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(0, 0, 240);font-family:helvetica;font-size:24px;&apos;},image: {style:&apos;top:71.875px;width:137.5px;height:120px;&apos;,src:&apos;covers/8945757_s.jpg&apos;,imageStyle:&apos;width:137.5px;height:120px;&apos;},footer: {text:&apos;$owner&apos;,style:&apos;display: none;&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="3" gridCols="4" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="widget1" type="pivot" subtype="areaChart" subtypeClass="lineChart" title="Area Chart" dataSource="Chart Demos/Area Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
  </widget>
  <widget name="widget2" type="pivot" subtype="barChart" subtypeClass="barChart" title="Bar Chart" dataSource="Chart Demos/Bar Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="1" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
  </widget>
  <widget name="widget3" type="pivot" subtype="bubbleChart" subtypeClass="bubbleChart" title="Bubble Chart" dataSource="Chart Demos/Bubble Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="2" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
  </widget>
  <widget name="widget4" type="pivot" subtype="bullseyeChart" subtypeClass="bullseyeChart" title="Bullseye Chart" dataSource="Chart Demos/Bullseye Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="3" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
    <override name="bullseyeChart">{backgroundStyle:'fill: white; stroke: none;',legendVisible:'false',markerStyle:'fill: white;',plotAreaStyle:'fill: white; stroke: none;',title:'Revenue',titleStyle:'font-weight:bold;',xAxis:{majorGridLines:false,_type:'axis'},yAxisList:[{_type:'axis'}],_type:'bullseyeChart'}</override>
    <override name="legend">{hidden:true,orientation:'horizontal',_type:'chartLegend'}</override>
  </widget>
  <widget name="widget5" type="pivot" subtype="comboChart" subtypeClass="comboChart" title="Combo Chart" dataSource="Chart Demos/Combo Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="0" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
    <dataSeries type="area" markerShape="" color="" yAxisIndex="0" hasLegend="true"></dataSeries>
    <dataSeries type="line" markerShape="" color="" yAxisIndex="0" hasLegend="true"></dataSeries>
    <override name="comboChart">{legendVisible:'false',seriesColorsOverride:',',xAxis:{_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'},{labelPosition:'right',title:'Units Sold',_type:'axis'}],seriesTypes:'area,line',_type:'comboChart'}</override>
    <override name="legend">{hidden:true,_type:'chartLegend'}</override>
  </widget>
  <widget name="widget6" type="pivot" subtype="hilowChart" subtypeClass="hilowChart" title="High Low Chart" dataSource="Chart Demos/High Low Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="1" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
    <override name="hilowChart">{legendVisible:'false',maxLabelLen:6,selectedItemStyle:'fill: none;stroke: red;stroke-width:0.1;',xAxis:{_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'}],_type:'hilowChart'}</override>
  </widget>
  <widget name="widget7" type="pivot" subtype="lineChart" subtypeClass="lineChart" title="Line Chart" dataSource="Chart Demos/Line Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="2" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <property name="legendPos">none</property>
  </widget>
  <widget name="widget8" type="pivot" subtype="pieChart" subtypeClass="pieChart" title="Pie Chart" dataSource="Chart Demos/Pie Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="1" homeColL="3" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
  </widget>
  <widget name="widget9" type="pivot" subtype="timeChart" subtypeClass="lineChart" title="Time Chart" dataSource="Chart Demos/Time Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="2" homeColL="0" colSpanL="2" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
    <override name="legend">{hidden:true,orientation:'horizontal',_type:'chartLegend'}</override>
    <override name="lineChart">{timeBased:true,_type:'lineChart'}</override>
  </widget>
  <widget name="widget10" type="pivot" subtype="treeMapChart" subtypeClass="treeMapChart" title="Tree Map Chart" dataSource="Chart Demos/Tree Map Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="2" homeColL="2" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
  </widget>
  <widget name="widget11" type="pivot" subtype="xyChart" subtypeClass="xyChart" title="X/Y Chart" dataSource="Chart Demos/XY Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="2" homeColL="3" colSpanL="1" rowSpanL="1" showToolbar="true" theme="">
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
    <override name="xyChart">{legendVisible:'false',selectedItemStyle:'fill: none;stroke: red;stroke-width:0.1;',xAxis:{title:'Units Sold',_type:'axis'},yAxisList:[{title:'Revenue',_type:'axis'}],_type:'xyChart'}</override>
  </widget>
</dashboard>

<!-- Widget Examples/Linked Widgets.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Linked Widgets" folderName="Widget Examples" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-06T06:07:08.172Z" createdBy="" category="Widgets" bookCover="{background: {style:&apos;background-color:white;opacity:0.26;&apos;,src:&apos;covers/13028971_s.jpg&apos;},header: {text:&apos;$type&apos;,style:&apos;text-align: left;background-color:mediumpurple;&apos;},title: {text:&apos;$title&apos;,style:&apos;text-align: left;font-weight: bold;color:indigo;font-family:arial;font-size:32px;top:40.625px;&apos;},image: {style:&apos;display: none;&apos;,imageStyle:&apos;width:64px;height:64px;&apos;},footer: {text:&apos;linked widgets&apos;,style:&apos;text-align: left;background-color:mediumpurple;&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="5" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Independent" type="pivot" subtype="pivot" subtypeClass="" title="Independent Widget" dataSource="Use in Dashboards/Linked Widgets Demo.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="384" height="356" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="2" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="[Discount].[H1].[Discount Type]" location="widget" type="auto" controlClass="" label="Discount Type" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="analyzer">1</property>
    <property name="chartToggle">none</property>
    <property name="dimensionSource"></property>
    <property name="excel">1</property>
    <property name="pivotSelect"></property>
    <property name="print">1</property>
    <property name="showDimensions">0</property>
  </widget>
  <widget name="Widget1" type="pivot" subtype="comboChart" subtypeClass="" title="Linked Widget" dataSource="" dataLink="Independent" drillDownDataSource="" top="16" left="402" width="558" height="356" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="2" colSpanL="3" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="showListing" target="" targetProperty="" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="XgridLines">0</property>
    <property name="YgridLines">0</property>
    <property name="analyzer">1</property>
    <property name="chartToggle">chart</property>
    <property name="dimensionSource"></property>
    <property name="excel">0</property>
    <property name="hasZoom">1</property>
    <property name="labelStyle"></property>
    <property name="labels">1</property>
    <property name="legendPos">bottom</property>
    <property name="pivotSelect"></property>
    <property name="print">1</property>
    <property name="showDimensions">0</property>
    <property name="title"></property>
    <property name="valueLabels">1</property>
    <dataSeries type="area" markerShape="" color="#8080D0" yAxisIndex="0" hasLegend="true"></dataSeries>
    <dataSeries type="bar" markerShape="" color="#FF8080" yAxisIndex="0" hasLegend="true"></dataSeries>
  </widget>
</dashboard>

<!-- Widget Examples/Map Widget.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Map Widget" folderName="Widget Examples" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-07-06T06:07:08.172Z" createdBy="" category="Widgets" bookCover="{background: {style:&apos;background:white;&apos;},header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-variant: small-caps;color:rgb(92, 142, 43);font-family:lucida sans unicode;&apos;},image: {style:&apos;left:12.5px;left:12.5px;width:107.5px;height:107.5px;&apos;,src:&apos;covers/world_128.gif&apos;,imageStyle:&apos;width:107.5px;height:107.5px;&apos;},footer: {text:&apos;$owner&apos;}}" scheme="" worklistCount="2" snapTo="true" snapGrid="true" gridRows="2" gridCols="2" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Widget1" type="map" subtype="" subtypeClass="" title="Sample Map Widget" dataSource="Use in Dashboards/HoleFoods Map Widget.pivot" dataLink="" drillDownDataSource="" top="16" left="15" width="662" height="674" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="2" rowSpanL="2" showToolbar="true" theme="">
    <dataProperty name="" label="Units Sold" width="" align="left" subtype="" style="" display="" format="#" showAs="" valueColumn="false" summary="" summaryValue="" dataValue="Units Sold" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <dataProperty name="" label="Revenue" width="" align="" subtype="" style="" display="value" format="#.##" showAs="value" valueColumn="false" summary="" summaryValue="" dataValue="Revenue" targetValue="" thresholdLower="" thresholdUpper="" rangeLower="" rangeUpper="" baseValue="" override=""></dataProperty>
    <property name="latitude">42.36</property>
    <property name="longitude">268.92</property>
    <property name="mapType">ROADMAP</property>
    <property name="zoom">3</property>
  </widget>
</dashboard>

<!-- Widget Examples/Time Chart.dashboard -->
<dashboard xmlns="http://www.intersystems.com/deepsee/library" name="Time Chart" folderName="Widget Examples" title="" description="" keywords="HoleFoods" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2012-11-27T16:05:14.765Z" createdBy="" category="Widgets" bookCover="{header: {text:&apos;$type&apos;},title: {text:&apos;$title&apos;,style:&apos;font-weight: bold;color:rgb(0, 80, 35);font-size:24px;padding:3.5px;border-radius:7.5px 7.5px 7.5px 7.5px;&apos;},image: {style:&apos;width:137.5px;height:122.5px;&apos;,src:&apos;covers/time_chart.png&apos;,imageStyle:&apos;width:137.5px;height:122.5px;&apos;},footer: {text:&apos;$owner&apos;,style:&apos;display: none;&apos;}}" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="2" gridCols="5" canResize="true" canModify="true" showTitleBar="true" companyName="" companyLogo="covers/holefoods_logo.png" companyStyle="">
  <widget name="Table" type="pivot" subtype="timeChart" subtypeClass="lineChart" title="Revenue and Units Sold Over Time" dataSource="Use in Dashboards/For Time Chart.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="false" homeRowL="0" homeColL="0" colSpanL="5" rowSpanL="1" showToolbar="true" theme="">
    <control name="" action="applyFilter" target="" targetProperty="[Product].[P1].[Product Category]" location="widget" type="auto" controlClass="" label="Product Category" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <control name="" action="applyFilter" target="" targetProperty="[Outlet].[H1].[Country]" location="widget" type="auto" controlClass="" label="Country" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen=""></control>
    <property name="analyzer">0</property>
    <property name="legendPos">none</property>
    <override name="legend">{hidden:true,_type:'chartLegend'}</override>
    <override name="lineChart">{legendVisible:'false',showMultiples:true,timeBased:true,xAxis:{_type:'axis'},yAxisList:[{_type:'axis'}],_type:'lineChart'}</override>
  </widget>
</dashboard>

</items>
]]></Data>
</XData>
</Class>


<Class name="HoleFoods.KPIAction">
<Description>
KPI class used to supply Actions for the HOLEFOODS cube.
This is a demonstration and does not actually do anything!</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61707,67436.040537</TimeCreated>

<XData name="KPI">
<Description>
This XData definition defines the KPI.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi
xmlns="http://www.intersystems.com/deepsee/kpi"
 name="Holefoods Actions">

<action name="ActionA"/>
<action name="ActionB"/>
<action name="ActionC"/>
</kpi>
]]></Data>
</XData>

<Method name="%OnDashboardAction">
<Description>
This callback is invoked from a dashboard when an action defined by this dashboard is invoked.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pAction:%String,pContext:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// pAction is the name of the action (as defined in the XML list).
	// pContext contains information from the client
	// and can be used to return information.

	// value associated with current item in widget.
	Set tSelectedValue = pContext.currValue

	If (pAction="ActionA") {
		// Go to a new page
		Set pContext.command = "navigate:http://www.intersystems.com"
	}

	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="HoleFoods.KPICFO">
<Description>
Sample KPI for HoleFoods Demo.
This KPI provides synthetic corporate data and defines some simple actions.</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61745,66446.057553</TimeCreated>

<XData name="KPI">
<Description>
This XData definition defines the KPI.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="Holefoods/CFO" sourceType="manual">
<property name="Metric"/>
<property name="Alarm"/>
<property name="Trend"/>

<action name="Spend"/>
<action name="Cut Costs"/>
<action name="Raise Prices"/>
<action name="Cut Prices"/>
<action name="Reset"/>
</kpi>
]]></Data>
</XData>

<Method name="%OnLoadKPI">
<Description>
Notify subclass that KPI is has just be executed.
This is a good place to override properties, such as range and threshold.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// define list of metrics we will calculate
	// all are percentage of target, so are 0-1.5 typically.

	Set tMetrics(1) = "EBIT"
	Set tMetrics(2) = "Share Price"
	Set tMetrics(3) = "A/Payable"
	Set tMetrics(4) = "A/Receivable"
	Set tMetrics(5) = "Long-term Debt"
	Set tMetrics(6) = "Inventory"
	Set tMetrics(7) = "Market Share"
	
	Set ..%seriesCount = 0
	Set n = $O(tMetrics(""))
	While (n'="") {
		Set ..%seriesCount = ..%seriesCount + 1
		Set ..%seriesNames(n) = $G(tMetrics(n))
		Set ..%data(n,"Metric") = $G(^HoleFoods.CFO(n))
		Set tDelta = $G(^HoleFoods.CFO(n,"delta"))
		Set ..%data(n,"Trend") = $S(tDelta>0.05:tDelta,tDelta<-0.05:tDelta,1:0)
		
		Set tLow = 0.5
		Set tHigh = 0.8
		If (n=2) {
			// special case for share price
			Set tLow = 0.8
			Set tHigh = 1.2
		}
		
		If (..%data(n,"Metric") < tLow) {
			Set ..%data(n,"Alarm") = (tLow-..%data(n,"Metric"))*-100
		}
		ElseIf (..%data(n,"Metric") > tHigh) {
			Set ..%data(n,"Alarm") = (..%data(n,"Metric")-tHigh)*100
		}
		Else {
			Set ..%data(n,"Alarm") = 0
		}
		Set n = $O(tMetrics(n))
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnDashboardAction">
<Description>
This callback is invoked from a dashboard when an action defined by this dashboard is invoked.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pAction:%String,pContext:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define EBIT	1
#define	SHARE	2
#define AR		3
#define AP		4
#define DEBT	5
#define INV		6
#define	MKT		7

#define INCREASE(%n,%amt) Set ^HoleFoods.CFO(%n) = ($G(^HoleFoods.CFO(%n)) * (1 + (($R(%amt)-(%amt*0.25))/100)))
#define DECREASE(%n,%amt) Set ^HoleFoods.CFO(%n) = ($G(^HoleFoods.CFO(%n)) * (1 + (($R(%amt)-(%amt*0.75))/100)))

	// remember prior value so we can compute delta
	Merge tPrior = ^HoleFoods.CFO
	
	If (pAction = "Spend") {
		$$$DECREASE($$$EBIT,40)
		$$$INCREASE($$$AP,40)
		$$$DECREASE($$$AR,5)
		$$$INCREASE($$$DEBT,30)
		$$$INCREASE($$$INV,20)
		$$$INCREASE($$$MKT,5)
		Set pContext.command = "refresh"
	}
	ElseIf (pAction = "Cut Costs") {
		$$$INCREASE($$$EBIT,40)
		$$$DECREASE($$$AP,30)
		$$$INCREASE($$$AR,5)
		$$$DECREASE($$$DEBT,5)
		$$$DECREASE($$$INV,10)
		$$$DECREASE($$$MKT,5)
		Set pContext.command = "refresh"
	}
	ElseIf (pAction = "Raise Prices") {
		$$$INCREASE($$$EBIT,20)
		$$$INCREASE($$$AR,30)
		$$$DECREASE($$$DEBT,10)
		$$$INCREASE($$$INV,10)
		$$$DECREASE($$$MKT,10)
		Set pContext.command = "refresh"
	}
	ElseIf (pAction = "Cut Prices") {
		$$$DECREASE($$$EBIT,40)
		$$$DECREASE($$$AR,30)
		$$$INCREASE($$$DEBT,10)
		$$$DECREASE($$$INV,30)
		$$$INCREASE($$$MKT,10)
		Set pContext.command = "refresh"
	}
	ElseIf (pAction = "Reset") {
		Kill ^HoleFoods.CFO
		Set ^HoleFoods.CFO(1) = 0.8
		Set ^HoleFoods.CFO(2) = 0.6
		Set ^HoleFoods.CFO(3) = 0.8
		Set ^HoleFoods.CFO(4) = 0.8
		Set ^HoleFoods.CFO(5) = 0.8
		Set ^HoleFoods.CFO(6) = 0.8
		Set ^HoleFoods.CFO(7) = 0.5

		// send refresh command to client
		Set pContext.command = "refresh"
	}

	If ($G(^HoleFoods.CFO($$$MKT)) > 0.95) {
		// no monopolies
		Set ^HoleFoods.CFO($$$MKT) = 0.95
	}


	// share price is average of all!
	// but each "zero" takes away points
	Set tTotal = 0
	Set tCount = 0
	Set tZeroes = 0
	Set n = $O(^HoleFoods.CFO(""))
	While (n'="") {
		Set tValue = $G(^HoleFoods.CFO(n))
		If (tValue <= 0) {
			Set ^HoleFoods.CFO(n) = 0
		}
		If (tValue < 0.2) {
			Set tZeroes = tZeroes + 1
		}
		If (tValue >= 1.5) {
			Set ^HoleFoods.CFO(n) = 1.5
		}
		Set tCount = tCount + 1
		Set tTotal = tTotal + tValue
		Set n = $O(^HoleFoods.CFO(n))
	}
	If (tCount>0) {
		Set ^HoleFoods.CFO($$$SHARE) = (tTotal/tCount) / (tZeroes+1)
		If (^HoleFoods.CFO($$$SHARE)<=0) {
			// out of business
			Set ^HoleFoods.CFO($$$SHARE) = 0
		}
	}

	// compute deltas, if any
	Set n = $O(tPrior(""))
	While (n'="") {
		Set tOld = $G(tPrior(n))
		If (tOld'="") {
			Set ^HoleFoods.CFO(n,"delta") = $G(^HoleFoods.CFO(n)) - tOld
		}
		Set n = $O(tPrior(n))
	}

	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="HoleFoods.KPISQL">
<Description>
Example KPI definition using SQL statements against the HoleFoods transaction data.</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61707,67436.040537</TimeCreated>
<DependsOn>HoleFoods.Transaction</DependsOn>

<XData name="KPI">
<Description>
This XData definition defines the KPI.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi
xmlns="http://www.intersystems.com/deepsee/kpi"
 name="HoleFoods/KPISQL" sourceType="sql"
 sql="SELECT TOP 10000 Product->Name Product, Product ProductCode, Outlet->City As City, Outlet As CityId, Count(*) FROM HoleFoods.SalesTransaction GROUP BY Product"
 caption="KPI SQL">

<filter name="City" valueList="Paris,Munich,Beijing"/>
<filter name="Product" displayList="Onion Ring,Ziti" valueList="SKU-222,SKU-296"/>

<property name="Product" columnNo="1"/>
<property name="SKU" columnNo="2"/>
<property name="City" columnNo="3"/>
<property name="CityId" columnNo="4"/>
<property name="Count" columnNo="5"/>
</kpi>
]]></Data>
</XData>

<Method name="%OnGetSQL">
<Description>
This callback, if implements, lets a subclass provide an SQL statement to fetch data for this KPI. </Description>
<FormalSpec><![CDATA[&pSQL:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $IsObject(..%filterValues) {
		Set tWHERE = ""
		If (..%filterValues.City'="") {
			Set tWHERE = tWHERE _ $S(tWHERE="":"",1:" AND ") _ " Outlet->City = '" _ ..%filterValues.City _"'"
		}
		If (..%filterValues.Product'="") {
			Set tWHERE = tWHERE _ $S(tWHERE="":"",1:" AND ") _ " Product = '" _ ..%filterValues.Product _"'"
		}

		If (tWHERE'="") {
			// insert WHERE clase within query
			Set tSQL1 = $P(pSQL,"GROUP BY",1)
			Set tSQL2 = $P(pSQL,"GROUP BY",2)
			Set pSQL = tSQL1 _ " WHERE " _ tWHERE
			If (tSQL2 '= "") {
				Set pSQL = pSQL _ " GROUP BY" _ tSQL2
			}
		}
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetListingSQL">
<Description><![CDATA[
This callback, if implemented, returns the text of an SQL query used to provide
a "detail listing" for this KPI.<br/>
<var>pFilters</var> is an array of current filter values: pFilters(name)=value.<br/>
<var>pSelection</var> is an array containing information about the current selected items in the pivot.
It contains 2 values:<br/>
pSelection("selectedRange") contains the current selected cells in the pivot as a string in the form
"startRow,startCol,endRow,endCol" (1-based). "" if no cells are selected.<br/>
pSelection("rowValues") contains a csv-list of "row" values for the selected rows in the pivot (similar
to the $$$VALUELIST value used for OpenWindow URLs. This may contain "\," for "," within the data values.<br/>
<var>pListingName</var> is the name of the listing to display. This is reserved for future use.<br/>
This method is simply a convenient alternative to the <method>%OnGetListingResultSet</method> method.
It takes precedence over the <method>%OnGetListingResultSet</method> method.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pFilters:%String,&pSelection:%String,pListingName:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tSQL = "SELECT TOP 1000 %ID,DateOfSale,Product FROM HoleFoods.SalesTransaction"

	If (pSelection("rowValues")'="") {
		set list=$LISTFROMSTRING(pSelection("rowValues"))
		for i=1:1:$LL(list) {
			set ^Lexi($I(^Lexi))=$LG(list,i)
			if i=1 { 
				set addthis="Product = '"_$LG(list,i)_"'" 
			} else {
				set addthis=addthis_" OR Product = '"_$LG(list,i)_"'" 
			}

		}
		Set tSQL = tSQL _ " WHERE " _ addthis
	}

	// apply sorting, if aksed for
	If (+$G(pSelection("sortColumn"))>0) {
		Set tSQL = tSQL _ " ORDER BY " _ pSelection("sortColumn") _ " " _ $G(pSelection("sortDir"))
	}
	
	Quit tSQL
]]></Implementation>
</Method>
</Class>


<Class name="HoleFoods.KPISalesVsTarget">
<Description>
Sample KPI for HoleFoods Demo.
This KPI provides real sales data compared with budget targets.</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>63672,48750.467541</TimeChanged>
<TimeCreated>61805,61852.00052</TimeCreated>

<Property name="RowClause">
<Description>
Used to pass ROWS clause among methods.</Description>
<Type>%String</Type>
</Property>

<Property name="FilterClause">
<Description>
Used to pass filter clause among methods.</Description>
<Type>%String</Type>
</Property>

<XData name="KPI">
<Description>
This XData definition defines the KPI.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi xmlns="http://www.intersystems.com/deepsee/kpi"
 name="Holefoods/SalesAgainstTargets" sourceType="mdx"
 caption="Sales against Targets"
>
<property name="AmountOfSale" displayName="AmountOfSale" columnNo="1"/>
<property name="Target" displayName="Target" columnNo="2"/>
<property name="History" displayName="History"/>
<filter name="ShowBy" displayName="ShowBy" valueList="Year,Month,ProductCategory,ProductName,Country,City" multiSelect="false"/>
<filter name="Year" displayName="Year" filterProperty="Year" multiSelect="false"/>
<filter name="Product" displayName="Product" filterProperty="" multiSelect="false"/>
<filter name="Country" displayName="Country" filterProperty="" multiSelect="false"/>
</kpi>
]]></Data>
</XData>

<Method name="%OnLoadKPI">
<Description>
Notification that this KPI is being executed.
This is a good place to override properties, such as range and threshold.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	// Compute additional values
	Set tFilters = ..%filterValues

	// compute recent history using query
	If ((tFilters.Year'="")&&(tFilters.Year'="*")&&(tFilters.Year'="&[NOW]")) {
		// Take &[] off of Year value!
		Set tStartMonth = "Jan-"_$E(tFilters.Year,3,6)
		Set tEndMonth = "Dec-"_$E(tFilters.Year,3,6)
	}
	Else {
		Set tStartMonth = "NOW-12"
		Set tEndMonth = "NOW"
	}

	Set tROWS = ..RowsClause
	Set tMDX = "SELECT "_tROWS_"%LIST(DateOfSale.[MonthSold].["_tStartMonth_"]:["_tEndMonth_"]) ON COLUMNS FROM HOLEFOODSCOMBINED WHERE Measures.[Amount Sold] " _ ..FilterClause
	Set tRS = ##class(%DeepSee.ResultSet).%New()
	Set tSC = tRS.%PrepareMDX(tMDX)
	If $$$ISERR(tSC) Quit tSC
	Set tSC = tRS.%Execute()
	If $$$ISERR(tSC) Quit tSC

	For n = 1:1:..%seriesCount {
		Set tValue = tRS.%GetOrdinalValue(1,n)
		Set ..%data(n,"History") = tValue
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnGetMDX">
<Description>
Return an MDX statement to execute.</Description>
<FormalSpec><![CDATA[&pMDX:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tFilters = ..%filterValues

	// Construct an MDX query based on the current filter values
	Set tROWS = ""
	Set tFILTER = ""

	// show by
	If (tFilters.ShowBy="Year") {
		Set tROWS = "[DateOfSale].[YearSold].Members"
	}
	ElseIf (tFilters.ShowBy="Month") {
		Set tROWS = "[DateOfSale].[MonthSold].Members"
	}
	ElseIf ((tFilters.ShowBy="ProductCategory")) {
		Set tROWS = "[Product].[Product Category].Members"
	}
	ElseIf ((tFilters.ShowBy="ProductName")||(tFilters.ShowBy="")) {
		Set tROWS = "[Product].[Product Name].Members"
	}
	ElseIf (tFilters.ShowBy="Country") {
		Set tROWS = "[Outlet].[Country].Members"
	}
	ElseIf (tFilters.ShowBy="City") {
		Set tROWS = "[Outlet].[City].Members"
	}
	
	If (tROWS'="") {
		Set tROWS = "NON EMPTY "_tROWS_" ON ROWS,"
	}

	// filters
	If ((tFilters.Year'="")&&(tFilters.Year'="*")) {
		Set tFILTER = tFILTER_" %FILTER [DateOfSale].[YearSold]."_tFilters.Year
	}
	If ((tFilters.Product'="")&&(tFilters.Product'="*")) {
		Set tFILTER = tFILTER_" %FILTER [Product].[Product Name]."_tFilters.Product
	}
	If ((tFilters.Country'="")&&(tFilters.Country'="*")) {
		Set tFILTER = tFILTER_" %FILTER [Outlet].[Country]."_tFilters.Country
	}

	Set ..FilterClause = tFILTER
	Set ..RowsClause = tROWS

	Set pMDX = "SELECT "_tROWS_"{Measures.[Amount Sold],Measures.[Target]} ON Columns FROM HOLEFOODSCOMBINED "_tFILTER
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetFilterMembers">
<Description><![CDATA[
Callback to get additional members for a KPI filter.
This takes the form:<br/>
pMembers($I(pMembers))=$LB(text,value)<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilter:%String,*pMembers:%List,pSearchKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		// get member list from cube
		If (pFilter = "Year") {
			Set tSC = ..%GetMembersForFilter("HOLEFOODSCOMBINED","[DateOfSale].[Actual].[YearSold]",.pMembers,pSearchKey)
			If $$$ISERR(tSC) Quit
		}
		ElseIf (pFilter = "Product") {
			Set tSC = ..%GetMembersForFilter("HOLEFOODSCOMBINED","[Product].[P1].[Product Name]",.pMembers,pSearchKey)
			If $$$ISERR(tSC) Quit
		}
		ElseIf (pFilter = "Country") {
			Set tSC = ..%GetMembersForFilter("HOLEFOODSCOMBINED","[Outlet].[H1].[Country]",.pMembers,pSearchKey)
			If $$$ISERR(tSC) Quit
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="HoleFoods.KPIYears">
<Description>
This KPI class provides the list of values for the 
Years pivot variable of the HoleFoods cube.</Description>
<Super>%DeepSee.KPI</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63173,38927.407251</TimeCreated>

<Parameter name="DOMAIN">
<Default>PATIENTSAMPLE</Default>
</Parameter>

<XData name="KPI">
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi name="HoleFoodsYears" 
displayName="HoleFoodsYears"  
sourceType="mdx"
mdx="SELECT [DateOfSale].[Actual].[YearSold].CURRENTMEMBER.Properties(&quot;Key&quot;) ON 0,NON EMPTY [DateOfSale].[Actual].[YearSold].Members ON 1 FROM [HOLEFOODS]" 
>

<property name="Value" 
displayName="Value" 
 columnNo="1" />

</kpi>
]]></Data>
</XData>
</Class>


<Class name="HoleFoods.Outlet">
<Description>
This represents a Sales Outlet for the HoleFoods demo.</Description>
<Super>%Persistent</Super>
<TimeChanged>62072,43501.813096</TimeChanged>
<TimeCreated>61079,51385.591906</TimeCreated>

<Property name="Country">
<Description>
Country in which this city is located.</Description>
<Type>Country</Type>
</Property>

<Property name="City">
<Description>
City name of this location.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Population">
<Description>
Population of this city.</Description>
<Type>%Integer</Type>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="Type">
<Description>
Type of outlet: "retail", "web", etc.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Latitude">
<Description>
Latitude of this location.</Description>
<Type>%Double</Type>
</Property>

<Property name="Longitude">
<Description>
Longitude of this location.</Description>
<Type>%Double</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^HoleFoods.OutletD</DataLocation>
<DefaultData>OutletDefaultData</DefaultData>
<IdLocation>^HoleFoods.OutletD</IdLocation>
<IndexLocation>^HoleFoods.OutletI</IndexLocation>
<StreamLocation>^HoleFoods.OutletS</StreamLocation>
<Data name="OutletDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Country</Value>
</Value>
<Value name="3">
<Value>City</Value>
</Value>
<Value name="4">
<Value>Population</Value>
</Value>
<Value name="5">
<Value>Type</Value>
</Value>
<Value name="6">
<Value>Latitude</Value>
</Value>
<Value name="7">
<Value>Longitude</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HoleFoods.Product">
<Description>
This represents a Product within the HoleFoods demo.</Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61079,51315.12609</TimeCreated>

<Index name="KEY">
<IdKey>1</IdKey>
<Properties>SKU</Properties>
</Index>

<Property name="Category">
<Description>
Category of this product.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Name">
<Description>
Name of this product.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="120"/>
</Property>

<Property name="SKU">
<Description>
SKU for this product.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="22"/>
</Property>

<Property name="Price">
<Description>
List price for this product.</Description>
<Type>%Numeric</Type>
<Parameter name="MINVAL" value="0"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^HoleFoods.ProductD</DataLocation>
<DefaultData>ProductDefaultData</DefaultData>
<IdLocation>^HoleFoods.ProductD</IdLocation>
<IndexLocation>^HoleFoods.ProductI</IndexLocation>
<StreamLocation>^HoleFoods.ProductS</StreamLocation>
<Data name="ProductDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Category</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>Price</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HoleFoods.Region">
<Description>
This specifies a geographic region within the HoleFoods demo.</Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61079,51385.591906</TimeCreated>

<Property name="Name">
<Description>
Name of this region.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="80"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^HoleFoods.RegionD</DataLocation>
<DefaultData>RegionDefaultData</DefaultData>
<IdLocation>^HoleFoods.RegionD</IdLocation>
<IndexLocation>^HoleFoods.RegionI</IndexLocation>
<StreamLocation>^HoleFoods.RegionS</StreamLocation>
<Data name="RegionDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HoleFoods.SampleListingGroup">
<Description><![CDATA[
This class defines a listing group for the DeepSee HoleFoods sample. 
To see the definition of this listing group, use the DeepSee > Tools > Listing Group Manager menu option
or open this class in Studio.]]></Description>
<Super>%DeepSee.ListingGroupDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63616,57566.892741</TimeCreated>
<DependsOn>HoleFoods.Cube,HoleFoods.SubjectAreaAsia</DependsOn>

<Parameter name="XMLTYPE">
<Description>
Need this because we have another listing group class with the same short class name.
We use the XMLTYPE parameter to make sure these two classes project differently to XML.</Description>
<Default>HoleFoodsSampleListingGroup</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>HOLEFOODS</Default>
</Parameter>

<XData name="Listings">
<Description>
This XData section provides the definition of the cube.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/listinggroup</XMLNamespace>
<Data><![CDATA[
<listingGroup name="Additional Listing for HoleFoods Sample" 
      targetCubes="Holefoods,HoleFoods Asia" >

<listing name="Another Sample Listing by Date" 
fieldList='%ID As "ID #",DateOfSale As "Sale Date"' 
 orderBy="DateOfSale,%ID"  />

<listing name="Another Sample Listing with Customer Info" 
listingType="map" 
 fieldList='%ID,Outlet->City "Store Location",Outlet->Country->Name Country,Product->Name Product,ZipCode "Customer ZipCode",Latitude,Longitude'/>

  </listingGroup>
]]></Data>
</XData>
</Class>


<Class name="HoleFoods.SubjectAreaAsia">
<Description>
Example of a DeepSee Subject Area.
This limits the data from the HOLEFOODS cube to data from ASIA only.</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.SubjectArea</Super>
<TimeChanged>62575,55943.64001</TimeChanged>
<TimeCreated>62396,79894.878974</TimeCreated>
<DependsOn>HoleFoods.Cube</DependsOn>

<Parameter name="DOMAIN">
</Parameter>

<XData name="SubjectArea">
<Description>
SubjectArea definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/subjectarea</XMLNamespace>
<Data><![CDATA[
<subjectArea xmlns="http://www.intersystems.com/deepsee/subjectarea" name="HoleFoods Asia" caption="HoleFoods Asia" disabled="false" baseCube="HoleFoods" filterSpec="[OUTLET].[H1].&amp;[ASIA]">
</subjectArea>
]]></Data>
</XData>
</Class>


<Class name="HoleFoods.Transaction">
<Description><![CDATA[
Instances of this class represent specific transactions within
the HoleFoods demo.<br/>
This table combines both "actual" data and "budget" data so that the sample cube
can show comparisons between the two.<br/>
Actual records will have a true value for the Actual property.<br/>
Budget records will have a false value for the Actual property. The budget value will
be stored in the TargetAmount property. Budget values are set for each city, product, and
month (using the first day of the month).]]></Description>
<SqlTableName>SalesTransaction</SqlTableName>
<Super>%Persistent</Super>
<TimeChanged>62076,58912.417599</TimeChanged>
<TimeCreated>61079,51781.861768</TimeCreated>

<Parameter name="DSTIME">
<Description>
Track changes to this class.</Description>
<Default>auto</Default>
</Parameter>

<Index name="DateOfSale">
<Properties>DateOfSale</Properties>
</Index>

<Index name="Product">
<Type>bitmap</Type>
<Properties>Product</Properties>
</Index>

<Index name="Outlet">
<Type>bitmap</Type>
<Properties>Outlet</Properties>
</Index>

<Property name="Actual">
<Description>
If true, this represents an actual sale
otherwise this represents a sales target.</Description>
<Type>%Boolean</Type>
</Property>

<Property name="DateOfSale">
<Description>
Date of this sale.</Description>
<Type>%Date</Type>
</Property>

<Property name="Product">
<Description>
Product sold.</Description>
<Type>Product</Type>
</Property>

<Property name="Outlet">
<Description>
Store or other outlet in which the sale occurred.</Description>
<Type>Outlet</Type>
</Property>

<Property name="Channel">
<Description>
Channel product was sold through: "Retail" or "Online".</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",Retail,Online"/>
<Parameter name="VALUELIST" value=",1,2"/>
</Property>

<Property name="AmountOfSale">
<Description>
Actual amount of this sale.</Description>
<Type>%Numeric</Type>
<Parameter name="SCALE" value="2"/>
</Property>

<Property name="UnitsSold">
<Description>
Units sold.</Description>
<Type>%Integer</Type>
</Property>

<Property name="Discount">
<Description>
Discount amount.</Description>
<Type>%Numeric</Type>
<Parameter name="SCALE" value="2"/>
</Property>

<Property name="TargetAmount">
<Description>
For budget items, this is the target value for a period,region, and product.</Description>
<Type>%Numeric</Type>
<Parameter name="SCALE" value="2"/>
</Property>

<Property name="Comment">
<Description>
Customer comment on this transaction (if any).</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="ZipCode">
<Description>
US Zipcode of customer (if provided).</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="25"/>
</Property>

<Property name="Latitude">
<Description>
Latitude of customer (determined from zip code).</Description>
<Type>%Double</Type>
</Property>

<Property name="Longitude">
<Description>
Longitude of customer (determined from zip code).</Description>
<Type>%Double</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^HoleFoods.TransactionD</DataLocation>
<DefaultData>TransactionDefaultData</DefaultData>
<IdLocation>^HoleFoods.TransactionD</IdLocation>
<IndexLocation>^HoleFoods.TransactionI</IndexLocation>
<StreamLocation>^HoleFoods.TransactionS</StreamLocation>
<Data name="TransactionDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Actual</Value>
</Value>
<Value name="3">
<Value>DateOfSale</Value>
</Value>
<Value name="4">
<Value>Product</Value>
</Value>
<Value name="5">
<Value>Outlet</Value>
</Value>
<Value name="6">
<Value>Channel</Value>
</Value>
<Value name="7">
<Value>AmountOfSale</Value>
</Value>
<Value name="8">
<Value>UnitsSold</Value>
</Value>
<Value name="9">
<Value>Discount</Value>
</Value>
<Value name="10">
<Value>TargetAmount</Value>
</Value>
<Value name="11">
<Value>Comment</Value>
</Value>
<Value name="12">
<Value>ZipCode</Value>
</Value>
<Value name="13">
<Value>Latitude</Value>
</Value>
<Value name="14">
<Value>Longitude</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="HoleFoods.Utils">
<Description><![CDATA[
Utility methods for the DeepSee "HoleFoods" demo.
To create data for this DeepSee model, the easiest thing to do is to
use the <method>BuildData</method>:<br/>
From the command line:<br/>
<example language="cache">
Do ##class(HoleFoods.Utils).BuildData(1000000,1,1)
</example>
The first argument is the number of records to create, 
the second argument indicates that index building should be done in parallel,
the third is a verbose flag; if true, then progress is displayed as the data is built.]]></Description>
<IncludeCode>%DeepSee</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61079,52504.259694</TimeCreated>

<Method name="Setup">
<Description>
Add this alias so that each DeepSee sample has a Setup() method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCount:%Integer=1000,pASync:%Boolean=1,pVerbose:%Boolean=1</FormalSpec>
<Implementation><![CDATA[	do ..BuildData(pCount,pASync,pVerbose)
]]></Implementation>
</Method>

<Method name="BuildData">
<Description><![CDATA[
Build the transactional data that will provide data for the DeepSee model.
Any old records will be deleted.<br/>
<var>pCount</var> is the number of records to create.<br/>
<var>pAsync</var> if true, indicates that parallel processing should be used to build the cube.<br/>
<var>pVerbose</var> if true, indicates that status messages should be written to the console.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCount:%Integer=1000,pASync:%Boolean=1,pVerbose:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
	// Delete cube if present
	If ##class(%DeepSee.Utils).%CubeExists("HOLEFOODS") {
		Do ##class(%DeepSee.Utils).%KillCube("HOLEFOODS")
	}

	// Kill old data
	Do ##class(Region).%KillExtent()
	Do ##class(Country).%KillExtent()
	Do ##class(Outlet).%KillExtent()
	Do ##class(Product).%KillExtent()
	Do ##class(Transaction).%KillExtent()

	// build new data
	Do ..CreateRecords(1,pCount,pVerbose)

	// update cube(s)
	If ##class(%DeepSee.Utils).%CubeExists("HOLEFOODS") {
		Set tSC = ##class(%DeepSee.Utils).%BuildCube("HOLEFOODS",pASync,pVerbose)
		If $$$ISERR(tSC) {
			Write !,"Error in BuildCube:"
			Do $System.Status.DisplayError(tSC)
		}
	}

	If ##class(%DeepSee.Utils).%CubeExists("HOLEFOODSBUDGET") {
		Set tSC = ##class(%DeepSee.Utils).%BuildCube("HOLEFOODSBUDGET",pASync,pVerbose)
		If $$$ISERR(tSC) {
			Write !,"Error in BuildCube:"
			Do $System.Status.DisplayError(tSC)
		}
	}

    //define term lists
    do ..SetupTermLists()

    //define pivot variables
    do ..SetupVariables()
]]></Implementation>
</Method>

<Method name="AddData">
<Description><![CDATA[
Add new records to the transactional data that will provide data for the DeepSee model.
<var>pCount</var> is the number of records to create.<br/>
<var>pAsync</var> if true, indicates that parallel processing should be used to build the cube.<br/>
<var>pVerbose</var> if true, indicates that status messages should be written to the console.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCount:%Integer=100,pASync:%Boolean=1,pVerbose:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
	// build new data
	Do ..CreateRecords(0,pCount,pVerbose)
]]></Implementation>
</Method>

<Method name="UpdateData">
<Description><![CDATA[
Update existing records to the transactional data that will provide data for the DeepSee model.
<var>pCount</var> is the number of records to create.<br/>
<var>pVerbose</var> if true, indicates that status messages should be written to the console.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCount:%Integer=100,pVerbose:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
	Set tChangeCount = 0
	Set tRecordCount = 100000
	For n=1:1:pCount {
		Set tID = $R(tRecordCount) + 1
		Set tRecord = ##class(HoleFoods.Transaction).%OpenId(tID)
		If $IsObject(tRecord) {
			Set tRecord.UnitsSold = $S($R(10)<8:1,1:$R(8)+1)
			Set tRecord.Discount = $S($R(10)<6:0,$R(10)<7:0.1,$R(10)<7:0.2,1:0.5)
			Set tRecord.AmountOfSale = tRecord.UnitsSold * tRecord.Product.Price * (1 - tRecord.Discount)
			Set tSC = tRecord.%Save()
			If $$$ISOK(tSC) {
				Set tChangeCount = tChangeCount + 1
				If (pVerbose) Write $C(13,27)_"[0J"_$FN(+$G(tChangeCount),",",0)_" record(s) updated"
			}
		}
	}
	If (pVerbose) Write $C(13,27)_"[0J"_$FN(+$G(tChangeCount),",",0)_" record(s) updated"
]]></Implementation>
</Method>

<Method name="DeleteRecords">
<Description><![CDATA[
Delete a record in the transactional data that provides data for the DeepSee model.
<var>pStart</var> is the starting Id of the source record to delete.<br/>
<var>pVerbose</var> if true, indicates that status messages should be written to the console.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStartId:%Integer,pEndId:%Integer="",pVerbose:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
	Set:pEndId="" pEndId=pStartId
	For id=pStartId:1:pEndId {
		Set tSC = ##class(HoleFoods.Transaction).%DeleteId(id)
		If $$$ISERR(tSC) {
			Do:pVerbose $System.Status.DisplayError(tSC)
		}
	}

	If ##class(%DeepSee.Utils).%CubeExists("HOLEFOODS") {
		Do ##class(%DeepSee.Utils).%SynchronizeCube("HOLEFOODS",pVerbose)
	}
]]></Implementation>
</Method>

<Method name="CreateRecords">
<Description><![CDATA[
Does the actual work of creating new records in the source data.
<var>pCount</var> is the number of records to create.<br/>
<var>pAsync</var> if true, indicates that parallel processing should be used to build the cube.<br/>
<var>pVerbose</var> if true, indicates that status messages should be written to the console.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNewBuild:%Boolean,pCount:%Integer=100,pVerbose:%Boolean=1</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		// build new data

		// regions
		Set tTotalPopulation = 0

		If (pNewBuild) {
			// $LB(population,lat,long)
			Set tRegionList("Asia","Japan","Tokyo") = $LB(12369000,35.623,139.703)
			Set tRegionList("Asia","Japan","Osaka") = $LB(8817166,34.652,135.485)
			Set tRegionList("Asia","China","Beijing") = $LB(17400000,39.860,116.412)
			Set tRegionList("Asia","China","Shanghai") = $LB(16738000,31.224,121.466)
			Set tRegionList("Asia","India","Mumbai") = 	$LB(12778721,18.96,72.819)
			Set tRegionList("Asia","India","Bangalore") = 	$LB(6200000,12.963,77.587)

			Set tRegionList("Europe","England","London") = 	$LB(7287555,51.503,-0.145)
			Set tRegionList("Europe","England","Manchester") = $LB(2240230,53.470,-2.237)
			Set tRegionList("Europe","France","Paris") = 	$LB(11174000,48.844,2.355)
			Set tRegionList("Europe","France","Nice") = 	$LB(347100,43.709,7.266)
			Set tRegionList("Europe","Spain","Madrid") = 	$LB(7061748,40.415,-3.709)
			Set tRegionList("Europe","Spain","Barcelona") = $LB(1673075,41.387,2.169)
			Set tRegionList("Europe","Germany","Berlin") = 	$LB(5000000,52.527,13.402)
			Set tRegionList("Europe","Germany","Munich") = $LB(5203738,48.142,11.578)
			Set tRegionList("Europe","Germany","Frankfurt") = $LB(5600000,50.097,8.678)
			Set tRegionList("Europe","Belgium","Antwerp") = $LB(461496,51.212,4.393)
			Set tRegionList("Europe","Belgium","Brussels") = $LB(1830000,50.845,4.338)
			Set tRegionList("Europe","Netherlands","Amsterdam") = $LB(2158372,52.360,4.877)
			Set tRegionList("Europe","Italy","Rome") = 	$LB(2743796,41.879,12.473)
			Set tRegionList("Europe","Italy","Milan") = $LB(1310320,45.438,9.178)

			Set tRegionList("N. America","USA","Boston") = $LB(3406829,42.3612,-71.5)
			Set tRegionList("N. America","USA","New York") = $LB(19306183,40.785,-73.9639)
			Set tRegionList("N. America","USA","Los Angeles") = $LB(9948081,34.027,-118.264)
			Set tRegionList("N. America","USA","Seattle") = $LB(3263497,47.585,-122.350)
			Set tRegionList("N. America","USA","Atlanta") = $LB(5278904,33.757,-84.354)
			Set tRegionList("N. America","USA","Houston") = $LB(5628101,29.766,-95.390)
			Set tRegionList("N. America","USA","Chicago") = $LB(9785747,41.867,-87.639)
			Set tRegionList("N. America","USA","Sheridan") = $LB(15804,44.787,-106.959)

			Set tRegionList("N. America","Canada","Toronto") = $LB(5555912,43.638,-79.406)
			Set tRegionList("N. America","Canada","Montreal") = $LB(3635571,45.501,-73.562)
			Set tRegionList("N. America","Canada","Vancouver") = $LB(2524113,49.248,-123.109)

			Set tRegionList("S. America","Brasil","Sao Paolo") = $LB(11150249,-23.544,-46.635)
			Set tRegionList("S. America","Brasil","Rio De Janeiro") = $LB(7145472,-22.894,-43.228)
			Set tRegionList("S. America","Brasil","Brasilia") = $LB(2455903,-15.779,-47.932)
			Set tRegionList("S. America","Chile","Santiago") = $LB(7200000,-31.428,-70.562)

			// create index for finding geocode for customers
			Do ..CreateGeoIndex(.tRegionList)

			// regions
			Set r = $O(tRegionList(""))
			While (r '= "") {
				Set tRegion = ##class(Region).%New()
				Set tRegion.Name = r
				Set tSC = tRegion.%Save()
				If $$$ISERR(tSC) Quit

				// countries
				Set c = $O(tRegionList(r,""))
				While (c '= "") {
					Set tCountry = ##class(Country).%New()
					Set tCountry.Name = c
					Set tCountry.Region = tRegion
					Set tSC = tCountry.%Save()
					If $$$ISERR(tSC) Quit
					Set tCountryId = tCountry.%Id()

					// cities
					Set ct = $O(tRegionList(r,c,""))
					While (ct '= "") {
						Set tOutlet = ##class(Outlet).%New()
						Set tOutlet.City = ct
						Set tOutlet.Country = tCountry
						Set tPopulation = $LG(tRegionList(r,c,ct),1)
						Set tOutlet.Population = tPopulation
						Set tOutlet.Latitude = $LG(tRegionList(r,c,ct),2)
						Set tOutlet.Longitude = $LG(tRegionList(r,c,ct),3)
						Set tSC = tOutlet.%Save()
						If $$$ISERR(tSC) Quit
						Set tCityId = tOutlet.%Id()
						Set tCityCountry(tCityId) = tCountryId	// index used later

						// track total population and distribution
						// create records proportional to population
						Set tTotalPopulation = tTotalPopulation + tPopulation
						Set tCityDistribution(tTotalPopulation) = tOutlet.%Id()

						Set x = $I(tOutletCount)
						Set ct = $O(tRegionList(r,c,ct))
					}
					If $$$ISERR(tSC) Quit
					Set c = $O(tRegionList(r,c))
				}
				If $$$ISERR(tSC) Quit
				Set r = $O(tRegionList(r))
			}

			// Products: $LB(name,sku,price,type)
			Kill tList
			Set tList($I(tList)) = $LB("Bagels (dozen)","SKU-101",2.95,"Snack")
			Set tList($I(tList)) = $LB("Donuts (dozen)","SKU-192",2.95,"Snack")
			Set tList($I(tList)) = $LB("Pretzels (bag)","SKU-203",3.95,"Snack")
			Set tList($I(tList)) = $LB("Unsalted Pretzels (bag)","SKU-204",4.25,"Snack")
			Set tList($I(tList)) = $LB("Free-range Donuts (dozen)","SKU-195",12.95,"Snack")
			Set tList($I(tList)) = $LB("Bundt Cake","SKU-199",19.95,"Snack")
			Set tList($I(tList)) = $LB("Ziti (box)","SKU-296",1.95,"Pasta")
			Set tList($I(tList)) = $LB("Penne (box)","SKU-287",1.95,"Pasta")
			Set tList($I(tList)) = $LB("Tortellini (frozen)","SKU-928",6.95,"Pasta")
			Set tList($I(tList)) = $LB("Cheerios (box)","SKU-709",3.95,"Cereal")
			Set tList($I(tList)) = $LB("Fruit Loops (box)","SKU-708",4.95,"Fruit")
			Set tList($I(tList)) = $LB("Pineapple Rings (can)","SKU-900",8.95,"Fruit")
			Set tList($I(tList)) = $LB("Lifesavers (roll)","SKU-451",1.15,"Candy")
			Set tList($I(tList)) = $LB("Swiss Cheese (sliced)","SKU-712",5.95,"Dairy")
			Set tList($I(tList)) = $LB("Onion ring","SKU-222",5.95,"Vegetable")
			Set tList($I(tList)) = $LB("Onion ring","SKU-223",4.95,"Vegetable")
			Set tList($I(tList)) = $LB("Calamari (frozen)","SKU-601",22.95,"Seafood")

			Set tProductCount = 0
			Set n = $O(tList(""))
			While (n '= "") {
				Set tProduct = ##class(Product).%New()
				Set tProduct.Name = $LG(tList(n),1)
				Set tProduct.SKU = $LG(tList(n),2)
				Set tProduct.Price = $LG(tList(n),3)
				Set tProduct.Category = $LG(tList(n),4)
                Set tSC = tProduct.%Save()
                If $$$ISERR(tSC) Quit
                If tProduct.SKU = "SKU-296" {
                        Set tDefaultProduct = tProduct
                }

				// build random distribution of products
				Set c = $R(10)+1
				For k = 1:1:c {
					Set tProducts($I(tProductCount)) = tProduct
				}
				Set n = $O(tList(n))
			}
			If $$$ISERR(tSC) Quit

			// certain products are not sold in certain regions
			Set tSkipProduct("Asia","SKU-101") = ""
			Set tSkipProduct("Asia","SKU-712") = ""
			Set tSkipProduct("Europe","SKU-195") = ""
			Set tSkipProduct("N. America","SKU-204") = ""
		}
		Else {
			// use existing star tables

			// cities
			Set tRS = ##class(%ResultSet).%New()
			Set tSC = tRS.Prepare("SELECT ID FROM HoleFoods.Outlet")
			If $$$ISERR(tSC) Quit
			Set tSC = tRS.Execute()
			If $$$ISERR(tSC) Quit

			While (tRS.Next()) {
				Set tID = tRS.Data("ID")
				Set tCity = ##class(Outlet).%OpenId(tID)
				If $IsObject(tCity) {
					Set tCities($I(tCityCount)) = tCity
				}
			}

			// products
			Set tRS = ##class(%ResultSet).%New()
			Set tSC = tRS.Prepare("SELECT ID FROM HoleFoods.Product")
			If $$$ISERR(tSC) Quit
			Set tSC = tRS.Execute()
			If $$$ISERR(tSC) Quit

			While (tRS.Next()) {
				Set tID = tRS.Data("ID")
				Set tProduct = ##class(Product).%OpenId(tID)
				If $IsObject(tProduct) {
					// build random distribution of products
					Set c = $R(10)+1
					For k = 1:1:c {
						Set tProducts($I(tProductCount)) = tProduct
					}
				}
			}
		}

		// distribution of dates increasing with time
		// last 5 full years, plus part of current year
		Set tCurrYear = +$E($ZDT($H,3),1,4)
		Set tStartYear = tCurrYear - 5
		Set tCurrMonth = +$E($ZDT($H,3),6,7)
		Set tMonthSeed = 1000
		Set tMonthTotal = tMonthSeed
		Set tMonths = 60 + tCurrMonth
		For m = 1:1:tMonths {
			Set tMonthTotal = (tMonthTotal * 1.01)\1
			Set tMonthDist(tMonthTotal) = m
		}

		// now build main table
		Set tCount = pCount
		Set tRows = 0

		For n = 1:1:tCount {
			Set tRecord = ##class(Transaction).%New()
			Set tRecord.Actual = 1
		
			// last 5 full years plus part of current year, with distribution increasing with time
			Set tMonth = 1
			Set mr = $R(tMonthTotal - tMonthSeed) + tMonthSeed
			Set mi = $O(tMonthDist(mr))
			Set:mi'="" tMonth = $G(tMonthDist(mi),1)

			Set tYear = tStartYear + ((tMonth-1)\12)
			Set tMonth = ((tMonth-1)#12) + 1
			Set tDay = $R($$$iscDaysInMonth(tYear,tMonth)) + 1
			Set tH = +$ZDTH(tYear_"-"_$$$iscPadZero(tMonth,2)_"-"_$$$iscPadZero(tDay,2),3)

			Set tRecord.DateOfSale = tH
			
			// product
			Set tProduct = tProducts($R(tProductCount)+1)
			Set tRecord.Product = tProduct

			Set tRecord.UnitsSold = $S($R(10)<8:1,1:$R(8)+1)
			Set tRecord.Discount = $S($R(10)<6:0,$R(10)<7:0.1,$R(10)<7:0.2,1:0.5)
			Set tRecord.AmountOfSale = tRecord.UnitsSold * tProduct.Price * (1 - tRecord.Discount)

			// slowly change channel distribution
			Set tRecord.Channel = $S($R(18000)<(tH-50000):2,1:1)

			// some are null
			If ($R(10) < 1) Set tRecord.Channel = ""

			// assign outlet weighted by population
			If (pNewBuild) {
				If ($R(100)<2) {
					Set tRecord.Comment = ..CreateComment()
				}

				Set tOutletId = 1
				Set lr = $R(tTotalPopulation)
				Set li = $O(tCityDistribution(lr))
				Set:li'="" tOutletId = $G(tCityDistribution(li),1)

				Set tCity = ##class(Outlet).%OpenId(tOutletId)
				Set tRecord.Outlet = tCity

				// keep running total (of rounded values) for budget
				If (tYear '= tCurrYear) {
					Set tDate = tYear_"-"_$$$iscPadZero(tMonth,2)
					Set tProductId = tProduct.%Id()
					// round up and add random variation
					Set tValue = ((tRecord.AmountOfSale+0.5)*100)\100
					If (tProductId["2") {
						Set tValue = tValue * 1.2
					}
					ElseIf (tProductId["9") {
						Set tValue = tValue * 0.8
					}
					If (tOutletId=3) {
						Set tValue = tValue * 1.2
					}
					ElseIf (tOutletId=8) {
						Set tValue = tValue * 0.8
					}
					Set tSalesTotal(tDate,tProductId,tOutletId) = $G(tSalesTotal(tDate,tProductId,tOutletId)) + tValue
				}
			}
			Else {
				Set tCity = tCities($R(tCityCount)+1)
				Set tRecord.Outlet = tCity
			}

			// for U.S. cities we can add more customer info
			If ($IsObject(tRecord.Outlet) && (tRecord.Outlet.Country.Name = "USA")) {
				If (..GetCustomerLocation(tRecord.Outlet.City,.tZipCode,.tLat,.tLng)) {
					Set tRecord.ZipCode = tZipCode
					Set tRecord.Latitude = tLat
					Set tRecord.Longitude = tLng
				}
			}

			// test for skipped products
			If ($IsObject(tRecord.Outlet) && $IsObject(tRecord.Product)) {
				Set tRegionName = tRecord.Outlet.Country.Region.Name
				Set tSKU = tRecord.Product.SKU
				If ((tRegionName'="")&&(tSKU'="")){
					If $D(tSkipProduct(tRegionName,tSKU)) {
                          Set tRecord.Product = tDefaultProduct
 					}
				}
			}

   			Set tSC = tRecord.%Save()
			If $$$ISERR(tSC) {
				Do $System.Status.DisplayError(tSC)
			}
			Else {
				Set tRows = tRows + 1
			}
			If (pVerbose&&('(tRows#1000))) Write $C(13,27)_"[0J"_$FN(tRows,",",0)_" rows created"
		}

		If (pNewBuild) {
			// create budget records for current year
			Set tGrowth = 1.1
			
			// take last full year actuals and multiply by growth
			For m =1:1:12 {
				Set tDate = (tCurrYear-1)_"-"_$$$iscPadZero(m,2)
				Set tCurrDate = (tCurrYear)_"-"_$$$iscPadZero(m,2)
				
				Set tProductId = $O(tSalesTotal(tDate,""))
				While (tProductId'="") {
					Set tOutletId = $O(tSalesTotal(tDate,tProductId,""))
					While (tOutletId'="") {
						Set tOldValue = tSalesTotal(tDate,tProductId,tOutletId)
						Set tSalesTotal(tCurrDate,tProductId,tOutletId) = tOldValue * tGrowth
						Set tOutletId = $O(tSalesTotal(tDate,tProductId,tOutletId))
					}
					Set tProductId = $O(tSalesTotal(tDate,tProductId))
				}
			}

			// insert budget records
			Set tDate = $O(tSalesTotal(""))
			While (tDate'="") {
				Set tProductId = $O(tSalesTotal(tDate,""))
				While (tProductId'="") {
					Set tOutletId = $O(tSalesTotal(tDate,tProductId,""))
					While (tOutletId'="") {

						Set tRecord = ##class(Transaction).%New()
						Set tRecord.Actual = 0
						Set tRecord.TargetAmount = tSalesTotal(tDate,tProductId,tOutletId)
						Do tRecord.ProductSetObjectId(tProductId)
						Do tRecord.OutletSetObjectId(tOutletId)
						Set tRecord.DateOfSale = +$ZDTH(tDate_"-01",3)
						Set tSkip = 0

						// test for skipped products
						If ($IsObject(tRecord.Outlet) && $IsObject(tRecord.Product)) {
							Set tRegionName = tRecord.Outlet.Country.Region.Name
							Set tSKU = tRecord.Product.SKU
							If ((tRegionName'="")&&(tSKU'="")){
								If $D(tSkipProduct(tRegionName,tSKU)) {
									Set tSkip = 1
								}
							}
						}
						If ('tSkip) {
							Set tSC = tRecord.%Save()
						}
						If $$$ISERR(tSC) {
							Do $System.Status.DisplayError(tSC)
						}
						Else {
							Set tRows = tRows + 1
						}
						If (pVerbose&&('(tRows#1000))) Write $C(13,27)_"[0J"_$FN(tRows,",",0)_" rows created"
						Set tOutletId = $O(tSalesTotal(tDate,tProductId,tOutletId))
					}
					Set tProductId = $O(tSalesTotal(tDate,tProductId))
				}
				Set tDate = $O(tSalesTotal(tDate))
			}
		}

		If (pVerbose) Write $C(13,27)_"[0J"_$FN(+$G(tRows),",",0)_" row(s) created"

		// Kill geodata index
		Kill ^||HoleFoods.GeoData
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}

	If $$$ISERR(tSC) {
		Do $System.Status.DisplayError(tSC)
	}
]]></Implementation>
</Method>

<Method name="CreateGeoIndex">
<Description>
Create a temp index of geo locations in the US.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pRegionList]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Kill ^||HoleFoods.GeoData

		// loop over cities in USA
		// build index of zipcode near each city
		// not very efficient, but this is a demo!
		// Set tRegionList("N. America","USA","Boston") = $LB(3406829,42.3612,-78.0824)
		Set tStoreCity = $O(pRegionList("N. America","USA",""),1,tStoreData)
		While (tStoreCity'="") {
			Set tStoreLat = $LG(tStoreData,2)
			Set tStoreLng = $LG(tStoreData,3)

			// visit each zip code
			Set z = $O(^ZipCodeData(""),1,tData)
			While (z'="") {
				Set tLat = $LG(tData,4)
				Set tLng = $LG(tData,3)
				If ((tLat'="")&&(tLng'="")) {
					Set d = ((tStoreLat-tLat)*(tStoreLat-tLat)) + ((tStoreLng-tLng)*(tStoreLng-tLng))
					If (d < 10) {
						Set nx = $I(^||HoleFoods.GeoData(tStoreCity))
						Set ^||HoleFoods.GeoData(tStoreCity,nx) = $LB(z,tLat,tLng)
					}
				}
				Set z = $O(^ZipCodeData(z),1,tData)
			}

			Set tStoreCity = $O(pRegionList("N. America","USA",tStoreCity),1,tStoreData)
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetCustomerLocation">
<Description>
Get city, latitude, and longitude for customer near the given store.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStoreCity:%String,*pZipCode:%String,*pLatitude:%Double,*pLongitude:%Double</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If $D(^||HoleFoods.GeoData) {
		// find city near the store
		Set nc = +$G(^||HoleFoods.GeoData(pStoreCity))

		If (nc>0) {
			Set n = $R(nc) + 1
			Set tZipData = $G(^||HoleFoods.GeoData(pStoreCity,n))
			If (tZipData'="") {
				Set pZipCode = $LG(tZipData,1)
				Set pLatitude = $LG(tZipData,2)
				Set pLongitude = $LG(tZipData,3)
				Quit 1
			}
		}
	}
	Quit 0
]]></Implementation>
</Method>

<Method name="CreateComment">
<Description>
Return a random comment for a transaction.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tComment = ""

	Set tSubject($I(tSubject)) = "Customer"
	Set tSubject($I(tSubject)) = "Shopper"

	Set tVerb($I(tVerb)) = " complained about"
	Set tVerb($I(tVerb)) = " complained about"
	Set tVerb($I(tVerb)) = " complained about"
	Set tVerb($I(tVerb)) = " ranted about"
	Set tVerb($I(tVerb)) = " was happy about"
	Set tVerb($I(tVerb)) = " commented on"

	Set tObject($I(tObject)) = " prices"
	Set tObject($I(tObject)) = " high prices"
	Set tObject($I(tObject)) = " outrageous prices"
	Set tObject($I(tObject)) = " ridiculous prices"
	Set tObject($I(tObject)) = " freshness"
	Set tObject($I(tObject)) = " quality"
	Set tObject($I(tObject)) = " service"
	Set tObject($I(tObject)) = " coupons"
	Set tObject($I(tObject)) = " advertising"
	Set tObject($I(tObject)) = " cashier"
	Set tObject($I(tObject)) = " appearance of store"
	Set tObject($I(tObject)) = " availability of items"

	Set tComment = tSubject($R(tSubject)+1) _ tVerb($R(tVerb)+1) _ tObject($R(tObject)+1)
	Quit tComment
]]></Implementation>
</Method>

<Method name="ChangeProductName">
<Description>
Change the (display) name of the specified product.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProductID:%String,pNewName:%String</FormalSpec>
<Implementation><![CDATA[
	Set tProduct = ##class(Product).%OpenId(pProductID)
	If $IsObject(tProduct) {
		Set tProduct.Name = pNewName
		Set tSC = tProduct.%Save()
		If $$$ISERR(tSC) {
			Do $System.Status.DisplayError(tSC)
			Quit
		}
	}
	Else {
		Write "Product not found: ",pProductID,!
	}
]]></Implementation>
</Method>

<Method name="AddProduct">
<Description>
Add a new product and update the cube.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRecordID:%String,pSKU:%String,pNewName:%String</FormalSpec>
<Implementation><![CDATA[
	Set tRecord = ##class(Transaction).%OpenId(pRecordID)
	If $IsObject(tRecord) {
		Set tProduct = ##class(Product).%New()
		Set tProduct.SKU = pSKU
		Set tProduct.Name = pNewName
		Set tProduct.Price = 2.95
		Set tSC = tProduct.%Save()
		If $$$ISERR(tSC) {
			Do $System.Status.DisplayError(tSC)
			Quit
		}
		Set tRecord.Product = tProduct
		Set tSC = tRecord.%Save()
		If $$$ISERR(tSC) {
			Do $System.Status.DisplayError(tSC)
			Quit
		}
		// Update cube
		Set tSC = ##class(Cube).%UpdateFacts(pRecordID)
		If $$$ISERR(tSC) {
			Do $System.Status.DisplayError(tSC)
			Quit
		}
	}
	Else {
		Write "Record not found: ",pRecordID,!
	}
]]></Implementation>
</Method>

<Method name="ChangeMeasure">
<Description>
Add a new product and update the cube.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRecordID:%String,pUnitsSold:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set tRecord = ##class(Transaction).%OpenId(pRecordID)
	If $IsObject(tRecord) {
		Set tRecord.UnitsSold = pUnitsSold
		Set tRecord.AmountOfSale = pUnitsSold * tRecord.Product.Price
		Write "Product: ",tRecord.Product.Name,!
		Set tSC = tRecord.%Save()
		If $$$ISERR(tSC) {
			Do $System.Status.DisplayError(tSC)
			Quit
		}
		// Update cube
		Set tSC = ##class(Cube).%UpdateFacts(pRecordID)
		If $$$ISERR(tSC) {
			Do $System.Status.DisplayError(tSC)
			Quit
		}
	}
	Else {
		Write "Record not found: ",pRecordID,!
	}
]]></Implementation>
</Method>

<Method name="ChangeCity">
<Description>
Add a new product and update the cube.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRecordID:%String,pNewCityID:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set tRecord = ##class(Transaction).%OpenId(pRecordID)
	If $IsObject(tRecord) {
		If ($IsObject(tRecord.Outlet)) {
			Set tCity = tRecord.Outlet.City
		}
		Set tRecord.Outlet = ##class(Outlet).%OpenId(pNewCityID)
		Set tSC = tRecord.%Save()
		If $$$ISERR(tSC) {
			Do $System.Status.DisplayError(tSC)
			Quit
		}
		// Update cube
		Set tSC = ##class(Cube).%UpdateFacts(pRecordID)
		If $$$ISERR(tSC) {
			Do $System.Status.DisplayError(tSC)
			Quit
		}
	}
	Else {
		Write "Record not found: ",pRecordID,!
	}
]]></Implementation>
</Method>

<Method name="SetupTermLists">
<Description>
Purely for demo purposes, this method defines term lists used by this sample.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set name="Region Colors"
	set uname="REGION COLORS"
	write "Defining term list ",name,"...",!
	
	//cannot assume the following will work from release to release; replace with use of API when available
	kill ^DeepSee.TermList(uname)
	set ^DeepSee.TermList(uname,"name")=name
	set ^DeepSee.TermList(uname,"modDate")=$zdt($h,3)
	set ^DeepSee.TermList(uname,"data","Asia","VALUE")="Aqua"
	set ^DeepSee.TermList(uname,"data","Europe","VALUE")="BlueViolet"
	set ^DeepSee.TermList(uname,"data","N. America","VALUE")="rgb(255,0,0)"
	set ^DeepSee.TermList(uname,"data","S. America","VALUE")="#00ff00"
]]></Implementation>
</Method>

<Method name="SetupVariables">
<Description>
Purely for demo purposes, this method defines pivot variables used by this sample.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//cannot assume the following will work from release to release; replace with use of API when available

	write "Defining COMMISSIONPERCENTAGE pivot variable for HOLEFOODS cube",!
	kill ^DeepSee.Variables("HOLEFOODS","COMMISSIONPERCENTAGE")
	set ^DeepSee.Variables("HOLEFOODS","COMMISSIONPERCENTAGE")=$lb("CommissionPercentage","Commission Percentage","","0","literal","integer","manual","","0,5,10,11,12,13,14,15","")

	write "Defining YEAR pivot variable for HOLEFOODS cube",!
	kill ^DeepSee.Variables("HOLEFOODS","YEAR")
	set ^DeepSee.Variables("HOLEFOODS","YEAR")=$lb("Year","Year","","NOW","literal","string","kpi","HoleFoodsYears.kpi","","")
]]></Implementation>
</Method>
</Class>


<Class name="JavaDemo.JavaListSample">
<Description>

Caché classes for Java List Demo 
Version: $Revision: 1.1 $
Author:  Gerd Nachtsheim</Description>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60618,56433.560096</TimeCreated>

<Method name="GetListOfNames">
<Description><![CDATA[
Get a list of names<br> 
in: $list of IDs<br>
out: $list of names<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pList:%List</FormalSpec>
<ReturnType>%List</ReturnType>
<SqlName>GetListOfNames</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set tList = ""
	for tID = 1 : 1 : $ll(pList)
	{
		&sql(SELECT Name INTO :tName FROM Sample.Person WHERE ID = :tID)
		if (SQLCODE=0) set tList = tList _ $lb(tName)
	}
	quit tList
]]></Implementation>
</Method>

<Method name="GetListOfNamesByRef">
<Description><![CDATA[
Get a list of names by reference<br> 
in: $list of IDs by ref<br>
out: # of names<br>
     list of names in pList as $list]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pList:%List]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<SqlName>GetListOfNamesByRef</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set tList = ""
	for tID = 1 : 1 : $ll(pList)
	{
		&sql(SELECT Name INTO :tName FROM Sample.Person WHERE ID = :tID)
		if (SQLCODE=0) set tList = tList _ $lb(tName)
	}
	set pList = tList
	quit $ll(pList)
]]></Implementation>
</Method>
</Class>


<Class name="News.Article">
<Description><![CDATA[
Utility class to demonstrate iFind search capabilities with the News Aggregator demo.
For licensing reasons, the index is only created when <method>CopyFromDomain</method> is
invoked for the first time, as an iKnow license might not be available on the system.
See also the RefreshTable() method in the <class>News.NewsReader</class> class on how to 
query this index.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63001,62395.752096</TimeCreated>

<Property name="Agency">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Article">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="PubDate">
<Type>%DeepSee.Datatype.dateTime</Type>
</Property>

<Property name="SourceId">
<Type>%Integer</Type>
</Property>

<Property name="ExternalId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Method name="CopyFromDomain">
<Description><![CDATA[
Populates this table based on the data in the domain managed by <class>News.NewsDomain</class>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		// first ensure this table contains an iFind index.
		// We'll only generate this now to ensure there is an appropriate iKnow license for this system
		if '##class(%Dictionary.CompiledIndex).%ExistsId("News.Article||TxtIdx") {
			// Index TxtIdx On (Article) As %iFind.Index.Semantic(INDEXOPTION = 0, LANGUAGE = "*");
			set tIndex = ##class(%Dictionary.IndexDefinition).%New()
			set tIndex.Name = "TxtIdx"
			set tIndex.Properties = "Article"
			set tIndex.TypeClass = "%iFind.Index.Semantic"
			do tIndex.Parameters.SetAt("*", "LANGUAGE")
			set tClass = ##class(%Dictionary.ClassDefinition).%OpenId("News.Article")
			do tClass.Indices.Insert(tIndex)
			set tSC = tClass.%Save()
			quit:$$$ISERR(tSC)
			set (tClass,tIndex) = ""
			set tSC = $system.OBJ.Compile("News.Article", "-d")
			quit:$$$ISERR(tSC)
		}
		
		// erase any existing data
		set tSC = ..%DeleteExtent()
		quit:$$$ISERR(tSC)
		
		
		// retrieve the domain ID and relevant metadata field IDs
		set tDomainId = ##class(News.NewsDomain).%GetDomainId()
		set tPubDateField = ##class(%iKnow.Queries.MetadataAPI).GetFieldId(tDomainId, "PubDate")
		set tAgencyField = ##class(%iKnow.Queries.MetadataAPI).GetFieldId(tDomainId, "Agency")
		
		
		// populate the table using a single INSERT statement
		set tSQL = "INSERT INTO News.Article (SourceId, ExternalId, Article, Agency, PubDate) "_
					" SELECT s.SourceId, s.ExternalId, s.FullText Article, m2.Value Agency, m1.Value PubDate "_
		//			" 	DATEADD('second', $PIECE(m1.Value,',',2), DATEADD('day', $PIECE(m1.Value,',',1), {ts '1840-12-31'})) PubDate"_
					" FROM %iKnow_Objects.Source s, %iKnow_Objects.MetadataValue m1, %iKnow_Objects.MetadataValue m2 "_
					" WHERE s.DomainId = ? AND s.DomainId = m1.DomainId AND s.DomainId = m2.DomainId "_
					"	AND s.SourceId = m1.SourceId AND s.SourceId = m2.SourceId" _
					" 	AND m1.FieldId = ? AND m2.FieldId = ? "
		set tStatement = ##class(%SQL.Statement).%New()
		set tSC = tStatement.%Prepare(tSQL)
		quit:$$$ISERR(tSC)
		
		kill %objlasterror
		do tStatement.%Execute(tDomainId, tPubDateField, tAgencyField)
		set tSC = $g(%objlasterror,$$$OK)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^News.ArticleD</DataLocation>
<DefaultData>ArticleDefaultData</DefaultData>
<IdLocation>^News.ArticleD</IdLocation>
<IndexLocation>^News.ArticleI</IndexLocation>
<StreamLocation>^News.ArticleS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ArticleDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Agency</Value>
</Value>
<Value name="3">
<Value>Article</Value>
</Value>
<Value name="4">
<Value>PubDate</Value>
</Value>
<Value name="5">
<Value>SourceId</Value>
</Value>
<Value name="6">
<Value>ExternalId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="News.DeepSee.NewsArticle">
<Description><![CDATA[
This class represents a table of news articles, retrieved as &lt;item&gt; elements in an RSS feed.
<class>News.DeepSee.NewsCube</class> defines a DeepSee cube on top of the records in this table.
See the <method>LoadFromRSS</method> and <method>Populate</method> methods for more information on
how to load data into this table. ]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63147,35593.565069</TimeCreated>

<Parameter name="DSTIME">
<Internal>1</Internal>
<Default>AUTO</Default>
</Parameter>

<Property name="Link">
<Description><![CDATA[
URL to the actual article, as retrieved from the &lt;link&gt; element in the RSS item.
Typically this refers to the full article, where the RSS item only contained one or two
sentences.]]></Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Title">
<Description><![CDATA[
Article title, as retrieved from the &lt;title&gt; element in the RSS item.]]></Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Pubdate">
<Description><![CDATA[
Article publication date, as retrieved from the &lt;pubDate&gt; element in the RSS item.]]></Description>
<Type>%DeepSee.Datatype.dateTime</Type>
</Property>

<Property name="Agency">
<Description><![CDATA[
User-specified identifier for the news agency publishing the article.
Passed to <method>LoadFromRSS</method> when loading this table.]]></Description>
<Type>%String</Type>
</Property>

<Method name="Populate">
<Description><![CDATA[
Convenience method grouping a few calls to <method>LoadFromRSS</method>.
Add more calls to other RSS feeds as desired.
If <var>pClearFirst</var>=1, existing records in this table will be deleted prior to loading new entries.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClearFirst:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		
		if (pClearFirst) {
			set tSC = ..%DeleteExtent()
			quit:$$$ISERR(tSC)
		}
		
		set tSC = ..LoadFromRSS("BBC", "feeds.bbci.co.uk", "/news/world/rss.xml")
		quit:$$$ISERR(tSC)
		set tSC = ..LoadFromRSS("CNN", "rss.cnn.com", "/rss/edition.rss")
		quit:$$$ISERR(tSC)
	
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="LoadFromRSS">
<Description><![CDATA[
<p>This method loads all items in an RSS feed as records into the table projected by this class.
<var>pServer</var> is the host name of the RSS server, and <var>pURL</var> the path on the 
server where the RSS feed can be accessed (include the leading "/"). For example, the BBC's
world news feed at "http://feeds.bbci.co.uk/news/world/rss.xml" yields "feeds.bbci.co.uk" for
<var>pServer</var> and "/news/world/rss.xml" for <var>pURL</var>.</p>
<p><var>pAgency</var> can be supplied to identify the agency publishing the RSS feed.</p>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pAgency:%String,pServer:%String,pURL:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		// send the HTTP request for the RSS feed
		set tRequest = ##class(%Net.HttpRequest).%New()
		set tRequest.Server = pServer
		set tSC = tRequest.Get(pURL)
		quit:$$$ISERR(tSC)
		
		// parse the output stream using %iKnow.Source.RSS.SaxContentHandler
		set tStream = tRequest.HttpResponse.Data
		set tHandler = ##class(%iKnow.Source.RSS.SaxContentHandler).%New()
		set tSC = ##class(%XML.SAX.Parser).ParseStream(tStream, tHandler)
		do:$$$ISERR(tSC) ..ReEncode(.tSC, .tStream, .tHandler)
		quit:$$$ISERR(tSC)
		
		// loop through the parsed results
		do tHandler.GetItems(.tItems)
		for i = 1:1:tItems {
			
			// save an article record for each item
			set tArticle = ..%New()
			set tArticle.Pubdate = $g(tItems(i,"pubdate"))
			set tArticle.Title = $g(tItems(i,"title"))
			set tArticle.Link = $g(tItems(i,"link"))
			set tArticle.Agency = pAgency
			set tSC = tArticle.%Save()
			quit:$$$ISERR(tSC)
		}
		quit:$$$ISERR(tSC)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="ReEncode">
<Description>
Code to fix wrong XML encoding in source RSS (borrowed from %iKnow.Source.RSS.Lister)
This code is to be treated as a black box!</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pSC:%Status,&pStream:%Stream.Object,&pHandler:%XML.SAX.ContentHandler]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	try {
		quit:$system.Status.GetErrorCodes(pSC)'=6301
	
		// BDB242 - if we get an XSLT error, chances are the encoding spec does not match
		// the actual encoding, so try a few others before breaking off
			
		// first read characters from the start of the stream until we have the full xml spec
		do pStream.Rewind()
		set spec = "", char = ""
		while char'=">" {
			set len=1
			set char = pStream.Read(.len, .pSC)
			quit:$$$ISERR(pSC)
			quit:len<1
			set spec = spec _ char
		}
		quit:$$$ISERR(pSC)
		set spec = $translate($$$LOWER(spec), "'", """")
		
		set hasVersion = $find(spec, "version=""")
		set origVersion = $s(hasVersion:$e(spec,hasVersion,$find(spec,"""",hasVersion)-2), 1:"1.0")
		
		set hasEncoding = $find(spec, "encoding=""")
		set origEncoding = $s(hasEncoding:$e(spec,hasEncoding,$find(spec,"""",hasEncoding)-2), 1:"")
		
		do:($e(spec,1,5)'="<?xml") pStream.Rewind()
		
		// now prepare a stream containing everything but the encoding spec
		set tDataStream = ##class(%Stream.GlobalCharacter).%New(), len=32000
		set t8bit = $system.Version.IsUnicode()
		while len>0 {
			set tString = pStream.Read(.len, .pSC)
			quit:$$$ISERR(pSC)
			set:t8bit tString = $zconvert(tString, "O", "UTF8")
			do tDataStream.Write(tString)
		}
		quit:$$$ISERR(pSC)
		
		// try another encoding
		for encoding = "windows-1252","iso-8859-1","utf-8","utf-16" {
			continue:(encoding=origEncoding)
			
			set pStream = ##class(%Stream.TmpCharacter).%New()
			do pStream.WriteLine("<?xml version="""_origVersion_""" encoding="""_encoding_""" ?>")
			
			// append dataStream
			do tDataStream.Rewind()
			set pSC = pStream.CopyFromAndSave(tDataStream)
			quit:$$$ISERR(pSC)
			
			do pHandler.Reset()
			set pSC = ##class(%XML.SAX.Parser).ParseStream(pStream, pHandler)
			quit:$$$ISOK(pSC)
		}
		quit:$$$ISERR(pSC)
		
	} catch (ex) {
		set pSC = ex.AsStatus()
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^News.DeepSee.NewsArticleD</DataLocation>
<DefaultData>NewsArticleDefaultData</DefaultData>
<IdLocation>^News.DeepSee.NewsArticleD</IdLocation>
<IndexLocation>^News.DeepSee.NewsArticleI</IndexLocation>
<StreamLocation>^News.DeepSee.NewsArticleS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="NewsArticleDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Link</Value>
</Value>
<Value name="3">
<Value>Title</Value>
</Value>
<Value name="4">
<Value>Pubdate</Value>
</Value>
<Value name="5">
<Value>Agency</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="News.DeepSee.NewsCube">
<Description><![CDATA[
<p>This class defines a DeepSee cube on top of the news articles in <class>News.DeepSee.NewsArticle</class>.
In addition to a straightforward dimension on the publication date and news agency, the cube defines
an <a href="/csp/docbook/DocBook.UI.Page.cls?KEY=D2MODEL_ch_iknow#D2MODEL_iknow_measure">iKnow
measure</a> for dealing with the textual content of the article itself and an <a
href="/csp/docbook/DocBook.UI.Page.cls?KEY=D2MODEL_ch_iknow#D2MODEL_iknow_dim_entity">entity
dimenstion</a> on top of it.</p>
<p>Rather than having the text to be indexed readily available in a string or stream column, this
demo cube illustrates how more advanced logic can be invoked through a sourceExpression.
As the NewsArticle table only has a column containing the URL to the actual article, the expression
code (encapsulated in class method <method>GetArticleText</method>) will first need to issue an 
HTTP request to fetch the full article and then strip the HTML tags from the retrieved content to
get to the actual text.</p>
<p>Please note this is a demo to illustrate the concept, not necessarily a recommended implementation for cubes
on news articles. As a separate HTTP request will be issued for each individual fact row and each such
request can easily take a second, the cube build time will be significantly longer than in cases where
the article content has already been fetched upfront.</p>]]></Description>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63147,35540.178705</TimeCreated>

<XData name="Cube">
<Description>
This XData section provides the definition of the cube.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube name="NewsArchive" sourceClass="News.DeepSee.NewsArticle" displayName="News Archive" description="Demo cube illustrating how custom code can be used to fetch text content that is not readily available as a string or stream column. See the class reference for more details.">
<dimension name="PubDate" displayName="Publication date" sourceProperty="Pubdate" type="time" hasAll="true">
<hierarchy name="H1">
<level name="Year" timeFunction="Year" />
<level name="Month" timeFunction="MonthYear" />
<level name="Day" timeFunction="DayMonthYear" />
<level name="Hour" timeFunction="HourNumber" />
</hierarchy>
</dimension>
<dimension name="Agency" sourceProperty="Agency" type="data" hasAll="true">
<hierarchy name="H1">
<level name="Agency" />
</hierarchy>
</dimension>
<dimension name="Entities" type="iKnow" iKnowMeasure="ArticleText" iKnowType="entity" hasAll="true">
<hierarchy name="H1">
<level name="Entities" />
</hierarchy>
</dimension>

<measure name="ArticleText" displayName="Article text" type="iKnow" iKnowSource="string" sourceExpression="%cube.GetArticleText(%source.Link)" />

<listing name="Default" fieldList="Pubdate, Agency, Title, $$$IKLINK[ArticleText] Article" />
</cube>
]]></Data>
</XData>

<Method name="GetArticleText">
<Description><![CDATA[
This class method fetches the actual article content at <var>pLink</var> and strips HTML tags
from the raw text. See also <method>GetRawTextFromLink</method> and <method>StripHTML</method>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLink:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK, tStringValue = ""
	try {
		
		set tRawText = ..GetRawTextFromLink(pLink, .tSC)
		quit:$$$ISERR(tSC)
		
		set tStringValue = ..StripHTML(tRawText, .tSC)
		quit:$$$ISERR(tSC)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	if $$$ISERR(tSC) {
		set tLogFile = "DeepSeeUpdateNEWSARCHIVE"
		set tMsg = $system.Status.GetOneErrorText(tSC)
		do ##class(%DeepSee.Utils).%WriteToLog("UPDATE", tMsg, tLogFile)
	}
	quit tStringValue
]]></Implementation>
</Method>

<Method name="GetRawTextFromLink">
<Description><![CDATA[
Derives the server name and URL from <var>pLink</var> and then uses these to target a
<class>%Net.HttpRequest</class> at the article, returning its raw content as a string.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLink:%String,*pSC:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set pSC = $$$OK, tRawText = ""
	try {
		// derive server and path from pLink
		set pLink = $zstrip(pLink,"<>W")
		set pLink = $e(pLink,$find(pLink,"://"),*)
		set tFirstSlash = $find(pLink,"/")
		set tServer = $e(pLink,1,tFirstSlash-2)
		set tPath = $e(pLink,tFirstSlash-1,*)
		
		// send the HTTP request for the article
		set tRequest = ##class(%Net.HttpRequest).%New()
		set tRequest.Server = tServer
		set tSC = tRequest.Get(tPath)
		quit:$$$ISERR(tSC)
		
		set len = 32000
		while len>0 {
			set tString = tRequest.HttpResponse.Data.Read(.len, .pSC)
			quit:$$$ISERR(pSC)
			set tRawText = tRawText _ tString
		}
		
	} catch (ex) {
		set pSC = ex.AsStatus()
	}
	quit tRawText
]]></Implementation>
</Method>

<Method name="StripHTML">
<Description><![CDATA[
Strips HTML characters from <var>pRawText</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRawText:%String,*pSC:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// This code is a simplified version of the iKnow converter code in
	// %iKnow.Source.Converter.Html. To invoke the converter code directly:
	// quit ##class(%iKnow.Source.Converter.Html).StripHTML(pRawText,,,,.pSC)
	
	set pSC = $$$OK, tCleanText = ""
	try {
		for tTag = "b","i","span","u","a","font","em","strong","img","label","small","sup","sub" {
			set tReplaceTag(tTag) = " "
		}
	
		set tLowerText = $$$LOWER(pRawText)
		set tStartPos = $find(tLowerText,"<body")-5, tEndTag = ""
		set pRawText = $e(pRawText,tStartPos,*), tLowerText = $e(tLowerText,tStartPos,*)
		for {
			set tPos = $find(tLowerText,"<")
			quit:'tPos // no tag start found
			
			set tNextSpace = $f(tLowerText," ",tPos), tNextEnd = $f(tLowerText,">",tPos)
			set tTag = $e(tLowerText,tPos,$s(tNextSpace&&(tNextSpace<tNextEnd):tNextSpace, 1:tNextEnd)-2)
			if (tTag="script") || (tTag="style") {
				set tPosEnd = $find(tLowerText,">",$find(tLowerText,"</"_tTag,tPos))
			} else {
				set tPosEnd = tNextEnd
			}
			if 'tPosEnd { // 
				set tEndTag = $e(pRawText,tPos-1,*)
				set pRawText = $e(pRawText,1,tPos-2)
				quit
			}
			
			set tReplace = $s(tTag="":"", 1:$g(tReplaceTag(tTag),$c(13,10,13,10)))
			set pRawText = $e(pRawText,1,tPos-2) _ tReplace _ $e(pRawText,tPosEnd,*)
			set tLowerText = $e(tLowerText,1,tPos-2) _ tReplace _ $e(tLowerText,tPosEnd,*)
		}
		set tCleanText = $zstrip($zconvert(pRawText, "I", "HTML"),"<>=W")
		
	} catch (ex) {
		set pSC = ex.AsStatus()
	}
	quit tCleanText
]]></Implementation>
</Method>
</Class>


<Class name="News.MyNewsReader">
<Description><![CDATA[
<p>This ZEN page presents a simple News Aggregator UI in which a number of iKnow features
are demonstrated. Call the %Build() method on <class>News.NewsDomain</class> to populate 
the domain based on a number of RSS feeds and then run this page to get started.</p>
<p>To keep the code simple, the central table on this page just queries a simple SQL table 
<class>News.Results.Sources</class> that holds the results for the current user action. By
default the table will be populated with the most recent articles, but depending on filter 
selections or buttons clicked by the user, different queries (iKnow or SQL) will be used to
fill this table.</p>
<p><b>NOTE</b>: this page is the "blank" version of <class>News.NewsReader</class> intended
to be "implemented" throughout a number of exercises in an iKnow tutorial. This page should
contain all the plumbing code that is unrelated to iKnow, in order for students to be able
to focus on the iKnow aspects only.</p>]]></Description>
<IncludeCode>%IKInclude</IncludeCode>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62810,52536.116651</TimeCreated>

<Property name="Domain">
<Description>
ID of the domain used by this demo</Description>
<Type>%Integer</Type>
<InitialExpression>##class(News.NewsDomain).%GetDomainId()</InitialExpression>
</Property>

<Property name="DomainName">
<Description>
Name of the domain used by this demo</Description>
<Type>%String</Type>
<InitialExpression>##class(News.NewsDomain).%GetDomainName()</InitialExpression>
</Property>

<Property name="CurrentPage">
<Description>
Current page of results</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="CurrentAction">
<Description>
Current action, as selected by the user</Description>
<Type>%String</Type>
</Property>

<Property name="SelectedSource">
<Description>
Source ID as selected by the user when clicking on an action</Description>
<Type>%Integer</Type>
</Property>

<Property name="Agency">
<Description>
Agency filter, if selected by the user (Module 3, exercise 4)</Description>
<Type>%String</Type>
</Property>

<Property name="SelectedEntity">
<Description>
Entity ID as selected by the user when clicking on an entity (Module 3, exercise 6)</Description>
<Type>%Integer</Type>
</Property>

<Property name="Topic">
<Description>
Topic filter, if selected by the user (Module 4, exercise 4)</Description>
<Type>%String</Type>
</Property>

<Property name="FavoritesDictionary">
<Description>
Name of the dictionary containing "favorite terms" (Module 4, exercise 5)</Description>
<Type>%String</Type>
</Property>

<Property name="SummaryLength">
<Description>
Length of the summary to be displayed in the article reading pane (Module 3, exercise 6)</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Subtitle">
<Description><![CDATA[
Subtitle, as derived by <method>RefreshTables</method>]]></Description>
<Type>%String</Type>
<InitialExpression>"Recent articles"</InitialExpression>
</Property>

<Property name="InputConfig">
<Description>
Name of the configuration to use for indexing manual input</Description>
<Type>%String</Type>
<InitialExpression>"AllLanguages"</InitialExpression>
</Property>

<Property name="IFindSearchString">
<Description>
IFind search string as provided by the user (Module 5, exercise 5)</Description>
<Type>%String</Type>
</Property>

<XData name="Contents">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page title="News reader" layout="vertical" width="100%" height="100%" >
<titleBox title="News reader" titleStyle="font-size: 28px;" />
<hgroup width="100%" cellVAlign="middle">
<label id="lblSubtitle" label="#(%page.Subtitle)#" width="80%"
labelStyle="font-size: 20px;" />

<select label="Agency" id="selAgency"
onchange="zenPage.onChangeFilters();">
</select>
<spacer width="10" />

<select label="Topic" id="selTopic"
onchange="zenPage.onChangeFilters();">
</select>
<spacer width="10" />

<text onkeyup="zenPage.onTypeSearch(zenThis.getValue());return;" width="100" 
title="Enter iFind search string and press enter" label="Full-text search" />
<spacer width="10" />

<image src="deepsee/ds2_compose_44.png" enclosingStyle="padding-top:5px;"
   onclick="zen('modInput').show();" height="40" />
<spacer width="10" />
<image src="deepsee/ds2_house_44.png" enclosingStyle="padding-top:5px;"
   onclick="zenPage.reset();" height="40" />
</hgroup>

<spacer height="20" />

<tablePane id="tblSources" caption="Articles" rowSelect="false" showRowSelector="false"
sql="SELECT SourceId, ExternalId FROM NEWS_RESULTS.Sources" width="100%">
<column colName="ID" hidden="true" />
<column colName="ExternalId" hidden="true" />
<column header="Title" OnDrawCell="DrawSource" style="padding:5px; white-space:normal;" />
<column header="Agency" OnDrawCell="DrawSourceMeta" seed="Agency" />
<column header="Actions" OnDrawCell="DrawSourceActions" style="text-align:center;" />
</tablePane>

<hgroup width="100%" cellAlign="right">
<button caption="&lt;&lt;" onclick="zenPage.nextPage(-1);" />
<spacer width="5" />
<button caption="&gt;&gt;" onclick="zenPage.nextPage(+1);" />
</hgroup>

<modalGroup id="modArticle" >
<titleBox id="titArticle" />
<vgroup enclosingClass="articleText">
<html id="htmlArticle" OnDrawContent="DrawArticle" />
<hgroup cellAlign="right" width="100%" labelPosition="left">
<text title="Summary length" size="2" id="txtSummaryLength" onkeyup="zenPage.summarize();" />
<spacer width="20" />
<image src="deepsee/ds2_notepad_44.png" height="22" title="Indexing results"
	onclick="zenPage.goToUI('IndexingResults');" />
<spacer width="10" />
<image src="deepsee/ds2_palette_44.png" height="22" title="Matching results"
	onclick="zenPage.goToUI('MatchingResults');" />
</hgroup>
</vgroup>
</modalGroup>

<modalGroup id="modInput" labelPosition="left" cellStyle="padding-bottom:8px">
<titleBox title="Manual input" />
<text id="txtInputTitle" label="Title" size="50" />
<textarea id="txtInputText" cols="40" rows="10" label="Article" />
<hgroup cellAlign="right" width="100%">
<button caption="save" onclick="zenPage.submitInput();" />
</hgroup>
</modalGroup>

<modalGroup id="modMatches" >
<titleBox title="Matching results" />
<spacer height="10" />
<tablePane id="tblDictScores" >
</tablePane>
</modalGroup>

</page>
]]></Data>
</XData>

<Method name="RefreshTables">
<Description>
Refreshes the contents of the main sources table based on the values of the different page
properties containing the current action, user selections and filter criteria</Description>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC = $$$OK, tTitle = ""
	try {
		kill ^News.Results.Sources
		
		// create filter object (Module 3, exercise 4)
		// ...
		
		// append a topic filter if required (Module 4, exercise 4)
		// ...
		
		// populate sources table, based on ..CurrentAction (Module 3, exercise 4)
		// ..
		
		if (..CurrentAction = "") {
			
			// by default, just display the most recent articles
			set tSC = ##class(%iKnow.Queries.SourceAPI).GetByDomain("^News.Results.Sources", ..Domain, ..CurrentPage, 10)
			set tTitle = "Recent articles"_tTitle
			
		}
		quit:$$$ISERR(tSC)
		
		
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit $s($$$ISERR(tSC):$system.Status.GetErrorText(tSC), 1:tTitle)
]]></Implementation>
</Method>

<Method name="DrawSource">
<Description>
Draws the main characteristics of a source in the main table</Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSourceId = %query("SourceId")
	set tExtId = %query("ExternalId")
	
	// by default, just output the article's title
	set tTitle = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "Title", tExtId)
	
	// if no title specified, take the first sentence
	if (tTitle="") {
		do ##class(%iKnow.Queries.SentenceAPI).GetBySource(.tSentences, ..Domain, tSourceId, 1, 1)
		set tTitle = $lg($g(tSentences(1)),2)
	}
	write tTitle
		
	// now write key entities / clusters (Module 3, exercise 6)
	// ...
	if ($d(tEntities)) {
		write "<div class=""srcProfile"" >"
		set i = ""
		for {
			set i = $order(tEntities(i),1,tEntData)
			quit:i=""
			
			set tEntId = $li(tEntData,1)
			set tEntValue = $li(tEntData,2)
			
			// find related entities for each entity (Module 3, exercise 6)
			set tRelEntities = ""
			
			write:i>1 "-"
			write " <a title=""",tRelEntities,""" href=""javascript:zenPage.showByEntity(",tEntId,");"">", tEntValue, "</a> "
			
			// Display "add as favorite" button
			write:..FavoritesDictionary'="" "<a href=""#"" onclick=""zenPage.addFavorite('",tEntValue,"', 'entity');""><img src=""deepsee/ds2_star_44.png"" height=""15"" title=""Add as a favorite"" /></a>"
		}
		write "</div>"
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawSourceMeta">
<Description><![CDATA[
Draws a metadata field (passed in through <var>pSeed</var>) for a source in the main table]]></Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tExtId = %query("ExternalId")
	
	write ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, pSeed, tExtId)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawSourceActions">
<Description>
Draws the action buttons for a source in the main table</Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tExtId = %query("ExternalId"), tSrcId = %query("SourceId")
	
	write "<a href=""#"" onclick=""zenPage.readArticle(" _ tSrcId _ ");"" title=""Show article""><img src=""deepsee/ds2_glasses_44.png"" class=""action"" /></a>"
	write "&nbsp;&nbsp;<a href=""#"" onclick=""zenPage.showSimilar(" _ tSrcId _ ");"" title=""Show similar articles""><img src=""deepsee/ds2_radar_44.png"" class=""action"" /></a>"
	write "&nbsp;&nbsp;<a href=""#"" onclick=""zenPage.showMatches(" _ tSrcId _ ");"" title=""Show matches""><img src=""deepsee/ds2_palette_44.png"" class=""action"" /></a>"
	
	set tLink = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "Link", tExtId)
	if (tLink '= "") {
		write "&nbsp;&nbsp;<a href=""" _ tLink _ """ title=""Go to website""><img src=""deepsee/ds2_action_44.png"" class=""action"" /></a>"
	}
	
	if (..FavoritesDictionary'="") {
		write "&nbsp;&nbsp;<a href=""#"" onclick=""zenPage.addFavorite("_tSrcId_", 'source');"" title=""Add as favourite""><img src=""deepsee/ds2_star_44.png"" class=""action"" /></a>"
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawArticle">
<Description>
Display the article contents in the article reading popup</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		quit:'..SelectedSource
		
		// display all sentences for a source
		set tSC = ##class(%iKnow.Queries.SentenceAPI).GetBySource(.tSentences, ..Domain, ..SelectedSource, 0, 0)
		quit:$$$ISERR(tSC)
		
		// if a summary length is specified, display a summary instead (Module 3, exercise 6)
		
		// translate sentence IDs to positions (Module 4, exercise 3)
		// ...
		
		write "<p>"
		
		set i = ""
		for {
			set i = $order(tSentences(i), 1, tSentData)
			quit:i=""
			
			set tSentID = $li(tSentData,1), tSentValue = $li(tSentData,2)
			
			// Get the highlighted version of a sentence (Module 4, exercise 3)
			// ...
			
			write !,tSentValue
		}
		
		write "</p>"
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="IndexArticle">
<Description><![CDATA[
This method is called by <method>submitInput</method> and will index the submitted text
<var>pText</var> using direct text loading.]]></Description>
<FormalSpec>pTitle:%String,pText:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		
		// Process input text (Module 2, Exercise 4)
		// ...
		
		// Set appropriate metadata values for the new source (Module 3, Exercise 4)
		// ...
		
		// Match the new source (Module 4, Exercise 3)
		// ...
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit $s($$$ISERR(tSC):$system.Status.GetErrorText(tSC), 1:"OK")
]]></Implementation>
</Method>

<Method name="AddFavoriteTerm">
<Description>
Add favorite term to the Favorites dictionary, indexing all sources at the end
Module 4, exercise 5</Description>
<FormalSpec>pTerm:%String,pMatch:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		quit:..FavoritesDictionary=""
		set tURI = ":favorites:"_$$$LOWER(pTerm)
		
		// find the ID for the "My Favorites" dictionary and add pTerm as an item and term,
		// using tURI as its URI (Module 4, exercise 5)
		// ...
		
		// match sources, if requested
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit $s($$$ISERR(tSC):$system.Status.GetErrorText(tSC), 1:"OK")
]]></Implementation>
</Method>

<Method name="AddFavoriteSource">
<Description>
Add the top entities in a whole source as favorite terms to the Favorites dictionary
Module 4, exercise 5</Description>
<FormalSpec>pSourceId:%Integer,pCount:%Integer=5</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		quit:..FavoritesDictionary=""
		
		// find the top <pCount> entities for a source and add them to the favorites
		// dictionary using AddFavoriteTerm() (Module 4, exercise 5)
		// ...
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit $s($$$ISERR(tSC):$system.Status.GetErrorText(tSC), 1:"OK")
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
Ensure the main table is refreshed when opening the page a first time</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..RefreshTables()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetArticleInfo">
<Description>
Utility method: return information about the current source as a proxy object</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tObj = ##class(%ZEN.proxyObject).%New()
	set tObj.sourceId = ..SelectedSource
	set tObj.externalId = ##class(%iKnow.Queries.SourceAPI).GetExternalId(..Domain, ..SelectedSource)
	set tObj.title = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "Title", tObj.externalId)
	set tObj.pubDate = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "PubDate", tObj.externalId)
	set tObj.Agency = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "Agency", tObj.externalId)
	quit tObj
]]></Implementation>
</Method>

<Method name="reset">
<Description>
Resets the current action</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('CurrentAction', '');
	sc = zenPage.setProperty('Agency', '');
	sc = zenPage.setProperty('Topic', '');
	sc = zenPage.setProperty('IFindSearchString', '');
	zen('selAgency').setValue('');
	zen('selTopic').setValue('');
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="showSimilar">
<Description>
Triggers the "similarSources" action</Description>
<FormalSpec>srcId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('SelectedSource', srcId);
	sc = zenPage.setProperty('CurrentAction', 'similarSources');
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="showByEntity">
<Description>
Triggers the "byEntity" action</Description>
<FormalSpec>entId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('SelectedEntity', entId);
	sc = zenPage.setProperty('CurrentAction', 'byEntity');
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="nextPage">
<Description>
Browse to the next page</Description>
<FormalSpec>direction</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var page = parseInt(zenPage.getProperty('CurrentPage')) + direction;
	if (page<=0) { page = 1 }
	var sc = zenPage.setProperty('CurrentPage', page);
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="readArticle">
<Description>
Opens the article reading popup</Description>
<FormalSpec>srcId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('SelectedSource', srcId);
	var obj = zenPage.GetArticleInfo();
	zen('titArticle').setProperty('title', obj.title);
	zen('titArticle').refreshContents();
	zen('htmlArticle').refreshContents();
	zen('modArticle').show();
]]></Implementation>
</Method>

<Method name="showMatches">
<Description>
Opens the matches detail popup</Description>
<FormalSpec>srcId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('SelectedSource', srcId);
	zen('tblDictScores').refreshContents();
	zen('modMatches').show();
]]></Implementation>
</Method>

<Method name="summarize">
<Description>
In the article reading pane, refresh the article to display a summary of the selected length</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('SummaryLength', zen('txtSummaryLength').getValue());
	zen('htmlArticle').refreshContents();
]]></Implementation>
</Method>

<Method name="submitInput">
<Description>
This method is called when manual input is being submitted</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var title = zen('txtInputTitle').getValue();
	var text = zen('txtInputText').getValue();
	var sc = zenPage.IndexArticle(title, text);
	if (sc != 'OK') { alert(sc); }
	zenPage.endModal();
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="addFavorite">
<Description>
Drives adding favourites</Description>
<FormalSpec>favorite,type</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (type == 'entity') {
		var sc = zenPage.AddFavoriteTerm(favorite, 1);
	} else {
		var sc = zenPage.AddFavoriteSource(favorite);
	}
	if (sc != 'OK') { alert(sc); }
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="onChangeFilters">
<Description>
Utility method: refresh current view based on current filter values</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('Agency', zen('selAgency').getValue());
	var sc = zenPage.setProperty('Topic', zen('selTopic').getValue());
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="refreshAll">
<Description>
Utility method: refresh the main sources table and page subtitle</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var title = zenPage.RefreshTables();
	zen('lblSubtitle').setProperty('label', title);
	zen('tblSources').refreshContents();
]]></Implementation>
</Method>

<Method name="goToUI">
<Description>
Utility method: browse to a %iKnow.UI page</Description>
<FormalSpec>page</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var url = '_iKnow.UI.'+page+'.zen?&domain=' + zenPage.Domain + '&source=' + zenPage.SelectedSource;
	location.href = url;
]]></Implementation>
</Method>

<Method name="onTypeSearch">
<Description>
Utility method: launch iFind search from the search box</Description>
<FormalSpec>text</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (zenEvent && ((zenEvent.keyCode==13) || (zenEvent.which==13))) {
		var sc = zenPage.setProperty('IFindSearchString', text);
		sc = zenPage.setProperty('CurrentAction', 'iFind');
		zenPage.refreshAll();
	}
	return true;
]]></Implementation>
</Method>

<XData name="Style">
<Description>
Additional CSS styling for this page</Description>
<Data><![CDATA[
<style type="text/css">
body {
	padding: 20px;
	font-family: Calibri, Verdana;
}

.tpAction a:link {
	color: #A00000;
	text-decoration: none;
}
.tpAction a:hover {
	text-decoration: underline;
}

img.action {
	height: 22px;
}

.articleText {
	margin-top: 10px;
	margin-bottom: 10px;
	padding: 10px;
	border: 1px solid black;
	background: #ffffff;
}

.articleText p {
	margin-top: 10px;
	line-height: 1.3;
}

.matchF {
	border: 2px solid #FF9966;
	padding-right: 2px;
	padding-left: 2px;
	background: #FF9966;
}
.matchP {
	border: 2px solid #FF9966;
	padding-right: 2px;
	padding-left: 2px;
}

.srcProfile {
	margin-top: 10px;
	text-align: right;
}

</style>
]]></Data>
</XData>
</Class>


<Class name="News.NewsDomain">
<Description><![CDATA[
<p>This class defines the domain shape and contents for the News Aggregator demo/tutorial.
To build the domain, set the disabled property of the root &lt;domain&gt; element to "false",
compile this class and run the <method>%Build</method> method.</p>
<p>See also <class>News.NewsReader</class>.</p>

<p>Note: you can add more RSS feeds to the definition below by duplicating an &lt;rss&gt;
element and modifying its attributes to select the news feed of your choice.</p>]]></Description>
<Super>%iKnow.DomainDefinition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62810,42659.852763</TimeCreated>

<XData name="Domain">
<XMLNamespace>http://www.intersystems.com/iknow</XMLNamespace>
<Data><![CDATA[
<domain name="News Aggregator demo" allowCustomUpdates="true" disabled="true" >

<configuration name="News Aggregator demo.Configuration" detectLanguage="true" languages="en,de,es,fr,nl,pt" />
<parameter name="DefaultConfig" value="News Aggregator demo.Configuration" />

<metadata>
<field name="PubDate" dataType="DATE" />
<field name="Title" dataType="STRING" />
<field name="Link" dataType="STRING" />
<field name="Agency" dataType="STRING" />
<field name="Country" dataType="STRING" />
</metadata>

<data dropBeforeBuild="true" >

<rss serverName="feeds.bbci.co.uk" url="/news/world/rss.xml" textElements="title,description" >
<converter converterClass="%iKnow.Source.Converter.Html" />
<metadataValue field="Agency" value="BBC" />
<metadataValue field="Country" value="UK" />
</rss>

<rss serverName="lemonde.fr" url="/rss/tag/international.xml" textElements="title,description" >
<converter converterClass="%iKnow.Source.Converter.Html" />
<metadataValue field="Agency" value="Le Monde" />
<metadataValue field="Country" value="France" />
</rss>

<rss serverName="spiegel.de" url="/politik/ausland/index.rss" textElements="title,description" >
<converter converterClass="%iKnow.Source.Converter.Html" />
<metadataValue field="Agency" value="Der Spiegel" />
<metadataValue field="Country" value="Germany" />
</rss>

<rss serverName="ep00.epimg.net" url="/rss/internacional/portada.xml" textElements="description,content:encoded" >
<converter converterClass="%iKnow.Source.Converter.Html" />
<metadataValue field="Agency" value="El País" />
<metadataValue field="Country" value="Spain" />
</rss>

<rss serverName="rss.cnn.com" url="/rss/edition.rss" textElements="title,description" >
<converter converterClass="%iKnow.Source.Converter.Html" />
<metadataValue field="Agency" value="CNN" />
<metadataValue field="Country" value="USA" />
</rss>

<rss serverName="rss.cnn.com" url="/rss/edition_world.rss" textElements="title,description" >
<converter converterClass="%iKnow.Source.Converter.Html" />
<metadataValue field="Agency" value="CNN" />
<metadataValue field="Country" value="USA" />
</rss>

<!--
<rss serverName="feeds.folha.uol.com.br" url="/mundo/rss091.xml" textElements="title,description" >
<converter converterClass="%iKnow.Source.Converter.Html" />
<metadataValue field="Agency" value="Folha de Sao Paolo" />
<metadataValue field="Country" value="Brazil" />
</rss>

<rss serverName="www.df.cl" url="/prontus_df/site/edic/base/rss/inicio.xml" textElements="title,description" >
<converter converterClass="%iKnow.Source.Converter.Html" />
<metadataValue field="Agency" value="Diario Financiero" />
<metadataValue field="Country" value="Chile" />
</rss>
-->

</data>

<matching>
<dictionary name="International">
<item name="USA" uri=":international:usa" >
<term string="USA" />
<term string="US" />
<term string="United States" />
<term string="EEUU" />
</item>
<item name="UK" uri=":international:uk" >
<term string="UK" />
<term string="United Kingdom" />
</item>
<item name="Europe" uri=":international:europe" >
<term string="Europe" />
<term string="EU" />
<term string="European Union" />
</item>
<item name="Belgium" uri=":international:belgium" >
<term string="Belgium" />
<term string="Belgique" />
</item>
<item name="Germany" uri=":international:germany" >
<term string="Germany" />
<term string="Deutschland" />
</item>
<item name="France" uri=":international:france" >
<term string="France" />
</item>
<item name="Spain" uri=":international:spain" >
<term string="Spain" />
<term string="España" />
</item>
<item name="Brazil" uri=":international:brazil" >
<term string="Brazil" />
<term string="Brasil" />
</item>
<item name="Chile" uri=":international:chile" >
<term string="Chile" />
</item>
<item name="China" uri=":international:china" >
<term string="China" />
<term string="Chinese" />
</item>
<item name="Russia" uri=":international:russia" >
<term string="Russia" />
</item>
<item name="Japan" uri=":international:japan" >
<term string="Japan" />
<term string="Japanese" />
</item>
</dictionary>
<dictionary name="Sports">
<item name="Soccer" uri=":sports:soccer">
<term string="soccer" />
<term string="football" />
</item>
<item name="Cycling" uri=":sports:cycling">
<term string="cycling" />
<term string="bike" />
<term string="biking" />
</item>
<item name="Baseball" uri=":sports:baseball">
<term string="baseball" />
<term string="bat" />
<term string="honk" />
</item>
</dictionary>
<dictionary name="Entertainment">
<item name="Cinema" uri=":entertainment:cinema">
<term string="cinema" />
<term string="film" />
<term string="movie" />
</item>
<item name="Music" uri=":entertainment:music">
<term string="music" />
<term string="album" />
<term string="band" />
</item>
</dictionary>
</matching>
</domain>
]]></Data>
</XData>

<Method name="%OnAfterBuild">
<Description>
Populates a complementary table for the iFind search option in the NewsReader class</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDomainId:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// call the CopyFromDomain() method to load the table
	quit ##class(News.Article).CopyFromDomain()
]]></Implementation>
</Method>
</Class>


<Class name="News.NewsReader">
<Description><![CDATA[
<p>This ZEN page presents a simple News Aggregator UI in which a number of iKnow features
are demonstrated. Call the %Build() method on <class>News.NewsDomain</class> to populate 
the domain based on a number of RSS feeds and then run this page to get started.</p>
<p>To keep the code simple, the central table on this page just queries a simple SQL table 
<class>News.Results.Sources</class> that holds the results for the current user action. By
default the table will be populated with the most recent articles, but depending on filter 
selections or buttons clicked by the user, different queries (iKnow or SQL) will be used to
fill this table.</p>]]></Description>
<IncludeCode>%IKInclude</IncludeCode>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62810,43692.246071</TimeCreated>

<Property name="Domain">
<Description>
ID of the domain used by this demo</Description>
<Type>%Integer</Type>
<InitialExpression>##class(News.NewsDomain).%GetDomainId()</InitialExpression>
</Property>

<Property name="DomainName">
<Description>
Name of the domain used by this demo</Description>
<Type>%String</Type>
<InitialExpression>##class(News.NewsDomain).%GetDomainName()</InitialExpression>
</Property>

<Property name="CurrentPage">
<Description>
Current page of results</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="CurrentAction">
<Description>
Current action, as selected by the user</Description>
<Type>%String</Type>
</Property>

<Property name="SelectedSource">
<Description>
Source ID as selected by the user when clicking on an action</Description>
<Type>%Integer</Type>
</Property>

<Property name="Agency">
<Description>
Agency filter, if selected by the user (Module 3, exercise 4)</Description>
<Type>%String</Type>
</Property>

<Property name="SummaryLength">
<Description>
Length of the summary to be displayed in the article reading pane (Module 3, exercise 6)</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="SelectedEntity">
<Description>
Entity ID as selected by the user when clicking on an entity (Module 3, exercise 6)</Description>
<Type>%Integer</Type>
</Property>

<Property name="Topic">
<Description>
Topic filter, if selected by the user (Module 4, exercise 4)</Description>
<Type>%String</Type>
</Property>

<Property name="FavoritesDictionary">
<Description>
Name of the dictionary containing "favorite terms" (Module 4, exercise 5)</Description>
<Type>%String</Type>
<InitialExpression>"My Favorites"</InitialExpression>
</Property>

<Property name="Subtitle">
<Description><![CDATA[
Subtitle, as derived by <method>RefreshTables</method>]]></Description>
<Type>%String</Type>
<InitialExpression>"Recent articles"</InitialExpression>
</Property>

<Property name="InputConfig">
<Description>
Name of the configuration to use for indexing manual input</Description>
<Type>%String</Type>
<InitialExpression>"AllLanguages"</InitialExpression>
</Property>

<Property name="IFindSearchString">
<Description>
IFind search string as provided by the user (Module 5, exercise 5)</Description>
<Type>%String</Type>
</Property>

<XData name="Contents">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page title="News reader" layout="vertical" width="100%" height="100%" >
<titleBox title="News reader" titleStyle="font-size: 28px;" />
<hgroup width="100%" cellVAlign="middle">
<label id="lblSubtitle" label="#(%page.Subtitle)#" width="80%"
labelStyle="font-size: 20px;" />

<select label="Agency" id="selAgency"
queryClass="%iKnow.Queries.MetadataQAPI" queryName="GetFieldValues"
onchange="zenPage.onChangeFilters();">
<parameter value="#(%page.Domain)#" />
<parameter value="Agency" />
</select>
<spacer width="10" />

<select label="Topic" id="selTopic"
queryClass="%iKnow.Matching.DictionaryQAPI" queryName="GetDictionaries"
onchange="zenPage.onChangeFilters();">
<parameter value="#(%page.Domain)#" />
</select>
<spacer width="10" />

<text onkeyup="zenPage.onTypeSearch(zenThis.getValue());return;" width="100" 
title="Enter iFind search string and press enter" label="Full-text search" />
<spacer width="10" />

<image src="deepsee/ds2_compose_44.png" enclosingStyle="padding-top:5px;"
   onclick="zen('modInput').show();" height="40" />
<spacer width="10" />
<image src="deepsee/ds2_house_44.png" enclosingStyle="padding-top:5px;"
   onclick="zenPage.reset();" height="40" />
</hgroup>
<spacer height="20" />

<tablePane id="tblSources" caption="Articles" rowSelect="false" showRowSelector="false"
sql="SELECT SourceId, ExternalId FROM NEWS_RESULTS.Sources" width="100%">
<column colName="ID" hidden="true" />
<column colName="ExternalId" hidden="true" />
<column header="Title" OnDrawCell="DrawSource" style="padding:5px; white-space:normal;" />
<column header="Agency" OnDrawCell="DrawSourceMeta" seed="Agency" />
<column header="Actions" OnDrawCell="DrawSourceActions" style="text-align:center;" />
</tablePane>

<hgroup width="100%" cellAlign="right">
<button caption="&lt;&lt;" onclick="zenPage.nextPage(-1);" />
<spacer width="5" />
<button caption="&gt;&gt;" onclick="zenPage.nextPage(+1);" />
</hgroup>

<modalGroup id="modArticle" >
<titleBox id="titArticle" />
<vgroup enclosingClass="articleText">
<html id="htmlArticle" OnDrawContent="DrawArticle" />
<hgroup cellAlign="right" width="100%" labelPosition="left">
<text title="Summary length" size="2" id="txtSummaryLength" onkeyup="zenPage.summarize();" />
<spacer width="20" />
<image src="deepsee/ds2_notepad_44.png" height="22" title="Indexing results"
	onclick="zenPage.goToUI('IndexingResults');" />
<spacer width="10" />
<image src="deepsee/ds2_palette_44.png" height="22" title="Matching results"
	onclick="zenPage.goToUI('MatchingResults');" />
</hgroup>
</vgroup>
</modalGroup>

<modalGroup id="modInput" labelPosition="left" cellStyle="padding-bottom:8px">
<titleBox title="Manual input" />
<text id="txtInputTitle" label="Title" size="50" />
<textarea id="txtInputText" cols="40" rows="10" label="Article" />
<hgroup cellAlign="right" width="100%">
<button caption="save" onclick="zenPage.submitInput();" />
</hgroup>
</modalGroup>

<modalGroup id="modMatches" >
<titleBox title="Matching results" />
<spacer height="10" />
<tablePane id="tblDictScores" 
queryClass="%iKnow.Matching.MatchingQAPI" queryName="GetTotalDictionaryScoresBySourceId">
<parameter value="#(%page.Domain)#" />
<parameter value="#(%page.SelectedSource)#" />
</tablePane>
</modalGroup>

</page>
]]></Data>
</XData>

<Method name="RefreshTables">
<Description>
Refreshes the contents of the main sources table based on the values of the different page
properties containing the current action, user selections and filter criteria</Description>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC = $$$OK, tTitle = ""
	try {
		kill ^News.Results.Sources
		
		// for iFind, we'll build the results from a SQL query
		if (..CurrentAction = "iFind") && (..IFindSearchString'="") {
			
			// try to identify whether this is a regular expression search
			set tSearchString = ..IFindSearchString
			set tSearchOption = $s($find(tSearchString,"["):4, 1:0)
			
			// build SQL query
			set tQuery = "INSERT INTO News_Results.Sources (SourceId, ExternalId, ResultId) " _
							"SELECT SourceId, ExternalId, SourceId FROM News.Article " _
							"WHERE %ID %FIND search_index(News.Article.TxtIdx, ?, ?)"
			set tTitle = "iFind search results for '"_tSearchString_"'"
			
			// append Agency filter condition, if any (we'll ignore topic filters)
			if (..Agency'="") {
				set tQuery = tQuery _ " AND Agency = '"_..Agency_"'"
				set tTitle = tTitle _ " (" _ ..Agency _ ")"
			}
			
			set tStatement = ##class(%SQL.Statement).%New()
			set tSC = tStatement.%Prepare(tQuery)
			
			do tStatement.%Execute(tSearchString, tSearchOption)
			quit
		}
		
		// create filter object (Module 3, exercise 4)
		set tFilter = ""
		if (..Agency'="") {
			set tFilter = ##class(%iKnow.Filters.SimpleMetadataFilter).%New(..Domain, "Agency", "=", ..Agency)
			set tTitle = " ("_..Agency_")"
		}
		
		// append a topic filter if required (Module 4, exercise 4)
		if (..Topic'="") {
			
			set tFilter2 = ##class(%iKnow.Filters.SimpleMatchFilter).%New(..Domain, ..Topic, 1)
			
			// combine filters
			if (tFilter="") {
				set tFilter = tFilter2
			} else {
				set tGrpFilter = ##class(%iKnow.Filters.GroupFilter).%New(..Domain, 1)
				do tGrpFilter.AddSubFilter(tFilter)
				do tGrpFilter.AddSubFilter(tFilter2)
				set tFilter = tGrpFilter
			}
			
			// retrieve dictionary name
			set tDict = ##class(%iKnow.Objects.Dictionary).PKINDEXOpen(..Domain, ..Topic)
			set tTitle = tTitle _ " ("_tDict.Name_")"
			
		}
		
		// populate sources table
		if (..Topic'="") && (tDict.Name = ..FavoritesDictionary) {
			
			set tSC = ##class(%iKnow.Matching.MatchingAPI).GetTopSourcesByDictionary("^News.Results.Sources", ..Domain, ..Topic, ..CurrentPage,, tFilter)
			set tTitle = "Favorite articles "_tTitle
			
		} elseif (..CurrentAction = "similarSources") && ..SelectedSource {
			
			set tSelSourceExtId = ##class(%iKnow.Queries.SourceAPI).GetExternalId(..Domain, ..SelectedSource)
			set tSelSourceTitle = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "Title", tSelSourceExtId)
			
			// show the sources similar to ..SelectedSource (Module 3, exercise 4)
			set tSC = ##class(%iKnow.Queries.SourceAPI).GetSimilar("^News.Results.Sources", ..Domain, ..SelectedSource, ..CurrentPage,, tFilter)
			set tTitle = "Articles related to ""<i>"_tSelSourceTitle_"</i>"""_tTitle
			
		} elseif (..CurrentAction = "byEntity") && ..SelectedEntity {
			
			// show the sources containing a particular entity (Module 3, exercise 6)
			set tSC = ##class(%iKnow.Queries.SourceAPI).GetByEntityIds("^News.Results.Sources", ..Domain, ..SelectedEntity, ..CurrentPage,, tFilter)
			set tTitle = "Articles containing ""<i>"_##class(%iKnow.Queries.EntityAPI).GetValue(..Domain, ..SelectedEntity)_"</i>"""_tTitle
			
		} else {
			
			// by default, just display the most recent articles
			set tSC = ##class(%iKnow.Queries.SourceAPI).GetByDomain("^News.Results.Sources", ..Domain, ..CurrentPage,, tFilter)
			set tTitle = "Recent articles"_tTitle
			
		}
		quit:$$$ISERR(tSC)
		
		
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit $s($$$ISERR(tSC):$system.Status.GetErrorText(tSC), 1:tTitle)
]]></Implementation>
</Method>

<Method name="DrawSource">
<Description>
Draws the main characteristics of a source in the main table</Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSourceId = %query("SourceId")
	set tExtId = %query("ExternalId")
	
	// by default, just output the article's title
	set tTitle = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "Title", tExtId)
	
	// if no title specified, take the first sentence
	if (tTitle="") {
		do ##class(%iKnow.Queries.SentenceAPI).GetBySource(.tSentences, ..Domain, tSourceId, 1, 1)
		set tTitle = $lg($g(tSentences(1)),2)
	}
	write "<span style=""white-space:normal;"">",tTitle,"</span>"
		
	// now write key entities / clusters (Module 3, exercise 6)
	//set tSC = ##class(%iKnow.Semantics.ProximityAPI).GetClustersBySource(.tEntities, ..Domain, tSourceId, 1, 5)
	//set tSC = ##class(%iKnow.Semantics.DominanceAPI).GetProfileBySource(.tEntities, ..Domain, tSourceId, 1, 5, $$$SDCONCEPT)
	set tSC = ##class(%iKnow.Queries.EntityAPI).GetTop(.tEntities, ..Domain, 1, 5, tSourceId)
	quit:$$$ISERR(tSC)
	if ($d(tEntities)) {
		write "<div class=""srcProfile"" >"
		set i = ""
		for {
			set i = $order(tEntities(i),1,tEntData)
			quit:i=""
			
			set tEntId = $li(tEntData,1)
			set tEntValue = $li(tEntData,2)
			
			// Gather related entities for this entity
			set tRelEntities = ""
			set tSC = ##class(%iKnow.Queries.EntityAPI).GetRelatedById(.tRelEnts, ..Domain, tEntId, 1, 5)
			quit:$$$ISERR(tSC)
			set j = ""
			for {
				set j = $order(tRelEnts(j), 1, tRelEntData)
				quit:j=""
				set:j>1 tRelEntities = tRelEntities _ " - "
				set tRelEntities = tRelEntities _ $li(tRelEntData,2)
			}
		
			write:i>1 " -"
			write " <a title=""",tRelEntities,""" href=""javascript:zenPage.showByEntity(",tEntId,");"">", tEntValue, "</a>"
			
			// Display "add as favorite" button
			write:..FavoritesDictionary'="" "<a href=""#"" onclick=""zenPage.addFavorite('",tEntValue,"', 'entity');""><img src=""deepsee/ds2_star_44.png"" height=""15"" title=""Add as a favorite"" /></a>"
		}
		write "</div>"
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawSourceMeta">
<Description><![CDATA[
Draws a metadata field (passed in through <var>pSeed</var>) for a source in the main table]]></Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tExtId = %query("ExternalId")
	
	write ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, pSeed, tExtId)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawSourceActions">
<Description>
Draws the action buttons for a source in the main table</Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tExtId = %query("ExternalId"), tSrcId = %query("SourceId")
	
	write "<a href=""#"" onclick=""zenPage.readArticle(" _ tSrcId _ ");"" title=""Show article""><img src=""deepsee/ds2_glasses_44.png"" class=""action"" /></a>"
	write "&nbsp;&nbsp;<a href=""#"" onclick=""zenPage.showSimilar(" _ tSrcId _ ");"" title=""Show similar articles""><img src=""deepsee/ds2_radar_44.png"" class=""action"" /></a>"
	write "&nbsp;&nbsp;<a href=""#"" onclick=""zenPage.showMatches(" _ tSrcId _ ");"" title=""Show matches""><img src=""deepsee/ds2_palette_44.png"" class=""action"" /></a>"
	
	set tLink = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "Link", tExtId)
	if (tLink '= "") {
		write "&nbsp;&nbsp;<a href=""" _ tLink _ """ title=""Go to website""><img src=""deepsee/ds2_action_44.png"" class=""action"" /></a>"
	}
	
	if (..FavoritesDictionary'="") {
		write "&nbsp;&nbsp;<a href=""#"" onclick=""zenPage.addFavorite("_tSrcId_", 'source');"" title=""Add as favourite""><img src=""deepsee/ds2_star_44.png"" class=""action"" /></a>"
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawArticle">
<Description>
Display the article contents in the article reading popup</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		quit:'..SelectedSource
		
		// If a summary length is specified, display a summary instead (Module 3, exercise 6)
		if ('..SummaryLength) {
			set tSC = ##class(%iKnow.Queries.SentenceAPI).GetBySource(.tSentences, ..Domain, ..SelectedSource, 0, 0)
		} else {
			set tSC = ##class(%iKnow.Queries.SourceAPI).GetSummary(.tSentences, ..Domain, ..SelectedSource, ..SummaryLength)
		}
		quit:$$$ISERR(tSC)
		
		// translate sentence IDs to positions (Module 4, exercise 3)
		set tSource = ##class(%iKnow.Objects.Source).PKINDEXOpen(..Domain, ..SelectedSource)
		for tSentPos = 1:1:tSource.FirstSentenceId+tSource.SentenceCount {
			set tSentId = tSource.FirstSentenceId + tSentPos - 1
			set tSentMap(tSentId) = tSentPos
		} // TODO: WHY?
		
		set:..SelectedEntity tHighlights("ENTITY", ..SelectedEntity) = "<b>"
		set tHighlights("MATCH") = "<span class=""matchF"">"
		set tHighlights("MATCH", "PARTIAL") = "<span class=""matchP"">"
		
		write "<p>"
		
		set i = ""
		for {
			set i = $order(tSentences(i), 1, tSentData)
			quit:i=""
			
			set tSentID = $li(tSentData,1)
			
			// Get the highlighted version of a sentence (Module 4, exercise 3)
			write !,##class(%iKnow.Queries.SentenceAPI).GetHighlighted(..Domain, tSentID, .tHighlights,,,.tSC)
			quit:$$$ISERR(tSC)
		}
		
		write "</p>"
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="IndexArticle">
<Description><![CDATA[
This method is called by <method>submitInput</method> and will index the submitted text
<var>pText</var> using direct text loading.]]></Description>
<FormalSpec>pTitle:%String,pText:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		
		// Process input text (Module 2, Exercise 4)
		set tSC = $system.iKnow.IndexString(..DomainName, pTitle, pText, ..InputConfig, 0, .tSourceId)
		quit:$$$ISERR(tSC)
		
		// Retrieve the External ID of the newly created source
		set tNewExtId = ##class(%iKnow.Queries.SourceAPI).GetExternalId(..Domain, tSourceId)
		
		// Set appropriate metadata values (Module 3, Exercise 4)
		set tSC = ##class(%iKnow.Queries.MetadataAPI).SetValue(..Domain, "Title", tNewExtId, pTitle)
		quit:$$$ISERR(tSC)
		set tSC = ##class(%iKnow.Queries.MetadataAPI).SetValue(..Domain, "Agency", tNewExtId, "Manual input")
		quit:$$$ISERR(tSC)
		set tSC = ##class(%iKnow.Queries.MetadataAPI).SetValue(..Domain, "PubDate", tNewExtId, $horolog)
		quit:$$$ISERR(tSC)
		
		// Match the source (Module 4, Exercise 3)
		set tSC = ##class(%iKnow.Matching.MatchingAPI).MatchSource(..Domain, tSourceId)
		quit:$$$ISERR(tSC)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit $s($$$ISERR(tSC):$system.Status.GetErrorText(tSC), 1:"OK")
]]></Implementation>
</Method>

<Method name="AddFavoriteTerm">
<Description>
Add favorite term to the Favorites dictionary, indexing all sources at the end
Module 4, exercise 5</Description>
<FormalSpec>pTerm:%String,pMatch:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		quit:..FavoritesDictionary=""
		set tURI = ":favorites:"_$$$LOWER(pTerm)
		
		// find the ID for the "My Favorites" dictionary and add pTerm as an item and term,
		/// using tURI as its URI
		set tDictId = ##class(%iKnow.Matching.DictionaryAPI).GetDictionaryId(..Domain, ..FavoritesDictionary, .tSC)
		set:tDictId<=0 tDictId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionary(..Domain, ..FavoritesDictionary,,,, .tSC)
		quit:$$$ISERR(tSC)
		
		set tExists = ##class(%iKnow.Matching.DictionaryAPI).GetDictionaryItemIdByURI(..Domain, tURI, .tSC)
		quit:$$$ISERR(tSC)
		if 'tExists {
			set tDictItemId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryItemAndTerm(..Domain, tDictId, pTerm, tURI,, .tSC)
			quit:$$$ISERR(tSC)
		}
		
		if (pMatch) {
			set tSC = ##class(%iKnow.Matching.MatchingAPI).MatchSources(..Domain)
			quit:$$$ISERR(tSC)
		}
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit $s($$$ISERR(tSC):$system.Status.GetErrorText(tSC), 1:"OK")
]]></Implementation>
</Method>

<Method name="AddFavoriteSource">
<Description>
Add the top entities in a whole source as favorite terms to the Favorites dictionary
Module 4, exercise 5</Description>
<FormalSpec>pSourceId:%Integer,pCount:%Integer=5</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		quit:..FavoritesDictionary=""
		
		// find the top <pCount> entities for a source and add them to the favorites
		// dictionary using AddFavoriteTerm()
		set tSC = ##class(%iKnow.Queries.EntityAPI).GetTop(.tEntities, ..Domain, 1, pCount, pSourceId)
		quit:$$$ISERR(tSC)
		
		set i = ""
		for {
			set i = $order(tEntities(i), 1, tEntData)
			quit:i=""
			
			set tRes = ..AddFavoriteTerm($li(tEntData,2), 0)
			if (tRes'="OK") { set tSC = $$$ERROR($$$GeneralError, tRes) quit }
		}
		quit:$$$ISERR(tSC)
		
		set tSC = ##class(%iKnow.Matching.MatchingAPI).MatchSources(..Domain)
		quit:$$$ISERR(tSC)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit $s($$$ISERR(tSC):$system.Status.GetErrorText(tSC), 1:"OK")
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
Ensure the main table is refreshed when opening the page a first time</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..RefreshTables()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetArticleInfo">
<Description>
Utility method: return information about the current source as a proxy object</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set tObj = ##class(%ZEN.proxyObject).%New()
	set tObj.sourceId = ..SelectedSource
	set tObj.externalId = ##class(%iKnow.Queries.SourceAPI).GetExternalId(..Domain, ..SelectedSource)
	set tObj.title = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "Title", tObj.externalId)
	set tObj.pubDate = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "PubDate", tObj.externalId)
	set tObj.Agency = ##class(%iKnow.Queries.MetadataAPI).GetValue(..Domain, "Agency", tObj.externalId)
	quit tObj
]]></Implementation>
</Method>

<Method name="reset">
<Description>
Resets the current action</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('CurrentAction', '');
	sc = zenPage.setProperty('Agency', '');
	sc = zenPage.setProperty('Topic', '');
	sc = zenPage.setProperty('CurrentPage', 1);
	sc = zenPage.setProperty('IFindSearchString', '');
	zen('selAgency').setValue('');
	zen('selTopic').setValue('');
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="showSimilar">
<Description>
Triggers the "similarSources" action</Description>
<FormalSpec>srcId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('SelectedSource', srcId);
	sc = zenPage.setProperty('CurrentPage', 1);
	sc = zenPage.setProperty('CurrentAction', 'similarSources');
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="showByEntity">
<Description>
Triggers the "byEntity" action</Description>
<FormalSpec>entId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('SelectedEntity', entId);
	sc = zenPage.setProperty('CurrentPage', 1);
	sc = zenPage.setProperty('CurrentAction', 'byEntity');
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="nextPage">
<Description>
Browse to the next page</Description>
<FormalSpec>direction</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var page = parseInt(zenPage.getProperty('CurrentPage')) + direction;
	if (page<=0) { page = 1 }
	var sc = zenPage.setProperty('CurrentPage', page);
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="readArticle">
<Description>
Opens the article reading popup</Description>
<FormalSpec>srcId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('SelectedSource', srcId);
	var obj = zenPage.GetArticleInfo();
	zen('titArticle').setProperty('title', obj.title);
	zen('titArticle').refreshContents();
	zen('htmlArticle').refreshContents();
	zen('modArticle').show();
]]></Implementation>
</Method>

<Method name="showMatches">
<Description>
Opens the matches detail popup</Description>
<FormalSpec>srcId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('SelectedSource', srcId);
	zen('tblDictScores').refreshContents();
	zen('modMatches').show();
]]></Implementation>
</Method>

<Method name="summarize">
<Description>
In the article reading pane, refresh the article to display a summary of the selected length</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('SummaryLength', zen('txtSummaryLength').getValue());
	zen('htmlArticle').refreshContents();
]]></Implementation>
</Method>

<Method name="submitInput">
<Description>
This method is called when manual input is being submitted</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var title = zen('txtInputTitle').getValue();
	var text = zen('txtInputText').getValue();
	var sc = zenPage.IndexArticle(title, text);
	if (sc != 'OK') { alert(sc); }
	zenPage.endModal();
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="addFavorite">
<Description>
Drives adding favourites</Description>
<FormalSpec>favorite,type</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (type == 'entity') {
		var sc = zenPage.AddFavoriteTerm(favorite, 1);
	} else {
		var sc = zenPage.AddFavoriteSource(favorite);
	}
	if (sc != 'OK') { alert(sc); }
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="onChangeFilters">
<Description>
Utility method: refresh current view based on current filter values</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sc = zenPage.setProperty('Agency', zen('selAgency').getValue());
	var sc = zenPage.setProperty('Topic', zen('selTopic').getValue());
	zenPage.refreshAll();
]]></Implementation>
</Method>

<Method name="refreshAll">
<Description>
Utility method: refresh the main sources table and page subtitle</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var title = zenPage.RefreshTables();
	zen('lblSubtitle').setProperty('label', title);
	zen('tblSources').refreshContents();
]]></Implementation>
</Method>

<Method name="goToUI">
<Description>
Utility method: browse to a %iKnow.UI page</Description>
<FormalSpec>page</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var url = '_iKnow.UI.'+page+'.zen?&domain=' + zenPage.Domain + '&source=' + zenPage.SelectedSource;
	location.href = url;
]]></Implementation>
</Method>

<Method name="onTypeSearch">
<Description>
Utility method: launch iFind search from the search box</Description>
<FormalSpec>text</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (zenEvent && ((zenEvent.keyCode==13) || (zenEvent.which==13))) {
		var sc = zenPage.setProperty('IFindSearchString', text);
		sc = zenPage.setProperty('CurrentAction', 'iFind');
		zenPage.refreshAll();
	}
	return true;
]]></Implementation>
</Method>

<XData name="Style">
<Description>
Additional CSS styling for this page</Description>
<Data><![CDATA[
<style type="text/css">
body {
	padding: 20px;
	font-family: Calibri, Verdana;
}

.tpAction a:link {
	color: #A00000;
	text-decoration: none;
}
.tpAction a:hover {
	text-decoration: underline;
}

img.action {
	height: 22px;
}

.articleText {
	margin-top: 10px;
	margin-bottom: 10px;
	padding: 10px;
	border: 1px solid black;
	background: #ffffff;
}

.articleText p {
	margin-top: 10px;
	line-height: 1.3;
}

.matchF {
	border: 2px solid #FF9966;
	padding-right: 2px;
	padding-left: 2px;
	background: #FF9966;
}
.matchP {
	border: 2px solid #FF9966;
	padding-right: 2px;
	padding-left: 2px;
}

.srcProfile {
	margin-top: 10px;
	text-align: right;
	white-space: normal;
}

</style>
]]></Data>
</XData>
</Class>


<Class name="News.Results.Sources">
<StorageStrategy>CustomStorage</StorageStrategy>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62810,43331.540314</TimeCreated>

<Property name="ResultId">
<Type>%Numeric</Type>
</Property>

<Property name="SourceId">
<Type>%Integer</Type>
</Property>

<Property name="ExternalId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Index name="PKINDEX">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>ResultId</Properties>
<Unique>1</Unique>
</Index>

<Storage name="CustomStorage">
<Type>%Library.CacheSQLStorage</Type>
<StreamLocation>^News.Results.SourcesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<CounterLocation>^News.Results.SourcesINC</CounterLocation>
<SQLMap name="MainMap">
<Type>data</Type>
<Global>^News.Results.Sources</Global>
<Subscript name="1">
<Expression>{ResultId}</Expression>
</Subscript>
<Data name="ExternalId">
<Piece>2</Piece>
</Data>
<Data name="SourceId">
<Piece>1</Piece>
</Data>
</SQLMap>
</Storage>
</Class>


<Class name="News.Utils">
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63376,39806.976519</TimeCreated>

<Method name="Setup">
<Description><![CDATA[
Setup method to enable the News Reader demo domain. This needs to be called once after
installing the SAMPLES namespace. To subsequently load the domain, call <method>%Build</method>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pVerbose:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		do EnableIKnow^%SYS.cspServer("/csp/samples/")
	} catch (ex) {
		write !,"WARNING: failed to enable iKnow sample UI classes for this namespace."
	}

	set tSC = $$$OK
	try {
		
		// Enabling the News Reader demo domain.
		// Note that this step is only required ONCE, and for licensing reasons only, as the outcome of the compile-time
		// actions taken by an iKnow domain definition could not be packaged in the distributed SAMPLES 
		// database before knowing the license used by the actual Cache instance.
		
		write:pVerbose !,"Enabling News Reader domain..."
		set tSC = ..EnableDomainDefinition()
		quit:$$$ISERR(tSC)
		
		write:pVerbose !,"Calling ##class(News.NewsDomain).%Build()"
		set tSC = ##class(News.NewsDomain).%Build(pVerbose)
		quit:$$$ISERR(tSC)
		
		set tSC = ##class(%Library.RoutineMgr).GetWebServerPort(.tPort,.tServer,.tURLPrefix,.tURL)		
		write:pVerbose !,"All done.",!!,"You can access the News Reader at",!,tURL,"csp/samples/News.MyNewsReader.zen"
		write:pVerbose !,"To rebuild your domain in the future, just run ##class(News.NewsDomain).%Build()",!
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	if $$$ISERR(tSC) {
		write !,"An error occurred while setting up the Standalone Aviation Demo:",!
		do $system.OBJ.DisplayError(tSC)
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="EnableDomainDefinition">
<Description><![CDATA[
<p>Note that this step is only required for licensing reasons, as the outcome of the compile-time
actions taken by an iKnow domain definition could not be packaged in the distributed SAMPLES 
database before knowing the license used by the actual Cache instance.</p>
<p>DO NOT MODIFY OR USE THIS CODE OUTSIDE OF ITS INVOCATION BY <method>Setup</method>.</p>]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {		
		set tXData = ##class(%Dictionary.XDataDefinition).%OpenId("News.NewsDomain||Domain")
		set tNewStream = ##class(%Stream.TmpCharacter).%New()
		
		// modify first line:
		set tFirstLine = tXData.Data.ReadLine()
		set tFirstLine = $replace(tFirstLine,"disabled=""true""","")
		set tSC = tNewStream.WriteLine(tFirstLine)
		quit:$$$ISERR(tSC)
		
		while 'tXData.Data.AtEnd {
			set tLength = 32000
			set tLine = tXData.Data.ReadLine(.tLength, .tSC)
			quit:$$$ISERR(tSC)
			set tSC = tNewStream.WriteLine(tLine)
			quit:$$$ISERR(tSC)
		}
		
		set tSC = tXData.Data.Clear()
		quit:$$$ISERR(tSC)
		
		set tSC = tXData.Data.CopyFromAndSave(tNewStream)
		quit:$$$ISERR(tSC)
		
		set tSC = tXData.%Save()
		quit:$$$ISERR(tSC)
		
		set tSC = $system.OBJ.Compile("News.NewsDomain","c-d")
		quit:$$$ISERR(tSC)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="REST.DocServer">
<Description><![CDATA[
Provide a REST interface to the document server service
This UrlMap maps http requests to the classmethod to which it should be dispatched

Example usages. In these examples please replace the host name and port with appropriate
values for your situation.
<ol>
<li> Get the text of the class Samples/Sample.Person
</BR></BR>curl http://localhost:57772/csp/samples/docserver/class/samples/Sample.Person
</BR></BR></li>
<li>
Get a list of namespaces on the target server (plain/text)
</BR></BR>curl http://localhost:57772/csp/samples/docserver/namespaces
</BR></BR></li>

<li> Get a list of namespaces on the target server (jason format)
</BR></BR>curl -H "Accept:application/json" http://localhost:57772/csp/samples/docserver/namespaces
</BR></BR></li>
<li>
Display the contents of the http request ( shows how to manage cookies)
Set the UseSession Parameter to 1 to enable CSP SESSIONS
</BR></BR>curl -v -b cookie.txt -c cookie.txt http://localhost:57772/csp/samples/docserver/request
</BR></BR></li>
<li>
Echo the contents of a file sent to the server
</BR></BR>curl -v -X POST --data-binary @class.txt --header "Content-Type:text/plain" http://localhost:57772/csp/samples/docserver/echo 
</BR></BR></li>
<li>
Send the contents of a file representing the text of a class definition. Return a JSON encoded set of descriptors which define how the
text should be syntax colored.
</BR></BR>curl -v -X POST --data-binary @class.txt --header "Content-Type:text/plain" -H "Accept:application/json" http://localhost:57772/csp/samples/docserver/colorclass
</BR></BR></li>
<li>
Get a list of embedded languages for syntax coloring:
</BR></BR>curl -H "Accept:application/json" http://localhost:57772/csp/samples/docserver/languages
</BR></BR></li>
</ol>]]></Description>
<Super>%CSP.REST</Super>
<TimeChanged>64436,43918.505832</TimeChanged>
<TimeCreated>62705,58446.894878</TimeCreated>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/class/:namespace/:classname" Method="GET" Call="GetClass"/>
<Route Url="/namespaces" Method="GET" Call="REST.DocServer:GetNamespaces"/>
<Route Url="/request" Method="GET" Call="Request"/>
<Route Url="/request" Method="POST" Call="Request"/>
<Route Url="/echo" Method="POST" Call="Echo"/>
<Route Url="/colorclass" Method="POST" Call="ColorClass"/>
<Route Url="/languages" Method="GET" Call="GetColorLanguages"/>
</Routes>
]]></Data>
</XData>

<Method name="GetClass">
<Description>
This method returns the class text for the named cache class</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String,pClassname:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tStream As %Stream.Character
    
    Try {
        Set tSC=##class(%Compiler.UDL.TextServices).GetTextAsStream(pNamespace,pClassname,.tStream)
        If $$$ISERR(tSC) Quit
        
        #; Looks good
        Do tStream.OutputToDevice()
        
    } Catch (e) {
        Set tSC=e.AsStatus()
    }
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetNamespaces">
<Description>
This method returns a list of namespaces for this server</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim tList,tNS,tFilteredList,tValue As %String
    
    #; Get the list of namespaces
    Do List^%SYS.NAMESPACE(.tList)
    Set tNS="" For  {
    
        Set tNS=$Order(tList(tNS),1,tValue) If tNS="" Quit
    
        #; Only want namespaces which are enabled and are not remote
        If $List(tValue,1)=1&&$List(tValue,2)=0 {
            Set tFilteredList(tNS)=""
        }
    }
    
    #; If we have been asked for json
    If $Get(%request.CgiEnvs("HTTP_ACCEPT"))="application/json" {
        
        #; Set the response header to JSON
        Set %response.ContentType="application/json"
        
        #; Create a JSON proxy
        Set tProxy = ##class(%ZEN.proxyObject).%New()
        
        #; And a list to hold the namespaces
        Set tList=##class(%Library.ListOfDataTypes).%New()
        
        #; Add the namespaces to the list
        Set tNS="" For  {
            Set tNS=$Order(tFilteredList(tNS)) If tNS="" Quit
            Do tList.Insert(tNS)
        }
        
        #; Set the namespace property
        Set tProxy.namespaces=tList
        
        #; Output the JSON
        Do tProxy.%ToJSON()
        
    } else {
        
        Set tNS="" For  {
            Set tNS=$Order(tFilteredList(tNS)) If tNS="" Quit
            Write tNS,!
        }
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="Request">
<Description>
Return a dump of the request object</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set %response.ContentType="text/plain"
	Do $System.OBJ.Dump(%request)
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="Echo">
<Description>
Return the posted data</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set %response.ContentType=%request.ContentType
    
    Quit %request.Content.OutputToDevice()
]]></Implementation>
</Method>

<Method name="ColorClass">
<Description>
Given the source of a class as the request content (POST) return a representation of the
coloring for the class. If the client accepts json, then a json representation is returned as
an array. Each element of the array represents a line of source code. The element is itself an
array of coloring descriptors. Each descriptor is an object with containing the start (p)osition on
the line (zero based), the (c)ount of characters, the (l)anguage index and the (s)ymbol index. If
the client does not accept json then the tradicional CSV representation is returned.

Example:-

Input:
class ABC
{
   Property XYZ;
}

Output:
[
   [
       {"p":0, "c":5, "l":3, "s":4},
       {"p":5, "c":1, "l":3, "s":1},
       {"p":6, "c":3, "l":3, "s":5}
   ],
   [
       {"p":0, "c":1, "l":3, "s":8}
   ],
   [
       {"p":0, "c":4, "l":3, "s":1},
       {"p":4, "c":8, "l":3, "s":4},
       {"p":12, "c":1, "l":3, "s":1},
       {"p":13, "c":3, "l":3, "s":11},
       {"p":16, "c":1, "l":3, "s":8}
   ],
   [
       {"p":0, "c":1, "l":3, "s":8}
   ]
]</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim tRet As %Boolean
    #dim tMode As %String
    #dim e As %Exception.AbstractException
    
    Try {
        
        Kill %objlasterror
        Set tSyntaxColor=##class(%SyntaxColor).%New()
        If '$IsObject(tSyntaxColor) {
            If $Data(%objlasterror) {
                Set tSC=%objlasterror
            } else {
                Set tSC=$$$ERROR($$$FailedToNewClass,"%SyntaxColor")
            }
        }
        If $$$ISERR(tSC) Quit
        
        Kill %objlasterror
        Set tStream=##Class(%Stream.TmpCharacter).%New()
        If '$IsObject(tStream) {
            If $Data(%objlasterror) {
                Set tSC=%objlasterror
            } else {
                Set tSC=$$$ERROR($$$FailedToNewClass,"%Stream.TmpCharacter")
            }
        }
        If $$$ISERR(tSC) Quit
        
        #; Invoke the colorizer according to format required
        If $Get(%request.CgiEnvs("HTTP_ACCEPT"))="application/json" {
            
            #; Set the response header to JSON
            Set %response.ContentType="application/json"
        
            Set tMode="KME"
        } else {
            
            Set tMode="ACME"
        }
            
        Set tRet=tSyntaxColor.Color(%request.Content,tStream,"CLS",tMode)
        If tRet=0 { 
            Set tSC=$$$ERROR($$$GeneralError,tSyntaxColor.DLLResultCode)
            Quit
        }

        #; Return the results
        Set tSC=tStream.OutputToDevice()
        
    } catch (e) {
        Set tSC=e.AsStatus()
    }
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetColorLanguages">
<Description>
This method is used to retrieve a list of languages</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    #dim tLanguages As %String
    #dim tList As %Library.ListOfDataTypes
    #dim tI As %Integer
    
    Try {
        Kill %objlasterror
        Set tSyntaxColor=##class(%SyntaxColor).%New()
        If '$IsObject(tSyntaxColor) {
            
            If $Data(%objlasterror) {
                Set tSC=%objlasterror
            } else {
                Set tSC=$$$ERROR($$$FailedToNewClass,"%SyntaxColor")
            }
        }
        
        If $$$ISERR(tSC) Quit
        
        If tSyntaxColor.Languages(.tLanguages)'=1 ZT "ZF"
        
        #; If we have been asked for json
        If $Get(%request.CgiEnvs("HTTP_ACCEPT"))="application/json" {
            
            #; Set the response header to JSON
        	Set %response.ContentType="application/json"

            #; Create a JSON proxy
            Set tProxy = ##class(%ZEN.proxyObject).%New()
            
            #; And a list to hold the languages
            Set tList=##class(%Library.ListOfDataTypes).%New()
            
            #; Add the languages to the list
            For tI=1:1:$ListLength(tLanguages) {
             
                Set tLang=##class(%ZEN.proxyObject).%New()
                   
                Set tLang.Index = (tI-1)
                Set tLang.Name = ($List(tLanguages,tI))
                
                Do tList.Insert(tLang)
            }
            
            #; Set the languages property
            Set tProxy.languages=tList
            
            #; Output the JSON
            Do tProxy.%ToJSON()
            
        } else {
            For tI=1:1:$ListLength(tLanguages) Write !,tI," ",$List(tLanguages,tI)
        }
            
        
    } Catch (e) {
        Set tSC=e.AsStatus()
    }
    
    Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="SOAP.BaseService">
<Description>
SOAP.BaseService is the base class for all sample web services.
SOAP.BaseService illustrates moving error handling for all 
services into a common base class.
Currently SOAP.Demo is the only sample web service.</Description>
<Abstract>1</Abstract>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59203,11782.328</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
Namespace.
Each web service needs to supply this parameter.</Description>
<Default>http://tempuri.org</Default>
</Parameter>

<Parameter name="SERVICENAME">
<Description>
This is the name of our web service.
Each web service needs to supply this parameter.</Description>
<Default>SOAPBase</Default>
</Parameter>

<Method name="OnInternalFault">
<Description>
Override to fix the fault for our needs.
The OnInternalFault method will be called for all internal Cache errors
after the default Cache fault has been created.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fault:%SOAP.Fault,status:%Status</FormalSpec>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Do $system.Status.DecomposeStatus(status,.err)
	Set detail=$c(13,10)_"    <error xmlns='"_..Namespace()_"' >"_$c(13,10)
	Set detail=detail_"<special>Internal error detected.</special>"
	Set detail=detail_"     <text>"_$ZConvert(err(1),"O","HTML")_"</text>"_$c(13,10)
	Set detail=detail_"    </error>"_$c(13,10)
	Set fault.detail=detail
	Set fault.faultstring="Sample Web Service error"
	Quit
]]></Implementation>
</Method>

<Method name="ApplicationError">
<Description>
Create our own method to produce application specific SOAP faults.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String,error:%String,detail:%String=""</FormalSpec>
<Implementation><![CDATA[
	set fault=##class(%SOAP.Fault).%New()
	set fault.faultcode=code
	set fault.detail=detail
	set fault.faultstring=error
	// ReturnFault must be called to send the fault to the client.
	// ReturnFault will not return here.
	do ..ReturnFault(fault)
]]></Implementation>
</Method>

<Method name="StatusError">
<Description>
Application specific error based on status code</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>code:%String,status:%Status</FormalSpec>
<Implementation><![CDATA[
	Do $system.Status.DecomposeStatus(status,.err)
	Do ..ApplicationError(code,"application error",err(1))
]]></Implementation>
</Method>
</Class>


<Class name="SOAP.ByNameDataSet">
<Description>
A sample subclass of %XML.DataSet that implements a .Net typed dataset.</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%XML.DataSet</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59254,62679</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
The XML namespace for typed DataSets</Description>
<Default>http://tempuri.org/ByNameDataSet</Default>
</Parameter>

<Parameter name="CLASSNAME">
<Description>
The class name that contains the query for typed DataSet</Description>
<Default>Sample.Person</Default>
</Parameter>

<Parameter name="QUERYNAME">
<Description>
The query name for typed DataSet</Description>
<Default>ByName</Default>
</Parameter>
</Class>


<Class name="SOAP.Demo">
<Description><![CDATA[
A simple demonstration Web Service<BR>
To try this, visit
<A href="/csp/samples/SOAP.Demo.cls">/csp/samples/SOAP.Demo.cls</A>
This web service inherits from the SOAP.BaseService sample class 
 to pickup common error handling.]]></Description>
<Import>Sample</Import>
<IncludeCode>%soap</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>SOAP.BaseService</Super>
<TimeChanged>62271,44611.697859</TimeChanged>
<TimeCreated>58821,54577</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// The LOCATION parameter is no longer required, since it now defaults to the path used to request the WSDL. 

]]></Content>
</UDLText>

<Parameter name="NAMESPACE">
<Description>
Namespace. Change this to your own namespace when you deploy a service.</Description>
<Default>http://tempuri.org</Default>
</Parameter>

<Parameter name="SERVICENAME">
<Description>
This is the name of our web service.</Description>
<Default>SOAPDemo</Default>
</Parameter>

<Parameter name="SOAPHEADERS">
<Description>
The list of request SOAP headers that are supported by this web service.
Each entry in the comma separated list is of the form "headerElement:headerClassname".</Description>
<Default>LicenseInfo:SOAP.LicenseInfo</Default>
</Parameter>

<Method name="AddInteger">
<Description>
Adds two integers and returns the result.</Description>
<FormalSpec>Arg1:%Integer,Arg2:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit Arg1 + Arg2
]]></Implementation>
</Method>

<Method name="DivideInteger">
<FormalSpec>Arg1:%Integer,Arg2:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	// The fault for division by 0 will be trapped and adjusted by SOAP.BaseService.
	Quit Arg1/Arg2
]]></Implementation>
</Method>

<Method name="Mission">
<Description>
Returns a corporate mission statement.</Description>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ##class(%PopulateUtils).Mission()
]]></Implementation>
</Method>

<Method name="LookupCity">
<Description><![CDATA[
Returns the city and state for the given U.S. ZIP Code
packaged within a <class>Sample.Address</class> object.]]></Description>
<FormalSpec>zip:%String</FormalSpec>
<ReturnType>Sample.Address</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	// Error check that zip code is required.
	If $get(zip)="" {
		// Application specific fault generator from SOAP.BaseService sample.
		Do ..ApplicationError($$$FAULTClient,"Zip code not specified")
	}
	
	// Get LicenseInfo SOAP header and validate it if present.
	Set license = ..HeadersIn.GetAt("LicenseInfo")
	If license '= "" {
		// If any license information return ResponseInfo header
		Set response = ##class(SOAP.ResponseInfo).%New()
		Set response.ResponseCode = 0
		Set response.Response = "City returned"
		Do ..HeadersOut.SetAt(response,"ResponseInfo")

		// If registered user return SubscriptionInfoHeader
		Set registered = license.RegisteredUser
		If registered '= "" {
			Set subscription = ##class(SubscriptionInfo).%New()
			Set subscription.LicenseStatusCode = 0
			Set subscription.LicenseStatus = "Registered user: "_registered.UserID
			Set subscription.LicenseActionCode = 0
			Set subscription.LicenseAction = "Request Executed"
			Set subscription.RemainingHits = 99
			Set subscription.Amount = 0.0
			Do ..HeadersOut.SetAt(subscription,"SubscriptionInfo")
		}
	}

	// create an Address object to hold the result
	Set obj = ##class(Sample.Address).%New()

	// Use embedded SQL to perform the lookup
	&sql(SELECT City,State INTO :city, :state
			FROM Sample.USZipCode
			WHERE ZipCode = :zip )
			
	If (SQLCODE = 0) {
		// success			
		Set obj.City = city
		Set obj.State = state
		Set obj.Zip = zip
	}
	Else {
		// Application specific fault generator from SOAP.BaseService sample.
		Do ..ApplicationError($$$FAULTClient,"Zip code not found: "_zip)
	}

	Quit obj
]]></Implementation>
</Method>

<Method name="FindPerson">
<Description><![CDATA[
Returns data about the person in the database with
object ID of <var>id</var>.]]></Description>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>Sample.Person</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	// Return an instance of person.  Null is returned for invalid id.
	Quit ##class(Sample.Person).%OpenId(id)
]]></Implementation>
</Method>

<Method name="GetByName">
<Description>
A sample web method to invoke dynamic SQL to query the Sample.Person class and
   return the results as a .NET untyped DataSet</Description>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%XML.DataSet</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
 ; Return the results of the Person class' by name.
 Set result=##class(%XML.DataSet).%New()
 Set status=result.Prepare("SELECT ID, Name, DOB, SSN FROM Sample.Person WHERE Name %STARTSWITH ? ORDER BY Name")
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)
 Set result.DataSetName="ListByName"
 Set status=result.Execute(name)
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)
 Quit result
]]></Implementation>
</Method>

<Method name="GetListByName">
<Description>
A sample web method to invoke dynamic SQL to query the Sample.Person class and
return the results as a list of objects.</Description>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>Sample.ListOfPersonIdentification</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
 ; Create a result set for the Person class' by name.
 Set result=##class(%ResultSet).%New()
 Set status=result.Prepare("SELECT ID, Name, DOB, SSN FROM Sample.Person WHERE Name %STARTSWITH ? ORDER BY Name")
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)
 Set status=result.Execute(name)
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)

 ; Create a list of objects for the rows and populate the list.
 Set list=##class(Sample.ListOfPersonIdentification).%New()
 While result.Next(.status) {
	Set obj=##class(Sample.PersonIdentification).%New()
	Set obj.ID=result.Get("ID")
	Set obj.Name=result.Get("Name")
	Set obj.DOB=result.Get("DOB")
	Set obj.SSN=result.Get("SSN")
	Do list.Insert(obj)
 }
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)

 ; Return the list of objects.
 Quit list
]]></Implementation>
</Method>

<Method name="GetDataSetByName">
<Description>
A sample web method to invoke the ByName query of the Sample.Person class and
return the results as a .NET typed DataSet</Description>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>SOAP.ByNameDataSet</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
 ; Return the results of the Person class' ByName query.
 Set result=##class(SOAP.ByNameDataSet).%New()
 Set status=result.Execute(name)
 If $$$ISERR(status) Do ..StatusError($$$FAULTServer,status)
 Quit result
]]></Implementation>
</Method>

<Query name="QueryByName">
<Description><![CDATA[
A sample class query as a WebMethod that defines a typed dataset that returns Person data 
ordered by <property>Name</property>.<br>
This query also generates a WebMethod of the same name that may be called using SOAP
in order to return a typed .Net DataSet.]]></Description>
<Type>%SQLQuery</Type>
<FormalSpec>name:%String</FormalSpec>
<SqlQuery> SELECT ID, Name, DOB, SSN
 FROM Sample.Person
 WHERE (Name %STARTSWITH :name)
 ORDER BY Name</SqlQuery>
<WebMethod>1</WebMethod>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="SELECTMODE" value="RUNTIME"/>
</Query>
</Class>


<Class name="SOAP.DemoProxy">
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebClient</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59058,27569</TimeCreated>

<Parameter name="LOCATION">
<Description><![CDATA[
This is the URL used to access the web service.
Change <I>localhost</I> to the web service machine's 
IP address to access this service.]]></Description>
<Default>http://localhost/csp/samples/SOAP.Demo.cls</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
Namespace. Change this to the namespace used by the web service.</Description>
<Default>http://tempuri.org</Default>
</Parameter>

<Parameter name="SERVICENAME">
<Description>
This is the name of the web service.</Description>
<Default>SOAPDemo</Default>
</Parameter>

<Parameter name="SOAPHEADERS">
<Description>
The list of reesponse SOAP headers that are supported by this web service client.
Each entry in the comma separated list is of the form "headerElement:headerClassname".</Description>
<Default>ResponseInfo:SOAP.ResponseInfo,SubscriptionInfo:SOAP.SubscriptionInfo</Default>
</Parameter>

<Method name="AddInteger">
<Description>
Use web service to add two integers and returns the result.</Description>
<FormalSpec>Arg1:%Integer=0,Arg2:%Integer=0</FormalSpec>
<ReturnType>%Integer</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ..WebMethod("AddInteger").Invoke(##this,"http://tempuri.org/SOAP.Demo.AddInteger",Arg1,Arg2)
]]></Implementation>
</Method>

<Method name="Mission">
<Description>
Use web service to returns a corporate mission statement.</Description>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ..WebMethod("Mission").Invoke(##this,"http://tempuri.org/SOAP.Demo.Mission")
]]></Implementation>
</Method>

<Method name="RegisteredLookupCity">
<Description><![CDATA[
Returns the city and state for the given U.S. ZIP Code
packaged within a <class>Sample.Address</class> object.
The request is sent from a registered user.]]></Description>
<FormalSpec><![CDATA[zip:%String,user:%String,password:%String,&remainingHits:%Integer]]></FormalSpec>
<Implementation><![CDATA[
	// Create registered user license header.
	Set licenseHeader = ##class(SOAP.LicenseInfo).%New()
	Set registered = ##class(SOAP.RegisteredUser).%New()
	Set registered.UserID = user
	Set registered.Password = password
	Set licenseHeader.RegisteredUser = registered
	Do ..HeadersOut.SetAt(licenseHeader,"LicenseInfo")

	// Make LookupCity request
	Set address = ..LookupCity(zip)
	
	// Evaluate response headers
	Set responseInfo = ..HeadersIn.GetAt("ResponseInfo")
	If (responseInfo = "") || (responseInfo.ResponseCode '= 0) {
		Quit ""
	}
	Set subscription = ..HeadersIn.GetAt("SubscriptionInfo")
	If subscription = "" Quit ""
	Set remainingHits = subscription.RemainingHits
	
	Quit address
]]></Implementation>
</Method>

<Method name="UnregisteredLookupCity">
<Description><![CDATA[
Returns the city and state for the given U.S. ZIP Code
packaged within a <class>Sample.Address</class> object.
The request is sent from an unregistered user.]]></Description>
<FormalSpec>zip:%String,email:%String</FormalSpec>
<Implementation><![CDATA[
	// Create unregistered user license header.
	Set licenseHeader = ##class(SOAP.LicenseInfo).%New()
	Set unregistered = ##class(SOAP.UnregisteredUser).%New()
	Set unregistered.EmailAddress = email
	Set licenseHeader.UnregisteredUser = unregistered
	Do ..HeadersOut.SetAt(licenseHeader,"LicenseInfo")

	// Make LookupCity request
	Quit ..LookupCity(zip)
]]></Implementation>
</Method>

<Method name="LookupCity">
<Description><![CDATA[
Returns the city and state for the given U.S. ZIP Code
packaged within a <class>Sample.Address</class> object.]]></Description>
<FormalSpec>zip:%String</FormalSpec>
<ReturnType>Sample.Address</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ..WebMethod("LookupCity").Invoke(##this,"http://tempuri.org/SOAP.Demo.LookupCity",zip)
]]></Implementation>
</Method>

<Method name="FindPerson">
<Description><![CDATA[
Use web service to returns data about the person in the database with
object ID of <var>id</var>.]]></Description>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>Sample.Person</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ..WebMethod("FindPerson").Invoke(##this,"http://tempuri.org/SOAP.Demo.FindPerson",id)
]]></Implementation>
</Method>

<Method name="GetByName">
<Description>
A sample web method to invoke dynamic SQL to query the Sample.Person class and
   return the results as a .NET untyped DataSet</Description>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%XML.DataSet</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ..WebMethod("GetByName").Invoke(##this,"http://tempuri.org/SOAP.Demo.GetByName",name)
]]></Implementation>
</Method>

<Method name="GetListByName">
<Description>
A sample web method to invoke dynamic SQL to query the Sample.Person class and
return the results as a list of objects.</Description>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>Sample.ListOfPersonIdentification</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ..WebMethod("GetListByName").Invoke(##this,"http://tempuri.org/SOAP.Demo.GetListByName",name)
]]></Implementation>
</Method>

<Method name="GetDataSetByName">
<Description>
A sample web method to invoke the ByName query of the Sample.Person class and
return the results as a .NET typed DataSet</Description>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>SOAP.ByNameDataSet</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ..WebMethod("GetDataSetByName").Invoke(##this,"http://tempuri.org/SOAP.Demo.GetDataSetByName",name)
]]></Implementation>
</Method>

<Method name="DemoClient">
<Description>
A method to demonstrate using this proxy to act as a 
SOAP client to access our SOAP.Demo service.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>zip:%String,id:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set error=0
	Set $ztrap="ErrorTrap" ; handle client error ro SOAP fault.
	
	// Get the web service instance and the proxy class instance for the web service.
	Set proxy=##class(SOAP.DemoProxy).%New()
	Set service=##class(SOAP.Demo).%New()

	// Test AddInteger
	Set SOAPsum=proxy.AddInteger(23,76)
	Set sum=service.AddInteger(23,76)
	Write "AddInteger Test -- Expected sum = 99",!
	If SOAPsum=sum {
		If sum'=99 {
			Set error=1
			Write "    Unexpected sum = ",sum,!
		} Else {
			Write "    Sum = ",sum,!
		}
	} Else {
		Write "    Sums do not match",!
		Write "    Direct sum = ",sum,!
		Write "    SOAP sum = ",sum,!
	}

	// Test LookupCity
	Set SOAPcity=proxy.LookupCity(zip)
	Set city=service.LookupCity(zip)
	Write "LookupCity Test for zip = ",zip,!
	If (city.City=SOAPcity.City) && (city.State=SOAPcity.State) {
		Write "    SOAP and local calls agree.",!
		Write "    City = ",city.City,", State = ",city.State,!
	} Else {
		Write "    SOAP and local calls disagree.",!
		Write "    SOAP  -- City = ",SOAPcity.City,", State = ",SOAPcity.State,!
		Write "    Local -- City = ",city.City,", State = ",city.State,!
		Set error=1
	}
	
	// Test FindPerson
	Set SOAPperson=proxy.FindPerson(id)
	Set person=service.FindPerson(id)
	Write "FindPerson Test for id = ",id,!
	If ..comparePerson(SOAPperson,person) {
		Write "    SOAP and local calls agree.",!
		Do ..printPerson(person,"      ")
	} Else {
		Write "    SOAP and local calls disagree.",!
		Write "      Person returned via local call",!
		Do ..printPerson(person,"      ")
		Write "      Person returned via SOAP call",!
		Do ..printPerson(SOAPperson,"      ")
		Set error=1
	}

	// Test GetListByName
	Set SOAPlist=proxy.GetListByName("a")
	Set list=service.GetListByName("a")
	Write "GetListByName Test for name = a",!
	Set ok=1
	If SOAPlist.Count()'=list.Count() {
		Write "    SOAP and local calls disagree.",!
		Write "    SOAP count = ",SOAPlist.Count(),", local count = ",list.Count(),!
		Set ok=0
	}
	If ok=1 {
		For i=1:1:list.Count() {
			If '..comparePersonIdentification(SOAPlist.GetAt(i),list.GetAt(i)) {
				Set ok=0
				Quit
			}
		}
		If ok {
			Write "    SOAP and local calls agree.",!
		} Else {
			Write "    SOAP and local calls disagree.",!
		}
		For i=1:1:list.Count() {
			Write "    Local person ",i,!
			Do ..printPersonIdentification(list.GetAt(i))
			If 'ok {
				Write "    SOAP person ",i,!
				Do ..printPersonIdentification(SOAPlist.GetAt(i))
			}
		}
	}
	If 'ok Set error=1

	// Test GetByName
	Set SOAPresult=proxy.GetByName("a")
	Set result=service.GetByName("a")
	Write "GetByName Test for name = a",!
	Set ok=1
	If SOAPresult.GetColumnCount()'=result.GetColumnCount() {
		Write "    SOAP and local calls disagree.",!
		Write "    SOAP column count = ",SOAPresult.GetColumnCount(),", local column count = ",result.GetColumnCount(),!
		Set ok=0
	}
	Set status=$$$OK
	If ok=1 {
		For i=1:1:result.GetColumnCount() {
			If result.GetColumnName(i)'=SOAPresult.GetColumnName(i) {
				Set ok=0
				Write "    Column "_i_" name does not match, SOAP="_SOAPresult.GetColumnName(i)_", local="_result.GetColumnName(i),!
				Quit
			}
		}
	}
	If ok=1 {
		Set recnum=0
		While result.Next(.status) {
			Set recnum=recnum+1
			Write "    Record "_recnum,!
			If 'SOAPresult.Next() Set ok=0 Write "    Too few rows in SOAP result, SOAP="_SOAPresult.GetData(i)_", local="_result.GetData(i),! Quit
			For i=1:1:result.GetColumnCount() {
				Write "      "_result.GetColumnName(i)_" = "_result.GetData(i),!
				If result.GetData(i)'=SOAPresult.GetData(i) {
					Set ok=0
					Write "    Column "_i_" does not match",!
					Quit
				}
			}
			If 'ok Quit
		}
		If ok {
			Write "    SOAP and local calls agree.",!
		} Else {
			Write "    SOAP and local calls disagree.",!
		}
	}
	If $$$ISERR(status) Set ok=0 Do $system.OBJ.DisplayError(status)
	If SOAPresult.Next() Set ok=0 Write "Too many rows in SOAP result",!
	If 'ok Set error=1

	// Test GetDataSetByName
	Set SOAPresult=proxy.GetDataSetByName("a")
	Set result=service.GetDataSetByName("a")
	Write "GetDataSetByName Test for name = a",!
	Set ok=1
	If SOAPresult.GetColumnCount()'=result.GetColumnCount() {
		Write "    SOAP and local calls disagree.",!
		Write "    SOAP column count = ",SOAPresult.GetColumnCount(),", local column count = ",result.GetColumnCount(),!
		Set ok=0
	}
	Set status=$$$OK
	If ok=1 {
		For i=1:1:result.GetColumnCount() {
			If result.GetColumnName(i)'=SOAPresult.GetColumnName(i) {
				Set ok=0
				Write "    Column "_i_" name does not match, SOAP="_SOAPresult.GetColumnName(i)_", local="_result.GetColumnName(i),!
				Quit
			}
		}
	}
	If ok=1 {
		Set recnum=0
		While result.Next(.status) {
			Set recnum=recnum+1
			Write "    Record "_recnum,!
			If 'SOAPresult.Next() Set ok=0 Write "    Too few rows in SOAP result, SOAP="_SOAPresult.GetData(i)_", local="_result.GetData(i),! Quit
			For i=1:1:result.GetColumnCount() {
				Write "      "_result.GetColumnName(i)_" = "_result.GetData(i),!
				If result.GetData(i)'=SOAPresult.GetData(i) {
					Set ok=0
					Write "    Column "_i_" does not match",!
					Quit
				}
			}
			If 'ok Quit
		}
		If ok {
			Write "    SOAP and local calls agree.",!
		} Else {
			Write "    SOAP and local calls disagree.",!
		}
	}
	If $$$ISERR(status) Set ok=0 Do $system.OBJ.DisplayError(status)
	If SOAPresult.Next() Set ok=0 Write "Too many rows in SOAP result",!
	If 'ok Set error=1

	// Some missions
	Write "Our local mission is ",service.Mission(),!
	Write "Our SOAP mission is ",proxy.Mission(),!
	If error {
		Write !,"SOAP test failed",!
	} Else {
		Write !,"SOAP test succeeded",!
	}
	Quit error

ErrorTrap
	; Trap any error
	; If the trap was caused by ZTRAP "SOAP", then this is a SOAP error.
	;    The SOAP error $$$SOAPFaultReceived indicates that the server 
	;    returned the SOAP fault specified by the text.
	Set $ztrap=""
	If $ZE["<ZSOAP>" {
		Do $system.OBJ.DisplayError(%objlasterror)
	} else {
		Write "ERROR:  "_$ZE
	}
	Quit 1
]]></Implementation>
</Method>

<Method name="comparePerson">
<ClassMethod>1</ClassMethod>
<FormalSpec>p1:Sample.Person,p2:Sample.Person</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If p1.Name '= p2.Name Quit 0
	If p1.SSN '= p2.SSN Quit 0
	If p1.DOB '= p2.DOB Quit 0
	If '..compareAddress(p1.Home,p2.Home) Quit 0
	If '..compareAddress(p1.Office,p2.Office) Quit 0
	
	Set match=1
	If p1.FavoriteColors.Count() '= p2.FavoriteColors.Count() Quit 0
	For i=1:1:p1.FavoriteColors.Count() {
		If p1.FavoriteColors.GetAt(i) '= p2.FavoriteColors.GetAt(i) Set match=0 Quit
	}
	
	Quit match
]]></Implementation>
</Method>

<Method name="printPerson">
<ClassMethod>1</ClassMethod>
<FormalSpec>p:Sample.Person,indent:%String</FormalSpec>
<Implementation><![CDATA[
	Write indent,"Name = ",p.Name,!
	Write indent,"SSN = ",p.SSN,!
	Write indent,"DOB = ",$zdate(p.DOB),!
	Write indent,"Home = ",!
	Do ..printAddress(p.Home,indent_"   ")
	Write indent,"Office = ",!
	Do ..printAddress(p.Office,indent_"   ")
	If p.FavoriteColors.Count() '= 0 {
		Write indent,"FavoriteColors",!
		For i=1:1:p.FavoriteColors.Count() {
			Write indent,"   ",p.FavoriteColors.GetAt(i),!
		}
	}
]]></Implementation>
</Method>

<Method name="compareAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec>a1:Sample.Address,a2:Sample.Address</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If a1.Street '= a2.Street Quit 0
	If a1.City '= a2.City Quit 0
	If a1.State '= a2.State Quit 0
	If a1.Zip '= a2.Zip Quit 0
	Quit 1
]]></Implementation>
</Method>

<Method name="printAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec>a:Sample.Address,indent:%String</FormalSpec>
<Implementation><![CDATA[
	Write indent,"Street = ",a.Street,!
	Write indent,"City = ",a.City,!
	Write indent,"State = ",a.State,!
	Write indent,"Zip = ",a.Zip,!
]]></Implementation>
</Method>

<Method name="comparePersonIdentification">
<ClassMethod>1</ClassMethod>
<FormalSpec>p1:Sample.PersonIdentification,p2:Sample.PersonIdentification</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If p1.ID '= p2.ID Quit 0
	If p1.Name '= p2.Name Quit 0
	If p1.SSN '= p2.SSN Quit 0
	If p1.DOB '= p2.DOB Quit 0
	Quit 1
]]></Implementation>
</Method>

<Method name="printPersonIdentification">
<ClassMethod>1</ClassMethod>
<FormalSpec>p:Sample.PersonIdentification,indent:%String="      "</FormalSpec>
<Implementation><![CDATA[
	Write indent,"ID = ",p.ID,!
	Write indent,"Name = ",p.Name,!
	Write indent,"SSN = ",p.SSN,!
	Write indent,"DOB = ",$zdate(p.DOB),!
]]></Implementation>
</Method>
</Class>


<Class name="SOAP.LicenseInfo">
<Description>
License information SOAP header</Description>
<Super>%SOAP.Header</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60379,57217.413966</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
NAMESPACE specifies the XML namespace to be used when creating the header.</Description>
<Default>http://tempuri.org/headers</Default>
</Parameter>

<Property name="UnregisteredUser">
<Type>SOAP.UnregisteredUser</Type>
</Property>

<Property name="RegisteredUser">
<Type>SOAP.RegisteredUser</Type>
</Property>
</Class>


<Class name="SOAP.RegisteredUser">
<Description>
UserID and password for registered user in LicenseInfo SOAP header</Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60379,57739.614399</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="NAMESPACE">
<Description>
NAMESPACE specifies the XML namespace to be used when creating the header.</Description>
<Default>http://ws.strikeiron.com</Default>
</Parameter>

<Property name="UserID">
<Type>%String</Type>
</Property>

<Property name="Password">
<Type>%String</Type>
</Property>
</Class>


<Class name="SOAP.ResponseInfo">
<Description>
SOAP header for returned response information.</Description>
<Super>%SOAP.Header</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60379,59154.019992</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
NAMESPACE specifies the XML namespace to be used when creating the header.
Note that this header is in the web service namespace, not the header namespace.</Description>
<Default>http://tempuri.org</Default>
</Parameter>

<Property name="ResponseCode">
<Type>%xsd.int</Type>
<Required>1</Required>
</Property>

<Property name="Response">
<Type>%String</Type>
</Property>
</Class>


<Class name="SOAP.SubscriptionInfo">
<Description>
SOAP header to return subscription information.</Description>
<Super>%SOAP.Header</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60379,59410.843958</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
NAMESPACE specifies the XML namespace to be used when creating the header.</Description>
<Default>http://tempuri.org/headers</Default>
</Parameter>

<Property name="LicenseStatusCode">
<Type>%xsd.int</Type>
</Property>

<Property name="LicenseStatus">
<Type>%String</Type>
</Property>

<Property name="LicenseActionCode">
<Type>%xsd.int</Type>
</Property>

<Property name="LicenseAction">
<Type>%String</Type>
</Property>

<Property name="RemainingHits">
<Type>%xsd.int</Type>
</Property>

<Property name="Amount">
<Type>%xsd.decimal</Type>
</Property>
</Class>


<Class name="SOAP.UnregisteredUser">
<Description>
EmailAddress only for unregistered user in LicenseInfo SOAP header</Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60379,57598.34222</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="NAMESPACE">
<Description>
NAMESPACE specifies the XML namespace to be used when creating the header.</Description>
<Default>http://ws.strikeiron.com</Default>
</Parameter>

<Property name="EmailAddress">
<Type>%String</Type>
</Property>
</Class>


<Class name="Sample.Address">
<Description>
This is a sample embeddable class representing an address.</Description>
<StorageStrategy>AddressState</StorageStrategy>
<Super>%SerialObject,%Populate,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59269,38836.251</TimeCreated>

<Property name="Street">
<Description>
The street address.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="POPSPEC" value="Street()"/>
</Property>

<Property name="City">
<Description>
The city name.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="POPSPEC" value="City()"/>
</Property>

<Property name="State">
<Description>
The 2-letter state abbreviation.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="2"/>
<Parameter name="POPSPEC" value="USState()"/>
</Property>

<Property name="Zip">
<Description>
The 5-digit U.S. Zone Improvement Plan (ZIP) code.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="5"/>
<Parameter name="POPSPEC" value="USZip()"/>
</Property>

<Storage name="AddressState">
<Type>%Library.CacheSerialState</Type>
<State>AddressState</State>
<StreamLocation>^Sample.AddressS</StreamLocation>
<Data name="AddressState">
<Value name="1">
<Value>Street</Value>
</Value>
<Value name="2">
<Value>City</Value>
</Value>
<Value name="3">
<Value>State</Value>
</Value>
<Value name="4">
<Value>Zip</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Sample.Company">
<Description><![CDATA[
This sample persistent class represents a company.<br>]]></Description>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>65825,27006.451697</TimeChanged>
<TimeCreated>59269,38836.352</TimeCreated>

<Index name="NameIdx">
<Description><![CDATA[
Define an index for <property>Name</property>.]]></Description>
<Type>index</Type>
<Properties>Name</Properties>
</Index>

<Index name="TaxIDIdx">
<Description><![CDATA[
Define a unique index for <property>TaxID</property>.]]></Description>
<Type>index</Type>
<Properties>TaxID</Properties>
<Unique>1</Unique>
</Index>

<Property name="Name">
<Description>
The company's name.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="POPSPEC" value="Company()"/>
</Property>

<Property name="Mission">
<Description>
The company's mission statement.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
<Parameter name="POPSPEC" value="Mission()"/>
</Property>

<Property name="TaxID">
<Description>
The unique Tax ID number for the company.</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Revenue">
<Description>
The last reported revenue for the company.</Description>
<Type>%Integer</Type>
</Property>

<Property name="Employees">
<Description><![CDATA[
The <class>Employee</class> objects associated with this <class>Company</class>.]]></Description>
<Type>Employee</Type>
<Cardinality>many</Cardinality>
<Inverse>Company</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="PrintPayroll">
<Description><![CDATA[
This method prints out the payroll for this company by iterating over 
all the <class>Employee</class> objects related to it and printing 
their names and salaries.<br>
You can try this out from the <i>Cach&eacute;</i> command line by opening 
an instance of <class>Company</class> object and invoking this method:
<example>
Set company = ##class(Sample.Company).%OpenId(1)

Do company.PrintPayroll()
</example>]]></Description>
<Implementation><![CDATA[
	Set total = 0
	Set key = ""
	
	Write !, "Payroll for ", ..Name, ":"
	
	Do {
		Set emp = ..Employees.GetNext(.key)
		If (emp '= "") {
			Set total = total + emp.Salary
			Write !, ?5, emp.Name, ?40, $J($FN(emp.Salary,","),12)
			Do ..Employees.%UnSwizzleAt(key)
		}
	} while (key '= "")
	
	Write !, "Total: ", ?40, $J($FN(total,","),12)
	Quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Sample.CompanyD</DataLocation>
<DefaultData>CompanyDefaultData</DefaultData>
<IdLocation>^Sample.CompanyD</IdLocation>
<IndexLocation>^Sample.CompanyI</IndexLocation>
<StreamLocation>^Sample.CompanyS</StreamLocation>
<ExtentSize>20</ExtentSize>
<Data name="CompanyDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Mission</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>Revenue</Value>
</Value>
<Value name="5">
<Value>TaxID</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.55</AverageFieldSize>
</Property>
<Property name="Mission">
<Selectivity>5.0000%</Selectivity>
<AverageFieldSize>97.2</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>5.0000%</Selectivity>
<AverageFieldSize>16.15</AverageFieldSize>
</Property>
<Property name="Revenue">
<Selectivity>5.0000%</Selectivity>
<AverageFieldSize>8.8</AverageFieldSize>
</Property>
<Property name="TaxID">
<Selectivity>1</Selectivity>
<AverageFieldSize>4.8</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="NameIdx">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="TaxIDIdx">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Sample.CustomResultSet">
<Description>
This class is an example of subclassing %SQL.CustomResultSet. Custom result sets are similar
to queries with TYPE = %Library.Query. Subclassing %SQL.CustomResultSet has a few advantages
over custom queries. Result sets are somewhat more efficient when interacting with the server.
The metadata for a result set is constructed from the class definition so there is never a need for
ROWSPEC. Also, result sets provide a more OO interface.

The result set created by this class contains rows (the number of rows specified at instantiation)
of randomly generated data.

When subclassing %SQL.CustomResultSet, there are a few steps that you must follow in order to produce
a working result set.

	1.	Define properties that correspond to each column in the result row.
	2.	Define private properties that you need to maintain the current state of the
		result set.
	3.	Override and implement %OpenCursor. In this method you will initialize the result
		iterator and prepare the data for return. Report any errors encountered during execution
			by setting %SQLCODE and %Message.
	4.	Override and implement %Next. In this method you will retrieve the next row. If the end
		of the result set is reached then return 0. Otherwise, set the row properties to the
		appropriate value and return 1.
	5.	Override and implement %CloseCursor. This is only necessary if you need to perform some
		clean up.

	If you wish to instantiate your custom result set class and return it to a caller then you must
implement an SQL routine (aka, "stored procedure"). This class includes an SQL routine 'CustomResult'.

Instances of %SQL.IResultSet are not meant to be "reused" meaning that a result set class
expects to be instantiated, the rows iterated over, and then destructed.</Description>
<IncludeCode>%occErrors</IncludeCode>
<Super>%SQL.CustomResultSet</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60710,28678.859</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// The first task is to define the properties that make up a row. Just define each property

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// that corresponds to a column as a normal property. The property name is any valid identifier.

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// All private properties that are assumed to be part of the result set state and are not part

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// of the result row. SQLNAME, type, type parameters, etc. can all be defined.

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// The following properties form a row:

]]></Content>
</UDLText>

<Property name="ID">
<Type>%Integer</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Street">
<Type>%String</Type>
</Property>

<Property name="City">
<Type>%String</Type>
</Property>

<Property name="State">
<Type>%String</Type>
</Property>

<Property name="Spouse">
<Type>Sample.Person</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Then you can define some custom result set state properties. These properties are for your own use

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// to maintain the result set state during the data retrieval cycle (%Next()). Old queries used qhandle

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// to maintain the cursor status. Here we just use private properties.

]]></Content>
</UDLText>

<Property name="ZCursorName">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="ZCursorId">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Method name="CustomResult">
<Description>
This is a stored procedure that returns an instance of Sample.CustomResultSet to the caller. This procedure could
also declare input, input-output, output and return value parameters.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRowcount:%Integer=100</FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlName>CustomResult</SqlName>
<SqlProc>1</SqlProc>
<ReturnResultsets>1</ReturnResultsets>
<Implementation><![CDATA[
	#dim %sqlcontext as %Library.ProcedureContext
	try {
		if '$Isobject($Get(%sqlcontext)) { set %sqlcontext = ##class(%Library.ProcedureContext).%New() }
			#; The first argument passed to %New() is the SELECTMODE. It defaults to the current setting for
			#; the process ($system.SQL.GetSelectMode()).
		set tResult = ..%New(,pRowcount)
		do %sqlcontext.AddResultSet(tResult)
	}
	catch tException {
		if '$Isobject($Get(%sqlcontext)) { set %sqlcontext = ##class(%Library.ProcedureContext).%New() }
		if tException.%IsA("%Exception.SQL") { set ..%SQLCODE = tException.Code, ..%Message = tException.Data }
		elseif tException.%IsA("%Exception.StatusException") { if (tException.Code = $$$SQLError) || (tException.Code = $$$SQLCode) { set ..%SQLCODE = $Listget(tException.Data,1), ..%Message = $Listget(tException.Data,2) } }
		else { set %sqlcontext.%SQLCODE = -400, %sqlcontext.%Message = "Exception caught during Sample.CustomResult procedure execution: " _ tException.Name_":"_tException.Data }
	}
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Then you must override the methods %OpenCursor() and %Next(). %CloseCursor() can be overridden if you need
to perform some post-retrieval cleanup when the result set is destructed.
*/
]]></Content>
</UDLText>

<Method name="%OpenCursor">
<Description>
%OpenCursor() is used to initialize the cursor for iterating over the result set.
Define formal arguments if needed. They will be automatically managed. If you need
to access these argument values during the %OpenCursor/%Next/%CloseCursor cycle
then simply define private properties as needed.</Description>
<FormalSpec>rowCount:%Integer=100</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
		#; initialize a temporary global and generate some random data
		#; Since there can be multiple instances of this class active in a give process it
		#; is necessary to add a qualifying subscript so the data we generate isn't stepped on
		#; by another instance. There are other possible qualifying subscripts that can be use.
		#; For example, the base global could be incremented and the result stored in a private
		#; property. That private property would then become the qualifier. The code to do so
		#; might look like this (assuming a private property called ZId):
		#;
		#; set ..ZId = $Increment(^||MyData)
		#; kill ^||MyData(..Zid)
		#; ...
		#;
		#; Subsequent references to ^||MyData would all have ..ZId as the first subscript.
	kill ^||MyData(+##this)
		#; build a random reference sample for the spouse property
	do ##class(%Library.PopulateUtils).BuildReferenceSample("Sample.Person",.spouses)
	for rowNumber = 1:1:rowCount {
		set Name = ##class(%PopulateUtils).Name()
		set Street = ##class(%PopulateUtils).Street()
		set City = ##class(%PopulateUtils).City()
		set State = ##class(%PopulateUtils).USState()
		set Spouse = ##class(%PopulateUtils).ArrayElement(.spouses)
			#; and place the randomly generated data into the private global
		set ^||MyData(+##this,0,rowNumber) = $listbuild(Name,Street,City,State,Spouse)
		set ^||MyData(+##this,1,$$$ucase(Name),rowNumber) = ""
	}
		#; initialize the iterator
	set ..ZCursorName = $Order(^||MyData(+##this,1,""))
	set ..ZCursorId = ""
	quit $$$OK
]]></Implementation>
</Method>

<Method name="%Next">
<Description>
Advance the result set cursor to the next row. Returns 0 if the cursor is at the end of the
result set.</Description>
<FormalSpec><![CDATA[&sc:%Library.Status]]></FormalSpec>
<PlaceAfter>%Execute</PlaceAfter>
<ReturnType>%Library.Integer</ReturnType>
<Implementation><![CDATA[
		#; This sample uses two private properties to maintain the iterator.
		#; The first check is to see if we are at end, if so we quit with 0 (zero).
l0	if ..ZCursorName = "" { QUIT 0 }
l1	set ..ZCursorId = $Order(^||MyData(+##this,1,..ZCursorName,..ZCursorId))
	if ..ZCursorId = "" { set ..ZCursorName = $Order(^||MyData(+##this,1,..ZCursorName)),..ZCursorId = "" goto l0 }
	set rowList = ^||MyData(+##this,0,..ZCursorId)
		#; Set the row properties from the underlying data.
	set ..ID = ..ZCursorId, ..Name = $list(rowList,1), ..Street = $list(rowList,2), ..City = $list(rowList,3), ..State = $list(rowList,4)
		#; When the property's type class is swizzlable (subclass of %SerialObject, %Persistent, %Stream.Object, etc.) be sure to set the property
		#; using SetObject or SetObjectId.
	do ..SpouseSetObjectId($list(rowList,5))
		#; Increment ROWCOUNT- this is done automatically for SQL based result sets (thatis, subclasses of %ResultSet.SQL) but custom
		#; result sets must do this manually. You can also set SQLCODE if you wish.
	set ..%ROWCOUNT = ..%ROWCOUNT + 1
	quit 1
]]></Implementation>
</Method>

<Method name="%CloseCursor">
<Description>
Clean up on destruct</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^||MyData(+##this)
	set ..ZCursorName = "", ..ZCursorId = ""
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Sample.Customer">
<Super>%SerialObject</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59855,70764.188023</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MailingAddresses">
<Type>Address</Type>
<Collection>list</Collection>
<Parameter name="JAVATYPE" value="java.util.List"/>
</Property>

<Property name="Addresses">
<Type>Address</Type>
<Collection>array</Collection>
<Parameter name="JAVATYPE" value="java.util.Map"/>
</Property>

<Property name="MyAddress">
<Type>Address</Type>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TS">
<Type>%TimeStamp</Type>
</Property>

<Method name="%OnNew">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%New</METHOD> method to 
provide notification that a new instance of an object is being created.

<P>If this method returns an error then the object will not be created.]]></Description>
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ..SetDefault()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SetDefault">
<Implementation><![CDATA[
	Do ..MailingAddresses.Clear()
	Do ..Addresses.Clear()
	
	Set l = $listbuild("One Memorial Dr.","Cambridge","MA","02142")
	Set l1 = $listbuild(l,"Sample.Address")
	Set a = ##class(Sample.Address).%Open(l1)
	Do ..MailingAddresses.Insert(a)
	
	Set l = $listbuild("768 Beacon St.","Brookline","MA","02446")
	Set l1 = $listbuild(l,"Sample.Address")
	Set a = ##class(Sample.Address).%Open(l1)
	Do ..MailingAddresses.Insert(a)
	
	Set l = $listbuild("825 Third Ave.","New York","NY","10022")
	Set l1 = $listbuild(l,"Sample.Address")
	Set a = ##class(Sample.Address).%Open(l1)
	Do ..Addresses.SetAt(a, "Residence")
	
	Set l = $listbuild("7722 Main St.","Detroit","MI","48224")
	Set l1 = $listbuild(l,"Sample.Address")
	Set a = ##class(Sample.Address).%Open(l1)
	Do ..Addresses.SetAt(a, "Business")
	
	Set l = $listbuild("25 Glen Ave","Newton","MA","02459")
	Set l1 = $listbuild(l,"Sample.Address")
	Set a = ##class(Sample.Address).%Open(l1)
	
	Set ..MyAddress = a
	Set ..Name = "Joe Doe, Jr."
	Set ..Status = "Prospect"
]]></Implementation>
</Method>

<Method name="ToStringWrapper">
<ClassMethod>1</ClassMethod>
<FormalSpec>Arg1:%Binary</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	Set customer = ##class(Sample.Customer).%Open(Arg1)
	Quit ..ToString(customer)
]]></Implementation>
</Method>

<Method name="ToString">
<ClassMethod>1</ClassMethod>
<FormalSpec>customer:%IStruct</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	Quit:customer="" "{}"
	Set l = customer.MailingAddresses
	Set m = customer.Addresses
	Set str = customer.Name_"Addresses: "_m.Count()_": "
	
	Set key = ""
	For  {
		Set addr = m.GetNext(.key)
		Quit:key=""
		Set str = str_"<"_key_">"
		Do ..writeAddr(.str, addr)
	}

	Set str = str_"Mailing: "_l.Count()_": "
	For i=1:1:l.Count() {
		Set addr = l.GetAt(i)
		Do ..writeAddr(.str, addr)
	}
	Set str = str_"; "_customer.Status
	
	Set str = str_". My Address: "
	Do ..writeAddr(.str,customer.MyAddress)
	
	Quit str
]]></Implementation>
</Method>

<Method name="writeAddr">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&str:%String,addr:Address]]></FormalSpec>
<Implementation><![CDATA[
	Set str =str_"{"
	Set str = str_"Street: "_addr.Street
	Set str = str_"; City: "_addr.City
	Set str = str_"; State: "_addr.State
	Set str = str_"; Zip:  "_addr.Zip
	Set str =str_"}  "
	Quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>CustomerState</State>
<StreamLocation>^Sample.CustomerS</StreamLocation>
<Data name="CustomerState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>Addresses</Value>
</Value>
<Value name="2">
<Value>MailingAddresses</Value>
</Value>
<Value name="3">
<Value>MyAddress</Value>
</Value>
<Value name="4">
<Value>Name</Value>
</Value>
<Value name="5">
<Value>Status</Value>
</Value>
<Value name="6">
<Value>TS</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Sample.Employee">
<Description><![CDATA[
This sample persistent class represents an employee.<br>]]></Description>
<Super>Person</Super>
<TimeChanged>65825,27006.590445</TimeChanged>
<TimeCreated>59269,38836.422</TimeCreated>

<Property name="Title">
<Description>
The employee's job title.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="POPSPEC" value="Title()"/>
</Property>

<Property name="Salary">
<Description>
The employee's current salary.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="100000"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="Notes">
<Description>
A character stream containing notes about this employee.</Description>
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="Picture">
<Description>
A picture of the employee</Description>
<Type>%Stream.GlobalBinary</Type>
</Property>

<Property name="Company">
<Description>
The company this employee works for.</Description>
<Type>Company</Type>
<Cardinality>one</Cardinality>
<Inverse>Employees</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="PrintPerson">
<Description><![CDATA[
This method overrides the method in <class>Person</class>.<br>
Prints the properties <property>Name</property> and <property>Title</property> 
to the console.]]></Description>
<Implementation><![CDATA[
	Write !,"Name: ", ..Name, ?30, "Title: ", ..Title
	Quit
]]></Implementation>
</Method>

<Method name="WritePicture">
<Description>
writes a .png file containing the picture, if any, of this employee
the purpose of this method is to prove that Picture really contains an image</Description>
<Implementation><![CDATA[
	if (..Picture="") {quit}
	set name=$TR(..Name,".") ; strip off trailing period
	set name=$TR(name,", ","__") ; replace commas and spaces
	set filename=name_".png"
	
	set file=##class(%Stream.FileBinary).%New()
	set file.Filename=filename
	do file.CopyFrom(..Picture)
	do file.%Save()
	write !, "Generated file: "_filename
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>EmployeeDefaultData</DefaultData>
<ExtentSize>100</ExtentSize>
<Data name="EmployeeDefaultData">
<Structure>listnode</Structure>
<Subscript>"Employee"</Subscript>
<Value name="1">
<Value>Company</Value>
</Value>
<Value name="2">
<Value>Notes</Value>
</Value>
<Value name="3">
<Value>Salary</Value>
</Value>
<Value name="4">
<Value>Title</Value>
</Value>
<Value name="5">
<Value>Picture</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>17</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="Age">
<Selectivity>1.4706%</Selectivity>
<AverageFieldSize>1.9</AverageFieldSize>
</Property>
<Property name="Company">
<Selectivity>5.0000%</Selectivity>
<AverageFieldSize>1.61</AverageFieldSize>
</Property>
<Property name="DOB">
<Selectivity>1.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="FavoriteColors">
<Selectivity>2.3704%</Selectivity>
<OutlierSelectivity>.36:</OutlierSelectivity>
<AverageFieldSize>6.23</AverageFieldSize>
</Property>
<Property name="Home">
<Selectivity>1.0000%,City:3.8462%,State:2.1739%,Street:1.0000%,Zip:1.0000%</Selectivity>
<AverageFieldSize>36.28,City:7.26,State:2,Street:16.69,Zip:5</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>1.0000%</Selectivity>
<AverageFieldSize>16.26</AverageFieldSize>
</Property>
<Property name="Notes">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize/>
</Property>
<Property name="Office">
<Selectivity>1.0000%,City:4.1667%,State:2.4390%,Street:1.0000%,Zip:1.0000%</Selectivity>
<AverageFieldSize>36.09,City:7.16,State:2,Street:16.59,Zip:5</AverageFieldSize>
</Property>
<Property name="Picture">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize/>
</Property>
<Property name="SSN">
<Selectivity>1</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
</Property>
<Property name="Salary">
<Selectivity>1.0000%</Selectivity>
<AverageFieldSize>4.89</AverageFieldSize>
</Property>
<Property name="Spouse">
<Selectivity>1.5625%</Selectivity>
<AverageFieldSize>1.93</AverageFieldSize>
</Property>
<Property name="Title">
<Selectivity>1.4286%</Selectivity>
<AverageFieldSize>20.19</AverageFieldSize>
</Property>
<SQLMap name="$Employee">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Sample.Installer">
<Description>
Sample Installer</Description>
<IncludeCode>%occInclude</IncludeCode>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61494,40487</TimeCreated>

<XData name="MyApp">
<Description>
Application Definition</Description>
<XMLNamespace>INSTALLER</XMLNamespace>
<Data><![CDATA[
<Manifest>
<If Condition='$L("${NAMESPACE}")=0'>
<!-- Report an error if the namespace wasn't specified -->
<Error Status="$$$NamespaceDoesNotExist">
<Arg Value="${NAMESPACE}"/>
</Error>
</If>

<Namespace Name="SAMPLES">
<!-- Invoke a helper method on this installer class -->
<Invoke Class="Sample.Installer" Method="Message" CheckStatus="0"/>
</Namespace>

<!-- Do some setup -->
<Var Name="MYAPPDIR" Value="${MYAPPDIR}/myapp"/>
<Var Name="DBRESOURCE" Value="%DB_${NAMESPACE}"/>
<Var Name="MYAPPRESOURCE" Value="%DB_MYAPP"/>
<Var Name="PRODUCTION" Value="MyApp.Production"/>
<Var Name="USERNAME" Value="Lincoln,Abraham"/>

<User Username="TEST"
      Fullname="${USERNAME}"
      PasswordVar="USERNAME"
      Roles="%Developer,%All"
      />

<!-- Create the namespace, yes it's Ensemble enabled for MyApp -->
<Namespace Name="${NAMESPACE}"
          Create="yes"
          Code="${NAMESPACE}"
          Data="${NAMESPACE}"
          Ensemble="1"
          EnsemblePortalPrefix="myapp"
          EnsemblePortalSuffix="ensemble"
          EnsemblePortalGrant="${DBRESOURCE}"
		  >

<Configuration>

<!-- Create a "data" database -->
<Database Name="${NAMESPACE}"
		 Dir="${MGRDIR}/${NAMESPACE}"
		 Create="yes"
		 Resource="${DBRESOURCE}"
		 PublicPermissions=""/>

<!-- Add the existing MyApp database as the code database for this namespace -->
<Database Name="MYAPP"
		 Dir="${MYAPPDIR}/db"
		 Create="no"
		 Resource="${MYAPPRESOURCE}"
		 PublicPermissions=""/>

<!-- MyApp mappings back to the MYAPP DB.
-->
<GlobalMapping Global="MyAppData.*"    	From="MYAPP"/>
<GlobalMapping Global="cspRule"  		From="MYAPP"/>

<ClassMapping Package="MyApp"    		From="MYAPP"/>

<RoutineMapping Routines="MYAPP" Type="INC" From="MYAPP"/>
</Configuration>

<!-- Check for an upgrade vs install -->
<Invoke Class="Sample.Installer" Method="IsUpgrade" Return="ISUPGRADE"/>

<!-- MyApp setup, load some data in -->
<Import File="${MYAPPDIR}/data/Defaults.gof"/>

<!-- Load patch classes (if they exist) -->
<If Condition='#{##class(%File).DirectoryExists("${MYAPPDIR}/patch/")}'>
<!-- Load a directory full of files, ignore error 5202 ... -->
<Import File="${MYAPPDIR}/patch/" IgnoreErrors="5202" Flags="ck"/>
</If>

<!-- Configure MyApp -->
<Invoke Class="Sample.Installer" Method="SetupDefaults" CheckStatus="1">
<Arg Value="${NAMESPACE}"/>
<Arg Value="${ISUPGRADE}"/>						<!-- True if upgrading -->
</Invoke>

<If Condition="'${ISUPGRADE}">
<!-- Compile the production for a new install -->
<Compile Class="${PRODUCTION}" Flags="ck"/>

<!-- Configure the production -->
<Production Name="${PRODUCTION}">
<Setting Item="FOO"
		Target="Host"
		Setting="Upgraded"
		Value="${ISUPGRADE}"/>
<Setting Item="FOO"
	    Target="Host"
	    Setting="Namespace"
	     Value="${NAMESPACE}"/>
<Setting Item="FOO"
	    Target="Host"
	    Setting="BufferSize"
	     Value="16384,8192"/>
</Production>
</If>

<!-- System settings changes required for MyApp -->
<SystemSetting Name="Config.Miscellaneous.EnableLongStrings" Value="1"/>

<!-- Create a CSP application for the namespace -->
<Var Name="URL" Value='/csp/myapp/#{$ZCVT("${NAMESPACE}","L")}'/>
<Var Name="DIR" Dir='${CSPDIR}myapp/#{$ZCVT("${NAMESPACE}","L")}'/>

<CSPApplication Url="${URL}"
			   Directory="${DIR}"
	           Resource=""
	           Grant="${DBRESOURCE}"
	           Description="MyApp CSP Interface"
	           Recurse="1"
	           CookiePath="/csp/myappp"
	           AuthenticationMethods="32"
	 />

</Namespace>
</Manifest>
]]></Data>
</XData>

<Method name="setup">
<Description>
This is a method generator whose code is generated by XGL.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&pVars,pLogLevel:%Integer,pInstaller:%Installer.Installer,pLogger:%Installer.AbstractLogger]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Let our XGL document generate code for this method. 
	Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "MyApp")
]]></Implementation>
</Method>

<Method name="Message">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	WRITE $TR($J("",60)," ","="),!
	WRITE $ZV,!
	WRITE $TR($J("",60)," ","="),!
]]></Implementation>
</Method>

<Method name="SetupDefaults">
<Description>
Setup defaults for this MyApp system</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String=$ZU(5),pUpgrading:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status
	Set tSC=$$$OK,$ZT="Trap"
	Do {
	
	    // Do whatever here ...
		
	} While (0)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$ERROR($$$CacheError,$ZE)
	Goto Exit
]]></Implementation>
</Method>

<Method name="IsUpgrade">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pNamespace:%String=$ZU(5)</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[$RANDOM(2)
]]></Implementation>
</Method>

<Method name="RunInstall">
<Description>
Invoke the installer passing in some variables</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tVars
	#dim tStatus As %Status
	#dim tLogLevel As %Integer = 1
	
	// Initialize any variables we want to pass to the installer
	Set tVars("NAMESPACE") = "TEST"
	
	// Invoke the installer
	Set tStatus = ..setup(.tVars,tLogLevel)
	
	Do:$$$ISERR(tStatus) $system.OBJ.DisplayError(tStatus)
	
	Quit tStatus
]]></Implementation>
</Method>

<Method name="RunInstallWithLog">
<Description>
Invoke the installer passing in some variables</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLogfile:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tVars
	#dim tStatus As %Status
	#dim tLogLevel As %Integer = 1
	
	// Initialize any variables we want to pass to the installer
	Set tVars("NAMESPACE") = "TEST"

	// Construct a file logger
	#dim tLogger As %Installer.FileLogger = ##class(%Installer.FileLogger).%New(1,pLogfile)
	
	// Invoke the installer
	Set tStatus = ..setup(.tVars,tLogLevel,,tLogger)
	
	Do:$$$ISERR(tStatus) $system.OBJ.DisplayError(tStatus)
	
	Quit tStatus
]]></Implementation>
</Method>
</Class>


<Class name="Sample.ListOfPersonIdentification">
<Super>%Library.ListOfObjects</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59493,42644.128277</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Sample.PersonIdentification</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Sample.MyException">
<Description>
This class is used by the example code in the THROW documentation</Description>
<Super>%Exception.AbstractException</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60933,64088.102</TimeCreated>
</Class>


<Class name="Sample.Person">
<Description><![CDATA[
This sample persistent class represents a person.
<p>Maintenance note: This class is used by some of the bindings samples.]]></Description>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>65825,27006.630013</TimeChanged>
<TimeCreated>59269,38836.623</TimeCreated>

<Parameter name="EXTENTQUERYSPEC">
<Default>Name,SSN,Home.City,Home.State</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// define indices for this class

]]></Content>
</UDLText>

<Index name="SSNKey">
<Description><![CDATA[
Define a unique index for <property>SSN</property>.]]></Description>
<Type>index</Type>
<Properties>SSN</Properties>
<Unique>1</Unique>
</Index>

<Index name="NameIDX">
<Description><![CDATA[
Define an index for <property>Name</property>.]]></Description>
<Data>Name</Data>
<Properties>Name</Properties>
</Index>

<Index name="ZipCode">
<Description><![CDATA[
Define an index for embedded object property <b>ZipCode</b>.]]></Description>
<Type>bitmap</Type>
<Properties>Home.Zip</Properties>
</Index>

<UDLText name="T">
<Content><![CDATA[
// define properties for this class

]]></Content>
</UDLText>

<Property name="Name">
<Description>
Person's name.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="POPSPEC" value="Name()"/>
</Property>

<Property name="SSN">
<Description>
Person's Social Security number. This is validated using pattern match.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="PATTERN" value="3N1&quot;-&quot;2N1&quot;-&quot;4N"/>
</Property>

<Property name="DOB">
<Description>
Person's Date of Birth.</Description>
<Type>%Date</Type>
<Parameter name="POPSPEC" value="Date()"/>
</Property>

<Property name="Home">
<Description>
Person's home address. This uses an embedded object.</Description>
<Type>Address</Type>
</Property>

<Property name="Office">
<Description>
Person's office address. This uses an embedded object.</Description>
<Type>Address</Type>
</Property>

<Property name="Spouse">
<Description>
Person's spouse. This is a reference to another persistent object.</Description>
<Type>Person</Type>
</Property>

<Property name="FavoriteColors">
<Description>
A collection of strings representing the person's favorite colors.</Description>
<Type>%String</Type>
<Collection>list</Collection>
<Parameter name="JAVATYPE" value="java.util.List"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,Red,Orange,Yellow,Green,Blue,Purple,Black,White&quot;):2"/>
</Property>

<Property name="Age">
<Description><![CDATA[
Person's age.<br>
This is a calculated field whose value is derived from <property>DOB</property>.]]></Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {Age}=##class(Sample.Person).CurrentAge({DOB})
</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>DOB</SqlComputeOnChange>
</Property>

<Method name="CurrentAge">
<Description><![CDATA[
This class method calculates a current age given a date of birth <var>date</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>date:%Date=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$Select(date="":"",1:($ZD($H,8)-$ZD(date,8)\10000))
]]></Implementation>
</Method>

<Method name="PrintPerson">
<Description><![CDATA[
Prints the property <property>Name</property> to the console.]]></Description>
<Implementation><![CDATA[
	Write !, "Name: ", ..Name
	Quit
]]></Implementation>
</Method>

<Method name="Addition">
<Description><![CDATA[
A simple, sample method: add two numbers (<var>x</var> and <var>y</var>) 
and return the result.]]></Description>
<FormalSpec>x:%Integer=1,y:%Integer=1</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Quit x + y // comment
]]></Implementation>
</Method>

<Method name="NinetyNine">
<Description>
A simple, sample expression method: returns the value 99.</Description>
<CodeMode>expression</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[99
]]></Implementation>
</Method>

<Method name="PrintPersons">
<Description><![CDATA[
Invoke the <method>PrintPerson</method> on all <class>Person</class> objects 
within the database.]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// use the extent result set to find all person
	Set extent = ##class(%ResultSet).%New("Sample.Person:Extent")
	Do extent.Execute()
	
	While (extent.Next()) {
		Set person = ..%OpenId(extent.GetData(1))
		Do person.PrintPerson()
	}
	
	Quit
]]></Implementation>
</Method>

<Method name="PrintPersonsSQL">
<Description>
Prints out data on all persons within the database using SQL to 
iterate over all the person data.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// use dynamic SQL result set to find person data
	Set query = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	Do query.Prepare("SELECT ID, Name, SSN FROM Sample.Person ORDER BY Name")
	Do query.Execute()
	
	While (query.Next()) {
		Write !,"Name: ", query.Get("Name"), ?30, query.Get("SSN")
	}
	
	Quit
]]></Implementation>
</Method>

<Method name="StoredProcTest">
<Description><![CDATA[
This is a sample of how to define an SQL stored procedure using a 
class method. This method can be called as a stored procedure via 
ODBC or JDBC.<br>
In this case this method returns the concatenation of a string value.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[name:%String,&response:%String]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<SqlName>Stored_Procedure_Test</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	// Set response to the concatenation of name.
	Set response = name _ "||" _ name
	QUIT 29
]]></Implementation>
</Method>

<Method name="UpdateProcTest">
<Description><![CDATA[
This is a sample of how to define an SQL stored procedure using a 
class method. This method can be called as a stored procedure via 
ODBC or JDBC.<br>
This method performs an SQL update operation on the database 
using embedded SQL. The update modifies the embedded properties 
<var>Home.City</var> and <var>Home.State</var> for all rows whose 
<var>Home.Zip</var> is equal to <var>zip</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>zip:%String,city:%String,state:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	New %ROWCOUNT,%ROWID
	
	&sql(UPDATE Sample.Person 
	SET Home_City = :city, Home_State = :state 
	WHERE Home_Zip = :zip)
	
	// Return context information to client via %SQLProcContext object
	If ($g(%sqlcontext)'=$$$NULLOREF) { 
		Set %sqlcontext.SQLCode = SQLCODE
		Set %sqlcontext.RowCount = %ROWCOUNT
	}
	QUIT 1
]]></Implementation>
</Method>

<Query name="ByName">
<Description><![CDATA[
A sample class query that defines a result set that returns Person data 
ordered by <property>Name</property>.<br>
This query can be used within another Cach&eacute; method (using the
<class>%ResultSet</class> class), from Java, or from ActiveX.<br>
This query is also accessible from ODBC and/or JDBC as the SQL stored procedure 
<b>SP_Sample_By_Name</b>.]]></Description>
<Type>%SQLQuery</Type>
<FormalSpec>name:%String=""</FormalSpec>
<SqlName>SP_Sample_By_Name</SqlName>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT ID, Name, DOB, SSN
FROM Sample.Person
WHERE (Name %STARTSWITH :name)
ORDER BY Name</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="SELECTMODE" value="RUNTIME"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Sample.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^Sample.PersonD</IdLocation>
<IndexLocation>^Sample.PersonI</IndexLocation>
<StreamLocation>^Sample.PersonS</StreamLocation>
<ExtentSize>200</ExtentSize>
<Data name="PersonDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>SSN</Value>
</Value>
<Value name="4">
<Value>DOB</Value>
</Value>
<Value name="5">
<Value>Home</Value>
</Value>
<Value name="6">
<Value>Office</Value>
</Value>
<Value name="7">
<Value>Spouse</Value>
</Value>
<Value name="8">
<Value>FavoriteColors</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>8.5</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>2.46</AverageFieldSize>
</Property>
<Property name="Age">
<Selectivity>1.2048%</Selectivity>
<AverageFieldSize>1.91</AverageFieldSize>
</Property>
<Property name="DOB">
<Selectivity>0.5000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="FavoriteColors">
<Selectivity>1.5357%</Selectivity>
<OutlierSelectivity>.355:</OutlierSelectivity>
<AverageFieldSize>6.34</AverageFieldSize>
</Property>
<Property name="Home">
<Selectivity>0.5000%,City:3.8462%,State:2.0000%,Street:0.5000%,Zip:0.5000%</Selectivity>
<AverageFieldSize>36.04,City:7.15,State:2,Street:16.47,Zip:5</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>0.5000%</Selectivity>
<AverageFieldSize>15.96</AverageFieldSize>
</Property>
<Property name="Office">
<Selectivity>0.5000%,City:3.8462%,State:2.0833%,Street:0.5000%,Zip:0.5000%</Selectivity>
<AverageFieldSize>36.03,City:7,State:2,Street:16.68,Zip:5</AverageFieldSize>
</Property>
<Property name="SSN">
<Selectivity>1</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
</Property>
<Property name="Spouse">
<Selectivity>0.7813%</Selectivity>
<OutlierSelectivity>.5:</OutlierSelectivity>
<AverageFieldSize>.97</AverageFieldSize>
</Property>
<SQLMap name="$Person">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IDKEY">
<BlockCount>-20</BlockCount>
</SQLMap>
<SQLMap name="NameIDX">
<BlockCount>-8</BlockCount>
</SQLMap>
<SQLMap name="SSNKey">
<BlockCount>-8</BlockCount>
</SQLMap>
<SQLMap name="ZipCode">
<BlockCount>-8</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Sample.PersonIdentification">
<Description>
This sample registered object represent the identification information for a person.  
This class is used to illustrate return a list of objects using XML.</Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59493,42563.512805</TimeCreated>

<Property name="ID">
<Description>
Id of Person record in the database.</Description>
<Type>%String</Type>
</Property>

<Property name="Name">
<Description>
Person's name.</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="SSN">
<Description>
Person's Social Security number. This is validated using pattern match.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="PATTERN" value="3N1&quot;-&quot;2N1&quot;-&quot;4N"/>
</Property>

<Property name="DOB">
<Description>
Person's Date of Birth.</Description>
<Type>%Date</Type>
</Property>
</Class>


<Class name="Sample.ResultSets">
<Description><![CDATA[
<p>Sample.ResultSets
</p>
<p>
This class contains several methods that show how to instantiate and interact with result sets
using dynamic SQL. Some of these methods can be called as stored procedures. Class methods that
are SQLPROCs can also be executed from the command line and if they RETURNRESULTSETS then
those results can be displayed by calling %sqlcontext.%Display(). In addition, the methods projected
as SQLPROC can be called using dynamic SQL - either from the command line or through the SQL Shell.
Examples of different call styles are described for each method.
</p>
<p>
A 'result set' is an instance of %SQL.IResultSet. A result set can be returned by executing a
dynamic SQL SELECT or CALL statement. There are many different result set classes but they all
implement the interface of %SQL.IResultSet. There are some legacy result set classes that extend
%Library.IResultSet. The %Library.IResultSet interface is almost completely compatible with %SQL.IResultSet.
The most significant difference being some subtle differences in the metadata classes.
</p>
<p>
The simplest way to instantiate a result set is to execute a dynamic SQL SELECT statement. All
dynamic SQL statements return an instance of %SQL.StatementResult. %SQL.StatementResult is the
output statement descriptor and it defines the result interface. If the statement result object is
a result set object then %ResultColumnCount is greater than zero.
</p>
<p>
Result sets can also be returned by executing a CALL statement. There are two ways to return result sets
from an SQL invoked routine (SIR). The first is referred to in the SQL standard as a "prepared cursor".
A prepared cursor result is returned by calling a stored procedure projected from a class query.
</p>
<p>
The second mechanism allows for multiple result sets to be returned from an SQL invoked routine (stored
procedure) that is projected by a class method that is defined to return result sets. The collection
of result sets returned by calling such a routine (SIR) is referred to as a "result set sequence" or "RSS".
When a SIR that returns a non-empty result set sequence (RSS) is called then a "procedural cursor" is
automatically associated with the statement result object. The initial state of this cursor is unbound,
meaning that it is not yet bound to the first result set from the returned RSS. If the procedural cursor is
referenced, either directly or indirectly, then it will be bound to the next result set in the RSS
and that result set is removed from the RSS.
</p>
<p>
The result bound to the procedural cursor can be processed directly through the statement result object.
When the caller is finished with the result set currently bound the next result set can be bound by calling
the %MoreResults() method on the statement result object. That process can continue until all result sets from
the RSS have been processed. When that happens, %MoreResults returns zero to indicate that there are no more
result sets available for binding.
</p>
<p>
This type of binding and processing of result sets from a RSS is referred to as "serial binding". There is another
way to access result sets from an RSS returned by a call statement. This binding is accomplished by calling
the %NextResult() method on the statement result object. If %NextResult() returns a null oref then there are no
more result sets available for binding. Otherwise, an oref referencing a result set object will be returned and
the result set is removed from the RSS, making the next result available for binding immediately and can be bound
by invoking %NextResult() again. This style of binding is referred to as "parallel binding". The procedural cursor
is not bound to a result set when using this style of binding. Instead, a local variable or some other COS target
is bound to the result set. Several result sets can be bound at the same timed, hence the name "parallel binding".
</p>
<p>
If the caller mixes calls to the procedural cursor and %MoreResults() with calls to %NextResult() then a combination
of serial and parallel binding occurs. If the procedural cursor is referenced, binding the next result to the procedural cursor,
then a subsequent call to %NextResult() will bind to the result following the serially bound result. %NextResult()
removes the returned result set from the RSS and subsequent requests for a serially bound result will proceed with the
next result set in the sequence.
</p>]]></Description>
<Abstract>1</Abstract>
<IncludeCode>%occInclude</IncludeCode>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60722,22885.156</TimeCreated>

<Method name="PersonSets">
<Description><![CDATA[
Here is an example of a classmethod (also projected as a stored procedure) that returns a result set sequence (RSS)
containing two result sets. This method can be called directly as a class method and the results displayed from the
current procedure context:
	<pre>
			set return = ##class(Sample.ResultSets).PersonSets("D","NY")
			do %sqlcontext.%Display()
</pre>
<br>Or by a dynamic statement:
<pre>
			set result = ##class(%SQL.Statement).%ExecDirect(,"call Sample.PersonSets('D','NY')")
			do result.%Display()
</pre>
<br>
This method can also be invoked through the SQL Shell:
<pre>
SAMPLES>d $system.SQL.Shell()
SQL Command Line Shell
----------------------------------------------------
Enter q to quit, ? for help.
SAMPLES>>set selectmode = display

selectmode = display
SAMPLES>>call Sample.PersonSets('A','NY')
1.	call Sample.PersonSets('A','NY')

Dumping result #1
Name	DOB	Spouse	
Adam,Phyllis P.	10/26/2007	109
Adam,Vincent A.	10/18/1945	3
Adams,Dave M.	02/09/1938	29
Adams,Elmo R.	07/17/1975	22
Adams,Kirsten F.	03/22/1980	9
Adams,Stuart M.	07/31/1987	6
Allen,Zoe H.	11/17/1970	35
Alton,Charlotte S.	02/13/1940	2
Alton,Nellie W.	10/21/2000	11
Anderson,Heloisa E.	08/05/1951	
Avery,Jeff J.	08/01/2005	133

11 Rows(s) Affected

Dumping result #2
Name	Age	Home_City	Home_State	

0 Rows(s) Affected
---------------------------------------------------------------------------
</pre>
And finally, it can be called from an xDBC client:

	{call Sample.PersonSets('A','NY')}

	The result should be two result sets displayed (in WinSQL anyway).]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String="",state:%String="MA"</FormalSpec>
<ReturnType>%Integer</ReturnType>
<SqlName>PersonSets</SqlName>
<SqlProc>1</SqlProc>
<ReturnResultsets>1</ReturnResultsets>
<Implementation><![CDATA[
		// %sqlcontext is automatically created for a method that defines SQLPROC

		// SQL result set classes can be easily prepared using dynamic SQL. %Prepare returns a
		// status value. The statement's prepare() method can also be called directly. prepare() throws
		// an exception if something goes wrong instead of returning a status value.
	set tStatement = ##class(%SQL.Statement).%New()
	try {
		do tStatement.prepare("select name,dob,spouse from sample.person where name %STARTSWITH ? order by 1")
		set tResult = tStatement.%Execute(name)
		do %sqlcontext.AddResultSet(tResult)
		do tStatement.prepare("select name,age,home_city,home_state from sample.person where home_state = ? order by 4, 1")
		set tResult = tStatement.%Execute(state)
		do %sqlcontext.AddResultSet(tResult)
		set tReturn = 1
	}
	catch tException {
		#dim tException as %Exception.AbstractException
		set %sqlcontext.%SQLCODE = tException.AsSQLCODE(), %sqlcontext.%Message = tException.SQLMessageString()
		set tReturn = 0
	}
	quit tReturn
]]></Implementation>
</Method>

<Method name="CustomSets">
<Description>
CustomSets() is an example of a class method, projected as an SQL-callable routine, that returns two
result sets.

		{call Sample.CustomSets()}

	If you call this method as a stored procedure from the WinSQL Query window it should
		display two result sets and a message window indicating the number of rows in each set.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<SqlName>CustomSets</SqlName>
<SqlProc>1</SqlProc>
<ReturnResultsets>1</ReturnResultsets>
<Implementation><![CDATA[
		// When working with custom result sets it is important to note that result sets are not
		// executable, a result set is a result of executing some other thing. In this case, refer
		// to the Sample.CustomResult class for examples of how to implement custom result classes
		// and how to instantiate and return a custom result from a class method or an SQL invoked
		// routine. Here we will use a dynamic SQL CALL to invoke the procedure implemented in the
		// Sample.CustomResult class.
		// A different error reporting style is demonstrated by using the %SQL.Statement %Prepare method.
	set tStatement = ##class(%SQL.Statement).%New()
	set tStatus = tStatement.%Prepare("call Sample.CustomResult(?)")
		// Check for an error - if one is present then report it to the context object and quit
	if $$$ISOK(tStatus) {
			// This is also an example of executing the same statement twice, each time
			// returning a result that is assigned to a different local variable.
		set rs1 = tStatement.%Execute(5)
			// Since this is the result of a call statement, it is a context object and not a simple result.
			// We will use AddContext to include this result in the result set sequence of our context
			// object.
		do %sqlcontext.AddContext(rs1)
		set rs2 = tStatement.%Execute(10)
		do %sqlcontext.AddContext(rs2)
	}
	else { set %sqlcontext.%SQLCODE = -400, %sqlcontext.%Message = "Error encountered while preparing CALL statement" }
		// Successful - you can test this method from a command prompt by executing these commands:
		//		do ##class(Sample.ResultSets).CustomSets()
		//		do %sqlcontext.%Display()
	quit 1
]]></Implementation>
</Method>
</Class>


<Class name="Sample.Task">
<Description><![CDATA[
Task definition is divided into two sections
		- The task schedule; when it will run
		- The task class; what it will do when it is running

Generally tasks should be scheduled using the system management portal.
If you need to schedule tasks programatically you can find examples at the bottom of this class.

A series of task classes are defined to demonstrate potential usage
For these examples we rely on the MailServer being set 
	System Management Portal [Home]> [Configuration] > [Task Manager Settings] > [E-Mail Settings] 
		The SMTP server must be defined, also any authorization which is required for the mail server
Sample.Task
		Demonstrate what happens when a task encounters a runtime error

Sample.TaskExample1
		Demonstrates a task which fails every other time it executes
Sample.TaskExample2
		Using output files
Sample.TaskExample3
		Demonstrates how to look for problems with your tasks (not running)


Edit this class and change the who@somecompany.com to your email address 
]]></Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60768,42872.455937</TimeCreated>

<Property name="RunCount">
<Description>
Property to keep track of how many times this task has run</Description>
<Type>%String</Type>
</Property>

<Method name="OnTask">
<Description>
Demonstrate what happens when a task encounters a runtime error
The first time the task runs, it will succeed
The second time the task runs
	The task will be marked as suspended
The third time the task runs
	The task will be marked as suspended
		An error will be generated in the system error trap 
Trapping errors using %ETN is already performed, therefore you should NOT set $ETRAP="^%ETN" ($ZT) this
will cause the process to Halt and not clean up properly
Never end the method by using HALT as this will cause the same problem as using ^%ETN
This does not mean that you can't trap and handle your errors.  See the AlternativeOnTask method 
which demonstrates how you can handle expected problems</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..RunCount=..RunCount+1
	If '(..RunCount#2) Quit $$$ERROR($$$GeneralError,"My task failed")
	If '(..RunCount#3) Write 1/0
	/// Returning a status other than OK will mark the task as Suspended
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AlternativeOnTask">
<Description>
Assuming that you want to handle an error it is safe do the following
it is just unsafe to Set $ZT="^%ETN" as this ends with a Halt</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Error"
	Set ..RunCount=..RunCount+1
	If '(..RunCount#2) Quit $$$ERROR($$$GeneralError,"My task failed")
	// Definitely throw an error
	If '(..RunCount#3) Write 1/0
	/// Returning a status other than OK will mark the task as Suspended
	Quit $$$OK
Error	///
	Set $ZT=""
	/// Maybe handle the error and quit $$$OK or just return the error
	Quit $$$ERROR($$$CacheError,$ZE)
]]></Implementation>
</Method>

<Method name="ScheduleOnceDaily">
<Description>
this will schedule a task to run Once every day at 10:30 am
this example does not take into account any task 'Settings'
In this example, if the task has not run within 18 hours and 30 minutes of the scheduled start it will
"Expire" and not run again until the next start time</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim task as %SYS.Task
	Set task=##Class(%SYS.Task).%New()
	Set task.Name=..%ClassName(1)
	Set task.TaskClass=..%ClassName(1)  // The name of the Task Class (where OnTask is)
	Set task.NameSpace=$zu(5)  // Where namespace the task will run in
	Set task.DailyFrequency=task.DailyFrequencyDisplayToLogical("Once")
	Set task.DailyStartTime=$zth("10:30")
	Set task.Expires=1
	Set task.ExpiresHours=18
	Set task.ExpiresMinutes=30
	Do task.EmailOnError.Insert("who@somecompany.com")
	/// also available EmailOnCompletion and EmailOnExpiration
	Quit task.%Save()
]]></Implementation>
</Method>

<Method name="ScheduleHourly">
<Description>
Example code to demonstrate programatically scheduling a task to run EveryHour between 9am - 5pm
In this example Expires=0 and therefore the task will run every time it is scheduled, this is useful
for cases where reports need to be generated based on a certain time, the report needs to be run
after the time has passed, it can't be skipped.  In this case you would probably use ..%RunDate 
and ..%RunTime in the OnTask method</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim task as %SYS.Task
	Set task=##Class(%SYS.Task).%New()
	Set task.Name=..%ClassName(1)
	Set task.TaskClass=..%ClassName(1)  // The name of the Task Class (where OnTask is)
	Set task.NameSpace=$zu(5)  // Namespace the task will run in
	Set task.DailyFrequency=task.DailyFrequencyDisplayToLogical("Several")
	Set task.DailyFrequencyTime=task.DailyFrequencyTimeDisplayToLogical("Hourly")
	Set task.DailyIncrement=1  // (every 1 hour or minutes depending on DailyFrequencyTime)
	Set task.DailyStartTime=$zth("09:00")
	Set task.DailyEndTime=$zth("17:00")
	Set task.Expires=0
	Do task.EmailOnError.Insert("who@somecompany.com")
	/// also available EmailOnCompletion and EmailOnExpiration
	Quit task.%Save()
]]></Implementation>
</Method>

<Method name="ScheduleWeekly">
<Description>
Schedule task to run weekly at 3:00 am on Wednesday between January 31, 2014 and February 15, 2014
In this example, if the task has not run within 5 days of the scheduled start it will
"Expire" and not run again until the next start time</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim task as %SYS.Task
	Set task=##Class(%SYS.Task).%New()
	Set task.Name=..%ClassName(1)  // The name to display in the utilities
	Set task.TaskClass=..%ClassName(1)  // The name of the Task Class (where OnTask is)
	Set task.NameSpace=$zu(5)  // Where namespace the task will run in
	Set task.DailyFrequency=task.DailyFrequencyDisplayToLogical("Once")
	Set task.TimePeriod=task.TimePeriodDisplayToLogical("Weekly")
	Set task.TimePeriodEvery=1 // (every 1 week)
	Set task.TimePeriodDay=4 // (1-Sunday -> 7-Saturday and 23456 is Mon thru Fri)	
	Set task.StartDate=$zdh("2014-01-31",3)
	Set task.DailyStartTime=$zth("03:00")
	Set task.EndDate=$zdh("2014-2-15",3)
	Set task.Expires=1
	Set task.ExpiresDays=5
	Do task.EmailOnError.Insert("who@somecompany.com")
	/// also available EmailOnCompletion and EmailOnExpiration
	Quit task.%Save()
]]></Implementation>
</Method>

<Method name="ScheduleMonthly">
<Description>
Schedule task to run monthly on the first Monday at 5:00 am </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim task as %SYS.Task
	Set task=##Class(%SYS.Task).%New()
	Set task.Name=..%ClassName(1)  // The name to display in the utilities
	Set task.TaskClass=..%ClassName(1)  // The name of the Task Class (where OnTask is)
	Set task.NameSpace=$zu(5)  // Where namespace the task will run in
	Set task.DailyFrequency=task.DailyFrequencyDisplayToLogical("Once")
	Set task.TimePeriod=task.TimePeriodDisplayToLogical("Monthly Special")
	Set task.TimePeriodEvery=1 // (every month)
	Set task.TimePeriodDay="1^2" // 1st ^ Monday
	Set task.StartDate=$zdh("2012-12-31",3)
	Set task.EndDate=$zdh("2014-5-15",3)
	Set task.DailyStartTime=$zth("05:00")
	Do task.EmailOnError.Insert("who@somecompany.com")
	/// also available EmailOnCompletion and EmailOnExpiration
	Quit task.%Save()

	/*
	Other similar examples
	
		Run The first day of every month
		TimePeriod=task.TimePeriodDisplayToLogical("Monthly"),TimePeriodEvery=1,TimePeriodDay=1
		
		Run the last day of every month
		TimePeriod=task.TimePeriodDisplayToLogical("Monthly"),TimePeriodEvery=1,TimePeriodDay=31
		
		Run the last day of every other month
		TimePeriod=task.TimePeriodDisplayToLogical("Monthly"),TimePeriodEvery=2,TimePeriodDay=31
		
		Run the second Saturday of every month
		TimePeriod=task.TimePeriodDisplayToLogical("Monthly Special"),TimePeriodEvery=1,TimePeriodDay=2^7
		
		Run the first Sunday of every month
		TimePeriod=task.TimePeriodDisplayToLogical("Monthly Special"),TimePeriodEvery=1,TimePeriodDay=1^1
	*/
]]></Implementation>
</Method>

<Method name="ScheduleAfterAnother">
<Description>
this will schedule a task to run after another task has completed
since JournalSwitch happens on all systems we will use that as our trigger task
but any task could easily be substituted</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim task as %SYS.Task
	Set taskID = 1  // we would normally use ##class(%SYS.Task).FindId(Name) but we know the ID
	Set taskGUID = ##Class(%SYS.Task).JobGUIDGetStored(taskID)
	
	#define OurName "Sample.Runafter"
	Set task=##Class(%SYS.Task).OpenId($$$OurName) /// Will find the first task with this name
	If 'task {
		Set task=##Class(%SYS.Task).%New()
		Set task.Name=$$$OurName
	}
	Set task.TaskClass=..%ClassName(1)  // The name of the Task Class (where OnTask is)
	Set task.NameSpace=$zu(5)  // Where namespace the task will run in
	Set task.RunAfterGUID=taskGUID
	Set task.TimePeriod=task.TimePeriodDisplayToLogical("Run After")
	Do task.EmailOnError.Insert("who@somecompany.com")
	/// also available EmailOnCompletion and EmailOnExpiration
	Quit task.%Save()
]]></Implementation>
</Method>

<Method name="SuspendAndResumeTask">
<Description>
example programatically suspending and then resuming a task</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set taskID=##Class(%SYS.Task).FindId("Sample.Task")
	If 'taskID Quit $$$ERROR($$$GeneralError,"Can't find the task specified")
	Set Status=##Class(%SYS.Task).Suspend(taskID,2)  // suspend the task but reschedule 
	Quit:'Status Status // We failed to suspend it for some reason, potentially it is running
	Else  Set Status=##Class(%SYS.Task).Resume(taskID) /// resume the task
	Quit Status
]]></Implementation>
</Method>
</Class>


<Class name="Sample.TaskExample1">
<Description>
Defining a task for End Users

You want to generate a standard report that the user schedules to run, allowing them the
flexibility to choose when it runs.
By assigning Properties to the Class we can make items configurable such as where the 
report will be directed and perhaps a heading to be displayed.

The System Management Portal will automatically display the properties for Printer and Heading
and will validate that Printer is not ""  You can add any logic you would like to any property</Description>
<Super>Sample.Task</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60768,42872.455937</TimeCreated>

<Property name="Printer">
<Description>
Output printer for report</Description>
<Type>%String</Type>
</Property>

<Property name="Heading">
<Type>%String</Type>
</Property>

<Method name="PrinterIsValid">
<ClassMethod>1</ClassMethod>
<FormalSpec>Printer:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If Printer="" Quit $$$ERROR($$$GeneralError,"Please enter a printer")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnTask">
<Description>
Your program logic can be here in the OnTask method or in another class or a routine
just be sure to return a status code from the OnTask method</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Printer=..Printer
	Open ..Printer Use ..Printer
	Write ..Heading,!!
	Write "Profits up 1000%!!!!",!
	Close ..Printer
	/// Returning a status other than OK will mark the task as Suspended and send an email 
	/// if a value is defined in EmailOnError
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Sample.TaskExample2">
<Description>
Defining a task using output files

Perhaps you would like to generate a report to a file and email the file to a group of users
when it is completed.

In an end user scenario you could have them just define the recipient list and the output directory / filename
and the standard report goes out to the group on schedule.
</Description>
<Super>Sample.Task</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60768,42872.455937</TimeCreated>

<Method name="OnTask">
<Description>
Your program logic can be here in the OnTask method or in another class or a routine
just be sure to return a status code from the OnTask method</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Write "<HTML><BODY>This text will go to the output file",!
	Write "This output file will be attached when an email is sent",!
	Write "</BODY></HTML>",!
	/// Returning a status other than OK will mark the task as Suspended and send an email 
	/// to a value defined in EmailOnError
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ScheduleOnceDaily">
<Description>
this will schedule a task to run Once every day at 10:30 am
this example does not take into account any task 'Settings'
In this example, if the task has not run within 18 hours and 30 minutes of the scheduled start it will
"Expire" and not run again until the next start time</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim task as %SYS.Task
	Set task=##Class(%SYS.Task).%New()
	Set task.Name=..%ClassName(1)
	Set task.TaskClass=..%ClassName(1)  // The name of the Task Class (where OnTask is)
	Set task.NameSpace=$zu(5)  // Where namespace the task will run in
	Set task.DailyFrequency=task.DailyFrequencyDisplayToLogical("Once")
	Set task.DailyStartTime=$zth("10:30")
	Set task.OpenOutputFile=1
	Set task.OutputDirectory="c:\temp\"
	Set task.OutputFilename="TaskExample2.html"
	Set task.EmailOutput=1
	Set task.OutputFileIsBinary=0
	Do task.EmailOnError.Insert("who@somecompany.com")
	Do task.EmailOnCompletion.Insert("who@somecompany.com")
	/// also available EmailOnCompletion and EmailOnExpiration
	Quit task.%Save()
]]></Implementation>
</Method>
</Class>


<Class name="Sample.TaskExample3">
<Description>
Find any tasks which should be running but have not

Edit this class and change the who@somecompany.com to your email address and update the smtp server
in the SendMail method before scheduling</Description>
<Super>Sample.Task</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60831,39475.322178</TimeCreated>

<Property name="Notify">
<Description>
list of email addresses ; delimited to notify </Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="NotifyOnOK">
<Description>
HealthCheck if set to 1 - Will notify that all jobs are completing successfully</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="OnTask">
<Description>
query the existing tasks look for tasks which are running and passed
the next run time.  If problems occur send email to notify.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim task as %SYS.Task
	#define crlf $c(13,10)
	Set tOK=1,tMessage=""
	#; Check jobs which should have run up to five minutes ago
	Set dttm=$H,dttm=(+dttm*86400)+$p(dttm,",",2)-(5*60),dttm=(dttm\86400)_","_(dttm#86400)
	Set rs=##class(%ResultSet).%New()
	#; Exclude Suspended tasks by Suspended=0 or perhaps Suspended<>1 (Suspend and Leave)
	Set Status = rs.Prepare("SELECT ID,RunningJobNumber,Name FROM %SYS.Task where (daynextscheduled < ? OR (daynextscheduled = ? AND timenextscheduled < ?))") Quit:'Status Status
	Set Status = rs.Execute(+dttm,+dttm,$p(dttm,",",2)) Quit:'Status Status
	While rs.Next() {
		Set tID=rs.Get("ID")
		Set tPID=rs.Get("RunningJobNumber")
		Set tName=rs.Get("Name")
		#; determine if job is really running
		#; Set tProcess=##Class(SYS.Process).%OpenId(tPID) could be used if the task runs in %SYS
		If '$zu(67,0,tPID) Set tOK=0,tMessage=tMessage_$$$crlf_"Job ("_tID_") "_tName_" is not running" Continue
	}
	If 'tOK || ..NotifyOnOK {
		If tMessage="" Set tMessage="All tasks completing successfully"
		Set SendAttemptCount=0
		For  {
			Set Status=..SendMail(tMessage) 
			Quit:Status
			#; try to send the status message up to 15 times otherwise fail
			If 'Status Set SendAttemptCount=SendAttemptCount+1 If SendAttemptCount>15 Quit
			Hang 60
		}
	}
	#; If Status is an error the task will stop running.  If the EmailOnError is set up the user will be
	#; notified of the problem
	Quit Status
]]></Implementation>
</Method>

<Method name="SendMail">
<FormalSpec>pMessage:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set s=##class(%Net.SMTP).%New()
	set s.smtpserver="[yourmailserver]"
	set s.timezone="-0400"
 	set m=##class(%Net.MailMessage).%New()
 	set m.From="who@somecompany.com"
 	Set m.ReplyTo="who@somecompany.com"
 	Set Recipients=$tr(..Notify,",",";")
 	For i=1:1:$l(Recipients,",") {Set address=$p(Recipients,",",i) do:address]"" m.To.Insert(address)}
 	set m.Subject=..%ClassName(1)_" for system "_$zu(110)
	do m.TextData.Write(pMessage)
	set status=s.Send(m)
 	if $$$ISERR(status)  Set (m,s)="" Quit status
 	Set m="",s=""
 	quit $$$OK
]]></Implementation>
</Method>

<Method name="ScheduleOnceDaily">
<Description>
Example showing schedule with saving custom property values (Notify, NotifyOnOK)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim task as %SYS.Task
	Set task=##Class(%SYS.Task).%New()
	Set task.Name=..%ClassName(1)
	Set task.TaskClass=..%ClassName(1)  // The name of the Task Class (where OnTask is)
	Set task.NameSpace=$zu(5)  // Where namespace the task will run in
	Set task.DailyFrequency=task.DailyFrequencyDisplayToLogical("Once")
	Set task.DailyStartTime=$zth("10:30")
	Set task.Expires=1
	Set task.ExpiresHours=18
	Set task.ExpiresMinutes=30
	Do task.EmailOnError.Insert("who@somecompany.com")
	/// also available EmailOnCompletion and EmailOnExpiration
       Set taskDef=..%New()
       Set taskDef.Notify="who@somecompany.com"
       Set taskDef.NotifyOnOK=0
       Do task.AssignSettings(taskDef)

	Quit task.%Save()
]]></Implementation>
</Method>
</Class>


<Class name="Sample.USZipCode">
<Description>
This class represents a U.S. ZIP (Zone Improvement Plan) 
Code and corresponding State and City name. The sample dataset
includes values for the northeastern United States.</Description>
<Final>1</Final>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59269,38836.844</TimeCreated>

<Index name="ZipIDX">
<Description>
This index specifies that objects are identified by the ZipCode property.</Description>
<IdKey>1</IdKey>
<Properties>ZipCode</Properties>
</Index>

<Property name="ZipCode">
<Description>
The 5-digit ZIP Code value.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="5"/>
</Property>

<Property name="State">
<Description>
A 2 letter state abbreviation.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="2"/>
</Property>

<Property name="City">
<Description>
A city name.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Longitude">
<Type>%Numeric</Type>
<Parameter name="SCALE" value="6"/>
</Property>

<Property name="Latitude">
<Type>%Numeric</Type>
<Parameter name="SCALE" value="6"/>
</Property>

<Storage name="Default">
<Type>%CacheStorage</Type>
<DataLocation>^ZipCodeData</DataLocation>
<DefaultData>Data</DefaultData>
<IdLocation>^ZipCodeData</IdLocation>
<IndexLocation>^ZipCodeDataIdx</IndexLocation>
<StreamLocation>^Sample.USZipCodeS</StreamLocation>
<Data name="Data">
<Value name="1">
<Value>State</Value>
</Value>
<Value name="2">
<Value>City</Value>
</Value>
<Value name="3">
<Value>Longitude</Value>
</Value>
<Value name="4">
<Value>Latitude</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Sample.Utils">
<Description>
This class contains a method to generate data for Sample package</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61895,40724</TimeCreated>

<Method name="Generate">
<Description>
Invoke this method to set up the data for these classes.
Create one company for every five people.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personCount:%Integer=100</FormalSpec>
<Implementation><![CDATA[
    //make sure we always have at least 1 person
    If (personCount < 1) {
        Set personCount=1
        }
        
    //never use %KillExtent() in a real application
    do ##class(Sample.Company).%KillExtent()
    do ##class(Sample.Person).%KillExtent()
    do ##class(Sample.Employee).%KillExtent()
    //do ##class(Sample.Vendor).%KillExtent() ; doesn't work with %CacheSQLStorage 
    
    Set companyCount= personCount \ 5
    If (companyCount < 1) {
        Set companyCount=1
        }

    Do ##class(Sample.Company).Populate(companyCount)
	Do ##class(Sample.Person).Populate(personCount)
	Do ##class(Sample.Employee).Populate(personCount,,,,2)
	Do ##class(Sample.Vendor).Populate(personCount)
	
	//specify values for stream properties in Sample.Employee
	//do this for the first lucky 10 employees, for reasons of space
	
	set e1=personCount+1 ; ID of the first employee
	for i=e1:1:e1+9 {
		set employee=##class(Sample.Employee).%OpenId(i)
		set firstname=$PIECE(employee.Name,",",2)
		set firstname=$PIECE(firstname," ",1)
		set text=firstname_" used to work at "_##class(%PopulateUtils).Company()
		         _" as a(n) "_##class(%PopulateUtils).Title()
		         
		do employee.Notes.Write(text)
		
		//add a stock picture (yes, all these employees look alike)
		do employee.Picture.Write($G(^EmployeePictures))
		
		do employee.%Save()
		}
]]></Implementation>
</Method>
</Class>


<Class name="Sample.Vendor">
<Description><![CDATA[
The <class>Vendor</class> class is a persistent class 
containing vendor information.<br>
This class demonstrates how to use the <class>%CacheSQLStorage</class> storage 
class to provide custom storage for a persistent class. Typically the 
<class>%CacheSQLStorage</class> storage class is used to provide object access 
to previously existing storage structures.]]></Description>
<SqlRowIdName>Vendor</SqlRowIdName>
<StorageStrategy>SQLStorage</StorageStrategy>
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeChanged>65825,27006.677921</TimeChanged>
<TimeCreated>59269,38836.793</TimeCreated>

<Index name="IndexNName">
<Description>
Name Index</Description>
<Properties>Name</Properties>
</Index>

<UDLText name="T">
<Content><![CDATA[
// define properties for this class

]]></Content>
</UDLText>

<Property name="Name">
<Description>
Vendor name.</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="Company()"/>
</Property>

<Property name="Address">
<Description>
Vendor address.</Description>
<Type>Address</Type>
<Parameter name="POPSPEC" value="##class(Address).PopulateSerial()"/>
</Property>

<Property name="Contact">
<Description>
Name of primary vendor contact.</Description>
<Type>%String</Type>
<Parameter name="POPSPEC" value="Name()"/>
</Property>

<Property name="DiscRate">
<Description>
Discount rate.</Description>
<Type>%Float</Type>
<Parameter name="MAXVAL" value="100"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="DiscDays">
<Description>
Discount days.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="999"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="NetDays">
<Description>
Net days.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="999"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="DaysClear">
<Description>
Days clear.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="999"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="PayFlag">
<Description>
Payment Flag</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",Never,Minimum"/>
<Parameter name="VALUELIST" value=",N,M"/>
</Property>

<Property name="MinPayment">
<Description>
Minimum Payment.</Description>
<Type>%Float</Type>
<Parameter name="MAXVAL" value="999999"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="LastInvDate">
<Description>
Last Invoice Date.</Description>
<Type>%Date</Type>
<Parameter name="MAXVAL"/>
<Parameter name="MINVAL"/>
</Property>

<Property name="LastPayDate">
<Description>
Last Payment Date.</Description>
<Type>%Date</Type>
<Parameter name="MAXVAL"/>
<Parameter name="MINVAL"/>
</Property>

<Property name="Balance">
<Description>
Balance.</Description>
<Type>%Float</Type>
<Parameter name="MAXVAL" value="999999999"/>
<Parameter name="MINVAL" value="-999999999"/>
</Property>

<Property name="TaxReporting">
<Description>
Vendor tax reporting status.</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",Exempt,Required"/>
<Parameter name="VALUELIST" value=",E,"/>
</Property>

<Storage name="SQLStorage">
<Type>%CacheSQLStorage</Type>
<SqlIdExpression>$i(^VendorData)</SqlIdExpression>
<StreamLocation>^Sample.VendorS</StreamLocation>
<ExtentSize>100</ExtentSize>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.92</AverageFieldSize>
</Property>
<Property name="Address">
<Selectivity>1.0000%,City:3.8462%,State:2.2727%,Street:1.0000%,Zip:1.0000%</Selectivity>
<AverageFieldSize>36.14,City:7.14,State:2,Street:16.62,Zip:5</AverageFieldSize>
</Property>
<Property name="Balance">
<Selectivity>1.0000%</Selectivity>
<AverageFieldSize>9.4</AverageFieldSize>
</Property>
<Property name="Contact">
<Selectivity>1.0000%</Selectivity>
<AverageFieldSize>15.97</AverageFieldSize>
</Property>
<Property name="DaysClear">
<Selectivity>1.1111%</Selectivity>
<AverageFieldSize>2.88</AverageFieldSize>
</Property>
<Property name="DiscDays">
<Selectivity>1.0870%</Selectivity>
<AverageFieldSize>2.92</AverageFieldSize>
</Property>
<Property name="DiscRate">
<Selectivity>1.6667%</Selectivity>
<AverageFieldSize>1.89</AverageFieldSize>
</Property>
<Property name="LastInvDate">
<Selectivity>1.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="LastPayDate">
<Selectivity>1.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="MinPayment">
<Selectivity>1.0000%</Selectivity>
<AverageFieldSize>5.85</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>1.0309%</Selectivity>
<AverageFieldSize>16.89</AverageFieldSize>
</Property>
<Property name="NetDays">
<Selectivity>1.0309%</Selectivity>
<AverageFieldSize>2.9</AverageFieldSize>
</Property>
<Property name="PayFlag">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="TaxReporting">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>.54</AverageFieldSize>
</Property>
<SQLMap name="DataMasterMap">
<Type>data</Type>
<Global>^VendorData</Global>
<Structure>list</Structure>
<BlockCount>-8</BlockCount>
<Subscript name="1">
<Expression>{Vendor}</Expression>
</Subscript>
<Data name="Address">
<Piece>2</Piece>
</Data>
<Data name="Balance">
<Node>1</Node>
<Piece>3</Piece>
</Data>
<Data name="Contact">
<Piece>3</Piece>
</Data>
<Data name="DaysClear">
<Piece>7</Piece>
</Data>
<Data name="DiscDays">
<Piece>5</Piece>
</Data>
<Data name="DiscRate">
<Piece>4</Piece>
</Data>
<Data name="LastInvDate">
<Node>1</Node>
<Piece>1</Piece>
</Data>
<Data name="LastPayDate">
<Node>1</Node>
<Piece>2</Piece>
</Data>
<Data name="MinPayment">
<Piece>9</Piece>
</Data>
<Data name="Name">
<Piece>1</Piece>
</Data>
<Data name="NetDays">
<Piece>6</Piece>
</Data>
<Data name="PayFlag">
<Piece>8</Piece>
</Data>
<Data name="TaxReporting">
<Piece>10</Piece>
</Data>
</SQLMap>
<SQLMap name="IndexNName">
<Type>index</Type>
<Global>^VendorIndex</Global>
<Structure>list</Structure>
<BlockCount>-4</BlockCount>
<Subscript name="1">
<Expression>"N"</Expression>
</Subscript>
<Subscript name="2">
<Expression>$$SQLUPPER({Name})</Expression>
</Subscript>
<Subscript name="3">
<Expression>{Vendor}</Expression>
</Subscript>
</SQLMap>
</Storage>
</Class>


<Class name="Studio.ExampleDocument">
<ProcedureBlock>1</ProcedureBlock>
<Super>%Studio.AbstractDocument</Super>
<TimeChanged>64510,41427.536379</TimeChanged>
<TimeCreated>59263,46415</TimeCreated>

<Projection name="RegisterExtension">
<Description>
The extension name, this can be a comma separated list of extensions if this class supports more than one</Description>
<Type>%Projection.StudioDocument</Type>
<Parameter name="DocumentDescription" value="Example User Document"/>
<Parameter name="DocumentExtension" value="tst"/>
<Parameter name="DocumentType" value="null"/>
</Projection>

<Method name="Load">
<Description>
Load the document into the stream Code</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Write !,"Load: ",..Name
	If ..Name="TestRoutine.TST" Do ..Clear(),..Write("This is a test document"_$char(13,10)_"This is the second line")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Compile">
<Description>
Compile the document</Description>
<FormalSpec>flags:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Write !,"Compile: ",..Name
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete the document 'name' which includes the document extension</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Write !,"Delete: ",name
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Lock">
<Description>
Lock the current document, default method just locks the ^ROUTINE global with the name of the document.
If it fails then return a status code of the error, otherise return $$$OK</Description>
<FormalSpec>flags:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Write !,"Lock: ",..Name
	Lock +^ROUTINE(..Name):0 Else  Quit $$$ERROR($$$CanNotLockRoutine,..Name)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Unlock">
<Description>
Unlock the current document, default method just unlocks the ^ROUTINE global with the name of the document</Description>
<FormalSpec>flags:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Write !,"Unlock: ",..Name
	Lock -^ROUTINE(..Name)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TimeStamp">
<Description>
Return the timestamp of document 'name' in %TimeStamp format. This is used to determine if the document has
been updated on the server and so needs reloading into Studio. The format should be $zdatetime($horolog,3),
or "" if the document does not exist.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[
	;Write !,"TimeStamp: ",name
	If name="TestRoutine.TST" Quit "2003-04-08 13:11:43"
	Quit ""
]]></Implementation>
</Method>

<Method name="Exists">
<Description>
Return 1 if the document 'name' exists and 0 if it does not.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;Write !,"Exists: ",name
	If name="TestRoutine.TST" Quit 1
	Quit 0
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Save the document stored in Code</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Write !,"Save: ",..Name
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ListExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,Directory:%String,Flat:%Boolean,System:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle=$listbuild(Directory,Flat,System,"")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ListFetch">
<Description><![CDATA[
This should return a Row in the form:<br>
$listbuild(name,date/time modified,size,directory delimiter)<ul>
<li>name - The name to display in the open dialog</li>
<li>date/time modified - In %TimeStamp format the date/time this item was last modified</li>
<li>size - The size of this item</li>
<li>directory delimiter - If this is not an directory then return "" here, if it is a directory then
return the type of delimiter to use when they double click on this directory</li>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>ListExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Row="",AtEnd=0
	If qHandle="" Set AtEnd=1 Quit $$$OK
	If $list(qHandle)'=""||($list(qHandle,4)=1) Set AtEnd=1 Quit $$$OK
	Set Row=$listbuild("TestRoutine.TST",$zdt($h,3),10101,""),$list(qHandle,4)=1,AtEnd=1
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Studio.SourceControl.Example">
<Description><![CDATA[
This is an example source control class. It is not intended for use on a real system, but as a code sample
showing some useful techniques.<p>
In this example each item in Cache is also stored as an XML file in the filesystem and these
external files are assumed to be version controlled by a tool. So every time you load an item this will
read the latest version of the item from the file, and when you save this item it will be
written back to the XML file.<p>
In addition, if you check an item out then an entry will be added to a global in Cache to show
that this item is checked out, and when you check it in the global entry will be removed.
Typically the checkout/checkin would call the external source control package, but setting
the global shows the general principle.<p>]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Studio.SourceControl.Base</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59241,41418</TimeCreated>

<Method name="OnBeforeLoad">
<Description>
Before loading any item we check to see if we have a later version in the XML
file and if so this is loaded. Note the use of the timestamps in ^MySourceControl
is just a performance optimzation to avoid loading the file where it is not needed.
We have the '0' subscript which tracks the modified time on the file to avoid loading
it when the file has not changed, and the '1' subscript tracks the timestamp on the item in
Cache so we do not save it if it is up to date.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set filename=..ExternalName(InternalName)
 If filename="" Quit $$$OK

 #; If no file then skip the import
 If '##class(%File).Exists(filename) Write !,"File ",filename," not found, skipping import" Quit $$$OK

 #; If the timestamp on the file is the same as the last time it was imported then there is nothing to do as it is already up to date
 If ##class(%File).GetFileDateModified(filename)=$get(^MySourceControl(0,InternalName)) Quit $$$OK

 #; Call the function to do the load
 Set sc=$system.OBJ.Load(filename,"-l-d")
 If $$$ISOK(sc) {
 Write !,"Imported '",InternalName,"' from file '",filename,"'"
 Set ^MySourceControl(0,InternalName)=##class(%File).GetFileDateModified(filename)
 Set ^MySourceControl(1,InternalName)=##class(%RoutineMgr).TS(InternalName)
 } Else {
 Do $system.Status.DecomposeStatus(sc,.errors,"d")
 }
 Quit sc
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<Description>
After saving an item in Cache we write this out to the XML file so the external source control
tool can see what changes we have made.</Description>
<FormalSpec>InternalName:%String,Object:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set filename=..ExternalName(InternalName)
 If filename="" Quit $$$OK

 #; If the timestamp of the item in Cache has not changed then there is no point in saving it again
 If ##class(%RoutineMgr).TS(InternalName)=$get(^MySourceControl(1,InternalName)) Quit $$$OK

 #; Call the export function
 Set sc=$system.OBJ.Export(InternalName,filename,"-d")
 If $$$ISOK(sc) {
 Write !,"Exported '",InternalName,"' to file '",filename,"'"
 Set ^MySourceControl(0,InternalName)=##class(%File).GetFileDateModified(filename)
 Set ^MySourceControl(1,InternalName)=##class(%RoutineMgr).TS(InternalName)
 } Else {
 Do $system.Status.DecomposeStatus(sc,,"d")
 }
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description><![CDATA[
Compilation can change a class as it can update the storage information. As such we need
to check if the item has changed and save it out again if it has, this is already done
by <method>OnAfterSave</method> so just call this.]]></Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit ..OnAfterSave(InternalName)
]]></Implementation>
</Method>

<Method name="GetStatus">
<FormalSpec><![CDATA[InternalName:%String,&IsInSourceControl:%Boolean,&Editable:%Boolean,&IsCheckedOut:%Boolean,&UserCheckedOut:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set Editable=0,IsCheckedOut=0,UserCheckedOut=""
 Set filename=..ExternalName(InternalName)
 Set IsInSourceControl=(filename'=""&&(##class(%File).Exists(filename)))
 If 'IsInSourceControl Set Editable=1 Quit $$$OK

 If $data(^MySourceControl(2,InternalName)) Set IsCheckedOut=1,UserCheckedOut=$listget(^MySourceControl(2,InternalName))
 If IsCheckedOut,UserCheckedOut=..Username Set Editable=1
 Quit ..OnBeforeLoad(InternalName)
]]></Implementation>
</Method>

<Method name="IsInSourceControl">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[ Quit 1
]]></Implementation>
</Method>

<Method name="ExternalName">
<Description><![CDATA[
This assumes that your directory structure starts with a directory for the type of each item
and then has subdirectories for each '.' in the item name with a base directory added to the
start. So 'User.MyClass.cls' maps to '<base>cls/User/MyClass.xml'. You can pick whatever structure
you prefer. This example is designed for Windows filenames, you will need to modify it to support
Unix or VMS filenames.]]></Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set name=$piece(InternalName,".",1,*-1),ext=$zconvert($piece(InternalName,".",*),"l")
	If name="" Quit ""
	If $extract(name)="/"||($extract(name)="\") Set name=$extract(name,2,*)
	If $$$isWINDOWS {
		Quit $get(^MySourceControl("base"),"C:\sources\")_ext_"\"_$translate(name,"./","\\")_".xml"
	} Else {
		Quit $get(^MySourceControl("base"),"/sources/")_ext_"/"_$translate(name,".\","//")_".xml"
	}
]]></Implementation>
</Method>

<Method name="CheckIn">
<Description>
Check this routine/class/csp file into source control.</Description>
<FormalSpec>InternalName:%String,Description:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 #; See if we have it checked out
 If '$data(^MySourceControl(2,InternalName)) Quit $$$ERROR($$$GeneralError,"You can not check in an item you have not got checked out")
 If $listget(^MySourceControl(2,InternalName))'=..Username Quit $$$ERROR($$$GeneralError,"User '"_$listget(^MySourceControl(2,InternalName))_"' has this item checked out")

 #; Write out the latest version
 Set sc=..OnAfterSave(InternalName)
 If $$$ISERR(sc) Quit sc

 #; Remove the global to show that we have checked it in
 Kill ^MySourceControl(2,InternalName)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckOut">
<Description>
Check this routine/class/csp file out of source control.</Description>
<FormalSpec>InternalName:%String,Description:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 #; See if anyone has it checked out
 If $data(^MySourceControl(2,InternalName)) {
 If $listget(^MySourceControl(2,InternalName))=..Username {
 Quit $$$ERROR($$$GeneralError,"You already have item '"_InternalName_"' checked out")
 } Else {
 Quit $$$ERROR($$$GeneralError,"Another user '"_$listget(^MySourceControl(2,InternalName))_"' has item '"_InternalName_"' checked out")
 }
 }

 #; Make sure we have the latest version of this item loaded
 Set sc=..OnBeforeLoad(InternalName)
 If $$$ISERR(sc) Quit sc

 #; Mark the global to show that we have it checked out.
 Set ^MySourceControl(2,InternalName)=$listbuild(..Username,Description)
 Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="User.LotteryActivity">
<Description><![CDATA[
The <CLASS>LotteryUser</CLASS> class represents a specific user activity  
the CSP Lottery Example application.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59269,47269.89</TimeCreated>

<Property name="TheUser">
<Type>LotteryUser</Type>
</Property>

<Property name="ActivityTime">
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($H,3)</InitialExpression>
<Required>1</Required>
</Property>

<Property name="ActivityType">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Amount">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Product">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.LotteryActivityD</DataLocation>
<DefaultData>LotteryActivityDefaultData</DefaultData>
<IdLocation>^User.LotteryActivityD</IdLocation>
<IndexLocation>^User.LotteryActivityI</IndexLocation>
<StreamLocation>^User.LotteryActivityS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LotteryActivityDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ActivityTime</Value>
</Value>
<Value name="3">
<Value>ActivityType</Value>
</Value>
<Value name="4">
<Value>Amount</Value>
</Value>
<Value name="5">
<Value>Product</Value>
</Value>
<Value name="6">
<Value>TheUser</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.LotteryUser">
<Description><![CDATA[
The <CLASS>LotteryUser</CLASS> class represents a user for 
the CSP Lottery Example application.]]></Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59269,47269.89</TimeCreated>

<Index name="UserNameIdx">
<Properties>UserName</Properties>
<Unique>1</Unique>
</Index>

<Property name="UserName">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="LastName">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="FirstName">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Password">
<Type>%String</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="VisitCount">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="TotalBalance">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="History">
<Type>LotteryActivity</Type>
<Collection>list</Collection>
</Property>

<Method name="changePassword">
<Description>
Change the password for this user.</Description>
<FormalSpec>pass:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 Set ..Password=pass
 QUIT
]]></Implementation>
</Method>

<Method name="testPassword">
<Description><![CDATA[
Test if <var>pass</var> is correct password for this user.]]></Description>
<FormalSpec>pass:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[ Quit (..Password=pass)
]]></Implementation>
</Method>

<Method name="addNewUser">
<Description>
Called by CSP page to add a new user.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>UserName:%String,FirstName:%String,LastName:%String,pass:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 Set user=##class(LotteryUser).%New()
 Set user.UserName=UserName
 Set user.FirstName=FirstName
 Set user.LastName=LastName
 Do user.changePassword(pass)

 Set sc=user.%Save()

 If ($$$ISERR(sc)) &js<alert('Unable to create user.');> QUIT 0

 QUIT 1
]]></Implementation>
</Method>

<Method name="findUser">
<Description>
Find the ID of the user with the specified user name.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>UserName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set id=""

 ; use embedded SQL to search for user
 &sql(SELECT ID INTO :id FROM LotteryUser Where (UserName = :UserName))

 QUIT id
]]></Implementation>
</Method>

<Method name="authenticate">
<Description>
Test if the name/password specifies a valid user. If so, return the user's ID.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>UserName:%String,Password:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set id=..findUser(UserName)
 If (id'="") Do
 . Set user=..%OpenId(id)
 . If 'user.testPassword(Password) Set id=""

 QUIT id
]]></Implementation>
</Method>

<Method name="addPurchase">
<Description>
Called by CSP page to add a new purchase. Returns amount of purchase.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,type:%String</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
 Set price=0
 If (type="STANDARD") Set price=10
 Else  If (type="DELUXE") Set price=50

 If (price=0) QUIT 0

 Set user=##class(LotteryUser).%OpenId(id)
 If user="" QUIT 0

 Set action=##class(LotteryActivity).%New()
 Set action.TheUser=user
 Set action.ActivityType="PURCHASE"
 Set action.Amount=price
 Set action.Product=type

 Do user.History.Insert(action)

 Set sc=user.%Save()

 QUIT price
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.LotteryUserD</DataLocation>
<DefaultData>LotteryUserDefaultData</DefaultData>
<IdLocation>^User.LotteryUserD</IdLocation>
<IndexLocation>^User.LotteryUserI</IndexLocation>
<StreamLocation>^User.LotteryUserS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LotteryUserDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FirstName</Value>
</Value>
<Value name="3">
<Value>History</Value>
</Value>
<Value name="4">
<Value>LastName</Value>
</Value>
<Value name="5">
<Value>Password</Value>
</Value>
<Value name="6">
<Value>TotalBalance</Value>
</Value>
<Value name="7">
<Value>UserName</Value>
</Value>
<Value name="8">
<Value>VisitCount</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.LotteryUtils">
<Description><![CDATA[
The <CLASS>LotteryUtils</CLASS> class contains a number of common methods used by 
the pages within the CSP Lottery Example application.]]></Description>
<Abstract>1</Abstract>
<IncludeCode>%occInclude,%cspInclude</IncludeCode>
<IncludeGenerator>%occInclude</IncludeGenerator>
<ProcedureBlock>0</ProcedureBlock>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59269,47269.89</TimeCreated>

<Method name="onPrePage">
<Implementation><![CDATA[
 ; perform page authorization
 ; if user is not logged in, jump to Error Page
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="displayTitle">
<Description>
Write out the HTML to display the common title used by pages within the 
Lottery example.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 &html<<p align="center"><img src="lotterylogo.jpg"></p><hr>>
 Quit ""
]]></Implementation>
</Method>

<Method name="displayUnauthorized">
<Description>
Write out the HTML to display the common message display for 
unauthorized access within the Lottery example.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 &html<
 <p align="center">
 <font face="Lucida Sans" color="yellow"  size="+3">
 <font color="red"><b>Unauthorized access.</b></font></p>
 <p align="center">
 You must <a href='#(##class(%CSP.Page).Link("lottery.csp"))#'>login</a> to visit this page.</p>
 </font>
 >
 Quit ""
]]></Implementation>
</Method>
</Class>


<Class name="User.Person">
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%Populate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>59912,46120.301956</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="name">
<Type>%String</Type>
<Parameter name="POPSPEC" value="Name()"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="city">
<Type>%String</Type>
<Parameter name="POPSPEC" value="City()"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="dob">
<Type>%Date</Type>
</Property>

<Property name="score">
<Type>%Integer</Type>
<Parameter name="POPSPEC" value="Integer(0,100)"/>
</Property>

<Property name="salary">
<Type>%Float</Type>
<Parameter name="POPSPEC" value="Float(5000,400000,2)"/>
</Property>

<Index name="nameIDX">
<Data>name</Data>
<Properties>name</Properties>
</Index>

<Index name="cityIDX">
<Type>index</Type>
<Properties>city:SQLSTRING</Properties>
</Index>

<Index name="nsIDX">
<Properties>name,score</Properties>
</Index>

<Index name="ncIDX">
<Properties>name,city</Properties>
</Index>

<Index name="scoreIDX">
<Properties>score:SQLUPPER</Properties>
</Index>

<Index name="dobIDX">
<Properties>dob</Properties>
</Index>

<Index name="salaryIDX">
<Properties>salary</Properties>
</Index>

<Index name="salaryStrIDX">
<Properties>salary:SQLString</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^User.PersonD</IdLocation>
<IndexLocation>^User.PersonI</IndexLocation>
<StreamLocation>^User.PersonS</StreamLocation>
<Data name="PersonDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>city</Value>
</Value>
<Value name="3">
<Value>dob</Value>
</Value>
<Value name="4">
<Value>name</Value>
</Value>
<Value name="5">
<Value>salary</Value>
</Value>
<Value name="6">
<Value>score</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.testidkey2">
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60067,59079.705438</TimeCreated>

<Index name="IDKEY">
<IdKey>1</IdKey>
<Properties>Name,Num</Properties>
</Index>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Num">
<Type>%Integer</Type>
</Property>

<Property name="Age">
<Type>%Integer</Type>
</Property>

<Index name="ageindex">
<Properties>Age</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^User.testidkey2D</DataLocation>
<DefaultData>testidkey2DefaultData</DefaultData>
<IdLocation>^User.testidkey2D</IdLocation>
<IndexLocation>^User.testidkey2I</IndexLocation>
<StreamLocation>^User.testidkey2S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="testidkey2DefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Age</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Common.DT.Email">
<Super>%Library.String</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,84353.157811</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
//.A1"@".A1"."3A

]]></Content>
</UDLText>

<Parameter name="PATTERN">
<Description><![CDATA[
A pattern which the string should match.
<p>The value of <var>PATTERN</var> should be a valid
<i>Cach&eacute</i> pattern match expression.]]></Description>
<Default>.A1"@".A1"."3A</Default>
</Parameter>
</Class>


<Class name="Wasabi.Common.Test">
<Abstract>1</Abstract>
<IncludeCode>%occInclude</IncludeCode>
<IncludeGenerator>%occInclude,%occUtility,%occReference2</IncludeGenerator>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61306,18654.653038</TimeCreated>

<Method name="PopulateEmployees">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>nEmployees:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	for nCust=1:1:nEmployees{
	    s employee=##class(Wasabi.Person.API.Employee).%New()
		d ..PopPersonProps(.employee)
        s employee.SSN=(100+$r(899))_(10+$r(89))_(1000+$r(8999))
        s nJobs=$r(3)+1
        for nJ=1:1:nJobs{
	        s nJob=##class(Wasabi.Data.Job).%New()
	        s nJob.JobTitle=##class(%PopulateUtils).Title()
	        s nJob.SecurityRole=##class(%PopulateUtils).String(4)
	        s sc=nJob.%Save()
            d employee.Jobs.InsertObject(nJob.%Oid())
	    }
	    //find a random, active employee to be this person's manager
	    &sql(SELECT min(%ID),max(%ID) INTO :nMinEmpID,:nMaxEmpID from wasabi_data.employee)
	    //if table is empty, set the min and max row IDs to dummy values
	    if SQLCODE=0 {
		    if $g(nMaxEmpID)-$g(nMinEmpID)<=0 s nMinEmpID=0,nMaxEmpID=1 
		    //make 20 attempts to find an employee has active status
		    for nAttempts=1:1:20
		    {
			     s EmpID=nMinEmpID+$r(nMaxEmpID-nMinEmpID)
		     		     
		         &sql(SELECT %ID INTO :MgrID from wasabi_data.employee where %ID=:EmpID and Active=1)
		         
	             if SQLCODE = 0 {
	             	do employee.ManagerSetObjectId(MgrID)            
	             	quit
	             }
		    }
		    //if we had no luck finding an active manager, set manager to be the first ID in the employee table who has Active status
	        if '($IsObject(employee.Manager))
	        {
		        &sql(SELECT %ID INTO :MgrID from wasabi_data.employee where Active=1 order by %ID)
		        if SQLCODE = 0 {
			        	do employee.ManagerSetObjectId(MgrID)            
		        }
		          
	        }
	    }
         s MinHireDay=45000,MaxHireDay=60000
         s employee.HireDate=##class(%PopulateUtils).Date(MinHireDay,MaxHireDay)
         s employee.Active=$r(2)
         if employee.Active=0 s employee.SeparationDate=##class(%PopulateUtils).Date((MaxHireDay+1),($h-1))

         //create a location address for this employee.  If you want all employees to have same location, put this outside the loop
         //and set each employee's address to addr
         d ..PopAddress(.LocaddrOID)
         s addr=##class(Wasabi.Data.AddressPersistent).%Open(LocaddrOID)
         if $IsObject(addr) s employee.Location=addr
         
         s employee.Email=$ZSTRIP((employee.LastName_employee.FirstName),"*P")_"@company.com"

         //using the prepopulated global of binary images for male and females, grab one for this employee
         if employee.Gender=1 d ..GrabRandomPicture(.strRandomPic)
         else  s gn="^zzzWasabiWomanPics" d ..GrabRandomPicture(.strRandomPic,gn)
         d employee.Picture.CopyFromAndSave(strRandomPic)
		 d ##class(Wasabi.Data.Employee).Add(employee)
	}
]]></Implementation>
</Method>

<Method name="PopulateCustomers">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>nCustomers:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	for nCust=1:1:nCustomers{
	    s customer=##class(Wasabi.Person.API.Customer).%New()
		d ..PopPersonProps(.customer)
		s customer.CustomerNumber=$r(899999999)+100000000000
        s customer.CompanyName=##class(%PopulateUtils).Company()
        s customer.ContactEmailAddress=$ZSTRIP((customer.LastName_customer.FirstName),"*P")_"@"_$p(##class(%Library.PopulateUtils).Syllable()," ",1)_##class(%PopulateUtils).ValueList(",.com,.net,.org")

		d ##class(Wasabi.Data.Customer).Add(customer)
	}
]]></Implementation>
</Method>

<Method name="PopPersonProps">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&person:%ObjectIdentity]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 s person.Gender=$r(2)+1
     s person.ID=$r(899999)+100000
     s person.LastName=##class(%PopulateUtils).LastName()
     s person.FirstName=##class(%PopulateUtils).FirstName(person.Gender)
     s person.MiddleInitial=##class(%PopulateUtils).String()
     s person.DOB=##class(%PopulateUtils).Date(30000,60000)
     s person.Title=##class(%PopulateUtils).ValueList(",Dr.,Counselor,Honorable,Judge")
     s person.Suffix=##class(%PopulateUtils).ValueList(",Jr.,Sr.,M.D.,Esq.,DDS")
     s person.UserName=person.LastName_##class(%PopulateUtils).String(4)
     s person.Password=$system.Encryption.MD5Hash(person.Password)

     s nAddr=$r(3)+1
     for nA=1:1:nAddr s sc=..PopAddress(.addrOID) d person.Addresses.InsertObject(addrOID)
     
     s nPhone=$r(3)+1
     for nA=1:1:nPhone s sc=..PopPhoneNumberSerial(.phOREF) d person.PhoneNumberSerials.Insert(phOREF)
     quit $$$OK
]]></Implementation>
</Method>

<Method name="PopAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&addrOID:%ObjectIdentity]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   s addr=##class(Wasabi.Data.AddressPersistent).%New()
   s addr.Street1=##class(%PopulateUtils).Street()
   s addr.Street2=##class(%PopulateUtils).ValueList(",,Suite 100,Dept 1A,Floor 789,,Dept 8C,C92-293,Sector 456,,,Mailroom")
   s addr.City=##class(%PopulateUtils).City()
   s addr.Region=##class(%PopulateUtils).USState()
   s addr.PostalCode=##class(%PopulateUtils).USZip()
   s addr.Country=##class(%PopulateUtils).ValueList(",USA,Canada")
   s sc=addr.%Save()
   s addrOID=addr.%Oid()
   q sc
]]></Implementation>
</Method>

<Method name="PopPhoneNumberSerial">
<ClassMethod>1</ClassMethod>
<FormalSpec>ph:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s ph=##class(Wasabi.Data.PhoneNumberSerial).%New()
	s ph.CountryCode="00"_($r(9)+1)
    s ph.PhoneNumberSerial=$r(8999999999)+1000000000
    s ph.Type=##class(%PopulateUtils).ValueList(",HOME,BUSINESS,CELL")
    s ph.Extension=##class(%PopulateUtils).Integer(1000,9999)
    q $$$OK
]]></Implementation>
</Method>

<Method name="CopyPersonPictureFile2Global">
<ClassMethod>1</ClassMethod>
<FormalSpec>PicFilename:%String,GlobalName:%String="^zzzWasabiManPics"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s StreamFile=##class(%Stream.FileBinary).%New()
	s StreamFile.Filename=$g(PicFilename)
	s StreamGloBin=##class(%Stream.GlobalBinary).%New()
	s StreamGloBin.%Location=GlobalName
	s sc=StreamGloBin.CopyFromAndSave(StreamFile) 
	//NOTE:  I'm getting a non-fatal error saying it can't delete a file in the temp dir.  
	q sc
]]></Implementation>
</Method>

<Method name="SavePersonPicture2File">
<ClassMethod>1</ClassMethod>
<FormalSpec>PicFilename:%String,GlobalName:%String="^zzzWasabiManPics",ID:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Use this method to dump populator stream globals to files
	//PicFilename is output file name
	//GlobalName is the global containing the image streams
	//ID is the subscript in the stream global node.
    s StreamGloBinOID=$lb(ID,"%Stream.GlobalBinary",GlobalName)
    s StreamGloBin=##class(%Stream.Object).%Open(StreamGloBinOID)
    s StreamFileBin=##class(%Stream.FileBinary).%New(),StreamFileBin.Filename=PicFilename
    d StreamFileBin.CopyFromAndSave(StreamGloBin)
	q $$$OK
]]></Implementation>
</Method>

<Method name="SaveGBStream2File">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[PicFilename:%String,&SGB:%Stream.GlobalBinary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    s StreamFileBin=##class(%Stream.FileBinary).%New(),StreamFileBin.Filename=PicFilename
    d StreamFileBin.CopyFromAndSave(SGB)
	q $$$OK
]]></Implementation>
</Method>

<Method name="GrabRandomPicture">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&StreamGloBin:%Stream.GlobalBinary,GlobalName:%String="^zzzWasabiManPics"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s sc=$$$OK
	//count number of images in picture global 
	s key=$o(@GlobalName@(""))
	while key'=""
	{
		s PicIDArray=$g(PicIDArray)_$lb(key)
		s key=$o(@GlobalName@(key))
	}   
	
    if $ll(PicIDArray)>0
    {
	    //randomly select an ID from the array
	    s whichPicID=$LG(PicIDArray,$R($LL(PicIDArray))+1)
	    if $d(@GlobalName@(whichPicID))
	    {
		   s StreamGloBinOID=$lb(whichPicID,"%Stream.GlobalBinary",GlobalName)
           s SGB=##class(%Stream.Object).%Open(StreamGloBinOID)
           s StreamGloBin=##class(%Stream.GlobalBinary).%New()
           s sc=StreamGloBin.CopyFromAndSave(SGB)
	    }
    }
    //otherwise, there are no pictures for this gender
	
	q sc
]]></Implementation>
</Method>
</Class>


<Class name="Wasabi.Data.Address">
<Abstract>1</Abstract>
<Super>Wasabi.Person.API.AddressUtils</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,37481.275317</TimeCreated>

<Property name="Type">
<Description>
Flesh Out Values</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Home,Shipping,Billing"/>
</Property>

<Property name="PostalCode">
<Type>%String</Type>
</Property>

<Property name="Street1">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Street2">
<Type>%String</Type>
</Property>

<Property name="City">
<Type>%String</Type>
</Property>

<Property name="Region">
<Type>%String</Type>
</Property>

<Property name="Country">
<Type>%String</Type>
<InitialExpression>"USA"</InitialExpression>
</Property>

<Method name="CopyFrom">
<FormalSpec>addr:%RegisteredObject</FormalSpec>
<Implementation><![CDATA[
	
	try {
		set ..City = addr.City
		set ..Country = addr.Country
		set ..Street1 = addr.Street1
		set ..Street2 = addr.Street2
		set ..PostalCode = addr.PostalCode
		set ..Region = addr.Region
		set ..Type = addr.Type
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex

	}
]]></Implementation>
</Method>
</Class>


<Class name="Wasabi.Data.AddressPersistent">
<Super>%Persistent,Wasabi.Data.Address</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,37349.354465</TimeCreated>
<Inheritance>right</Inheritance>

<Method name="GetOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>Wasabi.Data.Address</ReturnType>
<Implementation><![CDATA[

		
	try {
		set source = ##class(Wasabi.Data.AddressPersistent).%OpenId(id,,.sc)
		$$$THROWONERROR(status,sc)
		set target = ##class(Wasabi.Person.API.Address).%New()
		set target.ID = id
		set target.City = source.City
		set target.Country = source.Country
		set target.Street1 = source.Street1
		set target.Street2 = source.Street2
		set target.PostalCode = source.PostalCode
		set target.Region = source.Region
		set target.Type = source.Type
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex
	}
	quit target
]]></Implementation>
</Method>

<Method name="Add">
<ClassMethod>1</ClassMethod>
<FormalSpec>addr:Wasabi.Person.API.Address</FormalSpec>
<Implementation><![CDATA[

	
	try {
		set target = ##class(Wasabi.Data.AddressPersistent).%New()
		do target.CopyFrom(addr)
		$$$THROWONERROR(status,target.%Save())
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex

	}
]]></Implementation>
</Method>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<FormalSpec>addr:Wasabi.Person.API.Address</FormalSpec>
<Implementation><![CDATA[

	
	try {
		set target = ##class(Wasabi.Data.AddressPersistent).%OpenId(addr.ID,,.status)
		$$$THROWONERROR(status,status)
		do target.CopyFrom(addr)
		$$$THROWONERROR(status,target.%Save())
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex
	}
]]></Implementation>
</Method>

<Method name="GetMatches">
<ClassMethod>1</ClassMethod>
<FormalSpec>city:%String="",region:%String=""</FormalSpec>
<ReturnType>%ResultSet.SQL</ReturnType>
<Implementation><![CDATA[


	try {
		set whereclause = ""
	
		set sql = "select city, region, street1, street2 from wasabi_data.addresspersistent"
		if city '= "" {
			set whereclause = "city %startswith ?"
		}
	
		if region '= "" {
			if whereclause '= "" {
				set whereclause = whereclause _" and region %startswith ?"
			}
			else {
				set whereclause = "region %startswith ?"
			}
		}
	
		if whereclause '= "" {
			set sql = sql _" where "_whereclause 
		}
	
		set rs = ##class(%ResultSet.SQL).%Prepare(sql,.error,,city,region)
		if $isobject(error) {
			$$$THROWONERROR(status,error.Status)
		}
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex

	}
	
	quit rs
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.Data.AddressPersDE4AD</DataLocation>
<DefaultData>AddressPersistentDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.AddressPersDE4AD</IdLocation>
<IndexLocation>^Wasabi.Data.AddressPersDE4AI</IndexLocation>
<StreamLocation>^Wasabi.Data.AddressPersDE4AS</StreamLocation>
<Data name="AddressPersistentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Type</Value>
</Value>
<Value name="3">
<Value>Street1</Value>
</Value>
<Value name="4">
<Value>Street2</Value>
</Value>
<Value name="5">
<Value>City</Value>
</Value>
<Value name="6">
<Value>Region</Value>
</Value>
<Value name="7">
<Value>Country</Value>
</Value>
<Value name="8">
<Value>PostalCode</Value>
</Value>
</Data>
<Property name="City"/>
<Property name="Country"/>
<Property name="PostalCode"/>
<Property name="Region"/>
<Property name="Street1"/>
<Property name="Street2"/>
<Property name="Type"/>
</Storage>
</Class>


<Class name="Wasabi.Data.AddressSerial">
<Super>%SerialObject,Wasabi.Data.Address</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,37555.01889</TimeCreated>
<Inheritance>right</Inheritance>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>AddressSerialState</State>
<StreamLocation>^Wasabi.Data.AddressSerialS</StreamLocation>
<Data name="AddressSerialState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>Type</Value>
</Value>
<Value name="2">
<Value>Street1</Value>
</Value>
<Value name="3">
<Value>Street2</Value>
</Value>
<Value name="4">
<Value>City</Value>
</Value>
<Value name="5">
<Value>Region</Value>
</Value>
<Value name="6">
<Value>Country</Value>
</Value>
<Value name="7">
<Value>PostalCode</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.Category">
<Description>
Category for products</Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,32718.830504</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Description">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.Data.CategoryD</DataLocation>
<DefaultData>CategoryDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.CategoryD</IdLocation>
<IndexLocation>^Wasabi.Data.CategoryI</IndexLocation>
<StreamLocation>^Wasabi.Data.CategoryS</StreamLocation>
<Data name="CategoryDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.Customer">
<Super>Wasabi.Data.Person</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,61301.92208</TimeCreated>

<Property name="CustomerNumber">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Index name="CustomerNumberIndex">
<Properties>CustomerNumber</Properties>
<Unique>1</Unique>
</Index>

<Property name="CompanyName">
<Type>%String</Type>
</Property>

<Property name="ContactEmailAddress">
<Type>Wasabi.Common.DT.Email</Type>
</Property>

<Method name="%OnAddToSaveSet">
<FormalSpec>depth:%Integer=3,insert:%Integer=0,callcount:%Integer=0</FormalSpec>
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s ..ContactEmailAddress=..FirstName_..LastName_"@"_$p(##class(%Library.PopulateUtils).Syllable()," ",1)_##class(%PopulateUtils).ValueList(",.com,.net,.org")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>Wasabi.Person.API.Person</ReturnType>
<Implementation><![CDATA[

	
	try {
		set obj = ""
		set cust = ##class(Wasabi.Data.Customer).%OpenId(id,,.sc)
		$$$THROWONERROR(sc,sc)
		set obj = ##class(Wasabi.Person.API.Customer).%New()
		set obj.ID = id
		set obj.CompanyName = cust.CompanyName
		set obj.Addresses = cust.Addresses
		set obj.ContactEmailAddress = cust.ContactEmailAddress
		set obj.CustomerNumber = cust.CustomerNumber
		set obj.DOB = cust.DOB
		set obj.FirstName = cust.FirstName
		set obj.Gender = cust.Gender
		set obj.LastName = cust.LastName
		set obj.MiddleInitial = cust.MiddleInitial
		set obj.PhoneNumberSerials = cust.PhoneNumberSerials
		set obj.Suffix = cust.Suffix
		set obj.Title = cust.Title
		set obj.UserName = cust.UserName
		set obj.Password = cust.Password
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex
	}
	quit obj
]]></Implementation>
</Method>

<Method name="Add">
<ClassMethod>1</ClassMethod>
<FormalSpec>cust:Wasabi.Person.API.Person</FormalSpec>
<Implementation><![CDATA[

	
	try {
		set sc = 0
		set obj = ##class(Customer).%New()
		do obj.CopyFrom(cust)
		$$$THROWONERROR(status,obj.%Save())
		}
	catch ex {
		// simply passes the exception to the caller
		THROW ex
	}
]]></Implementation>
</Method>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<FormalSpec>cust:Wasabi.Person.API.Person</FormalSpec>
<Implementation><![CDATA[

	
	
	try {		
		set obj = ##class(Wasabi.Data.Customer).%OpenId(cust.ID,,.sc)
		$$$THROWONERROR(status,sc)
		do obj.CopyFrom(cust)
		$$$THROWONERROR(status,obj.%Save())
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex
	}
]]></Implementation>
</Method>

<Method name="CopyFrom">
<FormalSpec>cust:Wasabi.Person.API.Customer</FormalSpec>
<Implementation><![CDATA[

		
		
		set ..Addresses = cust.Addresses
		set ..CompanyName = cust.CompanyName
		set ..ContactEmailAddress = cust.ContactEmailAddress
		set ..CustomerNumber = cust.CustomerNumber
		set ..DOB = cust.DOB
		set ..FirstName = cust.FirstName
		set ..Gender = cust.Gender
		set ..LastName = cust.LastName
		set ..MiddleInitial = cust.MiddleInitial
		set ..PhoneNumberSerials = cust.PhoneNumberSerials
		set ..Suffix = cust.Suffix
		set ..Title = cust.Title
		set ..UserName = cust.UserName
		if ..Password '= cust.Password {
			set ..Password = cust.Password
		}
]]></Implementation>
</Method>

<Method name="GetMatches">
<ClassMethod>1</ClassMethod>
<FormalSpec>lastname:%String="",firstname:%String=""</FormalSpec>
<ReturnType>%ResultSet.SQL</ReturnType>
<Implementation><![CDATA[
	
	try {
		set whereclause = ""
	
		set sql = "select lastname, firstname,dob,gender from wasabi_data.customer"
		if lastname '= "" {
			set whereclause = "lastname %startswith ?"
		}
	
		if firstname '= "" {
			if whereclause '= "" {
				set whereclause = whereclause _" and firstname %startswith ?"
			}
			else {
				set whereclause = "firstname %startswith ?"
			}
		}
	
		if whereclause '= "" {
			set sql = sql _" where "_whereclause 
		}
		
		set rs = ##class(%ResultSet.SQL).%Prepare(sql,.error,,lastname,firstname)
	
		if $isobject(error) {
		$$$THROWONERROR(status,error.Status)
		}
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex

	}
	
	
	
	quit rs
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CustomerDefaultData</DefaultData>
<Data name="CustomerDefaultData">
<Subscript>"Customer"</Subscript>
<Value name="1">
<Value>CustomerNumber</Value>
</Value>
<Value name="2">
<Value>CompanyName</Value>
</Value>
<Value name="3">
<Value>ContactEmailAddress</Value>
</Value>
</Data>
<Property name="Age"/>
<Property name="CompanyName"/>
<Property name="ContactEmailAddress"/>
<Property name="CustomerNumber"/>
<Property name="DOB"/>
<Property name="FirstName"/>
<Property name="FullName"/>
<Property name="Gender"/>
<Property name="LastName"/>
<Property name="MiddleInitial"/>
<Property name="Password"/>
<Property name="PhoneNumberSerials"/>
<Property name="Suffix"/>
<Property name="Title"/>
<Property name="UserName"/>
</Storage>
</Class>


<Class name="Wasabi.Data.Employee">
<Super>Wasabi.Data.Person</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,61509.478557</TimeCreated>

<Property name="SSN">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="SSNIndex">
<Properties>SSN</Properties>
<Unique>1</Unique>
</Index>

<Property name="Jobs">
<Type>Wasabi.Data.Job</Type>
<Collection>list</Collection>
</Property>

<Property name="Manager">
<Type>Wasabi.Data.Employee</Type>
</Property>

<Property name="HireDate">
<Type>%Date</Type>
</Property>

<Property name="SeparationDate">
<Type>%Date</Type>
</Property>

<Property name="Location">
<Type>Wasabi.Data.AddressPersistent</Type>
</Property>

<Property name="Email">
<Type>Wasabi.Common.DT.Email</Type>
</Property>

<Property name="Active">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="Picture">
<Type>%Stream.GlobalBinary</Type>
</Property>

<Method name="GetOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>Wasabi.Person.API.Person</ReturnType>
<Implementation><![CDATA[

	
	
	try {
		set obj = ""
		set employee = ##class(Wasabi.Data.Employee).%OpenId(id,,.sc)
		$$$THROWONERROR(sc,sc)
	
		set obj = ##class(Wasabi.Person.API.Employee).%New()

		// super-class properties
		set obj.ID = id
		set obj.Addresses          = employee.Addresses
		set obj.DOB                = employee.DOB
		set obj.FirstName          = employee.FirstName
		set obj.Gender             = employee.Gender
		set obj.LastName           = employee.LastName
		set obj.MiddleInitial      = employee.MiddleInitial
		set obj.PhoneNumberSerials = employee.PhoneNumberSerials
		set obj.Suffix             = employee.Suffix
		set obj.Title              = employee.Title
		set obj.UserName           = employee.UserName
		set obj.Password           = employee.Password
		
		// sub-class properties
		set obj.SSN                = employee.SSN
		set obj.Manager            = employee.Manager
		set obj.HireDate           = employee.HireDate
		set obj.SeparationDate     = employee.SeparationDate
		Set obj.Location           = employee.Location
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex
	}
	quit obj
]]></Implementation>
</Method>

<Method name="Add">
<ClassMethod>1</ClassMethod>
<FormalSpec>employee:Wasabi.Person.API.Person</FormalSpec>
<Implementation><![CDATA[

		
	try {
		set sc = 0
		set obj = ##class(Wasabi.Data.Employee).%New()
		do obj.CopyFrom(employee)
		$$$THROWONERROR(status,obj.%Save())

		}
	catch ex {
		// simply passes the exception to the caller
		THROW ex
	}
]]></Implementation>
</Method>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<FormalSpec>employee:Wasabi.Person.API.Person</FormalSpec>
<Implementation><![CDATA[

	
	
	try {		
		set obj = ##class(Wasabi.Data.Employee).%OpenId(employee.ID,,.sc)
		$$$THROWONERROR(status,sc)
		do obj.CopyFrom(employee)
		$$$THROWONERROR(status,obj.%Save())
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex
	}
]]></Implementation>
</Method>

<Method name="CopyFrom">
<FormalSpec>employee:Wasabi.Person.API.Employee</FormalSpec>
<Implementation><![CDATA[

		
		// super-class properties
		set ..Addresses          = employee.Addresses
		set ..DOB                = employee.DOB
		set ..FirstName          = employee.FirstName
		set ..Gender             = employee.Gender
		set ..LastName           = employee.LastName
		set ..MiddleInitial      = employee.MiddleInitial
		set ..PhoneNumberSerials = employee.PhoneNumberSerials
		set ..Suffix             = employee.Suffix
		set ..Title              = employee.Title
		set ..UserName           = employee.UserName
		 if ..Password          '= employee.Password 
				{
				  set ..Password = employee.Password
				}
		
		// sub-class properties
		set ..SSN                = employee.SSN
		set ..Jobs               = employee.Jobs
		set ..Manager            = employee.Manager
		set ..HireDate           = employee.HireDate
		set ..SeparationDate     = employee.SeparationDate
		set ..Location           = employee.Location
		set ..Email              = employee.Email
		set ..Active             = employee.Active
		set ..Picture            = employee.Picture
]]></Implementation>
</Method>

<Method name="GetMatches">
<ClassMethod>1</ClassMethod>
<FormalSpec>lastname:%String="",firstname:%String=""</FormalSpec>
<ReturnType>%ResultSet.SQL</ReturnType>
<Implementation><![CDATA[

	
	try {
		set whereclause = ""
	
		set sql = "select lastname, firstname,dob,gender from wasabi_data.employee"
		if lastname '= "" {
			set whereclause = "lastname %startswith ?"
		}
	
		if firstname '= "" {
			if whereclause '= "" {
				set whereclause = whereclause _" and firstname %startswith ?"
			}
			else {
				set whereclause = "firstname %startswith ?"
			}
		}
	
		if whereclause '= "" {
			set sql = sql _" where "_whereclause 
		}
		set rs = ##class(%ResultSet.SQL).%Prepare(sql,.error,,lastname,firstname)
	
		if $isobject(error) {
			$$$THROWONERROR(status,error.Status)
		}
		
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex

	}
	
	
	quit rs
]]></Implementation>
</Method>

<Method name="Terminate">
<ClassMethod>1</ClassMethod>
<FormalSpec>employee:Wasabi.Person.API.Employee</FormalSpec>
<Implementation><![CDATA[

	
	
	
	try {
		set obj = ##class(Wasabi.Data.Employee).%OpenId(employee.ID,,.sc)
		$$$THROWONERROR(status,sc)
		
		Set obj.Active         = $$$NO
		Set obj.SeparationDate = employee.SeparationDate
		If obj.SeparationDate  = "" 
		   {
			   Set obj.SeparationDate = +$H
		   }
		$$$THROWONERROR(status,obj.%Save())
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>EmployeeDefaultData</DefaultData>
<Data name="EmployeeDefaultData">
<Subscript>"Employee"</Subscript>
<Value name="1">
<Value>SSN</Value>
</Value>
<Value name="2">
<Value>Jobs</Value>
</Value>
<Value name="3">
<Value>Manager</Value>
</Value>
<Value name="4">
<Value>HireDate</Value>
</Value>
<Value name="5">
<Value>SeparationDate</Value>
</Value>
<Value name="6">
<Value>Location</Value>
</Value>
<Value name="7">
<Value>Email</Value>
</Value>
<Value name="8">
<Value>Picture</Value>
</Value>
<Value name="9">
<Value>Active</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.InventoryCategory">
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,58011.623648</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.Data.InventoryCategoryD</DataLocation>
<DefaultData>InventoryCategoryDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.InventoryCategoryD</IdLocation>
<IndexLocation>^Wasabi.Data.InventoryCategoryI</IndexLocation>
<StreamLocation>^Wasabi.Data.InventoryCategoryS</StreamLocation>
<Data name="InventoryCategoryDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.Job">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,61391.858635</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="JobTitle">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="SecurityRole">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.Data.JobD</DataLocation>
<DefaultData>JobDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.JobD</IdLocation>
<IndexLocation>^Wasabi.Data.JobI</IndexLocation>
<StreamLocation>^Wasabi.Data.JobS</StreamLocation>
<Data name="JobDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>JobTitle</Value>
</Value>
<Value name="3">
<Value>SecurityRole</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.Outlet">
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,33282.993852</TimeCreated>

<Property name="Address">
<Type>Wasabi.Data.AddressPersistent</Type>
</Property>

<Property name="Phone">
<Type>%String</Type>
</Property>

<Property name="DefaultPriceCatalog">
<Type>PriceCatalog</Type>
</Property>

<Property name="OPCs">
<Type>Wasabi.Data.OutletPriceCatalog</Type>
<Cardinality>children</Cardinality>
<Inverse>Outlet</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="OutletProducts">
<Type>Wasabi.Data.OutletProduct</Type>
<Cardinality>many</Cardinality>
<Inverse>Outlet</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.Data.OutletD</DataLocation>
<DefaultData>OutletDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.OutletD</IdLocation>
<IndexLocation>^Wasabi.Data.OutletI</IndexLocation>
<StreamLocation>^Wasabi.Data.OutletS</StreamLocation>
<Data name="OutletDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Address</Value>
</Value>
<Value name="3">
<Value>OutletProducts</Value>
</Value>
<Value name="4">
<Value>Phone</Value>
</Value>
<Value name="5">
<Value>DefaultPriceCatalog</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.OutletPriceCatalog">
<Description>
Associative entity for many to many relationship between Outlets and PriceCatalogs</Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,36331.955966</TimeCreated>

<Property name="PriceCatalog">
<Type>Wasabi.Data.PriceCatalog</Type>
<Cardinality>one</Cardinality>
<Inverse>OPCs</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PriceCatalogIndex">
<Properties>PriceCatalog</Properties>
</Index>

<Property name="Outlet">
<Type>Wasabi.Data.Outlet</Type>
<Cardinality>parent</Cardinality>
<Inverse>OPCs</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("OPCs")</DataLocation>
<DefaultData>OutletPriceCatalogDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.OutletC("OPCs")</IdLocation>
<IndexLocation>^Wasabi.Data.OutletPrice1A3EI</IndexLocation>
<StreamLocation>^Wasabi.Data.OutletPrice1A3ES</StreamLocation>
<Data name="OutletPriceCatalogDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PriceCatalog</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.OutletProduct">
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,50500.52986</TimeCreated>

<Property name="Quantity">
<Description>
Total quantity in stock</Description>
<Type>%Integer</Type>
</Property>

<Property name="QuantityCommitted">
<Description>
Quantity committed to orders</Description>
<Type>%Integer</Type>
</Property>

<Property name="Outlet">
<Type>Outlet</Type>
<Cardinality>one</Cardinality>
<Inverse>OutletProducts</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Product">
<Type>Product</Type>
<Cardinality>one</Cardinality>
<Inverse>OutletProducts</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="IdIndex">
<IdKey>1</IdKey>
<Properties>Outlet,Product</Properties>
<Unique>1</Unique>
</Index>

<Index name="ProductIndex">
<Properties>Product</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.Data.OutletProductD</DataLocation>
<DefaultData>OutletProductDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.OutletProductD</IdLocation>
<IndexLocation>^Wasabi.Data.OutletProductI</IndexLocation>
<StreamLocation>^Wasabi.Data.OutletProductS</StreamLocation>
<Data name="OutletProductDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Quantity</Value>
</Value>
<Value name="3">
<Value>QuantityCommitted</Value>
</Value>
<Value name="4">
<Value>Outlet</Value>
</Value>
<Value name="5">
<Value>Product</Value>
</Value>
<Value name="6">
<Value>Version</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.Person">
<Abstract>1</Abstract>
<Super>%Persistent,Wasabi.Person.API.PersonUtils</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,60990.856615</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="LastName">
<Type>%String</Type>
</Property>

<Property name="FirstName">
<Type>%String</Type>
</Property>

<Property name="MiddleInitial">
<Type>%String</Type>
</Property>

<Property name="DOB">
<Type>%Date</Type>
</Property>

<Property name="Title">
<Type>%String</Type>
</Property>

<Property name="Suffix">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Jr.,Sr.,M.D.,Esq.,DDS"/>
</Property>

<Property name="Gender">
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",Male,Female"/>
<Parameter name="VALUELIST" value=",1,2"/>
</Property>

<Property name="Age">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {Age}=$h-{DOB}\365</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="FullName">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {FullName}={FirstName}_" "_{LastName}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="UserName">
<Type>%String</Type>
</Property>

<Property name="Password">
<Type>%String</Type>
</Property>

<Method name="PasswordSet">
<FormalSpec>Arg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set i%Password = $system.Encryption.MD5Hash(Arg)
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//NOTE:  Wasabi.Person.Populate has a provision for classname Wasabi.Data.Address.  If this is the class name, it uses a ValueList

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//of meaning key names for the array of addresses.  The drawback is that the populator will create a random number of addresses,

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//and if the key already exists in the array, the array object gets saved but the person still has a maximum of the number of

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//unique key names.  In other words, the address table will have more entries than the number of addresses for all person objects.

]]></Content>
</UDLText>

<Property name="Addresses">
<Type>Wasabi.Data.AddressPersistent</Type>
<Collection>list</Collection>
</Property>

<UDLText name="T">
<Content><![CDATA[
//(POPSPEC = "##class(Wasabi.Data.Person).PopAddress()");

]]></Content>
</UDLText>

<Property name="PhoneNumberSerials">
<Type>Wasabi.Data.PhoneNumberSerial</Type>
<Collection>list</Collection>
</Property>

<Index name="idxUserName">
<Properties>UserName</Properties>
<Unique>1</Unique>
</Index>

<Method name="CreateRandomAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&addr:Wasabi.Data.AddressPersistent]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   s addr=##class(Wasabi.Data.AddressPersistent).%New()
   s addr.Street1=##class(%PopulateUtils).Street()
   s addr.Street2=##class(%PopulateUtils).ValueList(",,Suite 100,Dept 1A,Floor 789,,Dept 8C,C92-293,Sector 456,,,Mailroom")
   s addr.City=##class(%PopulateUtils).City()
   s addr.Region=##class(%PopulateUtils).USState()
   s addr.PostalCode=##class(%PopulateUtils).USZip()
   s addr.Country=##class(%PopulateUtils).ValueList(",CAN,USA")
   s addr.Type=##class(%PopulateUtils).ValueList(",Home,Shipping,Billing")
   q addr.%Save()
]]></Implementation>
</Method>

<Method name="CreateRandomPhoneNumberSerial">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ph:Wasabi.Data.PhoneNumberSerial]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s ph=##class(Wasabi.Data.PhoneNumberSerial).%New()
	s ph.CountryCode="00"_($r(9)+1)
    s ph.PhoneNumberSerial=$r(8999999999)+1000000000
    s ph.Type=##class(%PopulateUtils).ValueList(",HOME,BUSINESS,CELL")
    s ph.Extension=##class(%PopulateUtils).Integer(1000,9999)
    q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.Data.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.PersonD</IdLocation>
<IndexLocation>^Wasabi.Data.PersonI</IndexLocation>
<StreamLocation>^Wasabi.Data.PersonS</StreamLocation>
<Data name="Addresses">
<Attribute>Addresses</Attribute>
<Structure>subnode</Structure>
<Subscript>"Addresses"</Subscript>
</Data>
<Data name="PersonDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LastName</Value>
</Value>
<Value name="3">
<Value>FirstName</Value>
</Value>
<Value name="4">
<Value>MiddleInitial</Value>
</Value>
<Value name="5">
<Value>DOB</Value>
</Value>
<Value name="6">
<Value>Title</Value>
</Value>
<Value name="7">
<Value>Suffix</Value>
</Value>
<Value name="8">
<Value>Gender</Value>
</Value>
<Value name="9">
<Value>UserName</Value>
</Value>
<Value name="10">
<Value>Password</Value>
</Value>
<Value name="11">
<Value>PhoneNumberSerials</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.PhoneNumberSerial">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,60789.690693</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="CountryCode">
<Type>%String</Type>
</Property>

<Property name="PhoneNumberSerial">
<Type>%String</Type>
</Property>

<Property name="Type">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",HOME,BUSINESS,CELL"/>
</Property>

<Property name="Extension">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>PhoneNumberSerialState</State>
<StreamLocation>^Wasabi.Data.PhoneNumberSerialS</StreamLocation>
<Data name="PhoneNumberSerialState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>CountryCode</Value>
</Value>
<Value name="2">
<Value>PhoneNumberSerial</Value>
</Value>
<Value name="3">
<Value>Type</Value>
</Value>
<Value name="4">
<Value>Extension</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.PriceCatalog">
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,58464.615672</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Description">
<Type>%String</Type>
</Property>

<Property name="StartDate">
<Type>%TimeStamp</Type>
</Property>

<Property name="EndDate">
<Type>%TimeStamp</Type>
</Property>

<Property name="Items">
<Type>Wasabi.Data.PriceCatalogItem</Type>
<Cardinality>children</Cardinality>
<Inverse>PriceCatalog</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="OPCs">
<Type>Wasabi.Data.OutletPriceCatalog</Type>
<Cardinality>many</Cardinality>
<Inverse>PriceCatalog</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.Data.PriceCatalogD</DataLocation>
<DefaultData>PriceCatalogDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.PriceCatalogD</IdLocation>
<IndexLocation>^Wasabi.Data.PriceCatalogI</IndexLocation>
<StreamLocation>^Wasabi.Data.PriceCatalogS</StreamLocation>
<Data name="PriceCatalogDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StartDate</Value>
</Value>
<Value name="3">
<Value>EndDate</Value>
</Value>
<Value name="4">
<Value>Name</Value>
</Value>
<Value name="5">
<Value>Description</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.PriceCatalogItem">
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,58607.384158</TimeCreated>

<Property name="Product">
<Type>Product</Type>
</Property>

<Property name="Price">
<Type>%Float</Type>
</Property>

<Property name="PriceCatalog">
<Type>Wasabi.Data.PriceCatalog</Type>
<Cardinality>parent</Cardinality>
<Inverse>Items</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="ProductIndex">
<Properties>PriceCatalog,Product</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("Items")</DataLocation>
<DefaultData>PriceCatalogItemDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.PriceCatalogC("Items")</IdLocation>
<IndexLocation>^Wasabi.Data.PriceCatalogItemI</IndexLocation>
<StreamLocation>^Wasabi.Data.PriceCatalogItemS</StreamLocation>
<Data name="PriceCatalogItemDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Product</Value>
</Value>
<Value name="3">
<Value>Price</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.Product">
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,57582.950856</TimeCreated>

<Property name="Code">
<Type>%String</Type>
</Property>

<Property name="Category">
<Type>Category</Type>
</Property>

<Property name="OutletProducts">
<Type>Wasabi.Data.OutletProduct</Type>
<Cardinality>many</Cardinality>
<Inverse>Product</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.Data.ProductD</DataLocation>
<DefaultData>ProductDefaultData</DefaultData>
<IdLocation>^Wasabi.Data.ProductD</IdLocation>
<IndexLocation>^Wasabi.Data.ProductI</IndexLocation>
<StreamLocation>^Wasabi.Data.ProductS</StreamLocation>
<Data name="ProductDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Code</Value>
</Value>
<Value name="3">
<Value>Category</Value>
</Value>
<Value name="4">
<Value>OutletProducts</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.Data.SalesPerson">
<Description>
*************************
*** STUBBED OUT CLASS ***
*************************
</Description>
<Super>Wasabi.Data.Employee</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61299,62161.340198</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="Wasabi.Logic.Inventory">
<Abstract>1</Abstract>
<IncludeCode>%occInclude</IncludeCode>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,51204.604223</TimeCreated>

<Method name="GetAvailableQuantity">
<Description>
Returns the quantity of product for a given outlet</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>outlet:Wasabi.Data.Outlet,product:Wasabi.Data.Product</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	if '##class(Wasabi.Data.OutletProduct).IdIndexExists(outlet.%Id(),product.%Id(),.id) {
		quit 0
	} 
	// Ray's bug #1. [XXX]
	//set op=##class(Wasabi.Data.OutletProduct).%OpenId(id)
	set op=##class(Wasabi.Data.OutletProduct).%OpenId(id,, .sc)
	if $$$ISERR(sc) { 
		$$$ThrowStatus(sc)
	}
	quit op.Quantity-op.QuantityCommitted
]]></Implementation>
</Method>

<Method name="LocateProduct">
<Description><![CDATA[
For a given product returns a prepared resultset with the following columns:<br>
<li>Outlet: id of the outlet</li>
<li>QuantityAvailable: quantity of product available at 'Outlet'</li>
In descending order by quantity available.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>product:Wasabi.Data.Product</FormalSpec>
<ReturnType>%IResultSet</ReturnType>
<Implementation><![CDATA[
	#dim rs as %IResultSet
	set sql="SELECT Outlet,Quantity-QuantityCommitted As QuantityAvailable FROM Wasabi.Data.OutletProduct WHERE Product = ? ORDER BY QuantityAvailable DESC"
	set rs=##class(%ResultSet.SQL).%Prepare(sql,,,product.%Id())
	if rs.%SQLCode<0 { 
		$$$ThrowStatus($$$ERROR($$$SQLCode,rs.%SQLCode,rs.%Message)) 
	}
	quit rs
]]></Implementation>
</Method>

<Method name="CommitProduct">
<Description>
Commits (as ordered) a quantity of product from a given outlet. If there is insufficient stock
to satisfy the entire quantity requested, the available quantity will be committed if partialcommit is true
or none will be committed if partialcommit is false.  Returns the quantity committed</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>outlet:Wasabi.Data.Outlet,product:Wasabi.Data.Product,quantity:%Integer,partialcommit:%Boolean=0</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set op=##class(Wasabi.Data.OutletProduct).IdIndexOpen(outlet.%Id(),product.%Id(),4,.sc)
	if $$$ISERR(sc) { 
		$$$ThrowStatus(sc) 
	}
	set avail=op.Quantity-op.QuantityCommitted
	if avail<quantity {
		if partialcommit {
			set quantity=avail
		} else {
			quit 0
		}
	}
	set op.QuantityCommitted=op.QuantityCommitted+quantity
	$$$THROWONERROR(sc,op.%Save())
	quit quantity
]]></Implementation>
</Method>

<Method name="ReleaseProduct">
<Description>
Releases a quantity of product from a given outlet which was previously committed</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>outlet:Wasabi.Data.Outlet,product:Wasabi.Data.Product,quantity:%Integer</FormalSpec>
<Implementation><![CDATA[
	set op=##class(Wasabi.Data.OutletProduct).IdIndexOpen(outlet.%Id(),product.%Id(),4,.sc)
	if $$$ISERR(sc) { 
		$$$ThrowStatus(sc) 
	}
	set op.QuantityCommitted=op.QuantityCommitted-quantity
	$$$THROWONERROR(sc,op.%Save())
]]></Implementation>
</Method>

<Method name="ShipCommittedProduct">
<Description>
Removes a committed quantity from the stock altogether</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>outlet:Wasabi.Data.Outlet,product:Wasabi.Data.Product,quantity:%Integer</FormalSpec>
<Implementation><![CDATA[
	set op=##class(Wasabi.Data.OutletProduct).IdIndexOpen(outlet.%Id(),product.%Id(),4,.sc)
	if $$$ISERR(sc) { 
		$$$ThrowStatus(sc) 
	}
	set op.Quantity=op.Quantity-quantity,op.QuantityCommitted=op.QuantityCommitted-quantity
	$$$THROWONERROR(sc,op.%Save())
]]></Implementation>
</Method>

<Method name="RestockProduct">
<Description>
Adds a quantity of product to the given outlet's stock</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>outlet:Wasabi.Data.Outlet,product:Wasabi.Data.Product,quantity:%Integer</FormalSpec>
<Implementation><![CDATA[
	set op=##class(Wasabi.Data.OutletProduct).IdIndexOpen(outlet.%Id(),product.%Id(),4,.sc)
	if $$$ISERR(sc) { 
		$$$ThrowStatus(sc) 
	}
	set op.Quantity=op.Quantity+quantity
	$$$THROWONERROR(sc,op.%Save())
]]></Implementation>
</Method>
</Class>


<Class name="Wasabi.Logic.Pricing">
<Abstract>1</Abstract>
<IncludeCode>%occInclude</IncludeCode>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,49072.616802</TimeCreated>

<Method name="LookupPrice">
<Description>
Return price of a given item given a PriceCatalog</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>catalog:Wasabi.Data.PriceCatalog,product:Wasabi.Data.Product</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	set catalogitem=##class(Wasabi.Data.PriceCatalogItem).ProductIndexOpen(catalog.%Id(),product.%Id(),,.sc)
	if $$$ISERR(sc) $$$ThrowStatus(sc)
	quit catalogitem.Price
]]></Implementation>
</Method>
</Class>


<Class name="Wasabi.Logic.Test.InventoryTest">
<Description>
A unit test class for Wasabi.Logic.Inventory.
To run this test:
do ##class(Wasabi.Logic.Test.InventoryTest).Run()</Description>
<Super>%UnitTest.TestCase</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61299,66435.164865</TimeCreated>

<Method name="Run">
<Description>
Runs this test.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	write "Running test", !
	set className = ..%ClassName(1)
	set testcase = className
	set testsuite = className
	set testspec = testsuite _ ":" _ testcase
	set qualifiers = "/load=0/recursive=0"
	set status = ##class(%UnitTest.Manager).RunTest(testspec, qualifiers)
	quit status
]]></Implementation>
</Method>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = 1
	quit status
]]></Implementation>
</Method>

<Method name="OnAfterOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = 1
	quit status
]]></Implementation>
</Method>

<Method name="TestNoneGetAvailableQuantity">
<Description>
Tests GetAvailableQuantity - none.</Description>
<Implementation><![CDATA[
	try {
		// Get outlet.
		set outlet = ##class(Wasabi.Data.Outlet).%New()
		set status = outlet.%Save()
		if $$$ISERR(status) { 
			$$$ThrowStatus(status)
		}
	
		// Get product.
		set product = ##class(Wasabi.Data.Product).%New()
		set status = product.%Save()
		if $$$ISERR(status) { 
			$$$ThrowStatus(status)
		}
	
		// Test.
		set quantity = ##class(Wasabi.Logic.Inventory).GetAvailableQuantity(outlet, product)
		set ok = ..AssertEqualsViaMacro(0, 0, quantity, "availableQuantity")

		do ..CleanupOutlet(outlet)
		do ..CleanupProduct(product)
	} catch ex {
		do ..CleanupOutlet(outlet)
		do ..CleanupProduct(product)
		throw ex
	}
]]></Implementation>
</Method>

<Method name="TestNormalGetAvailableQuantity">
<Description>
Tests GetAvailableQuantity - normal.</Description>
<Implementation><![CDATA[
	try {
		// Get outlet.
		set outlet = ##class(Wasabi.Data.Outlet).%New()
		set status = outlet.%Save()
		if $$$ISERR(status) { 
			$$$ThrowStatus(status)
		}
	
		// Get product.
		set product = ##class(Wasabi.Data.Product).%New()
		set status = product.%Save()
		if $$$ISERR(status) { 
			$$$ThrowStatus(status)
		}
	
		// Create OutletProduct.
		set outletProduct = ##class(Wasabi.Data.OutletProduct).%New()
		set quantity = 10
		set completedQuantity = 4
		set expectedAvailableQuantity = quantity - completedQuantity
		set outletProduct.Quantity = quantity
		set outletProduct.QuantityCommitted = completedQuantity
		set outletProduct.Product = product
		set outletProduct.Outlet = outlet
		set status = outletProduct.%Save()
		if $$$ISERR(status) { 
			$$$ThrowStatus(status)
		}
	
		// Test.
		set availableQuantity = ##class(Wasabi.Logic.Inventory).GetAvailableQuantity(outlet, product)
		set ok = ..AssertEqualsViaMacro(0, expectedAvailableQuantity, availableQuantity, "availableQuantity")
		if ('ok) {
			do ..LogMessage("availableQuantity: " _ availableQuantity)
			do ..LogMessage("expectedAvailableQuantity: " _ expectedAvailableQuantity)
		}
		do ..CleanupOutletProduct(outletProduct)
		//do ListAllObjects^%occRun(0)
		do ..CleanupOutlet(outlet)
		do ..CleanupProduct(product)
	} catch ex {
		do ..CleanupOutletProduct(outletProduct)
		do ..CleanupOutlet(outlet)
		do ..CleanupProduct(product)
		throw ex
	}
]]></Implementation>
</Method>

<Method name="CleanupOutlet">
<Description>
Cleans up an outlet.</Description>
<FormalSpec>outlet:Wasabi.Data.Outlet</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	if ($get(outlet) '= "") {		
		set status = ##class(Wasabi.Data.Outlet).%DeleteId(outlet.%Id())
		do ..AssertStatusOKViaMacro(0, status, "outlet status")
	}
]]></Implementation>
</Method>

<Method name="CleanupProduct">
<Description>
Cleans up a product.</Description>
<FormalSpec>product:Wasabi.Data.Product</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	if ($get(product) '= "") {
		set status = ##class(Wasabi.Data.Product).%DeleteId(product.%Id())
		do ..AssertStatusOKViaMacro(0, status, "product status")
	}
]]></Implementation>
</Method>

<Method name="CleanupOutletProduct">
<Description>
Cleans up an outletProduct</Description>
<FormalSpec>outletProduct:Wasabi.Data.OutletProduct</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	if ($get(outletProduct) '= "") {
		set status = ##class(Wasabi.Data.OutletProduct).%DeleteId(outletProduct.%Id())
		do ..AssertStatusOKViaMacro(0, status, "outletProduct status")
	}
]]></Implementation>
</Method>
</Class>


<Class name="Wasabi.Logic.Test.PricingTest">
<Description>
A unit test class for Wasabi.Logic.Pricing.
To run this test:
do ##class(Wasabi.Logic.Test.PricingTest).Run()</Description>
<Super>%UnitTest.TestCase</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61299,70658.153567</TimeCreated>

<Method name="Run">
<Description>
Runs this test.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	write "Running test", !
	set className = ..%ClassName(1)
	set testcase = className
	set testsuite = className
	set testspec = testsuite _ ":" _ testcase
	set qualifiers = "/load=0/recursive=0"
	set status = ##class(%UnitTest.Manager).RunTest(testspec, qualifiers)
	quit status
]]></Implementation>
</Method>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = 1
	quit status
]]></Implementation>
</Method>

<Method name="OnAfterOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = 1
	quit status
]]></Implementation>
</Method>

<Method name="TestNoneLookupPrice">
<Description>
Tests LookupPrice - some.</Description>
<Implementation><![CDATA[
	try {
		// Get catalog.
		set catalog = ##class(Wasabi.Data.PriceCatalog).%New()
		set status = catalog.%Save()
		if $$$ISERR(status) { 
			$$$ThrowStatus(status)
		}
	
		// Get product.
		set product = ##class(Wasabi.Data.Product).%New()
		set status = product.%Save()
		if $$$ISERR(status) { 
			$$$ThrowStatus(status)
		}
	
		// Test.
		set ex2 = ""
		try {
			set price = ##class(Wasabi.Logic.Pricing).LookupPrice(catalog, product)
		} catch ex2 {
			do ..LogMessage("Caught expected exception: " _ ex2.DisplayString())
		}
		if (ex2 = "") {
			set status = $$$ERROR($$$GeneralError, "Exception expected")
			set ok = ..AssertStatusOKViaMacro(0, status, "status")
		}
		do ..CleanupCatalog(catalog)
		do ..CleanupProduct(product)
	} catch ex {
		do ..CleanupCatalog(catalog)
		do ..CleanupProduct(product)
		throw ex
	}
]]></Implementation>
</Method>

<Method name="CleanupCatalog">
<Description>
Cleans up a catalog.</Description>
<FormalSpec>catalog:Wasabi.Data.PriceCatalog</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	if ($get(catalog) '= "") {		
		set status = ##class(Wasabi.Data.PriceCatalog).%DeleteId(catalog.%Id())
		do ..AssertStatusOKViaMacro(0, status, "catalog status")
	}
]]></Implementation>
</Method>

<Method name="CleanupProduct">
<Description>
Cleans up a product.</Description>
<FormalSpec>product:Wasabi.Data.Product</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	if ($get(product) '= "") {
		set status = ##class(Wasabi.Data.Product).%DeleteId(product.%Id())
		do ..AssertStatusOKViaMacro(0, status, "product status")
	}
]]></Implementation>
</Method>
</Class>


<Class name="Wasabi.OrderEntry.API.Session">
<Description><![CDATA[
Usage of %occIO for public consumption?....to be detemined

<p>
This class is designed to be an SOA interface, or <i>Service</i>, to use the <class>Wasabi.OrderEntry.Data.Cart</class>
<class>Wasabi.OrderEntry.Data.Orders</class> and <class>Wasabi.OrderEntry.Data.Invoice</class>
structures to provide the business logic for a Sample Retail Order Entry system.
</p>
<p>
This does not preclude the usage of the <class>Wasabi.OrderEntry.Data.Cart</class>
<class>Wasabi.OrderEntry.Data.Orders</class> and <class>Wasabi.OrderEntry.Data.Invoice</class> classes
directly, but this presuppose that it is the only active interface to modifying (Create, Update, Delete)
any of these classes.
</p>
Direct read only access to the <class>Wasabi.OrderEntry.Data.Car</class>
<class>Wasabi.OrderEntry.Data.Orders</class> and <class>Wasabi.OrderEntry.Data.Invoice</class> classes
is assumed for reporting, and real time Business Intelegence.
<p>]]></Description>
<IncludeCode>%occIO</IncludeCode>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,48503.440581</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Cart">
<Description>
Holding area for Active Cart</Description>
<Type>Wasabi.OrderEntry.Data.Cart</Type>
<Private>1</Private>
</Property>

<Property name="Orders">
<Description>
Holding area for Active Order</Description>
<Type>Wasabi.OrderEntry.Data.Orders</Type>
<Private>1</Private>
</Property>

<Property name="Invoice">
<Description>
HOlding area for  Active Invoice</Description>
<Type>Wasabi.OrderEntry.Data.Invoice</Type>
<Private>1</Private>
</Property>

<Property name="Customer">
<Description>
Holding area for Active Customer</Description>
<Type>Wasabi.Data.Customer</Type>
</Property>

<Property name="Outlet">
<Description><![CDATA[
Holding area the Active 'Outlet'.
<br>
<font color="red">This may or may not be the
Order's Address, as this interface to the ProductManegement subsystem
was not 100% finalized.</font>]]></Description>
<Private>1</Private>
</Property>

<Property name="ShippingAddress">
<Description>
Holding Area for Shipping Address
If this is left blank, than the "Customer" address will be used</Description>
<Type>Wasabi.Data.AddressSerial</Type>
</Property>

<Property name="BillingAddress">
<Description>
Holding Area for Billing Address
If this is left blank, than the "Customer" address will be used</Description>
<Type>Wasabi.Data.AddressSerial</Type>
</Property>

<Method name="CreateCart">
<Description>
Customer is required, and for "unknown" customer
there needs to be some sort of record with a unique.</Description>
<FormalSpec>CustomerToken:%String,Customer:Wasabi.Data.Customer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..Cart = ##class(Wasabi.OrderEntry.Data.Cart).%New()
	set ..Cart.Customer = Customer
	set ..Cart.TokenKey = CustomerToken
	// Clear any current Order and Invoice
	set ..Orders = ""
	set ..Invoice = ""
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SetCartCustomer">
<Description>
Allows the calling layer to switch from an "Unknown Customer" customer to a
REAL Customer</Description>
<FormalSpec>Customer:Wasabi.Data.Customer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if IsObject(..Cart) {
		set ..Cart.Customer = Customer
	} else {
		$$$ThrowStatus($$$ERROR($$$GeneralError,"Trying to Set "_..Cart.Customer.Name_" into a NULL Cart",..%ClassName(1)_"::"_$$$CurrentMethod))
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="AddToCart">
<Description>
Inserts a Product into the active Cart
if the "Quantity" is 0, the item will be removed</Description>
<FormalSpec>Product:Wasabi.ProductManagement.Data.Product,Quantity:%Integer=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;
	$$$ThrowStatus($$$ERROR($$$MethodNotImplemented,..%ClassName(1)_"::"_$$$CurrentMethod))
	;
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SaveCart">
<Description><![CDATA[
Create a "Cart Check Point" by saving the internal 
<class>Wasabi.OrderEntry.Data.Cart</class> instance]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;
	$$$ThrowStatus($$$ERROR($$$MethodNotImplemented,..%ClassName(1)_"::"_$$$CurrentMethod))
	;
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ClearCart">
<Description><![CDATA[
Clears ALL Items from the internal 
<class>Wasabi.OrderEntry.Data.Cart</class> instance.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;
	$$$ThrowStatus($$$ERROR($$$MethodNotImplemented,..%ClassName(1)_"::"_$$$CurrentMethod))
	;
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="RevertCart">
<Description><![CDATA[
Reloads the internal 
<class>Wasabi.OrderEntry.Data.Cart</class> instance back to the last "Checkpoint" that
was created by the <method>SaveCart</method>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;
	$$$ThrowStatus($$$ERROR($$$MethodNotImplemented,..%ClassName(1)_"::"_$$$CurrentMethod))
	;
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ListCart">
<Description><![CDATA[
Returns a Result Set of the <u>Product, Quantity, Price</u> from the internal 
<class>Wasabi.OrderEntry.Data.Cart</class> instance.]]></Description>
<FormalSpec><![CDATA[&Results:%Library.IResultSet]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;
	$$$ThrowStatus($$$ERROR($$$MethodNotImplemented,..%ClassName(1)_"::"_$$$CurrentMethod))
	;
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ActivateCart">
<Description><![CDATA[
Locates last <method>SaveCart</method> created Check Point for the cart that
was marked with the CustomerToken key and sets it as the internal 
<class>Wasabi.OrderEntry.Data.Cart</class> instance.]]></Description>
<FormalSpec>CustomerToken:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;
	$$$ThrowStatus($$$ERROR($$$MethodNotImplemented,..%ClassName(1)_"::"_$$$CurrentMethod))
	;
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateOrder">
<Description><![CDATA[
Converts the the internal 
<class>Wasabi.OrderEntry.Data.Cart</class> instance into an the internal 
<class>Wasabi.OrderEntry.Data.Orders</class> instance
<p>
This method assumes that this is a "fixed quote" for an order, with the undiscounted
prices being replicated from each Cart item, along with the discription also being replicated
into the Order record. This is done to record the details of the quote and make this snapshot of
information be protected from future changes to products and prices.
</p>
<p>
Creating an order does not remove the Cart, since this is not an commited contract between seller
and customer, changes could be made and new "quote" Orders may be create or perhaps even abandoned.
</p>]]></Description>
<FormalSpec>SalesPerson:Wasabi.Data.SalesPerson</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set ..Orders = ##class(Wasabi.OrderEntry.Data.Order).%New()
	if IsObject(..Orders) {
		set ..Orders.Customer = ..Cart.Customer
		set ..Orders.SalesPerson = SalesPerson
		set ..Orders.CurrentStatus = "NEW"
		if ..BillingAddress.IsEmpty() {
			if ..Cart.Customer.Address.IsEmpty(){
				$$$ThrowStatus($$$ERROR($$$GeneralError,"We cannot create an Order without an Address",..%ClassName(1)_"::"_$$$CurrentMethod))	
			}else{
				do ..Orders.BillingAddress.CopyFrom(..Cart.Customer.Address)
			}
		}else{
			do ..Orders.BillingAddress.CopyFrom(..BillingAddress)
		}		
		if ..ShippingAddress.IsEmpty() {
			if ..Cart.Customer.Address.IsEmpty(){
				$$$ThrowStatus($$$ERROR($$$GeneralError,"Cart Address Empty",..%ClassName(1)_"::"_$$$CurrentMethod))	
			}else{
				do ..Orders.ShippingAddress.CopyFrom(..Cart.Customer.Address)
			}
		}else{
			do ..Orders.ShippingAddress.CopyFrom(..ShippingAddress)
		}
		set ..Outlet=##class(Wasabi.Data.Employee).LocationGetStored(SalesPerson)
		set CartItem = ..Cart.LineItems.Next()
		while CartItem '= "" {
			set OrderItem = ##class(Wasabi.OrderEntry.Data.LineItem).%New()
			set OrderItem.Orders = ..Orders
			set OrderItem.Product = CartItem.Product
			set OrderItem.Quantity = CartItem.Quantity
			set OrderItem.UnitPrice = ##class(Wasabi.ProductManagement.API).GetCurrentPrice(..Customer,..Outlet,.catalog,CartItem.Product) // estimated price was CartItem.UnitPrice
			set CartItem = ..Cart.LineItems.Next()			
		}
		try{
			$$$THROWONERROR(sc, ..Orders.%Save())
		}catch ErrorObject {
			THROW ##class(Wasabi.OrderEntry.Exception).%New("CreateOrderNoSave",ErrorObject.Code,ErrorObject.Location,"Saving Order for "_..Cart.Customer.Name,ErrorObject)
		}
		//people can add more info until they confirm an order -- set ..Cart = ""
		set ..Invoice = ""
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ConfirmOrder">
<Description><![CDATA[
This method:
  Commits inventory to this Order
  Changes the Order status to "ACCEPTED"
  Removes the "Cart" thus disallowing any further changes to the Order
return true if order is fully confirmed as is, false if more interaction is required
Arguments:
  Returns: 
   Throws: Wasabi.OrderEntry.Exception
           Wasabi.OrderEntry.CriticalException
<p>
This method is called as an indication that the "Offer Order" has been accepted by the customer.
</p>
<p>
If there is no Order, or the active Order is NOT in a "NEW" status, then this method should fail
</p>]]></Description>
<FormalSpec>AcceptPartialOrder:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
	//Get committed item quantity
	set partial = 0 //is this a partial order
	try {
		set ..Orders.CurrentStatus = "ERROR: ConfirmOrder"
		set key = ""
		set OrderItem = ..Orders.LineItems.GetNext(.key)
		while '$IsObject(OrderItem) {
			set ..Orders.CurrentStatus = "ERROR: PartialConfirmOrder"
			set OrderItem.Committed = ##class(Wasabi.ProductManagement.API).Commit(OrderItem.Product,OrderItem.Quantity,..Outlet)
			if (OrderItem.Committed '= OrderItem.Quantity)
			{
				///throw an error 
				throw:'AcceptPartialOrder ##class(Wasabi.OrderEntry.Exception).%New("PartialOrderCommitted",0,$$$CurrentClass_"::"_$$$CurrentMethod,"Committing Order for "_..Cart.Customer.Name)
				set partial = 1
			}
			   set OrderItem = ..Orders.LineItems.Next(.key)			
		}
		//clear cart
		set ..Cart = ""
		//change order status
		set:'partial ..Orders.CurrentStatus="CONFIRMED"
		set:partial ..Orders.CurrentStatus="OPEN"
	} catch ErrorObject {
		throw:..Orders.CurrentStatus'="ERROR: PartialConfirmOrder" ##class(Wasabi.OrderEntry.Exception).%New("ConfirmOrder",ErrorObject.Code,ErrorObject.Location,"Confirming Order for "_..Cart.Customer.Name,ErrorObject)
		throw:'ErrorObject.%IsA("Wasabi.OrderEntry.Exception") ##class(Wasabi.OrderEntry.CriticalException).%New("ConfirmOrderUnknownCritical",ErrorObject.Code,ErrorObject.Location,"Critical Error (Possible Orphaned Committed Inventory Items): Confirming Order for "_..Cart.Customer.Name,ErrorObject)
		try {
		//check ErrorObject and try to rollback (if we cannot rollback we have a problem so I think we need a TRANSACTION (TSTART)
			set key=""
			set OrderItem = ..Orders.LineItems.GetNext(.key)
			while (OrderItem '= "")&&(OrderItem.Committed'="") {
				d ##class(Wasabi.ProductManagement.API).Release(OrderItem.Product,OrderItem.Committed,..Outlet)
				s OrderItem.Committed=0 // is this safe??
			}
		}
		catch ErrorObject2 {
			throw ##class(Wasabi.OrderEntry.CriticalException).%New("ConfirmOrderNoRollBack",ErrorObject.Code,ErrorObject.Location,"Confirming Order for "_..Cart.Customer.Name,ErrorObject2)
		} 
	}
]]></Implementation>
</Method>

<Method name="CreateInvoice">
<Description><![CDATA[
Converts the the internal 
<class>Wasabi.OrderEntry.Data.Orders</class> instance into an the internal 
<class>Wasabi.OrderEntry.Data.Invoice</class> instance]]></Description>
<FormalSpec>PicklistFullfilled</FormalSpec>
<Implementation><![CDATA[
	;This method called by Product Management(warehouse) after list has been picke
	;with only filled items
	;
	;generate Invoice from filled picklist
	;update lineitems on order
	;add InvoiceLineItems to match fullfillment
	;update Order -stats
	;update OrderLineItems status
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CommitOrderLineItem">
<Description>
NOTE: Internal Logic</Description>
<FormalSpec>LineItemId</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Calls product management api with qty
	;returns # committed
	;If return value = total value...then status ok
	;otherwise return value not available.
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PriceOrderLineItem">
<Description>
NOTE: Internal Logic</Description>
<FormalSpec>LineItemId</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Calls product management api with product id
	;returns price
	;If return value = total value...then status ok
	;otherwise return value not available.
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="UnCommitOrderLineItem">
<Description>
NOTE: Internal Logic</Description>
<FormalSpec>IineItemID</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Calls product management api with qty
	;returns 1=successful
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindOrders">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[User:Wasabi.Data.Customer,&Results:%Library.IResultSet]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set res = $$$OK
	quit res
]]></Implementation>
</Method>

<Method name="CartIterator">
<Description>
signature not defined</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[User:Wasabi.Data.Customer,&Results:%Library.IResultSet]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set res = $$$OK
	quit res
]]></Implementation>
</Method>

<Method name="FillOrder">
<Description>
NOTE: Internal Logic</Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Calls product management module pass in Order ID
	;
	;send to warehouse
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateAuditEvent">
<Description>
NOTE: Internal Logic</Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	;Insert Audit Entry for order
	;This is called anytime there is a status change on the order
	;create order, add line item, delete line item
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ReturnItem">
<Description>
NOTE: Internal Logic</Description>
<FormalSpec>Invoice,Item</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;
	$$$ThrowStatus($$$ERROR($$$MethodNotImplemented,..%ClassName(1)_"::"_$$$CurrentMethod))
	;
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Wasabi.OrderEntry.CriticalException">
<Super>Wasabi.OrderEntry.Exception</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61299,61051.934179</TimeCreated>
</Class>


<Class name="Wasabi.OrderEntry.Data.Cart">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,57933.246665</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Customer">
<Description>
Group #3 "Customer" ID</Description>
<Type>Wasabi.Data.Customer</Type>
</Property>

<Property name="TokenKey">
<Type>%String</Type>
</Property>

<Property name="InitialTimestamp">
<Type>%TimeStamp</Type>
<InitialExpression>$zts</InitialExpression>
</Property>

<Property name="LineItems">
<Type>Wasabi.OrderEntry.Data.CartLineItem</Type>
<Cardinality>children</Cardinality>
<Inverse>Cart</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.OrderEntry.Data.CartD</DataLocation>
<DefaultData>CartDefaultData</DefaultData>
<IdLocation>^Wasabi.OrderEntry.Data.CartD</IdLocation>
<IndexLocation>^Wasabi.OrderEntry.Data.CartI</IndexLocation>
<StreamLocation>^Wasabi.OrderEntry.Data.CartS</StreamLocation>
<Data name="CartDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Customer</Value>
</Value>
<Value name="3">
<Value>TokenKey</Value>
</Value>
<Value name="4">
<Value>InitialTimestamp</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.OrderEntry.Data.CartLineItem">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,57933.105337</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Product">
<Description>
Product from Group #1</Description>
<Type>Wasabi.ProductManagement.Data.Product</Type>
<Required>1</Required>
</Property>

<Property name="Quantity">
<Type>%Integer</Type>
</Property>

<Property name="UnitPrice">
<Type>%Float</Type>
<Calculated>1</Calculated>
<SqlComputeCode> set {UnitPrice}=##class(Others.Pruduct).GetCurrentPrice({Product})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="Cart">
<Type>Wasabi.OrderEntry.Data.Cart</Type>
<Cardinality>parent</Cardinality>
<Inverse>LineItems</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="UnitPrice">
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	if ..Product '= "" {
		set res = ##class(Others.Product).GetCurrentPrice(..Product.%Id())
	} else {
		set res = 0.0
	}
	quit res
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("LineItems")</DataLocation>
<DefaultData>CartLineItemDefaultData</DefaultData>
<IdLocation>^Wasabi.OrderEntry.Data.CartC("LineItems")</IdLocation>
<IndexLocation>^Wasabi.OrderEntry.Data.CartLineItemI</IndexLocation>
<StreamLocation>^Wasabi.OrderEntry.Data.CartLineItemS</StreamLocation>
<Data name="CartLineItemDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Product</Value>
</Value>
<Value name="3">
<Value>Quantity</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.OrderEntry.Data.EventType">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,54188.680977</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Text">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.OrderEntry.Data.EventTypeD</DataLocation>
<DefaultData>EventTypeDefaultData</DefaultData>
<IdLocation>^Wasabi.OrderEntry.Data.EventTypeD</IdLocation>
<IndexLocation>^Wasabi.OrderEntry.Data.EventTypeI</IndexLocation>
<StreamLocation>^Wasabi.OrderEntry.Data.EventTypeS</StreamLocation>
<Data name="EventTypeDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Text</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.OrderEntry.Data.Invoice">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,54251.434296</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="BillingAddress">
<Type>Wasabi.Data.AddressSerial</Type>
</Property>

<Property name="BillDate">
<Type>%String</Type>
</Property>

<Property name="LineItems">
<Description>
Actually Shipped/Picked and Should be Billed</Description>
<Type>Wasabi.OrderEntry.Data.InvoiceLineItem</Type>
<Cardinality>children</Cardinality>
<Inverse>Invoice</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Discount">
<Type>%Float</Type>
</Property>

<Property name="Tax">
<Type>%Float</Type>
</Property>

<Property name="InvoiceAmt">
<Type>%Float</Type>
</Property>

<Property name="Comments">
<Type>%String</Type>
</Property>

<Property name="PaymentType">
<Type>%String</Type>
</Property>

<Property name="OrderRef">
<Type>Wasabi.OrderEntry.Data.Orders</Type>
<Cardinality>one</Cardinality>
<Inverse>Invoices</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="OrderIndex">
<Properties>OrderRef</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.OrderEntry8A57.InvoiceD</DataLocation>
<DefaultData>InvoiceDefaultData</DefaultData>
<IdLocation>^Wasabi.OrderEntry8A57.InvoiceD</IdLocation>
<IndexLocation>^Wasabi.OrderEntry8A57.InvoiceI</IndexLocation>
<StreamLocation>^Wasabi.OrderEntry8A57.InvoiceS</StreamLocation>
<Data name="InvoiceDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>BillingAddress</Value>
</Value>
<Value name="3">
<Value>BillDate</Value>
</Value>
<Value name="4">
<Value>Discount</Value>
</Value>
<Value name="5">
<Value>Tax</Value>
</Value>
<Value name="6">
<Value>InvoiceAmt</Value>
</Value>
<Value name="7">
<Value>Comments</Value>
</Value>
<Value name="8">
<Value>PaymentType</Value>
</Value>
<Value name="9">
<Value>OrderRef</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.OrderEntry.Data.InvoiceLineItem">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,54202.826632</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Product">
<Description>
Group #1 "Product ID"</Description>
<Type>Wasabi.ProductManagement.Data.Product</Type>
</Property>

<Property name="Description">
<Type>%String</Type>
</Property>

<Property name="QuantityOrdered">
<Type>%Integer</Type>
</Property>

<Property name="QuantityShipped">
<Type>%Integer</Type>
</Property>

<Property name="UnitPrice">
<Type>%Float</Type>
</Property>

<Property name="SubTotal">
<Type>%Float</Type>
<Calculated>1</Calculated>
<SqlComputeCode> set {SubTotal}=({UnitPrice}*{QuantityOrdered})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="Discount">
<Type>%Float</Type>
</Property>

<Property name="TotalPrice">
<Type>%Float</Type>
</Property>

<Property name="Status">
<Type>Wasabi.OrderEntry.Data.EventType</Type>
</Property>

<Property name="CreateTimestamp">
<Type>%String</Type>
</Property>

<Property name="DeleteTimestamp">
<Type>%String</Type>
</Property>

<Property name="Invoice">
<Type>Wasabi.OrderEntry.Data.Invoice</Type>
<Cardinality>parent</Cardinality>
<Inverse>LineItems</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="SubTotalGet">
<CodeMode>expression</CodeMode>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[(..UnitPrice*..QuantityOrdered)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("LineItems")</DataLocation>
<DefaultData>InvoiceLineItemDefaultData</DefaultData>
<IdLocation>^Wasabi.OrderEntry8A57.InvoiceC("LineItems")</IdLocation>
<IndexLocation>^Wasabi.Ord8A57.InvoiceLine9A75I</IndexLocation>
<StreamLocation>^Wasabi.Ord8A57.InvoiceLine9A75S</StreamLocation>
<Data name="InvoiceLineItemDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Product</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
<Value name="4">
<Value>QuantityOrdered</Value>
</Value>
<Value name="5">
<Value>QuantityShipped</Value>
</Value>
<Value name="6">
<Value>UnitPrice</Value>
</Value>
<Value name="7">
<Value>Discount</Value>
</Value>
<Value name="8">
<Value>TotalPrice</Value>
</Value>
<Value name="9">
<Value>Status</Value>
</Value>
<Value name="10">
<Value>CreateTimestamp</Value>
</Value>
<Value name="11">
<Value>DeleteTimestamp</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.OrderEntry.Data.OrderAddress">
<Super>Wasabi.Data.AddressSerial</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,41981.854158</TimeCreated>

<Property name="ContactName">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<Data name="AddressSerialState">
<Value name="1">
<Value>Type</Value>
</Value>
<Value name="2">
<Value>Street1</Value>
</Value>
<Value name="3">
<Value>Street2</Value>
</Value>
<Value name="4">
<Value>City</Value>
</Value>
<Value name="5">
<Value>Region</Value>
</Value>
<Value name="6">
<Value>Country</Value>
</Value>
<Value name="7">
<Value>PostalCode</Value>
</Value>
<Value name="8">
<Value>ContactName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.OrderEntry.Data.OrderAuditLog">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,54183.46179</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="OrderID">
<Type>Wasabi.OrderEntry.Data.Orders</Type>
</Property>

<Property name="EventType">
<Type>Wasabi.OrderEntry.Data.EventType</Type>
</Property>

<Property name="InitialTimestamp">
<Type>%TimeStamp</Type>
<InitialExpression>$zts</InitialExpression>
</Property>

<Property name="UserId">
<Description>
Group #3 "Person ID" for invoker of auditable event</Description>
<Type>%String</Type>
</Property>

<Property name="SalesPerson">
<Description>
Group #3 "Sales Person ID"</Description>
<Type>%String</Type>
</Property>

<Property name="Comment">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.Order8A57.OrderAuditLogD</DataLocation>
<DefaultData>OrderAuditLogDefaultData</DefaultData>
<IdLocation>^Wasabi.Order8A57.OrderAuditLogD</IdLocation>
<IndexLocation>^Wasabi.Order8A57.OrderAuditLogI</IndexLocation>
<StreamLocation>^Wasabi.Order8A57.OrderAuditLogS</StreamLocation>
<Data name="OrderAuditLogDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>OrderID</Value>
</Value>
<Value name="3">
<Value>EventType</Value>
</Value>
<Value name="4">
<Value>InitialTimestamp</Value>
</Value>
<Value name="5">
<Value>UserId</Value>
</Value>
<Value name="6">
<Value>SalesPerson</Value>
</Value>
<Value name="7">
<Value>Comment</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.OrderEntry.Data.OrderLineItem">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,54202.826632</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Product">
<Description>
Group #1 "Product ID"</Description>
<Type>Wasabi.ProductManagement.Data.Product</Type>
</Property>

<Property name="Description">
<Type>%String</Type>
</Property>

<Property name="QuantityOrdered">
<Type>%Integer</Type>
</Property>

<Property name="QuantityShipped">
<Type>%Integer</Type>
</Property>

<Property name="UnitPrice">
<Type>%Float</Type>
</Property>

<Property name="SubTotal">
<Type>%Float</Type>
<Calculated>1</Calculated>
<SqlComputeCode> set {SubTotal}=({UnitPrice}*{QuantityOrdered})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="Discount">
<Type>%Float</Type>
</Property>

<Property name="TotalPrice">
<Type>%Float</Type>
</Property>

<Property name="Status">
<Type>Wasabi.OrderEntry.Data.EventType</Type>
</Property>

<Property name="CreateTimestamp">
<Type>%String</Type>
</Property>

<Property name="DeleteTimestamp">
<Type>%String</Type>
</Property>

<Property name="OrderRef">
<Type>Wasabi.OrderEntry.Data.Orders</Type>
<Cardinality>parent</Cardinality>
<Inverse>Items</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="SubTotalGet">
<CodeMode>expression</CodeMode>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[(..UnitPrice*..QuantityOrdered)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("Items")</DataLocation>
<DefaultData>OrderLineItemDefaultData</DefaultData>
<IdLocation>^Wasabi.OrderEntry.Data.OrdersC("Items")</IdLocation>
<IndexLocation>^Wasabi.Order8A57.OrderLineItemI</IndexLocation>
<StreamLocation>^Wasabi.Order8A57.OrderLineItemS</StreamLocation>
<Data name="OrderLineItemDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Product</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
<Value name="4">
<Value>QuantityOrdered</Value>
</Value>
<Value name="5">
<Value>QuantityShipped</Value>
</Value>
<Value name="6">
<Value>UnitPrice</Value>
</Value>
<Value name="7">
<Value>Discount</Value>
</Value>
<Value name="8">
<Value>TotalPrice</Value>
</Value>
<Value name="9">
<Value>Status</Value>
</Value>
<Value name="10">
<Value>CreateTimestamp</Value>
</Value>
<Value name="11">
<Value>DeleteTimestamp</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.OrderEntry.Data.Orders">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61297,54082.696882</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Customer">
<Description>
Group #3 Person ID</Description>
<Type>Wasabi.Data.Customer</Type>
</Property>

<Property name="SalesPerson">
<Description>
Group #3 Person ID
Needs to have a "Not a Sales Person (self serv) Sales Person"</Description>
<Type>Wasabi.Data.SalesPerson</Type>
</Property>

<Property name="InitialTimestamp">
<Type>%TimeStamp</Type>
<InitialExpression>$zts</InitialExpression>
</Property>

<Property name="ShippingAddress">
<Type>Wasabi.Data.AddressSerial</Type>
</Property>

<Property name="BillingAddress">
<Type>Wasabi.Data.AddressSerial</Type>
</Property>

<Property name="Discount">
<Type>%Float</Type>
</Property>

<Property name="CurrentStatus">
<Description>
ordered, shipped, cancelled, etc.) -- WS</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",New,Canceled, Confirmed, Fullfilled"/>
</Property>

<Property name="PaymentType">
<Type>%String</Type>
</Property>

<Property name="Items">
<Type>Wasabi.OrderEntry.Data.OrderLineItem</Type>
<Cardinality>children</Cardinality>
<Inverse>OrderRef</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Invoices">
<Type>Wasabi.OrderEntry.Data.Invoice</Type>
<Cardinality>many</Cardinality>
<Inverse>OrderRef</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.OrderEntry.Data.OrdersD</DataLocation>
<DefaultData>OrdersDefaultData</DefaultData>
<IdLocation>^Wasabi.OrderEntry.Data.OrdersD</IdLocation>
<IndexLocation>^Wasabi.OrderEntry.Data.OrdersI</IndexLocation>
<StreamLocation>^Wasabi.OrderEntry.Data.OrdersS</StreamLocation>
<Data name="OrdersDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Customer</Value>
</Value>
<Value name="3">
<Value>SalesPerson</Value>
</Value>
<Value name="4">
<Value>InitialTimestamp</Value>
</Value>
<Value name="5">
<Value>ShippingAddress</Value>
</Value>
<Value name="6">
<Value>BillingAddress</Value>
</Value>
<Value name="7">
<Value>Discount</Value>
</Value>
<Value name="8">
<Value>CurrentStatus</Value>
</Value>
<Value name="9">
<Value>PaymentType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Wasabi.OrderEntry.Exception">
<Super>%Exception.AbstractException</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61299,57763.929818</TimeCreated>
</Class>


<Class name="Wasabi.Person.API.Address">
<Super>%RegisteredObject</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,37481.275317</TimeCreated>

<Property name="ID">
<Type>%String</Type>
</Property>

<Property name="Type">
<Description>
Flesh Out Values</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Home,Shipping,Billing"/>
</Property>

<Property name="PostalCode">
<Type>%String</Type>
</Property>

<Property name="Street1">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Street2">
<Type>%String</Type>
</Property>

<Property name="City">
<Type>%String</Type>
</Property>

<Property name="Region">
<Type>%String</Type>
</Property>

<Property name="Country">
<Type>%String</Type>
</Property>
</Class>


<Class name="Wasabi.Person.API.AddressUtils">
<Abstract>1</Abstract>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,74260.512368</TimeCreated>

<Method name="GetMatches">
<ClassMethod>1</ClassMethod>
<FormalSpec>city:%String="",region:%String</FormalSpec>
<ReturnType>%ResultSet.SQL</ReturnType>
<Implementation><![CDATA[	quit ""
]]></Implementation>
</Method>

<Method name="GetOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>Wasabi.Data.Address</ReturnType>
</Method>

<Method name="Add">
<ClassMethod>1</ClassMethod>
<FormalSpec>addr:Wasabi.Person.API.Address</FormalSpec>
</Method>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<FormalSpec>addr:Wasabi.Person.API.Address</FormalSpec>
</Method>
</Class>


<Class name="Wasabi.Person.API.Customer">
<Super>Wasabi.Person.API.Person</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,75570.655936</TimeCreated>

<Property name="CustomerNumber">
<Type>%Integer</Type>
</Property>

<Property name="CompanyName">
<Type>%String</Type>
</Property>

<Property name="ContactEmailAddress">
<Type>Wasabi.Common.DT.Email</Type>
</Property>
</Class>


<Class name="Wasabi.Person.API.Employee">
<Super>Wasabi.Person.API.Person</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,75570.655936</TimeCreated>

<Property name="SSN">
<Type>%String</Type>
</Property>

<Property name="Jobs">
<Type>Wasabi.Data.Job</Type>
<Collection>list</Collection>
</Property>

<Property name="Manager">
<Type>Wasabi.Data.Employee</Type>
</Property>

<Property name="HireDate">
<Type>%Date</Type>
</Property>

<Property name="SeparationDate">
<Type>%Date</Type>
</Property>

<Property name="Location">
<Type>Wasabi.Data.AddressPersistent</Type>
</Property>

<Property name="Email">
<Type>Wasabi.Common.DT.Email</Type>
</Property>

<Property name="Active">
<Type>%Boolean</Type>
</Property>

<Property name="Picture">
<Type>%Stream.GlobalBinary</Type>
</Property>
</Class>


<Class name="Wasabi.Person.API.Person">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,77309.536806</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="ID">
<Type>%String</Type>
</Property>

<Property name="LastName">
<Type>%String</Type>
</Property>

<Property name="FirstName">
<Type>%String</Type>
</Property>

<Property name="MiddleInitial">
<Type>%String</Type>
</Property>

<Property name="DOB">
<Type>%Date</Type>
</Property>

<Property name="Title">
<Type>%String</Type>
</Property>

<Property name="Suffix">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Jr.,Sr.,M.D.,Esq.,DDS"/>
</Property>

<Property name="Gender">
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",Male,Female"/>
<Parameter name="VALUELIST" value=",1,2"/>
</Property>

<Property name="FullName">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {FullName}={FirstName}_" "_{LastName}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="UserName">
<Type>%String</Type>
</Property>

<Property name="Password">
<Type>%String</Type>
</Property>

<Property name="Addresses">
<Type>Wasabi.Data.AddressPersistent</Type>
<Collection>list</Collection>
</Property>

<Property name="PhoneNumberSerials">
<Type>Wasabi.Data.PhoneNumberSerial</Type>
<Collection>list</Collection>
</Property>
</Class>


<Class name="Wasabi.Person.API.PersonUtils">
<Abstract>1</Abstract>
<IncludeCode>%occStatus</IncludeCode>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,74240.69561</TimeCreated>

<Method name="Validate">
<ClassMethod>1</ClassMethod>
<FormalSpec>username:%String,password:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim ex as %Exception.SystemException
	#dim user as Employee
	#dim ret as %Boolean
	#dim status as %Status
	#dim sc as %Status
		
	
	try {
		set user = ##class(Wasabi.Data.Person).idxUserNameOpen(username,,.sc)
		$$$THROWONERROR(status,sc)
		
		if user.Password = $system.Encryption.MD5Hash(password) {
			set ret = 1
		}
		else {
			// password wrong
			set ret = 0
		}			
	}
	catch ex {
		// simply passes the exception to the caller
		THROW ex
	}
	
	quit ret
]]></Implementation>
</Method>

<Method name="GetMatches">
<ClassMethod>1</ClassMethod>
<FormalSpec>lastname:%String="",firstname:%String=""</FormalSpec>
<ReturnType>%ResultSet.SQL</ReturnType>
</Method>

<Method name="GetOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>Wasabi.Person.API.Person</ReturnType>
</Method>

<Method name="Add">
<ClassMethod>1</ClassMethod>
<FormalSpec>cust:Wasabi.Person.API.Person</FormalSpec>
</Method>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<FormalSpec>cust:Wasabi.Person.API.Person</FormalSpec>
</Method>
</Class>


<Class name="Wasabi.ProductManagement.Data.Product">
<Description>
*************************
*** STUBBED OUT CLASS ***
*************************
</Description>
<Super>%Persistent</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61298,35321.179558</TimeCreated>

<Property name="ProductName">
<Type>%String</Type>
</Property>

<Property name="ProductPrice">
<Type>%Float</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Wasabi.ProductManaAC89.ProductD</DataLocation>
<DefaultData>ProductDefaultData</DefaultData>
<IdLocation>^Wasabi.ProductManaAC89.ProductD</IdLocation>
<IndexLocation>^Wasabi.ProductManaAC89.ProductI</IndexLocation>
<StreamLocation>^Wasabi.ProductManaAC89.ProductS</StreamLocation>
<Data name="ProductDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ProductName</Value>
</Value>
<Value name="3">
<Value>ProductPrice</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Web.SocketTest">
<Super>%CSP.WebSocket</Super>
<TimeChanged>63133,57643.982716</TimeChanged>
<TimeCreated>62654,74990.306655</TimeCreated>

<Method name="OnPreServer">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Server">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Error"
	Set timeout=10
	Set status=..Write("Welcome to Cache WebSocket. NameSpace: "_$NameSpace)
	For  {
		Set len=32656
		Set data=..Read(.len, .status, timeout)
		If $$$ISERR(status),$$$GETERRORCODE(status) = $$$CSPWebSocketClosed Quit
		If $$$ISERR(status),$$$GETERRORCODE(status) = $$$CSPWebSocketTimeout {
		   Set data="Timeout after "_timeout_" seconds"_" occurred on "_$ZDate(+$Horolog,2)_" at "_$ZTime($Piece($Horolog,",",2),3)
		   Set status=..Write(data)
		}
		else {
			If data="exit" Quit
			Set data="'"_data_"'"_" (length="_len_") recieved on "_$ZDate(+$Horolog,2)_" at "_$ZTime($Piece($Horolog,",",2),3)_" NameSpace="_$NameSpace
			Set status=..Write(data)
		}
	}
	Set status=..EndServer()
	Quit $$$OK
Error // Error
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPostServer">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="XSLT2.Examples">
<Description>
For these examples, streams are derived from XDATA blocks within this class. In
a real-world scenario streams (or files) would come from an external source</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63043,52058.748024</TimeCreated>

<Method name="Example1">
<Description>
This demonstrates a transformation by simply sorting the elements within the XML</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    
    #dim e As %Exception.AbstractException
    #dim tOutput As %Stream
    
    try {
        #; Get a stream of XML from the ExampleXML block contained in this class
        Set tSource=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||ExampleXML").Data
        If '$IsObject(tSource) Set tSC=%objlasterror Quit
        
        #; Get a stream of XSL from the ExampleXSL block contained in this class
        Set tXSL=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example1XSL").Data
        If '$IsObject(tXSL) Set tSC=%objlasterror Quit
        
        #; Transform the source according to the XSL
        Set tSC=##class(%XML.XSLT2.Transformer).TransformStream(tSource,tXSL,.tOutput)
        If $$$ISERR(tSC) Quit
        
        #; Output the result to the screen
        Set tSC=tOutput.OutputToDevice()
        
    } catch (e) {
        Set tSC=e.AsStatus()
    }
       
    If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<Method name="Example2">
<Description>
This demonstrates a passing top level parameters to a style sheet</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    
    #dim e As %Exception.AbstractException
    #dim tOutput As %Stream
    
    try {
        #; Get a stream of XML from the ExampleXML block contained in this class
        Set tSource=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||ExampleXML").Data
        If '$IsObject(tSource) Set tSC=%objlasterror Quit
        
        #; Get a stream of XSL from the ExampleXSL block contained in this class
        Set tXSL=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example2XSL").Data
        If '$IsObject(tXSL) Set tSC=%objlasterror Quit
        
        #; Transform the source according to the XSL
        Set tParameters("title")="Results Sorted By Continent And City"
       
        #; Transform the source according to the XSL
        Set tSC=##class(%XML.XSLT2.Transformer).TransformStream(tSource,tXSL,.tOutput,,.tParameters)
        If $$$ISERR(tSC) Quit
        
        #; Output the result to the screen
        Set tSC=tOutput.OutputToDevice()
        
    } catch (e) {
        Set tSC=e.AsStatus()
    }
       
    If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<Method name="Example3">
<Description>
This demonstrates calling cache via the isc:evaluate() function, the title is transformed
from a reversed string to the readable representation by calling into cache</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    
    #dim e As %Exception.AbstractException
    #dim tOutput As %Stream
    #dim tParameters As %String
    
    try {
        #; Get a stream of XML from the ExampleXML block contained in this class
        Set tSource=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||ExampleXML").Data
        If '$IsObject(tSource) Set tSC=%objlasterror Quit
        
        #; Get a stream of XSL from the ExampleXSL block contained in this class
        Set tXSL=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example3XSL").Data
        If '$IsObject(tXSL) Set tSC=%objlasterror Quit
        
        #; Get a Callback handler to handle the extension calls to cache-evaluate()
        Set tCallbackHandler=##Class(%XML.XSLT.CallbackHandler).%New()
        If '$IsObject(tCallbackHandler) Set tSC=%objlasterror Quit
        
        #; Set a parameter
        Set tParameters("title")="YTIC dnA tnenitnoC yB detroS stluseR"
        
        #; Transform the source according to the XSL
        Set tSC=##class(%XML.XSLT2.Transformer).TransformStream(tSource,tXSL,.tOutput,,.tParameters,tCallbackHandler)
        If $$$ISERR(tSC) Quit
        
        #; Output the result to the screen
        Set tSC=tOutput.OutputToDevice()
        
    } catch (e) {
        Set tSC=e.AsStatus()
    }
       
    If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<Method name="Example4">
<Description>
Example 4, Transform a stream. For this example, streams are derived from XDATA blocks within this class. In
a real-world scenario streams would come from an external source</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	#dim tOutput
	
	do {
		#; Get a stream of XML from the ExampleXML block contained in this class
		Set tSource=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example4XML").Data
		If '$IsObject(tSource) Set tSC=%objlasterror Quit
		
		#; Get a stream of XSL from the ExampleXSL block contained in this class
		Set tXSL=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example4XSL").Data
		If '$IsObject(tXSL) Set tSC=%objlasterror Quit
		
		#; Transform the source according to the XSL
		Set tSC=##class(%XML.XSLT2.Transformer).TransformStream(tSource,tXSL,.tOutput)
		If $$$ISERR(tSC) Quit
		
		#; Output the result to the screen
		Set tSC=tOutput.OutputToDevice()
	} while (0)
	
	If $$$ISERR(tSC) {
		Do $system.Status.DisplayError(tSC)
	}
]]></Implementation>
</Method>

<Method name="Example5">
<Description>
Example 5, Transform a stream. For this example, streams are derived from XDATA blocks within this class. In
a real-world scenario streams would come from an external source. The XSL specification is first compiled
and then is used to transform the source. This is useful for when the same stylesheet needs to be applied
to many different xml sources as it can result in considerable performance improvements.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	#dim tCompiledStyleSheet As %XML.XSLT2.CompiledStyleSheet
	#dim tOutput
    #dim tCurrentDevice As %String = $IO
	
	do {
		#; Get a stream of XSL from the ExampleXSL block contained in this class
		Set tXSL=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example4XSL").Data
		If '$IsObject(tXSL) Set tSC=%objlasterror Quit
		
		#; Get a stream of XML from the ExampleXML block contained in this class
		Set tSource=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example4XML").Data
		If '$IsObject(tSource) Set tSC=%objlasterror Quit
	
		Set tSC = ##class(%XML.XSLT2.Transformer).StartGateway(.gateway)
		If $$$ISERR(tSC) Quit
		Quit:'$Isobject(gateway)

		Set tSC=##class(%XML.XSLT2.CompiledStyleSheet).CreateFromStream(tXSL,.tCompiledStyleSheet,,gateway)
		If $$$ISERR(tSC) Quit
		
		#; Transform the source according to the XSL
		Set tSC=##class(%XML.XSLT2.Transformer).TransformStreamWithCompiledXSL(tSource,tCompiledStyleSheet,.tOutput,,,,,gateway)
		If $$$ISERR(tSC) Quit
		
		Set tSC = ##class(%XML.XSLT2.CompiledStyleSheet).ReleaseFromServer(tCompiledStyleSheet,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).StopGateway(gateway)
		If $$$ISERR(tSC) Quit
		
		#; Output the result to the screen
		Set tSC=tOutput.OutputToDevice()
		
	} while (0)
	
	Use tCurrentDevice // switch back to current device in case StopGateway wasn't called
	If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<Method name="Example6">
<Description>
Example6, Transform a stream. For this example, streams are derived from XDATA blocks within this class. In
a real-world scenario streams would come from an external source. Here we install the default Callback Handler</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	#dim tOutput,tParameters
	
	do {
		#; Get a stream of XML from the ExampleXML block contained in this class
		Set tSource=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example4XML").Data
		If '$IsObject(tSource) Set tSC=%objlasterror Quit
		
		#; Get a stream of XSL from the ExampleXSL block contained in this class
		Set tXSL=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example6XSL").Data
		If '$IsObject(tXSL) Set tSC=%objlasterror Quit
		
		#; Get a Callback handler to handle the extension calls to cache-evaluate()
		Set tCallbackHandler=##Class(%XML.XSLT.CallbackHandler).%New()
		If '$IsObject(tCallbackHandler) Set tSC=%objlasterror Quit
		
		Set tParameters("madrid")="spain"
		Set tParameters("rome")="italy"

		#; Transform the source according to the XSL
		Set tSC=##class(%XML.XSLT2.Transformer).TransformStream(tSource,tXSL,.tOutput,,.tParameters,tCallbackHandler)
		If $$$ISERR(tSC) Quit
		
		#; Output the result to the screen
		Set tSC=tOutput.OutputToDevice()
	} while (0)
	
	If $$$ISERR(tSC) {
		Do $system.Status.DisplayError(tSC)
	}
]]></Implementation>
</Method>

<Method name="Example7">
<Description>
This demonstrates a transformation using filepaths (strings) to commumicate with the Java gateway.
Original XML and XSL is sent to the Java gateway as filepaths.
Transformed XML is written to disk in Java and passed back to Cache as a filepath.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>XMLFilePath:%String,XSLFilePath:%String,OutputXMLFilePath:%String</FormalSpec>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException

	Try {
		#; Transform the source according to the XSL
		Set tSC = ##class(%XML.XSLT2.Transformer).TransformFile(XMLFilePath,XSLFilePath,OutputXMLFilePath)
		If $$$ISERR(tSC) Quit
	} Catch (e) {
		Set tSC=e.AsStatus()
	}

	If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<Method name="Example8">
<Description>
This demonstrates a transformation using streams to communicate with the Java gateway.
Original XML and XSL is sent to the Java gateway as streams.
Transformed XML is passed back to Cache as a stream and written to disk in Cache.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>XMLFilePath:%String,XSLFilePath:%String,OutputXMLFilePath:%String</FormalSpec>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    #dim tOutput As %Stream

	Try {
		#; Get the XML file as stream
		Set tSourceFile = ##class(%Stream.FileBinary).%New()
		Do tSourceFile.LinkToFile(XMLFilePath)

		#; Get the XSL file as stream
		Set tXSLFile = ##class(%Stream.FileBinary).%New()
		Do tXSLFile.LinkToFile(XSLFilePath)
		
		#; Transform the source according to the XSL
		Set tSC=##class(%XML.XSLT2.Transformer).TransformStream(tSourceFile,tXSLFile,.tOutput)
		If $$$ISERR(tSC) Quit
		
		#; Output the result to a file
		Set file = ##class(%File).%New(OutputXMLFilePath)
		Set tSC = file.Open("WRN")
		If $$$ISERR(tSC) quit
		
		While 'tOutput.AtEnd {
			Set tSC = file.Write(tOutput.ReadLine())
			If $$$ISERR(tSC) quit
		}
		Do file.Close()
	} Catch (e) {
		Set tSC=e.AsStatus()
	}
	If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<Method name="Example9">
<Description>
This demonstrates a transformation using strings to communicate with the Java gateway.
Original XSL is sent to the Java gateway as a stream.
Original XML is sent to the Java gateway (in a separate request) as a string and transformed using the compiled styleshhet.
Transformed XML is passed back to Cache as a string and written to the current output device in Cache.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
	#dim tCompiledStyleSheet As %XML.XSLT2.CompiledStyleSheet
	#dim tOutput
    #dim tCurrentDevice As %String = $IO
	
	Do {
		#; Get a stream of XSL from the ExampleXSL block contained in this class
		Set tXSL=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example4XSL").Data
		If '$IsObject(tXSL) Set tSC=%objlasterror Quit
		
		#; Get a stream of XML from the ExampleXML block contained in this class
		#dim tSource As %Stream.TmpCharacter
		Set tSource=##class(%Dictionary.CompiledXData).%OpenId($classname()_"||Example4XML").Data
		If '$IsObject(tSource) Set tSC=%objlasterror Quit
		Set tSourceStr = tSource.Read(tSource.Size)
	
		Set tSC = ##class(%XML.XSLT2.Transformer).StartGateway(.gateway)
		If $$$ISERR(tSC) Quit
		Quit:'$Isobject(gateway)

		Set tSC=##class(%XML.XSLT2.CompiledStyleSheet).CreateFromStream(tXSL,.tCompiledStyleSheet,,gateway)
		If $$$ISERR(tSC) Quit
		
		#; Transform the source according to the XSL
		Set tSC=##class(%XML.XSLT2.Transformer).TransformStringWithCompiledXSL(tSourceStr,tCompiledStyleSheet,.tOutput,,,,,gateway)
		If $$$ISERR(tSC) Quit
		
		Set tSC = ##class(%XML.XSLT2.CompiledStyleSheet).ReleaseFromServer(tCompiledStyleSheet,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).StopGateway(gateway)
		If $$$ISERR(tSC) Quit
		
		#; Output the result to the screen
		Set tOutputStream=##class(%Stream.TmpCharacter).%New()
		Do tOutputStream.Write(tOutput)
		Do tOutputStream.Rewind()
		
		Set tSC=tOutputStream.OutputToDevice()
	} While (0)
	
	Use tCurrentDevice // switch back to current device in case StopGateway wasn't called
	If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<Method name="Example10">
<Description>
This demonstrates a transformation without wrapping each XSLT request in connect/disconnect (or start/stop) messages.
Note the explicit calls to start/stop the gateway before/after the three requests.
The first request sends the original XSL as a file and compiles it.
The second request sends the original XML as a file and transforms it using the compiled styleshhet.
The third request releases the compiled stylesheet from the gateway.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>XMLFilePath:%String,XSLFilePath:%String,OutputXMLFilePath:%String</FormalSpec>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    #dim tCurrentDevice As %String = $IO

	Try {
		Set tSC = ##class(%XML.XSLT2.Transformer).StartGateway(.gateway)
		If $$$ISERR(tSC) Quit
		Quit:'$Isobject(gateway)

		Set tSC = ##class(%XML.XSLT2.CompiledStyleSheet).CreateFromFile(XSLFilePath,.compiledStyleSheet,,gateway)
		If $$$ISERR(tSC) Quit
		
		Set tSC = ##class(%XML.XSLT2.Transformer).TransformFileWithCompiledXSL(XMLFilePath,compiledStyleSheet,OutputXMLFilePath,,,,,gateway)
		If $$$ISERR(tSC) Quit
		
		Set tSC = ##class(%XML.XSLT2.CompiledStyleSheet).ReleaseFromServer(compiledStyleSheet,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).StopGateway(gateway)
		If $$$ISERR(tSC) Quit
	} Catch (e) {
		Set tSC=e.AsStatus()
	}
	Use tCurrentDevice // switch back to current device in case StopGateway wasn't called
	If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<Method name="Example11">
<Description><![CDATA[
This demonstrates use of the evaluate cache and pre-population feature.
The first transform is done with an empty cache of maximum size 50.
Next we dump the cache and check that the size is indeed <=50.
Then we use the dump to pre-load the cache for the next transform (of the same file).
The second transform is done with a pre-populated cache.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>XMLFilePath:%String,XSLFilePath:%String,OutputXMLFilePath:%String</FormalSpec>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    #dim tCurrentDevice As %String = $IO

	Try {
		Set tSC = ##class(%XML.XSLT2.Transformer).StartGateway(.gateway)
		If $$$ISERR(tSC) Quit
		Quit:'$Isobject(gateway)

		Set tSC = ##class(%XML.XSLT2.CompiledStyleSheet).CreateFromFile(XSLFilePath,.compiledStyleSheet,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).ClearEvaluateCacheFilterList(,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).ClearEvaluateCache(,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).SetCacheEverythingBoolean(1,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).SetEvaluateCacheSize(50,,gateway)
		If $$$ISERR(tSC) Quit

        // Get a Callback handler to handle calls to isc:evaluate from the XSL file.
        Set tCallbackHandler = ##class(%XML.XSLT.CallbackHandler).%New()
        If '$IsObject(tCallbackHandler) Set tSC=%objlasterror Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).TransformFileWithCompiledXSL(XMLFilePath,compiledStyleSheet,OutputXMLFilePath,,,tCallbackHandler,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).DumpEvaluateCacheToList(.evaluateCache,,gateway)
		If $$$ISERR(tSC) Quit
		Set cacheSize = $Listlength(evaluateCache) // should be <= 50
		
		Set tSC = ##class(%XML.XSLT2.Transformer).ClearEvaluateCache(,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).LoadEvaluateCacheFromList(evaluateCache,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).TransformFileWithCompiledXSL(XMLFilePath,compiledStyleSheet,OutputXMLFilePath,,,tCallbackHandler,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.CompiledStyleSheet).ReleaseFromServer(compiledStyleSheet,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).StopGateway(gateway)
		If $$$ISERR(tSC) Quit
	} Catch (e) {
		Set tSC=e.AsStatus()
	}
	Use tCurrentDevice // switch back to current device in case StopGateway wasn't called
	If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<Method name="Example12">
<Description>
This demonstrates use of the evaluate cache and filter list feature.
The first transform is done with an empty cache of maximum size 1000, which is the default.
Next we dump the cache and add only a single function call to the filter list.
Then we clear the cache and do transform the same file again.
The second transform is done with an empty cache and a filter of the single function call that can be included in the cache.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>XMLFilePath:%String,XSLFilePath:%String,OutputXMLFilePath:%String</FormalSpec>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    #dim tCurrentDevice As %String = $IO

	Try {
		Set tSC = ##class(%XML.XSLT2.Transformer).StartGateway(.gateway)
		If $$$ISERR(tSC) Quit
		Quit:'$Isobject(gateway)

		Set tSC = ##class(%XML.XSLT2.CompiledStyleSheet).CreateFromFile(XSLFilePath,.compiledStyleSheet,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).ClearEvaluateCacheFilterList(,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).ClearEvaluateCache(,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).SetCacheEverythingBoolean(1,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).SetEvaluateCacheSize(,,gateway) // 1000 is the default cache size in the gateway
		If $$$ISERR(tSC) Quit

        // Get a Callback handler to handle calls to isc:evaluate from the XSL file.
        Set tCallbackHandler = ##class(%XML.XSLT.CallbackHandler).%New()
        If '$IsObject(tCallbackHandler) Set tSC=%objlasterror Quit
        
		Set tSC = ##class(%XML.XSLT2.Transformer).TransformFileWithCompiledXSL(XMLFilePath,compiledStyleSheet,OutputXMLFilePath,,,tCallbackHandler,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).DumpEvaluateCacheToList(.evaluateCache,,gateway)
		If $$$ISERR(tSC) Quit
		Set cacheSize = $Listlength(evaluateCache) // should be <= 1000
		
		Set tSC = ##class(%XML.XSLT2.Transformer).SetCacheEverythingBoolean(0,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).ClearEvaluateCache(,gateway)
		If $$$ISERR(tSC) Quit
		
		set numEntries = $Listlength(evaluateCache)
		If (numEntries > 0) {
			set functionCall = $List($List(evaluateCache,numEntries),1) // the name of the function is the first argument to evaluate in the XSL stylesheet
			set tSC = ##class(%XML.XSLT2.Transformer).AddToEvaluateCacheFilterList(functionCall,,gateway)
			If $$$ISERR(tSC) Quit
		}

		Set tSC = ##class(%XML.XSLT2.Transformer).TransformFileWithCompiledXSL(XMLFilePath,compiledStyleSheet,OutputXMLFilePath,,,tCallbackHandler,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.CompiledStyleSheet).ReleaseFromServer(compiledStyleSheet,,gateway)
		If $$$ISERR(tSC) Quit

		Set tSC = ##class(%XML.XSLT2.Transformer).StopGateway(gateway)
		If $$$ISERR(tSC) Quit
	} Catch (e) {
		Set tSC=e.AsStatus()
	}
	Use tCurrentDevice // switch back to current device in case StopGateway wasn't called
	If $$$ISERR(tSC) Do $System.Status.DisplayError(tSC)
]]></Implementation>
</Method>

<XData name="ExampleXML">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<world>
<country name="Canada" continent="North America">
<city>Toronto</city>
<city>Vancouver</city>
</country>
<country name="Jamaica" continent="North America">
<city>Kingston</city>
<city>Ocho Rios</city>
</country>
<country name="United States" continent="North America">
<city>Boston</city>
<city>Baltimore</city>
</country>
<country name="United Kingdom" continent="Europe">
<city>London</city>
<city>Glasgow</city>
</country>
<country name="France" continent="Europe">
<city>Paris</city>
<city>Nice</city>
</country>
<country name="Japan" continent="Asia">
<city>Tokyo</city>
<city>Osaka</city>
</country>
</world>
]]></Data>
</XData>

<XData name="Example1XSL">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="2.0"  exclude-result-prefixes="fo xs xdt fn" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xdt="http://www.w3.org/2005/xpath-datatypes">
<xsl:template match="/">
<xsl:element name="world">
<xsl:for-each-group select="//country" group-by="@continent">
<xsl:sort select="@continent" data-type="text" order="ascending"/>
<xsl:variable name="continent" select="@continent"/>
<xsl:apply-templates select="//country[@continent = $continent]" mode="group">
<xsl:sort select="@name" data-type="text" order="ascending"/>
</xsl:apply-templates>
</xsl:for-each-group>
</xsl:element>
</xsl:template>
<xsl:template match="*" mode="group">
<xsl:copy-of select="."/>
</xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="Example2XSL">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="2.0" exclude-result-prefixes="fo xs xdt fn" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xdt="http://www.w3.org/2005/xpath-datatypes">
<xsl:param name="title"/>
<xsl:template match="/">
<title>
<xsl:value-of select="$title"/>
</title>
<xsl:element name="world">
<xsl:for-each-group select="//country" group-by="@continent">
<xsl:sort select="@continent" data-type="text" order="ascending"/>
<xsl:variable name="continent" select="@continent"/>
<xsl:apply-templates select="//country[@continent = $continent]" mode="group">
<xsl:sort select="@name" data-type="text" order="ascending"/>
</xsl:apply-templates>
</xsl:for-each-group>
</xsl:element>
</xsl:template>
<xsl:template match="*" mode="group">
<xsl:copy-of select="."/>
</xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="Example3XSL">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="2.0" exclude-result-prefixes="isc java fo xs xdt fn" xmlns:isc="com.intersys.xsltgateway.XSLTGateway" xmlns:java="java" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xdt="http://www.w3.org/2005/xpath-datatypes">
<xsl:param name="title"/>
<xsl:template match="/">
<title>
<xsl:value-of select="isc:evaluate($title)"/>
</title>
<xsl:element name="world">
<xsl:for-each-group select="//country" group-by="@continent">
<xsl:sort select="@continent" data-type="text" order="ascending"/>
<xsl:variable name="continent" select="@continent"/>
<xsl:apply-templates select="//country[@continent = $continent]" mode="group">
<xsl:sort select="@name" data-type="text" order="ascending"/>
</xsl:apply-templates>
</xsl:for-each-group>
</xsl:element>
</xsl:template>
<xsl:template match="*" mode="group">
<xsl:copy-of select="."/>
</xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="Example4XML">
<Data><![CDATA[
<?xml version="1.0" ?>
<s1 title="s1 title attr">
  <s2 title="s2 title attr">
    <s3 title="s3 title attr">Content</s3>
  </s2>
</s1>
]]></Data>
</XData>

<XData name="Example4XSL">
<Data><![CDATA[
<?xml version="1.0"?>

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">

<xsl:output method="xml" indent="yes"/>
 
<xsl:template match="//@* | //node()">
  <xsl:copy>
    <xsl:apply-templates select="@*"/>
    <xsl:apply-templates select="node()"/>
  </xsl:copy>
</xsl:template>

</xsl:stylesheet>
]]></Data>
</XData>

<XData name="Example5XSL">
<Data><![CDATA[
<?xml version="1.0"?>

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0" xmlns:isc="com.intersys.xsltgateway.XSLTGateway">

<xsl:output method="xml" indent="yes"/>
 
<xsl:template match="//@* | //node()">
  <xsl:copy>
    <xsl:apply-templates select="@*"/>
    <xsl:apply-templates select="node()"/>
  </xsl:copy>
</xsl:template> 

</xsl:stylesheet>
]]></Data>
</XData>

<XData name="Example6XSL">
<Data><![CDATA[
<?xml version="1.0"?>

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version ="2.0" xmlns:isc="com.intersys.xsltgateway.XSLTGateway" xmlns:java="java">
  <xsl:param name ="madrid"/>
  <xsl:template match="/">
    <abc>
      <xsl:value-of select="$madrid"/>
      <xsl:value-of select="isc:evaluate(.)"/>
    </abc>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>
</Class>


<Class name="ZENApp.Chart">
<Description><![CDATA[
ZENApp.Chart
This is page displays chart data for the Help Desk sample application.
Note that this page extends the <class>ZENApp.TemplatePage</class>
class; this is a template that provides a standardized 
look & feel for the application.]]></Description>
<Super>ZENApp.TemplatePage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,48007.995811</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENApp.SampleApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Chart</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENAPP</Default>
</Parameter>

<Property name="monthList">
<Description>
Localized list of months to use for chart labels.</Description>
<Type>%ZEN.Datatype.caption</Type>
<InitialExpression>$$$Text("Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec")</InitialExpression>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

/* style for menu pane */
#treeMenu {
	height: 20.0em;
	width: 10.0em;
	overflow: auto;
	border: 1px solid darkblue;
	background: #EEEEEE;
}

/* style for message box */
#msgBox {
	height: 8.0em;
	width: 10.0em;
	overflow: auto;
	border: 1px solid darkblue;
	background: white;
}

</style>
]]></Data>
</XData>

<XData name="menuPane">
<Description>
This XML block defines the contents of the menu pane.</Description>
<Data><![CDATA[
<pane id="zzz">
<dynaTree
	id="treeMenu"
	dataGlobal="%helpDeskMenu"
/>
</pane>
]]></Data>
</XData>

<XData name="messagePane">
<Description>
This XML block defines the contents of the message pane.
Here we use an HTML component and call a server-method to
get the message contents.
We use a timer to force periodic updates of the message box.</Description>
<Data><![CDATA[
<pane>
<timer id="timer" 
	ontimeout="zenPage.msgTimer(zenThis);" 
	timeout="10000"/>

<titleBox title="Messages" />

<html id="msgBox" OnDrawContent="DrawMessage" />
</pane>
]]></Data>
</XData>

<XData name="tablePane">
<Description>
This XML block defines the contents of the table pane.</Description>
<Data><![CDATA[
<pane>
<titleBox title="Customer Incidents By Month" 
		subtitle="This chart shows customer incidents by month." />

<svgFrame id="svg" width="700" height="500" layout="horizontal">
<barChart id="chart"
	backgroundStyle="fill: #000060;"
	plotAreaStyle="fill: url(#glow-silver);" 
	seriesColors="url(#glow-blue)"
	ongetData="return zenPage.getChartData(series);"
	ongetLabelX="return zenPage.getChartLabelX(value);"
	title="Customer Service Incidents"
	seriesCount="1"
	seriesSize="12"
	width="700" 
	height="500">
<xAxis id="xAxis" />
<yAxis id="yAxis"
	minValue="0" 
	maxValue="100" 
	majorUnits="25"
	minorUnits="5"
	minorGridLines="true"/>
</barChart>
</svgFrame>

</pane>
]]></Data>
</XData>

<XData name="detailPane">
<Description>
This XML block defines the contents of the details pane.</Description>
<Data><![CDATA[
<pane>
</pane>
]]></Data>
</XData>

<Method name="%OnBeforeCreatePage">
<Description>
This class method callback is called just before the server-side page 
object is created.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Make sure array that defines the menu tree is defined
	#; (use a local and not a global)
	Kill %helpDeskMenu

	#; Create items to graph items by priority
	For p="All","Low","High","Critical" {
		Set %helpDeskMenu("Priority",p) = "javascript:zenPage.setChartCategory('"_$S(p="All":"",1:p)_"');"
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawMessage">
<Description>
Draw the HTML that will be displayed within the
MessageBox</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; create a random message
	Set tColors = $LB("red","green","blue","black","orange")
	Set tColor = $LG(tColors,$R($LL(tColors))+1)

	Set tMsgs = $LB("Fresh coffee in kitchen!","Company share price has gone up.","The boss is coming!","Customer crisis!","Lunch Time!")
	Set tMsg = $LG(tMsgs,$R($LL(tMsgs))+1)

	&html<#($ZDT($H,11))#<div style="color: #(tColor)#;">#(tMsg)#</div>>
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="msgTimer">
<Description>
MessageBox timer has fired.</Description>
<FormalSpec>timer</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var html = this.getComponentById('msgBox');
	zenASSERT(html,"Unable to find html object",arguments);
	
	// update contents of message box
	html.refreshContents();

	timer.startTimer();
]]></Implementation>
</Method>

<Method name="calculateChartData">
<Description>
Server-side method to calculate new chart data
Returns a ":" delimited list of values.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPriority:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; Get incident data by month

	Set tRS = ##Class(%ResultSet).%New()
	Set tSQL = "SELECT COUNT(*) As C FROM ZENApp_Data.Incident"
	If (pPriority'="") {
		Set tSQL = tSQL _ " WHERE Priority = '"_pPriority_"'"
	}
	Set tSQL = tSQL _ " GROUP BY MONTH(CreateDate)"

	Set tSC = tRS.Prepare(tSQL)
	If $$$ISERR(tSC) {
		&js<alert('Error preparing query: #($ZCVT($ZE,"O","JS"))#\n #(tSQL)#');>
	}
	Set tSC = tRS.Execute()
	If $$$ISERR(tSC) {
		&js<alert('Error executing query: #($ZCVT($ZE,"O","JS"))#');>
	}

	Set data = ""
	While (tRS.Next()) {
		Set data = data _ $S(data="":"",1:":") _ tRS.Data("C")
	}	
	Set tRS = ""

	Quit data
]]></Implementation>
</Method>

<Method name="setChartCategory">
<Description>
Update chart to display data for given category.</Description>
<FormalSpec>cat</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var chart = this.getComponentById("chart");
	zenASSERT(chart,"Unable to find chart",arguments);

	// get new data from server, store in client variable
	var data = this.calculateChartData(cat);
	
	if ('' == data) {
		delete this._clientData;
	}
	else {
		this._clientData = data.split(':');
	}

	// adjust scales
	var yAxis = this.getComponentById("yAxis");
	if ('' == cat) {
		yAxis.setProperty('maxValue',200);
	}
	else {
		yAxis.setProperty('maxValue',100);
	}

	chart.updateChart();
]]></Implementation>
</Method>

<Method name="getChartLabelX">
<Description>
Callback to provide labels for chart.</Description>
<FormalSpec>val</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// return month out of month list
	return this.monthList.split(',')[val];
]]></Implementation>
</Method>

<Method name="getChartData">
<Description>
Callback to provide data for chart.</Description>
<FormalSpec>series</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// see if we have a client side copy of the data
	if (this._clientData) {
		return this._clientData;
	}

	// else create empty data
	var data = new Array(12);
	for (var i = 0; i < 12; i++) {
		data[i] = 0;
	}
	return data;
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.CompositeReport">
<Description>
Test case for Zen Report based on composite components.
TODO: a future enhancement to this sample will show how to
enforce the inclusion of certain report elements. For example,
some organization require standard header and footer elements.
Commonly these components may have variations depending on page
size or type of report.</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60288,67444.278856</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
name='myReport'
sql="SELECT ID,Customer,Num,SalesRep,SaleDate 
	FROM ZENApp_Report.Invoice 
	WHERE (Month(SaleDate) = ?) OR (? IS NULL)
	ORDER BY SalesRep,SaleDate">
<parameter expression='..Month'/>
<parameter expression='..Month'/>
<attribute name='runTime' expression='$ZDT($H,3)' />
<attribute name='runBy' expression='$UserName' />
<attribute name='author' expression='..ReportAuthor' />
<aggregate name='grandTotal' type="SUM" field='Num' />
<attribute name='month' expression='..GetMonth()' />
<group name='SalesRep' breakOnField='SalesRep'>
<attribute name='name' field='SalesRep' />
<aggregate name='count' type="COUNT" field='Num' />
<aggregate name='subtotal' type="SUM" field='Num' />
<aggregate name='avg' type="AVG" field='Num' />
<group name="record">
<attribute name='id' field='ID' />
<attribute name='number' field='Num' />
<element name='date' field='SaleDate' />
<element name='customer' field='Customer' />
</group>
</group>
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" xmlns:my="http://www.intersystems.com/zen/report/display/2.0/sample"
name='myReport' title='HelpDesk Sales Report' style='standard'>
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in">
</document>

<body>

<my:reportHeader infoSeparator="line:2">
	<!-- REPORT HEADER -->
	<my:reportTitle>#(%display.title)#</my:reportTitle>
	<my:reportSubtitle>Sales by Sales Rep</my:reportSubtitle>
	<my:reportInfo
		month="@month"
		author="@author"
		runBy="@runBy"
		runTime="@runTime"
	/>
</my:reportHeader>

<!-- MAIN REPORT GROUP -->
<group name="SalesRep" pagebreak="true" line='1px'>
<my:detailHeader seller="@name" sellerCaption="Sales Rep:"
				numTransactions="count" numTransactionsCaption="Number of Sales:"
				subtotal="subtotal" subtotalCaption="Total Value of Sales:"
				statistic="avg" statisticCaption="Average Sale:"
/>
<!-- TABLE OF SALES -->
<my:lineItem lineItem="@id" lineItemCaption="Sale ID" 
			date="date"
			purchaser="customer" purchaserCaption="Customer"
			amount="@number"
			subtotal="subtotal"
/>
</group>

<!-- FOOTER -->
<my:reportFooter
	caption="Grand Total:"
	information="grandTotal"
	/>
</body>	
</report>
]]></Data>
</XData>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.CompositeReport.detailHeader">
<Description>
This is an example detail header reusable component. A nice enhancement to this
would be to make statistic into a list of statistics, with caption attributes. 
The actual computation of the statistics is accomplished before running the
Display transformations.</Description>
<Super>%ZEN.Report.Display.composite</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61465,674.81046</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/report/display/2.0/sample</Default>
</Parameter>

<Property name="seller">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="sellerCaption">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="numTransactions">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="numTransactionsCaption">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="subtotal">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="subtotalCaption">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="statistic">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="statisticCaption">
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="Display">
<Description>
this demponstrates Report Template Expressions. Any template property may
be used as an attribute value using the following syntax:
 attribute="#(..property)#"
These property values are processed when the template is
included in the page.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<composite xmlns="http://www.intersystems.com/zen/report/display"
		xmlns:my="http://www.intersystems.com/zen/report/display/2.0/sample">
<!-- SALES REP INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="3.8in" class='table2'>
<item field="#(..seller)#" width="2in"><caption value="#(..sellerCaption)#" width="2in"/></item>
<item field="#(..numTransactions)#"><caption value="#(..numTransactionsCaption)#"/></item>
<item field="#(..subtotal)#" formatNumber='###,###,##0.00;(#)'><caption value="#(..subtotalCaption)#"/></item>
</table>
<line pattern="empty"/>


<!-- AVERAGE/DEVIATION -->
<table orient="col" width="6in" style="border:thin solid gray;" class="invisible">
<table orient="row" width="3in" style="margin-bottom:1em;padding-left:0;" class="table1" align="left">
<item field="#(..statistic)#" class="table1" style="margin-bottom:1em;padding-left:3px;" width="1.7in" formatNumber='###,###,##0.000;(#)'><caption value="#(..statisticCaption)#" style="width:1.3in"/></item>
</table>
</table>
</header>
</composite>
]]></Data>
</XData>
</Class>


<Class name="ZENApp.CompositeReport.headerInfo">
<Description><![CDATA[
This is an example of how to create a user "auxiliary" class as
to structure information in user defined xml formats. This is used
by the composite class: <class>reportHeader</class>. 
Note that <class>%ZEN.Report.Display.node</class> is used for Report Display objects;
In Zen UI component design, this corresponds to the use of <class>%ZEN.Component.object</class>
This is *not* a composite display component, although it is
easy to turn it into one and is a great excercise for the reader.]]></Description>
<Super>%ZEN.Report.Display.node</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61461,82324.255053</TimeCreated>

<Property name="month">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="author">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="runBy">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="runTime">
<Type>%ZEN.Datatype.string</Type>
</Property>
</Class>


<Class name="ZENApp.CompositeReport.lineItem">
<Description>
This is an example of how to create a line item report composite. Even though using
the primitive Zen Report Display components is not too complicated, it is a lot of 
detail in the high-level report display block that can be more easily reused and
maintained. The composite Display block may be changed without recompiling the Report
Display itself.</Description>
<Super>%ZEN.Report.Display.composite</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61464,85984.815427</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/report/display/2.0/sample</Default>
</Parameter>

<Property name="lineItem">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="lineItemCaption">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="date">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="purchaser">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="purchaserCaption">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="amount">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="subtotal">
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="Display">
<Description>
this demponstrates Report Template Expressions. Any template property may
be used as an attribute value using the following syntax:
 attribute="#(property)#"
These property values are processed when the template is
included in the page.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<composite xmlns="http://www.intersystems.com/zen/report/display"
		xmlns:my="http://www.intersystems.com/zen/report/display/2.0/sample">
<table orient="col" group="record" width="6in" class="table4" altcolor="#DFDFFF">
<item special="number" width=".45in" style="color: darkblue;">
<caption value="#" />
</item>
<item field="#(..lineItem)#" width=".7in" style="border:none;padding-right:4px">
<caption value="#(..lineItemCaption)#"/>
</item>
<item field="#(..date)#" width="1.5in" style="padding-left: 4px;">
<caption value="Date"/>
</item>
<item field="#(..purchaser)#" width="2.65in">
<caption value="#(..purchaserCaption)#"/>
</item>
<item caption="Amount" width=".7in" style="text-align:right;" field="#(..amount)#" formatNumber='###,###,##0.00;(#)'>
<caption value="Amount"/>
<summary field="#(..subtotal)#" style="font-weight:bold;text-align:right" formatNumber='###,###,##0.00;(#)'/>
</item>
</table>
</composite>
]]></Data>
</XData>
</Class>


<Class name="ZENApp.CompositeReport.reportFooter">
<Description>
This component just presents a simple name-value pair. The reason that
this is called a footer, is that the report Display XML should be as human
readable as possible when using the composite paradigm. Further, a separate
custom group component could be used to enforce that certain report components
are place in a particular type of report.</Description>
<Super>%ZEN.Report.Display.composite</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61462,50215.757805</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/report/display/2.0/sample</Default>
</Parameter>

<Property name="caption">
<Type>%ZEN.Datatype.caption</Type>
</Property>

<Property name="information">
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="Display">
<Description>
this demponstrates Report Template Expressions. Any template property may
be used as an attribute value using the following syntax:
 attribute="#(property)#"
These property values are processed when the template is
included in the page.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<composite xmlns="http://www.intersystems.com/zen/report/display"
		xmlns:my="http://www.intersystems.com/zen/report/display/2.0/sample">
<table orient="row" class="table1" width="2.5in">
<item  caption="#(%composite.caption)#" field="#(%composite.information)#" />
</table>
</composite>
]]></Data>
</XData>
</Class>


<Class name="ZENApp.CompositeReport.reportHeader">
<Description>
This is an alternative use of Zen templates. Runtime expressions are still allowed, however
templates are only instantiated at runtime (they can be thought of as a set of default children
for a Report Display group. Any Runtime expressions used in a template will be evaluated in the
context of the host - report or composite - that invokes the template.
Templates and composites can interact in a powerful way when using the parameterization made available
by Runtime expressions.
Note that a default value for the template argument is provided to cause the Display XData to be included
automatically in the host component.</Description>
<Super>%ZEN.Report.Display.composite</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61461,82123.832233</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/report/display/2.0/sample</Default>
</Parameter>

<Property name="infoSeparator">
<Type>%ZEN.Datatype.string</Type>
</Property>

<Property name="reportTitle">
<Type>%ZEN.Datatype.string</Type>
<Parameter name="XMLPROJECTION" value="element"/>
</Property>

<Property name="reportSubtitle">
<Type>%ZEN.Datatype.string</Type>
<Parameter name="XMLPROJECTION" value="element"/>
</Property>

<Property name="reportInfo">
<Type>headerInfo</Type>
</Property>

<XData name="Display">
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<composite xmlns="http://www.intersystems.com/zen/report/display">
<header> 
<!-- REPORT HEADER -->
<p class="banner1">#(..reportTitle)#</p>
<fo id="infoSeparator"></fo>
<table orient="row" width="3.45in" class='table1'>
<item value="#(..reportSubtitle)#" width="2in">
<caption value="Title:" width="1.35in"/>
</item>
<item field="#(..reportInfo.month)#" caption="Month:"/>
<item field="#(..reportInfo.author)#" caption="Author:"/>
<item field="#(..reportInfo.runBy)#" caption="Prepared By:"/>
<item field="#(..reportInfo.runTime)#" caption="Time:"/>
</table>
</header>
</composite>
]]></Data>
</XData>

<Method name="%OnAfterCreateComposite">
<Description><![CDATA[
use this to parse the value for infoSeparator and create the proper fo objects.
for demo purposes we just defined that infoSeparator should be <displayComponent>:<repeat>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=$$$OK
	set infoSeparator=##class(%ZEN.Report.reportPage).%GetComponentById("infoSeparator")
	set repeat=$piece(..infoSeparator,":",2)
	if repeat<1 { set repeat=1 }
	set type="%ZEN.Report.Display."_$piece(..infoSeparator,":",1)
	for i=1:1:repeat {
		set separator=$zobjclassmethod(type,"%New")
		if type="%ZEN.Report.Display.line" {
			s separator.pattern="empty"
		}
		set tSC=infoSeparator.children.Insert(separator)
	}
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.Data.Customer">
<Description>
This represents a Customer within the sample 
HelpDesk application.</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,49555.627864</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="IdxName">
<Properties>Name</Properties>
</Index>

<Index name="IdxLocation">
<Type>bitmap</Type>
<Properties>Location</Properties>
</Index>

<Property name="Name">
<Description>
Customer name.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="POPSPEC" value="Company()"/>
</Property>

<Property name="Location">
<Description>
Customer location (city customer is based in).</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="POPSPEC" value="City()"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENApp.Data.CustomerD</DataLocation>
<DefaultData>CustomerDefaultData</DefaultData>
<IdLocation>^ZENApp.Data.CustomerD</IdLocation>
<IndexLocation>^ZENApp.Data.CustomerI</IndexLocation>
<StreamLocation>^ZENApp.Data.CustomerS</StreamLocation>
<Data name="CustomerDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Location</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
</Data>
<Property name="Location"/>
<Property name="Name"/>
</Storage>
</Class>


<Class name="ZENApp.Data.Employee">
<Description>
This represents an Employee within the sample 
HelpDesk application.</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,49555.627864</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="IdxName">
<Properties>Name</Properties>
</Index>

<Index name="IdxSSN">
<Properties>SSN</Properties>
</Index>

<Property name="Name">
<Description>
Employee name.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="SSN">
<Description>
Employee SSN or Tax ID.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENApp.Data.EmployeeD</DataLocation>
<DefaultData>EmployeeDefaultData</DefaultData>
<IdLocation>^ZENApp.Data.EmployeeD</IdLocation>
<IndexLocation>^ZENApp.Data.EmployeeI</IndexLocation>
<StreamLocation>^ZENApp.Data.EmployeeS</StreamLocation>
<Data name="EmployeeDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>SSN</Value>
</Value>
</Data>
<Property name="Name"/>
<Property name="SSN"/>
</Storage>
</Class>


<Class name="ZENApp.Data.Incident">
<Description>
This represents a customer support incident with 
the sample HelpDesk application.</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,49555.627864</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="IdxAssignedTo">
<Type>bitmap</Type>
<Properties>AssignedTo</Properties>
</Index>

<Index name="IdxCustomer">
<Type>bitmap</Type>
<Properties>Customer</Properties>
</Index>

<Index name="IdxPriority">
<Type>bitmap</Type>
<Properties>Priority</Properties>
</Index>

<Index name="IdxDate">
<Type>bitmap</Type>
<Properties>CreateDate</Properties>
</Index>

<Property name="Customer">
<Description>
Customer who logged the incident.</Description>
<Type>Customer</Type>
</Property>

<Property name="AssignedTo">
<Description>
Employee to whom the incident is assigned.</Description>
<Type>Employee</Type>
</Property>

<Property name="Priority">
<Description>
Priority of this incident.</Description>
<Type>Priority</Type>
</Property>

<Property name="CreateDate">
<Description>
Date on which this incident happened.</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
<Parameter name="POPSPEC" value=".MakeDate()"/>
</Property>

<Property name="Comments">
<Description>
Comments related to this incident.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="5000"/>
<Parameter name="POPSPEC" value=".MakeComment()"/>
</Property>

<Method name="BuildData">
<Description>
Build sample data for the application</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#; wipe out old data
	Do ##class(Priority).%KillExtent()
	Do ##class(Customer).%KillExtent()
	Do ##class(Employee).%KillExtent()
	Do ##class(Incident).%KillExtent()

	#; build new data
	Do ##class(Priority).BuildData()
	Do ##class(Customer).Populate(100)
	Do ##class(Employee).Populate(100)
	Do ##class(Incident).Populate(1000)
]]></Implementation>
</Method>

<Method name="MakeDate">
<Description>
Return random date for data population.</Description>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	#; Make a random date within year 2005
	Quit 59901 + $R(300) + $R(65)
]]></Implementation>
</Method>

<Method name="MakeComment">
<Description>
Return random comment for data population.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tMsgs = $LB("We're working on it!","The customer is upset.")
	Quit $LG(tMsgs,$R($LL(tMsgs))+1)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENApp.Data.IncidentD</DataLocation>
<DefaultData>IncidentDefaultData</DefaultData>
<IdLocation>^ZENApp.Data.IncidentD</IdLocation>
<IndexLocation>^ZENApp.Data.IncidentI</IndexLocation>
<StreamLocation>^ZENApp.Data.IncidentS</StreamLocation>
<Data name="IncidentDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreateDate</Value>
</Value>
<Value name="3">
<Value>Customer</Value>
</Value>
<Value name="4">
<Value>Priority</Value>
</Value>
<Value name="5">
<Value>AssignedTo</Value>
</Value>
<Value name="6">
<Value>Comments</Value>
</Value>
</Data>
<Property name="AssignedTo"/>
<Property name="Comments"/>
<Property name="CreateDate"/>
<Property name="Customer"/>
<Property name="Priority"/>
</Storage>
</Class>


<Class name="ZENApp.Data.Priority">
<Description>
This persistent class is used to represent the available
set of priority levels used by the Incident class.</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,49555.627864</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="IdxName">
<Description>
Use priority name to identify priorities.</Description>
<IdKey>1</IdKey>
<Properties>Name</Properties>
</Index>

<Property name="Name">
<Description>
Display name of this priority.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="POPSPEC" value="Company()"/>
</Property>

<Method name="BuildData">
<Description>
Build default set of priorities for the application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Do {
		For tName = "Low","High","Critical" {
			Set tObj = ..%New()
			Set tObj.Name = tName
			Set tSC = tObj.%Save()
			If $$$ISERR(tSC) Quit
			Set tObj = ""
		}
	} While(0)
	
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENApp.Data.PriorityD</DataLocation>
<DefaultData>PriorityDefaultData</DefaultData>
<IdLocation>^ZENApp.Data.PriorityD</IdLocation>
<IndexLocation>^ZENApp.Data.PriorityI</IndexLocation>
<StreamLocation>^ZENApp.Data.PriorityS</StreamLocation>
<Data name="PriorityDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ZENApp.HelpDesk">
<Description><![CDATA[
ZENApp.HelpDesk
This is the main page of the Help Desk sample application.
Note that this page extends the <class>ZENApp.TemplatePage</class>
class; this is a template that provides a standardized 
look & feel for the application.]]></Description>
<Super>ZENApp.TemplatePage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,48007.995811</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENApp.SampleApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>HelpDesk</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENAPP</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

/* style for menu pane */
#treeMenu {
	height: 20.0em;
	width: 10.0em;
	overflow: auto;
	border: 1px solid darkblue;
	background: #EEEEEE;
}

/* style for message box */
#msgBox {
	height: 8.0em;
	width: 10.0em;
	overflow: auto;
	border: 1px solid darkblue;
	background: white;
}


#navBar .tnbrTable {
	width: 800px;
	border-bottom: none;
}

/* style for table pane */
#table table {
	width: 800px;
}

</style>
]]></Data>
</XData>

<XData name="menuPane">
<Description>
This XML block defines the contents of the menu pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<dynaTree
	id="treeMenu"
	dataGlobal="%helpDeskMenu"
	showLines="true"
/>
</pane>
]]></Data>
</XData>

<XData name="messagePane">
<Description>
This XML block defines the contents of the message pane.
Here we use an HTML component and call a server-method to
get the message contents.
We use a timer to force periodic updates of the message box.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<timer id="timer" 
	ontimeout="zenPage.msgTimer(zenThis);" 
	timeout="5000"/>

<titleBox title="Messages"/>

<html id="msgBox" OnDrawContent="DrawMessage" />
</pane>
]]></Data>
</XData>

<XData name="tablePane">
<Description>
This XML block defines the contents of the table pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane id="tPane" xmlns="http://www.intersystems.com/zen">
<titleBox title="HelpDesk: Incidents" 
		subtitle="Customer-reported incidents are listed below. Click on a row to edit its details." />
<tableNavigatorBar id="navBar" showPageSize="true" tablePaneId="table" />
<tablePane id="table"
	width="100%"
	useSnapshot="true"
	maxRows="1000"
	pageSize="20"
	tableName="ZENApp_Data.Incident"
	valueColumn="ID"
	onselectrow="zenPage.rowSelected(zenThis);"
	showQuery="false"
	showZebra="true"
	useKeys="false"
	fixedHeaders="true"
	bodyHeight="15.0em"
	headerLayout="headersOnTop"
	>
<column colName="ID" 
		width="50"
		/>
<column colName="Priority"
		width="100"
		id="filterPriority"
		filterType="enum"
		filterEnum="Critical,High,Low"
		filterOp="="
		 />

<column colName="Customer"
		colExpression="Customer->Name" 
		width="200"
		filterType="query"
		filterQuery="SELECT Name FROM ZENApp_Data.Customer ORDER BY Name"
		filterOp="="
		
		/>
<column colName="AssignedTo"  
		colExpression="AssignedTo->Name" 
		width="22%"
		filterType="text"/>
<column colName="CreateDate" 
		width="22%"
		filterType="date"
		filterOp="BETWEEN"
		 />
<condition colName="Priority" 
		predicate="EQ" 
		value="Critical" rowStyle="font-weight: bold;"/>

</tablePane>

<spacer height="10"/>

</pane>
]]></Data>
</XData>

<XData name="detailPane">
<Description>
This XML block defines the contents of the details pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<fieldSet id="detailGroup" disabled="true" legend="Details">
<form id="detailForm" 
	layout="vertical" 
	labelPosition="top" 
	cellStyle="padding: 2px; padding-left: 5px; padding-right: 5px;"
	onchange="zenPage.detailFormChange(zenThis);" >
<hgroup>
<text id="ID" name="ID" label="ID" readOnly="true" size="5"/>
<spacer width="15"/>
<text id="CreateDate" name="CreateDate" label="Date" readOnly="true" size="8"/>
<spacer width="15"/>
<dataCombo id="Priority" name="Priority" label="Priority"
	size="12"
	dropdownHeight="150px"
	editable="false"
	unrestricted="true"
	sql="SELECT Name FROM ZENApp_Data.Priority ORDER BY Name"/>

<spacer width="15"/>

<dataCombo id="Customer" name="Customer" label="Customer"
	size="24"
	dropdownHeight="150px"
	editable="false"
	unrestricted="true"
	sql="SELECT ID,Name FROM ZENApp_Data.Customer ORDER BY Name"/>

<spacer width="15"/>

<dataCombo id="AssignedTo" name="AssignedTo" label="Assigned To"
	size="24"
	dropdownHeight="150px"
	editable="false"
	unrestricted="true"
	sql="SELECT ID,Name FROM ZENApp_Data.Employee ORDER BY Name"/>
</hgroup>

<textarea id="Comments" name="Comments" label="Comments" rows="3" cols="60"/>
<button id="btnSave" caption="Save" disabled="true" onclick="zenPage.detailFormSave();" />
</form>
</fieldSet>
</pane>
]]></Data>
</XData>

<Method name="%OnBeforeCreatePage">
<Description>
This class method callback is called just before the server-side page 
object is created.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Make sure sample data is created for the application
	If '##class(ZENApp.Data.Incident).%ExistsId(1) {
		Do ##class(ZENApp.Data.Incident).BuildData()
	}

	#; Make sure array that defines the menu tree is defined
	#; (use a local and not a global)
	Kill %helpDeskMenu

	#; View items by priority
	For p="All","Low","High","Critical" {
		Set %helpDeskMenu("Priority",p) = "javascript:zenPage.setFilter('filterPriority','"_$S(p="All":"",1:p)_"');"
	}

	#; adjust page size
	For sz = 5,10,20,50,100,500 {
		Set %helpDeskMenu("Options","PageSize",sz) = "javascript:zenPage.setPageSize("_sz_");"
	}

	Set %helpDeskMenu("Options","Zebra") = "javascript:zenPage.setZebra();"

	Set %helpDeskMenu("Other","Chart") = "ZENApp.Chart.cls"

	Set %helpDeskMenu("Reports","Sales") = "ZENApp.MyReport.cls"
	For m = 1:1:12 {
		Set %helpDeskMenu("Reports","Sales","Month " _ $J(m,2)) = "ZENApp.MyReport.cls?MONTH="_m
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawMessage">
<Description>
Draw the HTML that will be displayed within the
MessageBox</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; create a random message
	Set tColors = $LB("red","green","blue","black","orange")
	Set tColor = $LG(tColors,$R($LL(tColors))+1)

	Set tMsgs = $LB("Fresh coffee in kitchen!","Company share price has gone up.","The boss is coming!","Customer crisis!","Lunch Time!")
	Set tMsg = $LG(tMsgs,$R($LL(tMsgs))+1)

	&html<#($ZDT($H,11))#<div style="color: #(tColor)#;">#(tMsg)#</div>>
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="msgTimer">
<Description>
MessageBox timer has fired.</Description>
<FormalSpec>timer</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var html = this.getComponentById('msgBox');
	zenASSERT(html,"Unable to find html object",arguments);
	
	// update contents of message box
	html.refreshContents();

	timer.startTimer();
]]></Implementation>
</Method>

<Method name="rowSelected">
<Description>
User selected a row in the table</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');

	// update details pane using ID value from table
	var id = table.getProperty('value');
	this.ShowDetails(id);
]]></Implementation>
</Method>

<Method name="setPageSize">
<Description>
Set page size for the table</Description>
<FormalSpec>sz</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	table.setProperty('pageSize',sz);
]]></Implementation>
</Method>

<Method name="setZebra">
<Description>
Toggle zebra striping for the table</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	table.setProperty('showZebra',!table.getProperty('showZebra'));
]]></Implementation>
</Method>

<Method name="setFilter">
<Description>
Update table to new filter value</Description>
<FormalSpec>filterId,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	var column = this.getComponentById(filterId);
	zenASSERT(column,"Unable to find column object",arguments);

	// update filter value and re-execute query
	column.setProperty('filterValue',value);

	// 'true' means do not change current page for table
	table.executeQuery(true);
]]></Implementation>
</Method>

<Method name="detailFormChange">
<Description>
Form changed handler for detail form.
This is called whenever the modified state of the form changes.</Description>
<FormalSpec>form</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var mod = form.isModified();
	
	// toggle save button
	var btn = zenPage.getComponentById('btnSave');
	btn.setProperty('disabled',!mod);
]]></Implementation>
</Method>

<Method name="detailFormSave">
<Description>
Save contents of details panel.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// send form to server and save details
	var form = zenPage.getComponentById('detailForm');
	this.SaveDetails(form);
]]></Implementation>
</Method>

<Method name="ShowDetails">
<Description>
ShowDetails:
Show contents of details pane.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	// try to open the object
	Set tObj = ##class(ZENApp.Data.Incident).%OpenId(id)
	If $IsObject(tObj) {
		&js<zenPage.getComponentById('ID').setValue('#(tObj.%Id())#');>
		&js<zenPage.getComponentById('CreateDate').setValue('#(tObj.CreateDateLogicalToDisplay(tObj.CreateDate))#');>
		&js<zenPage.getComponentById('Priority').setValue('#(tObj.PriorityGetObjectId())#','#($ZCVT(tObj.Priority.Name,"O","JS"))#');>
		&js<zenPage.getComponentById('Customer').setValue('#(tObj.CustomerGetObjectId())#','#($ZCVT(tObj.Customer.Name,"O","JS"))#');>
		&js<zenPage.getComponentById('AssignedTo').setValue('#(tObj.AssignedToGetObjectId())#','#($ZCVT(tObj.AssignedTo.Name,"O","JS"))#');>
		&js<zenPage.getComponentById('Comments').setValue('#($ZCVT(tObj.Comments,"O","JS"))#');>

		#; enable form/ clear mod flag
		&js<zenPage.getComponentById('detailGroup').setProperty('disabled',false);>
		&js<zenPage.getComponentById('detailForm').clearModified();>
	}
	Else {
		#; clear & disable form
		&js<zenPage.getComponentById('detailGroup').setProperty('disabled',true);>
		&js<zenPage.getComponentById('detailForm').reset();>
	}
	Quit
]]></Implementation>
</Method>

<Method name="SaveDetails">
<Description>
Save contents of details pane.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>form:%ZEN.Component.form</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; as we passed form object to server, we can
	#; finds its control values using %page.%GetValueById
	
	Set tID = %page.%GetValueById("ID")

	#; try to open the object (with exclusive lock)
	Set tObj = ##class(ZENApp.Data.Incident).%OpenId(tID,4)
	If $IsObject(tObj) {
		Do tObj.PrioritySetObjectId(%page.%GetValueById("Priority"))
		Do tObj.CustomerSetObjectId(%page.%GetValueById("Customer"))
		Do tObj.AssignedToSetObjectId(%page.%GetValueById("AssignedTo"))
		Set tObj.Comments = %page.%GetValueById("Comments")

		Set tSC = tObj.%Save()
		If $$$ISERR(tSC) {
			&js<alert('Error saving object!');>
		}
		Else {
			#; clear mod flags for form
			&js<zenPage.getComponentById('detailForm').clearModified();>
			
			#; update tablePane with new query
			&js<zenPage.getComponentById('table').executeQuery();>
		}
	}
	Else {
		&js<alert('Unable to save object!');>
	}
	Quit
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenPage.setTraceOption('js',false);
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.MyReport">
<Description>
Test case for Zen Report.</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60288,67444.278856</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
name='myReport'
sql="SELECT ID,Customer,Num,SalesRep,SaleDate 
	FROM ZENApp_Report.Invoice 
	WHERE (Month(SaleDate) = ?) OR (? IS NULL)
	ORDER BY SalesRep,SaleDate">
<parameter expression='..Month'/>
<parameter expression='..Month'/>
<attribute name='runTime' expression='$ZDT($H,3)' />
<attribute name='runBy' expression='$UserName' />
<attribute name='author' expression='..ReportAuthor' />
<aggregate name='grandTotal' type="SUM" field='Num' />
<attribute name='month' expression='..GetMonth()' />
<group name='SalesRep' breakOnField='SalesRep'>
<attribute name='name' field='SalesRep' />
<aggregate name='count' type="COUNT" field='Num' />
<aggregate name='subtotal' type="SUM" field='Num' />
<aggregate name='avg' type="AVG" field='Num' />
<group name="record">
<attribute name='id' field='ID' />
<attribute name='number' field='Num' />
<element name='date' field='SaleDate' />
<element name='customer' field='Customer' />
</group>
</group>
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='myReport' title='HelpDesk Sales Report' style='standard'>
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in">
</document>

<body>
<header> 
<!-- REPORT HEADER -->
<p class="banner1">HelpDesk Sales Report</p>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
<table orient="row" width="3.45in" class='table1'>
<item value="Sales by Sales Rep" width="2in">
<caption value="Title:" width="1.35in"/>
</item>
<item field="@month" caption="Month:"/>
<item field="@author" caption="Author:"/>
<item field="@runBy" caption="Prepared By:"/>
<item field="@runTime" caption="Time:"/>
</table>
</header>

<!-- MAIN REPORT GROUP -->
<group name="SalesRep" pagebreak="true" line='1px'>

<!-- SALES REP INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="3.8in" class='table2'>
<item field="@name" width="2in"><caption value="Sales Rep:" width="2in"/></item>
<item field="count"><caption value="Number of Sales:"/></item>
<item field="subtotal" formatNumber='###,###,##0.00;(#)'><caption value="Total Value of Sales:"/></item>
</table>
<line pattern="empty"/>


<!-- AVERAGE/DEVIATION -->
<table orient="col" width="6in" style="border:thin solid gray;" class="invisible">
<table orient="row" width="3in" style="margin-bottom:1em;padding-left:0;" class="table1" align="left">
<item field="avg" class="table1" style="margin-bottom:1em;padding-left:3px;" width="1.7in" formatNumber='###,###,##0.000;(#)'><caption value="Average Sale:" style="width:1.3in"/></item>
</table>
</table>
</header>

<!-- TABLE OF SALES -->
<table orient="col" group="record" width="6in" class="table4" altcolor="#DFDFFF" oldSummary="false">
<item special="number" width=".45in" style="color: darkblue;">
<caption value="#" />
</item>
<item field="@id" width=".7in" style="border:none;padding-right:4px">
<caption value="Sale ID"/>
</item>
<item field="date" width="1.5in" style="padding-left: 4px;">
<caption value="Date"/>
</item>
<item field="customer" width="2.65in">
<caption value="Customer"/>
</item>
<item caption="Amount" width=".7in" style="text-align:right;" field="@number" formatNumber='###,###,##0.00;(#)'>
<caption value="Amount"/>
<summary style="font-style:italic;text-align:right;background-color:yellow" value=" "/>
<summary style="font-style:italic;text-align:right;background-color:purple" value=" "/>
<summary style="font-style:italic;text-align:right;background-color:orange" value=" "/>
<summary field="subtotal" style="font-style:italic;text-align:right;background-color:blue" formatNumber='###,###,##0.00;(#)'/>
<summary field="subtotal" style="font-weight:bold;text-align:right;background-color:red" formatNumber='###,###,##0.00;(#)'/>
</item>
</table>

</group>

<!-- FOOTER -->
<table orient="row" class="table1" width="2.5in">
<item caption="Grand Total:" field="grandTotal" />
</table>
</body>	
</report>
]]></Data>
</XData>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.MyReportBoth">
<Description><![CDATA[
Test case for Zen Report.
Uses <call> in BOTH the ReportDisplay and the ReportDefinition XData blocks.
This main report combines two independent reports.
Each subreport extracts different data, and formats it differently
Works OK for HTML, doesn't work for PDF because of 'rooted' issue
which is fixed in 2011, but present in 2010]]></Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>62139,53333.638378</TimeChanged>
<TimeCreated>60288,67444.278856</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<Parameter name="DEFAULTMODE">
<Default>html</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
name='myReport' runonce="true">
<attribute name='runTime' expression='$ZDT($H,3)' />
<attribute name='month' expression='..GetMonth()' />
<attribute name='author' expression='..ReportAuthor' />
<attribute name='runBy' expression='$UserName' />
<call method="GetSubDaily" />
<call method="GetSubRep" />
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='myReport' title='HelpDesk Combined Sales Report' style='standard'>
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in">
</document>

<body>
<header> 
<!-- COMBINED REPORT HEADER -->
<p class="banner1">HelpDesk Combined Sales Report</p>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
<table orient="row" width="3.45in" class='table1'> 
<item value="Combined Sales" width="2in">
<caption value="Title:" width="1.35in"/>
</item>
<item field="@month" caption="Month:"/>
<item field="@author" caption="Author:"/>
<item field="@runBy" caption="Prepared By:"/>
<item field="@runTime" caption="Time:"/>
</table>
</header>

<call method="GetSubDailyDspl" subreport="DailyReport" subreportname="myReportByDay" />
<call method="GetSubRepDspl" subreport="RepReport" subreportname="myReportByRep" />

</body>
</report>
]]></Data>
</XData>

<Method name="GetSubDaily">
<Description>
Method for ReportDefinition from Daily report</Description>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
 set (tSC,rpt,stream)=""
 set rpt=##class(ZENApp.MyReportByDay).%New()
 i rpt {
     set tSC=rpt.GenerateStream(.stream,0)
 }
 if $$$ISERR(tSC) {set stream=""}
 quit stream
]]></Implementation>
</Method>

<Method name="GetSubDailyDspl">
<Description>
Method for ReportDisplay from Daily report</Description>
<FormalSpec>mode</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
 set (tSC,rpt,stream)=""
 set rpt=##class(ZENApp.MyReportByDay).%New()
 if rpt {
   set rpt.SubReport="DailyReport"
   set rpt.MainReport="myReport" 
   set tSC=rpt.GenerateStream(.stream,mode)
 }
 if $$$ISERR(tSC) {set stream=""}
 quit stream
]]></Implementation>
</Method>

<Method name="GetSubRep">
<Description>
Method for ReportDefinition from Sales Rep report</Description>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
 set (tSC,rpt,stream)=""
 set rpt=##class(ZENApp.MyReportByRep).%New()
 i rpt {
     set tSC=rpt.GenerateStream(.stream,0)
 }
 if $$$ISERR(tSC) {set stream=""}
 quit stream
]]></Implementation>
</Method>

<Method name="GetSubRepDspl">
<Description>
 Method for ReportDisplay from Sales Rep report</Description>
<FormalSpec>mode</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
 set (tSC,rpt,stream)=""
 set rpt=##class(ZENApp.MyReportByRep).%New()
 if rpt {
    set rpt.SubReport="RepReport" 
    set rpt.MainReport="myReport" 
    set tSC=rpt.GenerateStream(.stream,mode)
 }
 if $$$ISERR(tSC) {set stream=""}
 quit stream
]]></Implementation>
</Method>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.MyReportByDay">
<Description>
Test case for Zen Report.</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60288,67444.278856</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<Parameter name="DEFAULTMODE">
<Default>html</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
name='myReportByDay'
sql="SELECT TOP 20 ID,Customer,Num,SalesRep,SaleDate 
	FROM ZENApp_Report.Invoice 
	WHERE (Month(SaleDate) = ?) OR (? IS NULL)
	ORDER BY SaleDate,SalesRep">
<parameter expression='..Month'/>
<parameter expression='..Month'/>
<attribute name='runTime' expression='$ZDT($H,3)' />
<attribute name='runBy' expression='$UserName' />
<attribute name='author' expression='..ReportAuthor' />
<aggregate name='grandTotal' type="SUM" field='Num' />
<attribute name='month' expression='..GetMonth()' />
<group name='SaleDate' breakOnField='SaleDate'>
<attribute name='date' field='SaleDate' />
<aggregate name='count' type="COUNT" field='Num' />
<aggregate name='subtotal' type="SUM" field='Num' />
<aggregate name='avg' type="AVG" field='Num' />
<group name="record">
<attribute name='id' field='ID' />
<attribute name='number' field='Num' />
<element name='date' field='SaleDate' />
<element name='salesrep' field='SalesRep' />
<element name='customer' field='Customer' />
</group>
</group>
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='myReportByDay' title='HelpDesk Sales Report: by Day' style='standard'>
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in">
</document>

<body>
<header> 
<!-- REPORT HEADER -->
<p class="banner1">HelpDesk Sales Report: by Day</p>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
<table orient="row" width="3.45in" class='table1'>
<item value="Sales by Date of Sale" width="2in">
<caption value="Title:" width="1.35in"/>
</item>
<item field="@month" caption="Month:"/>
<item field="@author" caption="Author:"/>
<item field="@runBy" caption="Prepared By:"/>
<item field="@runTime" caption="Time:"/>
</table>
</header>

<!-- MAIN REPORT GROUP -->
<group name="SaleDate" pagebreak="false" line='1px'>

<!-- DATE INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="3.8in" class='table2'>
<item field="@date" width="2in"><caption value="Date:" width="2in"/></item>
<item field="count"><caption value="Number of Sales:"/></item>
<item field="subtotal" formatNumber='###,###,##0.00;(#)'><caption value="Total Value of Sales:"/></item>
</table>
<line pattern="empty"/>


<!-- AVERAGE/DEVIATION -->
<table orient="col" width="6in" style="border:thin solid gray;" class="invisible">
<table orient="row" width="6in" style="margin-bottom:1em;padding-left:0;" class="table1" align="left">
<item field="avg" class="table1" style="margin-bottom:1em;padding-left:3px;" width="1.7in" formatNumber='###,###,##0.000;(#)'><caption value="Average Sale:" style="width:1.3in"/></item>
</table>
</table>
</header>

<!-- TABLE OF SALES -->
<table orient="col" group="record" width="6in" class="table4" altcolor="#DFDFFF" oldSummary="false">
<item special="number" width=".45in" style="color: darkblue;">
<caption value="#" />
</item>
<item field="@id" width=".7in" style="border:none;padding-right:4px">
<caption value="Sale ID"/>
</item>
<item field="date" width="1in" style="padding-left: 4px;">
<caption value="Date"/>
</item>
<item field="salesrep" width="1in">
<caption value="Sales Rep"/>
</item>
<item field="customer" width="2.15in">
<caption value="Customer"/>
</item>
<item caption="Amount" width=".7in" style="text-align:right;" field="@number" formatNumber='###,###,##0.00;(#)'>
<caption value="Amount"/>
<summary style="font-style:italic;text-align:right;background-color:#DFDFFF" value=" "/>
<summary style="font-style:italic;text-align:right;background-color:#DFDFFF" value=" "/>
<summary style="font-style:italic;text-align:right;background-color:#DFDFFF" value=" "/>
<summary style="font-style:italic;text-align:right;background-color:#DFDFFF" value=" "/>
<summary style="font-style:italic;text-align:right;background-color:#DFDFFF" formatNumber='###,###,##0.00;(#)'/>
<summary field="subtotal" style="font-weight:bold;text-align:right;background-color:#DFDFFF" formatNumber='###,###,##0.00;(#)'/>
</item>
</table>

</group>

<!-- FOOTER -->
<table orient="row" class="table1" width="2.5in">
<item caption="Grand Total:" field="grandTotal" />
</table>
</body>	
</report>
]]></Data>
</XData>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.MyReportByRep">
<Description>
Test case for Zen Report.</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60288,67444.278856</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<Parameter name="DEFAULTMODE">
<Default>html</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
name='myReportByRep'
sql="SELECT TOP 20 ID,Customer,Num,SalesRep,SaleDate 
	FROM ZENApp_Report.Invoice 
	WHERE (Month(SaleDate) = ?) OR (? IS NULL)
	ORDER BY SalesRep,SaleDate">
<parameter expression='..Month'/>
<parameter expression='..Month'/>
<attribute name='runTime' expression='$ZDT($H,3)' />
<attribute name='runBy' expression='$UserName' />
<attribute name='author' expression='..ReportAuthor' />
<aggregate name='grandTotal' type="SUM" field='Num' />
<attribute name='month' expression='..GetMonth()' />
<group name='SalesRep' breakOnField='SalesRep'>
<attribute name='name' field='SalesRep' />
<aggregate name='count' type="COUNT" field='Num' />
<aggregate name='subtotal' type="SUM" field='Num' />
<aggregate name='avg' type="AVG" field='Num' />
<group name="record">
<attribute name='id' field='ID' />
<attribute name='number' field='Num' />
<element name='date' field='SaleDate' />
<element name='customer' field='Customer' />
</group>
</group>
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='myReportByRep' title='HelpDesk Sales Report: by Sales Rep' style='standard'>
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in">
</document>

<body>
<header> 
<!-- REPORT HEADER -->
<p class="banner1">HelpDesk Sales Report: by Sales Rep</p>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
<table orient="row" width="3.45in" class='table1'>
<item value="Sales by Sales Rep" width="2in">
<caption value="Title:" width="1.35in"/>
</item>
<item field="@month" caption="Month:"/>
<item field="@author" caption="Author:"/>
<item field="@runBy" caption="Prepared By:"/>
<item field="@runTime" caption="Time:"/>
</table>
</header>

<!-- MAIN REPORT GROUP -->
<group name="SalesRep" pagebreak="true" line='1px'>

<!-- SALES REP INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="3.8in" class='table2'>
<item field="@name" width="2in"><caption value="Sales Rep:" width="2in"/></item>
<item field="count"><caption value="Number of Sales:"/></item>
<item field="subtotal" formatNumber='###,###,##0.00;(#)'><caption value="Total Value of Sales:"/></item>
</table>
<line pattern="empty"/>


<!-- AVERAGE/DEVIATION -->
<table orient="col" width="6in" style="border:thin solid gray;" class="invisible">
<table orient="row" width="3in" style="margin-bottom:1em;padding-left:0;" class="table1" align="left">
<item field="avg" class="table1" style="margin-bottom:1em;padding-left:3px;" width="1.7in" formatNumber='###,###,##0.000;(#)'><caption value="Average Sale:" style="width:1.3in"/></item>
</table>
</table>
</header>

<!-- TABLE OF SALES -->
<table orient="col" group="record" width="6in" class="table4" altcolor="#DFDFFF" oldSummary="false">
<item special="number" width=".45in" style="color: darkblue;">
<caption value="#" />
</item>
<item field="@id" width=".7in" style="border:none;padding-right:4px">
<caption value="Sale ID"/>
</item>
<item field="date" width="1.5in" style="padding-left: 4px;">
<caption value="Date"/>
</item>
<item field="customer" width="2.65in">
<caption value="Customer"/>
</item>
<item caption="Amount" width=".7in" style="text-align:right;" field="@number" formatNumber='###,###,##0.00;(#)'>
<caption value="Amount"/>
<summary style="font-style:italic;text-align:right;background-color:yellow" value=" "/>
<summary style="font-style:italic;text-align:right;background-color:purple" value=" "/>
<summary style="font-style:italic;text-align:right;background-color:orange" value=" "/>
<summary field="subtotal" style="font-style:italic;text-align:right;background-color:blue" formatNumber='###,###,##0.00;(#)'/>
<summary field="subtotal" style="font-weight:bold;text-align:right;background-color:red" formatNumber='###,###,##0.00;(#)'/>
</item>
</table>

</group>

<!-- FOOTER -->
<table orient="row" class="table1" width="2.5in">
<item caption="Grand Total:" field="grandTotal" />
</table>
</body>	
</report>
]]></Data>
</XData>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.MyReportMain">
<Description><![CDATA[
Version of MyReport that uses the <call> element
Duplicates MyReport ReportDefinition XData block.
Uses <call> only in the ReportDisplay XData block.
Does not use the subreportname attribute in <call>]]></Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60288,67444.278856</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
name='myReport'
sql="SELECT ID,Customer,Num,SalesRep,SaleDate 
	FROM ZENApp_Report.Invoice 
	WHERE (Month(SaleDate) = ?) OR (? IS NULL)
	ORDER BY SalesRep,SaleDate">
<parameter expression='..Month'/>
<parameter expression='..Month'/>
<attribute name='runTime' expression='$ZDT($H,3)' />
<attribute name='runBy' expression='$UserName' />
<attribute name='author' expression='..ReportAuthor' />
<aggregate name='grandTotal' type="SUM" field='Num' />
<attribute name='month' expression='..GetMonth()' />
<group name='SalesRep' breakOnField='SalesRep'>
<attribute name='name' field='SalesRep' />
<aggregate name='count' type="COUNT" field='Num' />
<aggregate name='subtotal' type="SUM" field='Num' />
<aggregate name='avg' type="AVG" field='Num' />
<group name="record">
<attribute name='id' field='ID' />
<attribute name='number' field='Num' />
<element name='date' field='SaleDate' />
<element name='customer' field='Customer' />
</group>
</group>
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='myReport' title='HelpDesk Sales Report' style='standard'>
<body>
<header> 
<!-- Combined REPORT HEADER -->
<p class="banner1">HelpDesk: Summary and Detail Reports</p>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
</header>

<call method="GetSummary" subreport="SummaryReport" />

<call method="GetDetail" subreport="DetailReport" />

</body>	
</report>
]]></Data>
</XData>

<Method name="GetSummary">
<Description>
Method for ReportDisplay from Summary report</Description>
<FormalSpec>mode</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
 set (tSC,rpt,stream)=""
 set rpt=##class(ZENApp.MyReportSummary).%New()
 if rpt {
   set rpt.SubReport="SummaryReport" 
    set tSC=rpt.GenerateStream(.stream,mode)
 }
 if $$$ISERR(tSC) {set stream=""}
 quit stream
]]></Implementation>
</Method>

<Method name="GetDetail">
<Description>
 Method for ReportDisplay from Full report</Description>
<FormalSpec>mode</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
 set (tSC,rpt,stream)=""
 set rpt=##class(ZENApp.MyReport).%New()
 if rpt {
    set rpt.SubReport="DetailReport" 
    set tSC=rpt.GenerateStream(.stream,mode)
 }
 if $$$ISERR(tSC) {set stream=""}
 quit stream
]]></Implementation>
</Method>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.MyReportMainDef">
<Description><![CDATA[
Example: using the <call> element 
Uses <call> only in the ReportDefinition XData block.
Calls ZENApp.MyReport to get XML, generates summary report.
Works OK for HTML, doesn't work for PDF because of 'rooted' issue
which is fixed in 2011, but present in 2010]]></Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>62782,45068.590961</TimeChanged>
<TimeCreated>60288,67444.278856</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<Parameter name="DEFAULTMODE">
<Default>pdf</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
name='Report' runonce="true">

<call method="GetSub" />

</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='Report' title='HelpDesk Sales Report' style='standard'>
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in">
</document>

<body>
<group name="myReport">
<header> 
<!-- REPORT HEADER -->
<p class="banner1">HelpDesk Sales Report: Summary</p>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
<table orient="row" width="3.45in" class='table1'>
<item value="Sales by Sales Rep" width="2in">
<caption value="Title:" width="1.35in"/>
</item>
<item field="@month" caption="Month:"/>
<item field="@author" caption="Author:"/>
<item field="@runBy" caption="Prepared By:"/>
<item field="@runTime" caption="Time:"/>
</table>
</header>

<!-- MAIN REPORT GROUP -->
<group name="SalesRep">

<!-- SALES REP INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="3.8in" class='table2'>
<item field="@name" width="2in"><caption value="Sales Rep:" width="2in"/></item>
<item field="count"><caption value="Number of Sales:"/></item>
<item field="subtotal" formatNumber='###,###,##0.00;(#)'><caption value="Total Value of Sales:"/></item>
<item field="avg" formatNumber='###,###,##0.000;(#)'><caption value="Average Sale:"/></item> 
</table>
<line pattern="empty"/>
</header>


</group>

<!-- FOOTER -->
<table orient="row" class="table1" width="2.5in">
<item caption="Grand Total:" field="grandTotal" />
</table>
</group>
</body>	
</report>
]]></Data>
</XData>

<Method name="GetSub">
<Description>
Method for ReportDefinition from Daily report</Description>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
 set stream=""
 set rpt=##class(ZENApp.MyReport).%New()
 i $isobject(rpt) 
 {
     set tSC=rpt.GenerateStream(.stream,0)
 }
 quit stream
]]></Implementation>
</Method>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.MyReportSummary">
<Description>
Test case for Zen Report.</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60288,67444.278856</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='myReport' title='HelpDesk Sales Report' style='standard'>
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in">
</document>

<body>
<header> 
<!-- REPORT HEADER -->
<p class="banner1">HelpDesk Sales Report: Summary</p>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
<table orient="row" width="3.45in" class='table1'>
<item value="Sales by Sales Rep" width="2in">
<caption value="Title:" width="1.35in"/>
</item>
<item field="@month" caption="Month:"/>
<item field="@author" caption="Author:"/>
<item field="@runBy" caption="Prepared By:"/>
<item field="@runTime" caption="Time:"/>
</table>
</header>

<!-- MAIN REPORT GROUP -->
<group name="SalesRep">

<!-- SALES REP INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="3.8in" class='table2'>
<item field="@name" width="2in"><caption value="Sales Rep:" width="2in"/></item>
<item field="count"><caption value="Number of Sales:"/></item>
<item field="subtotal" formatNumber='###,###,##0.00;(#)'><caption value="Total Value of Sales:"/></item>
<item field="avg" formatNumber='###,###,##0.000;(#)'><caption value="Average Sale:"/></item> 
</table>
<line pattern="empty"/>
</header>


</group>

<!-- FOOTER -->
<table orient="row" class="table1" width="2.5in">
<item caption="Grand Total:" field="grandTotal" />
</table>
</body>	
</report>
]]></Data>
</XData>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.Report.Invoice">
<Description>
A Customer invoice for testing reports against.</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,49555.627864</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="IdxSalesRep">
<Type>bitmap</Type>
<Properties>SalesRep</Properties>
</Index>

<Index name="IdxCustomer">
<Type>bitmap</Type>
<Properties>Customer</Properties>
</Index>

<Index name="IdxDate">
<Type>bitmap</Type>
<Properties>SaleDate</Properties>
</Index>

<Property name="Customer">
<Description>
Customer name.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="POPSPEC" value="Company()"/>
</Property>

<Property name="SalesRep">
<Description>
Sale's rep.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="POPSPEC" value=".MakeSalesRep()"/>
</Property>

<Property name="SaleDate">
<Description>
Date on which this sale was reported.</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
<Parameter name="POPSPEC" value=".MakeDate()"/>
</Property>

<Property name="Num">
<Description>
Number used for aggregate testing.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="10"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Method name="BuildData">
<Description>
Build sample data for the application</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCount:%Integer=1000</FormalSpec>
<Implementation><![CDATA[
	Do ..%KillExtent()
	Do ..Populate(pCount)
]]></Implementation>
</Method>

<Method name="MakeDate">
<Description>
Return random date for data population.</Description>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	#; Make a random date within year 2005
	Quit 59901 + $R(300) + $R(65)
]]></Implementation>
</Method>

<Method name="MakeSalesRep">
<Description>
Return random Sales rep name for data population.</Description>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	Set list = $LB("John","Jack","Jim","Joanne","Jen","Jill")
	Quit $LG(list,$R($LL(list))+1)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENApp.Report.InvoiceD</DataLocation>
<DefaultData>InvoiceDefaultData</DefaultData>
<IdLocation>^ZENApp.Report.InvoiceD</IdLocation>
<IndexLocation>^ZENApp.Report.InvoiceI</IndexLocation>
<StreamLocation>^ZENApp.Report.InvoiceS</StreamLocation>
<Data name="InvoiceDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Customer</Value>
</Value>
<Value name="3">
<Value>SaleDate</Value>
</Value>
<Value name="4">
<Value>SalesRep</Value>
</Value>
<Value name="5">
<Value>Num</Value>
</Value>
</Data>
<Property name="Customer"/>
<Property name="Num"/>
<Property name="SaleDate"/>
<Property name="SalesRep"/>
</Storage>
</Class>


<Class name="ZENApp.SampleApp">
<Description>
ZENApp.SampleApp
This is a sample application: it is a simple
help disk application.</Description>
<Super>%ZEN.application</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,47905.652631</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Sample Application</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>ZENApp.HelpDesk.cls</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
/* default body style */
body {
	font-family: arial;
	background: #F0F0F0;
}

/* descriptive text */
#description {
	color: black;
	font-size: 1.2em;
	padding: 5px;
	padding-top: 10px;
	padding-bottom: 10px;
}

#description:first-letter {
	font-size: 1.5em;
}

.locatorBarTable td {
	background: rgb(47,98,128);
	background-image: none;
	border-bottom: 1px solid darkblue;
	padding-bottom: 1px;
	color: white;
}

.locatorBarLinks {
	color: white;
}

.locatorBarLinks a {
	color: white;
}

.locatorBarLinks a:visited {
	color: white;
}

.locatorBarSelect {
	color: white;
}

.locatorBarLinks a:hover {
	color: red;
	background: #FFFAE7;
}
</style>
]]></Data>
</XData>
</Class>


<Class name="ZENApp.TemplatePage">
<Description>
ZENApp.TemplatePage
This a template page that provides a standard
template for subclasses within the HelpDesk application</Description>
<Abstract>1</Abstract>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60217,54615.312942</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENApp.SampleApp</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>TemplatePage</Default>
</Parameter>

<Property name="StdTitle">
<Description>
Domain used for localization.
Parameter DOMAIN = "";
Define the title that will be displayed within subclasses</Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>..#PAGENAME</InitialExpression>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
/* default styles */
body {
	background: #C0C0EE;
	font-family: verdana;
}

table.helpDeskTitle {
	color: black;
	background: #c5d6d6;
	width: 100%;
	padding: 0px;
	margin: 0px;
	border-bottom: 1px solid darkblue;
	font-size: 1.4em;
	font-family: verdana;
	text-align: center;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.
There are 4 main panes defined for the standard page:
menu	table
message	details
The contents of these panes are provided by subclasses.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page title="HelpDesk">
<html OnDrawContent="DrawTitle"/>

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Sample App" title="Sample App" />
</locatorBar>

<hgroup>
<vgroup valign="top">
<pane paneName="menuPane"/>
<spacer height="20"/>
<pane paneName="messagePane"/>
</vgroup>
<spacer width="20"/>
<vgroup width="100%" valign="top">
<pane paneName="tablePane"/>
<spacer height="20"/>
<pane paneName="detailPane"/>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="DrawTitle">
<Description>
Draw HTML for the page title</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Whatever HTML we render here will be used as the title bar
	&html<<table class="helpDeskTitle" border="0" cellpadding="0" cellspacing="0" width="100%">
		<tr>
		<td align="left" width="40"><img width="185" height="60" src="images/zentitle.jpg"/></td>
		<td align="center" width="90%">
		<div style="font-size: 0.6em;">Zen Sample Application</div>
		<div>#($ZCVT(..#PAGENAME,"O","HTML"))#</div></td>
		<td>&nbsp;</td></tr></table>>

	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.ZenReportBarChart">
<Description>
jsl.COSBarChartPerson</Description>
<IncludeCode>%occSAX,%occXSLT</IncludeCode>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62651,46480.550067</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this report belongs to.</Description>
</Parameter>

<Parameter name="DEFAULTMODE">
<Description>
This is the default display mode for this report.</Description>
<Default>html</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Parameter XSLTMODE = "server";

]]></Content>
</UDLText>

<Parameter name="EMBEDXSL">
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Parameter REPORTDIR = "C:\perforce\Users\levinson\P57969";

]]></Content>
</UDLText>

<XData name="ReportDefinition">
<Description>
This XML defines the logical contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
 name="test" sql="Select Top 10 Name,Age from Sample.Person">
<!-- add definition of the report here. -->
<group name="Person">
<attribute name="Name" field="Name" />
<attribute name="Age" field="Age" />
</group>
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
This XML defines the display for this report.
This is used to generate the XSLT stylesheets for both HTML and XSL-FO.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display"
 name="test" title="Bar Charts">
 <document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in" headerHeight="1in">
  </document>
<body>
<p>This is a sample</p>
  <cbarChart ongetData="getchartdata" title="My First Chart" height="400px" width="200px" axisLineStyle="stroke:red" appearance="3D" valueLabelsVisible="true">
  <xAxis majorGridLines="true" labelAngle="45" />
  <yAxis labelAngle="45"/>
  </cbarChart>  
  
    <cbarChart ongetData="getchartdata2" title="My Second Chart" height="400px" width="200px" axisLineStyle="stroke:red" appearance="3D" chartPivot="true" seriesColors="silver,gold" seriesColorsOverride="rgb(255,0,0)">
  
  </cbarChart>
    <cbarChart ongetData="getchartdata2" title="My Third Chart - 2D, pivot " height="400px" width="200px" axisLineStyle="stroke:red" appearance="2D" chartPivot="true">
  
  </cbarChart>
<cbarChart ongetData="getchartdata2" title="My Fourth Chart - 2D, no pivot" height="400px" width="200px" axisLineStyle="stroke:red" appearance="2D" chartPivot="false">
  
  </cbarChart>
    <cbarChart ongetData="getchartdata2" title="My Fifth Chart - 3D, stacked" height="400px" width="200px" axisLineStyle="stroke:red" appearance="3D" chartStacked="true">
  
  </cbarChart>  

  <cbarChart ongetData="getchartdata2" title="My Sixth Chart - 2D, stacked" height="400px" width="200px" axisLineStyle="stroke:red" appearance="2D" chartStacked="true">
  
  </cbarChart>  

</body>
</report>
]]></Data>
</XData>

<Method name="getchartdata">
<FormalSpec><![CDATA[&var,chartObject]]></FormalSpec>
<Implementation><![CDATA[
	do {
		Set tSC=##class(%XML.XPATH.Document).CreateFromFile(..xmlfile,.tDoc)
		if $$$ISERR(tSC) quit
		Set tSC=tDoc.EvaluateExpression("/test","Person",.tResults)
		if $$$ISERR(tSC) quit
		For tI=1:1:tResults.Count()
		{
			Set tResult=tResults.GetAt(tI)
		
			if (tResult.Type=$$$XPATHDOM)
			{
				
			
				While tResult.Read() {
					do tResult.MoveToAttributeName("Age")
					Set var(0,$i(var(0))-1)=tResult.Value

				}
			
			}
		}
	} while (0) ;
]]></Implementation>
</Method>

<Method name="getchartdata2">
<FormalSpec><![CDATA[&var,chartObject]]></FormalSpec>
<Implementation><![CDATA[
	for i=1:1:10 set var(0,i-1)=i
	for i=1:1:10 set var(1,i-1)=10-i+1
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.ZenReportGraphExample">
<Description>
ZENApp.ZenReportGraphExample</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61046,46688.654945</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
name='myReport'
sql="SELECT ID,Customer,Num,SalesRep,SaleDate 
	FROM ZENApp_Report.Invoice 
	WHERE (Month(SaleDate) = ?) OR (? IS NULL)
	ORDER BY SalesRep,SaleDate">
<parameter expression='..Month'/>
<parameter expression='..Month'/>
<attribute name='runTime' expression='$ZDT($H,3)' />
<attribute name='runBy' expression='$UserName' />
<attribute name='author' expression='..ReportAuthor' />
<aggregate name='grandTotal' type="SUM" field='Num' />
<attribute name='month' expression='..GetMonth()' />
<group name='SalesRep' breakOnField='SalesRep'>
<attribute name='name' field='SalesRep' />
<aggregate name='count' type="COUNT" field='Num' />
<aggregate name='subtotal' type="SUM" field='Num' />
<aggregate name='avg' type="AVG" field='Num' />
<group name="record">
<attribute name='id' field='ID' />
<attribute name='number' field='Num' />
<element name='date' field='SaleDate' />
<element name='customer' field='Customer' />
</group>
</group>
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='myReport' title='HelpDesk Sales Report' style='standard'>
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in" >
</document>

<body>
<header> 
<!-- REPORT HEADER -->
<p class="banner1">HelpDesk Sales Report</p>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
<table orient="row" width="3.45in" class='table1'>
<item value="Sales by Sales Rep" width="2in">
<caption value="Title:" width="1.35in"/>
</item>
<item field="@month" caption="Month:"/>
<item field="@author" caption="Author:"/>
<item field="@runBy" caption="Prepared By:"/>
<item field="@runTime" caption="Time:"/>
</table>
</header>

<!-- MAIN REPORT GROUP -->
<group name="SalesRep" pagebreak="true" line='1px'>

<!-- SALES REP INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="3.8in" class='table2'>
<item field="@name" width="2in"><caption value="Sales Rep:" width="2in"/></item>
<item field="count"><caption value="Number of Sales:"/></item>
<item field="subtotal" formatNumber='###,###,##0.00;(#)'><caption value="Total Value of Sales:"/></item>
</table>
<line pattern="empty"/>


<!-- AVERAGE/DEVIATION -->
<table orient="col" width="6in" style="border:thin solid gray;" class="invisible">
<table orient="row" width="3in" style="margin-bottom:1em;padding-left:0;" class="table1" align="left">
<item field="avg" class="table1" style="margin-bottom:1em;padding-left:3px;" width="1.7in" formatNumber='###,###,##0.000;(#)'><caption value="Average Sale:" style="width:1.3in"/></item>
</table>
</table>
</header>


<lineChart
 width="6in" height="2.5in" title="First Twenty Sales"
 dataFields="!@number" dataGroup="record" seriesSize="20"
 bandUpper="8" bandUpperStyle="fill:#aaffaa" bandLower="2" bandLowerStyle="fill:#ffaaaa" >
</lineChart>
<barChart width="4in" height="3in" title="MY GRAPH"
              dataFields="!@number" dataGroup="record" >
</barChart>
</group>

</body>	
</report>
]]></Data>
</XData>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.ZenReportPercentBarChart">
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>62651,45769.142972</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this report belongs to.</Description>
</Parameter>

<Parameter name="DEFAULTMODE">
<Description>
This is the default display mode for this report.</Description>
<Default>html</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
This XML defines the logical contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
 name="test" runonce="true">
 <!-- dummy ReportDefinition, all data is gotten from callback methods ongetXXX -->
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
This XML defines the display for this report.
This is used to generate the XSLT stylesheets for both HTML and XSL-FO.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display"
 name="test"  title="Percent Bar Chart">
 <document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in" headerHeight="1in" >
  </document>

<body>
<cpercentbarChart id="chart1b" 
appearance="2D"
	chartPivot="true"
	ongetSeriesName ="getSeriesName"
	valueLabelsVisible="true"
	ongetLabelX="getSeriesNameX"	
	ongetLabelY="getSeriesNameY"
	width="500" height="400" plotStyle="stroke-width:1;" seriesCount="4" seriesSize="3" ongetData="getChartData"  >
	<yAxis majorGridLines="true"></yAxis>
	</cpercentbarChart>
</body>
</report>
]]></Data>
</XData>

<Method name="getChartData">
<Description>
Get chart data</Description>
<FormalSpec><![CDATA[&data,chartObject]]></FormalSpec>
<Implementation><![CDATA[
	for i=1:1:3 Set data(0,i-1) = $LI($LB( 34, 18, 27),i)
	for i=1:1:3 Set data(1,i-1) = $LI($LB( 43, 14, 24),i)
	for i=1:1:3 Set data(2,i-1) = $LI($LB( 43, 16, 27),i)
	for i=1:1:3 Set data(3,i-1) = $LI($LB( 45, 13, 34),i)
]]></Implementation>
</Method>

<Method name="getSeriesNameX">
<Description>
Get X axis label name</Description>
<FormalSpec>value,chartObject</FormalSpec>
<Implementation><![CDATA[
	if ..%GetComponentById("chart1b").chartPivot {
		quit value
	} else {
		quit $LI($LB(1991,1992,1993,1994),value+1)
	}
]]></Implementation>
</Method>

<Method name="getSeriesNameY">
<Description>
Get Y axis label name</Description>
<FormalSpec>value,yAxisNo,chartObject</FormalSpec>
<Implementation><![CDATA[
	if ..%GetComponentById("chart1b").chartPivot {
		quit $LI($LB(1991,1992,1993,1994),value+1)
	} else {
		quit value
	}
]]></Implementation>
</Method>

<Method name="getSeriesName">
<Description>
Get series name</Description>
<FormalSpec>sno,chartObject</FormalSpec>
<Implementation><![CDATA[	quit $LI($LB("Oats","Barley","Wheat"),sno+1)
]]></Implementation>
</Method>
</Class>


<Class name="ZENApp.ZenReportTemplate">
<Super>%ZEN.Report.Display.reportTemplate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61061,34549.441493</TimeCreated>

<XData name="Header1">
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<template>
<header>
<!-- REPORT HEADER -->
<p class="banner1">HelpDesk Sales1 Report</p>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
<table orient="row" width="3.45in" class='table1'>
<item value="Sales by Sales Rep" width="2in">
<caption value="Title:" width="1.35in"/>
</item>
<item field="@month" caption="Month:"/>
<item field="@author" caption="Author:"/>
<item field="@runBy" caption="Prepared By:"/>
<item field="@runTime" caption="Time:"/>
</table>
</header>
</template>
]]></Data>
</XData>

<XData name="Footer1">
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<template>
<table orient="row" class="table1" width="2.5in">
<item caption="Grand Total:" field="grandTotal" />
</table>
</template>
]]></Data>
</XData>

<XData name="Image1">
<Data><![CDATA[
<template>
	<img height="50pt" width="50pt" src="images/folder.gif" />
	</template>
]]></Data>
</XData>
</Class>


<Class name="ZENApp.ZenReportTemplateExample">
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61060,49954.49824</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="DEFAULTMODE">
<Default>html</Default>
</Parameter>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition"
name='myReport'
sql="SELECT ID,Customer,Num,SalesRep,SaleDate 
	FROM ZENApp_Report.Invoice 
	WHERE (Month(SaleDate) = ?) OR (? IS NULL)
	ORDER BY SalesRep,SaleDate">
<parameter expression='..Month'/>
<parameter expression='..Month'/>
<attribute name='runTime' expression='$ZDT($H,3)' />
<attribute name='runBy' expression='$UserName' />
<attribute name='author' expression='..ReportAuthor' />
<aggregate name='grandTotal' type="SUM" field='Num' />
<attribute name='month' expression='..GetMonth()' />
<group name='SalesRep' breakOnField='SalesRep'>
<attribute name='name' field='SalesRep' />
<aggregate name='count' type="COUNT" field='Num' />
<aggregate name='subtotal' type="SUM" field='Num' />
<aggregate name='avg' type="AVG" field='Num' />
<group name="record">
<attribute name='id' field='ID' />
<attribute name='number' field='Num' />
<element name='date' field='SaleDate' />
<element name='customer' field='Customer' />
</group>
</group>
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" 
name='myReport' title='HelpDesk Sales Report' style='standard'>
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" marginTop="1.0in" marginBottom="1.0in" referenceOrientation="0">
</document>

<body>
<header template="ZENApp.ZenReportTemplate:Header1"/>
<img template="ZENApp.ZenReportTemplate:Image1"/>
<!-- MAIN REPORT GROUP -->
<group name="SalesRep" pagebreak="true" line='1px'>

<!-- SALES REP INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="3.8in" class='table2'>
<item field="@name" width="2in"><caption value="Sales Rep:" width="2in"/></item>
<item field="count"><caption value="Number of Sales:"/></item>
<item field="subtotal" formatNumber='###,###,##0.00;(#)'><caption value="Total Value of Sales:"/></item>
</table>
<line pattern="empty"/>


<!-- AVERAGE/DEVIATION -->
<table orient="col" width="6in" style="border:thin solid gray;" class="invisible">
<table orient="row" width="3in" style="margin-bottom:1em;padding-left:0;" class="table1" align="left">
<item field="avg" class="table1" style="margin-bottom:1em;padding-left:3px;" width="1.7in" formatNumber='###,###,##0.000;(#)'><caption value="Average Sale:" style="width:1.3in"/></item>
</table>
</table>
</header>

<!-- TABLE OF SALES -->
<table orient="row" group="record" width="6in" class="table4" altcolor="#DFDFFF">
<item special="number" width=".45in" style="color: darkblue;">
<caption value="#" />
</item>
<item field="@id" width=".7in" style="border:none;padding-right:4px">
<caption value="Sale ID"/>
</item>
<item field="date" width="1.5in" style="padding-left: 4px;">
<caption value="Date"/>
</item>
<item field="customer" width="2.65in">
<caption value="Customer"/>
</item>
<item caption="Amount" width=".7in" style="text-align:right;" field="@number" formatNumber='###,###,##0.00;(#)'>
<caption value="Amount"/>
<summary field="subtotal" style="font-weight:bold;text-align:right" formatNumber='###,###,##0.00;(#)'/>
</item>
</table>

</group>

<!-- FOOTER -->
<table template="ZENApp.ZenReportTemplate:Footer1"/>

</body>	
</report>
]]></Data>
</XData>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>

<Method name="%OnReportTag">
<Implementation><![CDATA[	w !,"xml:space=""default"""
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.ActiveGroupDemo">
<Description>
This is the ActiveGroup Demonstration page for the Zen demonstration application.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60348,35107.52354</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Active Group Demo</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDEMO</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

#groupTopRight {
	padding: 10px;
	background: #C0FFC0;
	height: 100%;
	overflow: hidden;
}

#groupBottomRight {
	padding: 10px;
	background: #C0C0FF;
	height: 100%;
	overflow: hidden;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" 
	title="Zen Active Group Demo" >
<demo:demoTitle id="title" title="Active Group Demonstration"/>
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Active Group Demo" title="Active Group Demo" />
</locatorBar>

<activeHGroup split="5" autoExpand="250" handleThickness="1">
<vgroup valign="top">
<demo:sidebar text="This panel demonstrates the autoExpand feature.">
<demo:bullet image="images/einstein.jpg" text="Einstein"/>
<demo:bullet text="Remember to keep your Zen code as simple as possible, but no simpler."/>
</demo:sidebar>
</vgroup>
<activeHGroup split="25%" handleThickness="5">
<vgroup valign="top">
<demo:sidebar text="This panel demonstrates Zen's Active Group feature.">
<demo:bullet text="An active group splits a region of the page into two sections which can be resized using the mouse (without the use of frames)."/>
<demo:bullet text="Active groups can be nested to create more complex pages."/>
<demo:bullet text="Move the mouse to the left hand side of the page to see the autoExpand feature."/>
</demo:sidebar>
</vgroup>
<activeVGroup split="25%" handleThickness="5" >
<vgroup id="groupTopRight">
<label value="This is the top right Active Group." />
</vgroup>
<vgroup id="groupBottomRight">
<label value="This is the bottom right Active Group." />
</vgroup>
</activeVGroup>
</activeHGroup>
</activeHGroup>
</page>
]]></Data>
</XData>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>

<Method name="onlayoutHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<FormalSpec>first</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	ZLM.notifyResize(document.body);
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.Application">
<Description>
This is the application class for the Zen demonstration application.</Description>
<Super>%ZEN.application</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60348,34991.067201</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Zen Demo Application</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>ZENDemo.Home.cls</Default>
</Parameter>

<Parameter name="USERPACKAGES">
<Description>
If defined, this is a comma-delimited list of names of class
packages that contain user-define Zen components whose HTML definitions
should come from a pre-generated include file.</Description>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
If defined, this is a comma-delimited list of CSS style sheet files
that will be included within every page of this application.</Description>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
If defined, this is a comma-delimited list of JavaScript files
that will be included within every page of this application.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

/* default body style */
body {
	font-family: arial;
	background: #F0F0F0;
}

/* descriptive text */
#description {
	color: black;
	font-size: 1.2em;
	padding: 5px;
	padding-top: 10px;
	padding-bottom: 10px;
}

#description:first-letter {
	font-size: 1.5em;
}

.locatorBarTable td {
	background: rgb(47,98,128);
	background-image: none;
	border-bottom: 1px solid darkblue;
	padding-bottom: 1px;
	color: white;
}

.locatorBarLinks {
	color: white;
}

.locatorBarLinks a {
	color: white;
}

.locatorBarLinks a:visited {
	color: white;
}

.locatorBarLinks a:hover {
	color: red;
	background: #FFFAE7;
}

</style>
]]></Data>
</XData>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar
within this application.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pLinks("Home") = "ZENDemo.Home.cls"
	Set pLinks("Expense Calculator") = "ZENDemo.ExpenseCalculator.cls"
	Set pLinks("MVC Master Detail") = "ZENMVC.MVCMasterDetail.cls"
	Set pLinks("MVC Chart") = "ZENMVC.MVCChart.cls"
	Set pLinks("MVC Meters") = "ZENMVC.MVCMeters.cls"
	Set pLinks("MVC Form") = "ZENMVC.MVCForm.cls"
	Set pLinks("Test Suite") = "ZENTest.HomePage.cls"
	Set pLinks("Controls") = "ZENDemo.ControlTest.cls"
	Set pLinks("Methods") = "ZENDemo.MethodTest.cls"
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.Component.bullet">
<Description><![CDATA[
Example of a custom Zen component.<br>
This defines a bullet point within a <class>sidebar</class>.<br>
Note that as this is an <em>object</em> and not a <em>component</em>
it will not be displayed; instead the <class>sidebar</class> class
will use this to define the items for it to display.]]></Description>
<Super>%ZEN.Component.object</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60349,67052.860662</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
This is the XML namespace for this component.</Description>
<Default>http://www.intersystems.com/zendemo</Default>
</Parameter>

<Property name="text">
<Description>
Text for this bullet point.</Description>
<Type>%ZEN.Datatype.caption</Type>
</Property>

<Property name="image">
<Description>
If provided, the URL of an image to show.</Description>
<Type>%ZEN.Datatype.uri</Type>
</Property>
</Class>


<Class name="ZENDemo.Component.demoMenu">
<Description><![CDATA[
Example of a composite element.<br>
This displays a standard menu for pages within the Demo application.]]></Description>
<Super>%ZEN.Component.composite</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60131,68548.62897</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
XML namespace for this component.</Description>
<Default>http://www.intersystems.com/zendemo</Default>
</Parameter>

<XData name="Contents">
<Description>
Contents of this composite component.</Description>
<Data><![CDATA[
<composite>
<hmenu cellAlign="left">
<menuItem id="menuHome" caption="Home" 
					link="ZENDemo.Home.cls"
					help="Go to main demo page."
					/>
</hmenu>
</composite>
]]></Data>
</XData>
</Class>


<Class name="ZENDemo.Component.demoTitle">
<Description><![CDATA[
Example of a custom component.<br>
This displays a standard title bar for pages within the Demo application.]]></Description>
<Super>%ZEN.Component.component</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60131,68548.62897</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
XML namespace for this component.</Description>
<Default>http://www.intersystems.com/zendemo</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDemo</Default>
</Parameter>

<Property name="title">
<Description>
Title displayed within this pane.</Description>
<Type>%ZEN.Datatype.caption</Type>
</Property>

<Property name="category">
<Description>
Category displayed within this pane (above the title).</Description>
<Type>%ZEN.Datatype.caption</Type>
<InitialExpression>$$$Text("Zen Demonstration")</InitialExpression>
</Property>

<XData name="Style">
<Description>
defines style sheet used by this component</Description>
<Data><![CDATA[
<style type="text/css">
.demoTitle {
	color: black;
	background: #c5d6d6;
	background-image: url(images/titlegradient.png);
	background-repeat: repeat-y;
	background-position: right;
	width: 100%;
	padding: 0px;
	border-bottom: 1px solid darkblue;
	font-size: 1.4em;
	font-family: verdana;
	text-align: center;
}
</style>
]]></Data>
</XData>

<Method name="%DrawHTML">
<Description>
Draw the HTML contents of this component.</Description>
<Implementation><![CDATA[
	Set tCategory = ..category

	#; show which server we are connected to
	Set tInstance = $P($ZU(86),"*",2)

	&html<<table class="demoTitle" border="0" cellpadding="0" cellspacing="0" width="100%">
		<tr>
		<td align="left" width="40px"><img width="185px" height="60px" src="images/zentitle.jpg"/></td>
		<td align="left" width="90%" style="padding-left:20px;">
		<div style="font-size: 0.6em;">#($ZCVT(tCategory,"O","HTML"))#</div>
		<div>#($ZCVT(..title,"O","HTML"))#</div></td>
		<td style="text-align: right; vertical-align: middle;">
		<table border="0" style="font-size: 0.6em;">
		<tr><td align="right">#($$$Text("User"))#:</td><td align="left"><b>#($UserName)#</b>&nbsp;</td></tr>
		<tr><td align="right">#($$$Text("Server"))#:</td><td align="left"><b>#(tInstance)#</b>&nbsp;</td></tr>
		</table>
		</td></tr></table>>
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.Component.sidebar">
<Description><![CDATA[
Example of a custom component.<br>
This displays a standard side bar for pages within the Demo application.]]></Description>
<Super>%ZEN.Component.component</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60131,68548.62897</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
XML namespace for this component.</Description>
<Default>http://www.intersystems.com/zendemo</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDemo</Default>
</Parameter>

<Property name="text">
<Description>
Main text displayed within this pane.</Description>
<Type>%ZEN.Datatype.caption</Type>
</Property>

<Property name="bullets">
<Description>
List of bullet point objects.
Each object defines a bullet point to be displayed within the sidebar. </Description>
<Type>bullet</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
<Parameter name="XMLTYPECONSTRAINT" value="CHOICE"/>
</Property>

<XData name="Style">
<Description>
defines style sheet used by this component</Description>
<Data><![CDATA[
<style type="text/css">
.demoSidebar {
	color: black;
	width: 200px;
	height: 500px;
	padding: 10px;
	font-size: 0.8em;
	font-family: verdana;
	overflow: auto;
}

.demoSidebar ul {
	margin-left: 8px;
	padding-left: 8px;
}

.demoSidebar ul li {
	padding-bottom: 3px;
}

</style>
]]></Data>
</XData>

<Method name="%DrawHTML">
<Description>
Draw the HTML contents of this component.</Description>
<Implementation><![CDATA[
	&html<<div class="demoSidebar">>
	Write $ZCVT(..text,"O","HTML")

	#; bullets
	Set tCount = ..bullets.Count()
	If (tCount > 0) {
		&html<<ul>>
		For n = 1:1:tCount {
			Set tBullet = ..bullets.GetAt(n)
			If (tBullet.image '= "") {
				&html<<div><img src="#(tBullet.image)#" title="#($ZCVT(tBullet.text,"O","HTML"))#"/></div>>
			}
			Else {
				&html<<li>#($ZCVT(tBullet.text,"O","HTML"))#</li>>
			}
		}
		&html<</ul>>
	}
	&html<</div>>
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.ControlTest">
<Description>
ZENTest Control Test page.
This page provides a test of all Zen control classes.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60178,64228.461852</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Control Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDEMO</Default>
</Parameter>

<Property name="currControl">
<Description>
Which control is driven by buttons</Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"text"</InitialExpression>
</Property>

<Property name="onclickEnabled">
<Description>
Display onclick events</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="ondblclickEnabled">
<Description>
Display ondblclick events</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="onmouseoutEnabled">
<Description>
Display onmouseout events</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="onmouseoverEnabled">
<Description>
Display onmouseoverclick events</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="onfocusEnabled">
<Description>
Display onfocus events</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="onblurEnabled">
<Description>
Display onblur events</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="onkeypressEnabled">
<Description>
Display onkeypress events</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="onchangeEnabled">
<Description>
Display onchange events</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="showDeepSee">
<Description>
Display DeepSee controls.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="ZENURL" value="DEEPSEE"/>
</Property>

<Property name="showiKnow">
<Description>
Display iKnow controls.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="ZENURL" value="IKNOW"/>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

#form {
	border: 1px solid darkblue;
}

#controlGroup {
	border: 1px solid darkblue;
	padding: 5px;
	background: #DDDDDD;
	height: 500px;
	width: 400px;
	overflow: auto;
}

/* override for titleBox css */
.titleBoxTitle {
	background: #DDDDFF;
}

/* descriptive text */
.msg {
	font-size: 0.8em;
	color: darkblue;
	width: 200px;
	padding-top: 3px;
	padding-bottom: 10px;
}

.msg:first-letter {
	font-size: 0.9em;
	font-weight: bold;
}

#objectInspector {
	width: 400px;
	height: 200px;
	overflow: auto;
	overflow-x: hidden;
}

/* this is a test style used to test
changing css classes for controls */
.test {
	color: red;
	font-size: 2.0em;
}

#btnGroup div {
	margin-top: 2px;
	margin-right: 2px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Control Test">
<demo:demoTitle id="title" title="Zen Control Test Page" category="Zen Test Suite" />
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Control Test" title="Control Test Page" />
</locatorBar>

<hgroup>
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates the following features:">
<demo:bullet text="The variety of controls included within the Zen library" />
<demo:bullet text="How every attribute of a control can be modified dynamically" />
<demo:bullet text="The events generated by the various controls" />
<demo:bullet text="You can also use this page to test custom controls" />
</demo:sidebar>
</vgroup>

<spacer width="25"/>
<form id="form" layout="vertical" valign="top" groupStyle="padding: 0px;" 
	onsubmit="return zenPage.formSubmit();">
<titleBox title="Test Controls" />
<html enclosingClass="msg" >You can test the controls displayed below.<br/>
Any events will be displayed in the Event History list.<br/>
</html>
<vgroup id="controlGroup">
<!-- controls get created by %OnAfterCreatePage callback -->
</vgroup>
</form>
<spacer width="25"/>
<vgroup valign="top">

<titleBox title="Event Capture" />
<html enclosingClass="msg">Select which events should be captured and displayed in Event History.</html>
<hgroup cellVAlign="top">
<vgroup>
<checkbox caption="onclick" value="#(%page.onclickEnabled)#" onchange="zenPage.toggleEvent('onclick');" />
<checkbox caption="ondblclick" value="#(%page.ondblclickEnabled)#" onchange="zenPage.toggleEvent('ondblclick');"/>
<checkbox caption="onmouseover" value="#(%page.onmouseoverEnabled)#" onchange="zenPage.toggleEvent('onmouseover');"/>
<checkbox caption="onmouseout" value="#(%page.onmouseoutEnabled)#" onchange="zenPage.toggleEvent('onmouseout');"/>
</vgroup>
<vgroup>
<checkbox caption="onfocus" value="#(%page.onfocusEnabled)#" onchange="zenPage.toggleEvent('onfocus');"/>
<checkbox caption="onblur" value="#(%page.onblurEnabled)#" onchange="zenPage.toggleEvent('onblur');"/>
<checkbox caption="onkeypress" value="#(%page.onkeypressEnabled)#" onchange="zenPage.toggleEvent('onkeypress');"/>
<checkbox caption="onchange" value="#(%page.onchangeEnabled)#" onchange="zenPage.toggleEvent('onchange');"/>
</vgroup>
</hgroup>
<spacer height="25"/>

<titleBox title="Control Attributes" />
<html enclosingClass="msg">Set attribute values of the selected test control.</html>
<objectInspector id="objectInspector" />
<spacer height="25"/>

<titleBox title="Control Value" />
<html enclosingClass="msg">Set or get the current value of the selected test control.</html>
<text id="value" label="Value" />
<hgroup id="btnGroup">
<button caption="Get value" title="Get the value of the current control" onclick="zenPage.getControlValue();"/>
<button caption="Set value" title="Set the value of the current control" onclick="zenPage.setControlValue();"/>
<button caption="Give Focus" title="Give focus to the current control" onclick="zenPage.giveFocus();"/>
<button caption="isValid" title="Call the isValid method of the current control" onclick="zenPage.testIsValid();"/>
</hgroup>
</vgroup>

<spacer width="25"/>
<vgroup valign="top">
<titleBox title="Event History" />
<html enclosingClass="msg">Display events that have fired in the test controls.<br/>
<a href="javascript:zenPage.clearEvents();">Clear the Event History.</a></html>
<textarea id="events" rows="25" cols="25" readOnly="true" />
</vgroup>
<spacer width="25"/>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<Description>
This callback is called after the server-side page 
object and all of its children are created.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; add set of controls to controlGroup
	Set tGroup = ..%GetComponentById("controlGroup")
	Set tValueList = ""

	#; find all control classes
	Set tRS = ##class(%ResultSet).%New("%Dictionary.ClassDefinition.SubclassOf")
	Set tSC = tRS.Execute("%ZEN.Component.control")

	Set tCount = 0

	While (tRS.Next()) {
		Set tCls = tRS.Data("Name")
		Set tAbstract = +$$$comClassKeyGet(tCls,$$$cCLASSabstract)
		
		#; skip abstract classes
		If tAbstract Continue
		If tCls = "%ZEN.Component.objectInspector" Continue

		#; skip DeepSee components
		If ('..showDeepSee) && (tCls [ "%DeepSee") Continue

		#; skip iKnow components
		If ('..showiKnow) && (tCls [ "%iKnow") Continue
		
		#; skip SMP components
		If (tCls [ "%CSP.UI") Continue
		
		Set tCount = tCount + 1
		Set tLabel = $P(tCls,".",$L(tCls,"."))
		Set tValueList = tValueList _ $S(tValueList="":"",1:",") _ tLabel

		#; separator
		Set tDiv = ##class(%ZEN.Component.html).%New()
		Do tGroup.%AddChild(tDiv)
		Set tDiv.content = "<hr/>"

		#; radio button to select control
		Set tButton = ##class(%ZEN.Component.radioButton).%New()
		Set:(tCount=1) tButton.id = "CurrentControl"
		Set tButton.name = "CurrentControl"

		Do tGroup.%AddChild(tButton)
		Set tButton.caption = tLabel
		Set tButton.optionValue = tLabel
		Set tButton.onclick = "zenPage.selectControl('"_tLabel_"');"

		#; create control: add to group
		Set tControl = $zobjclassmethod(tCls,"%New")
		Set tControl.id = tLabel
		Set tControl.name = tLabel
		Do tGroup.%AddChild(tControl)
	
		#; just in case someone modifies this page to show non-controls
		If ('tControl.%IsA("%ZEN.Component.control")) {
			Continue
		}

		#; establish default values
		Do tControl.%SetDefaultValues()

		#; connect event handlers
		Set tControl.onclick="zenPage.event(zenThis,'onclick');" 
		Set tControl.ondblclick="zenPage.event(zenThis,'ondblclick');" 
		Set tControl.onmousedown="zenPage.event(zenThis,'onmousedown');" 
		Set tControl.onmouseup="zenPage.event(zenThis,'onmouseup');" 
		Set tControl.onfocus="zenPage.event(zenThis,'onfocus');" 
		Set tControl.onblur="zenPage.event(zenThis,'onblur');" 
		Set tControl.onkeypress="zenPage.event(zenThis,'onkeypress');" 
		Set tControl.onchange="zenPage.event(zenThis,'onchange');" 
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="event">
<Description>
Show that event has occurred.</Description>
<FormalSpec>component,evtname</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var out = this.getComponentById('events');
	zenASSERT(out,"Unable to find event output control",arguments);

	// try to select this control 
	this.selectControl(component.id);
	var radio = this.getComponentById('CurrentControl');
	zenASSERT(radio,"Unable to find radio button",arguments);
	radio.setValue(component.id);

	// if event capture enabled, add to output window
	if (this[evtname+'Enabled']) {
		this.counter = (this.counter==null) ? 1 : this.counter+1;

		out.setValue(out.getValue() + this.counter + ': ' + evtname + ' in ' + component.id + '\n');
	}
]]></Implementation>
</Method>

<Method name="clearEvents">
<Description>
Clear event window</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var out = this.getComponentById('events');
	zenASSERT(out,"Unable to find event output control",arguments);
	out.setValue('');
	this.counter = 0;
]]></Implementation>
</Method>

<Method name="toggleEvent">
<Description>
Turn on/off display of the given event type</Description>
<FormalSpec>etype</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// toggle property corresponding to etype
	this[etype+'Enabled'] = !this[etype+'Enabled'];
]]></Implementation>
</Method>

<Method name="toggleSetting">
<Description>
Turn on/off given setting for current control</Description>
<FormalSpec>setting</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = this.getComponentById(this.currControl);
	zenASSERT(ctrl,"Unable to find control: " + this.currControl,arguments);

	switch (setting) {
	case 'disabled':
		ctrl.setDisabled(!ctrl.getDisabled());
		break;
	case 'readonly':
		ctrl.setReadOnly(!ctrl.getReadOnly());
		break;
	case 'hidden':
		ctrl.setHidden(!ctrl.getHidden());
		break;
	}
]]></Implementation>
</Method>

<Method name="selectControl">
<Description>
Select a current control</Description>
<FormalSpec>name</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = this.getComponentById(this.currControl);	
	if (ctrl) {
		ctrl.getEnclosingDiv().style.background = '';
		ctrl.getEnclosingDiv().style.border = '';
	}
	
	this.currControl = name;

	var ctrl = this.getComponentById(this.currControl);	
	if (ctrl) {
		ctrl.getEnclosingDiv().style.background = 'yellow';
		ctrl.getEnclosingDiv().style.border = '1px solid darkblue';

		var inspector = this.getComponentById('objectInspector');
		inspector.setCurrObject(ctrl);
	}
]]></Implementation>
</Method>

<Method name="getControlValue">
<Description>
Get value of current control</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = this.getComponentById(this.currControl);
	var text = this.getComponentById('value');	

	if (ctrl) {
		text.setValue(ctrl.getValue());
	}
	else {
		alert('Select a control');
	}
]]></Implementation>
</Method>

<Method name="setControlValue">
<Description>
Set value of current control</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = this.getComponentById(this.currControl);	
	var text = this.getComponentById('value');	

	if (ctrl) {
		ctrl.setValue(text.getValue());

		// update inspector and value control
		text.setValue(ctrl.getValue());
		var inspector = this.getComponentById('objectInspector');
		inspector.update();
	}
	else {
		alert('Select a control');
	}
]]></Implementation>
</Method>

<Method name="testIsValid">
<Description>
Test isValid method for current control</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = this.getComponentById(this.currControl);	

	if (ctrl) {
		alert(ctrl.getType() + ".isvalid = " + ctrl.isValid());
	}
	else {
		alert('Select a control');
	}
]]></Implementation>
</Method>

<Method name="formSubmit">
<Description>
Trap submit of test form.</Description>
<FormalSpec>etype</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	alert("Form submit");
	return false;
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var start = 'button';
	
	var radio = this.getComponentById('CurrentControl');
	// zenASSERT(radio,"Unable to find radio button",arguments);
	// radio.setValue(start);
	this.selectControl(start);
	this.clearEvents();
]]></Implementation>
</Method>

<Method name="giveFocus">
<Description>
Give focus to current control</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = this.getComponentById(this.currControl);
	ctrl.focus();
]]></Implementation>
</Method>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.CustomDataDragDrop">
<Description>
Example of how to program custom data drag drop behavior into Zen controls</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>62432,57683.547577</TimeChanged>
<TimeCreated>62432,44015.98373</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Custom Data Drag Drop</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDEMO</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

#dynaGrid {
	border: 1px solid darkblue;
	overflow: auto;
}

.button {
	width: 180px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Custom Data Drag Drop Handling" dragAndDrop="true">

<demo:demoTitle id="title" title="Zen Custom Data Drag Drop Handling"/>

<locatorBar id="locator" >
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Custom DDD" title="Custom Data Drag Drop"/>
</locatorBar>

<spacer height="25"/>
<hgroup>
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates a custom data drag drop between two dynaGrids.">
<demo:bullet text="The top grid is read only, values may be dragged from it but not changed." />
<demo:bullet text="The bottom grid is enabled for both drag and drop." />
<demo:bullet text="Dragging a row or column heading grabs all three values associated with that heading." />
<demo:bullet text="Dropping on a row or column heading will set the first, or all three value of the associate cells depending on how much data was grabbed initially." />
<demo:bullet text="Dropping a multi-value grab on a single cell will paste only the first value of the vector." />
</demo:sidebar>
</vgroup>
<spacer width="50"/>
<vgroup valign="top">
<hgroup>
<spacer width="50"/>
<button caption="Refresh from Server" onclick="zenPage.refreshGrid();" />
<spacer width="20"/>
<button caption="Clear" onclick="zenPage.clearGrid();" />
<spacer width="20"/>
</hgroup>

<spacer height="5"/>

<hgroup>
<spacer width="50"/>
<dynaGrid id="dynaGrid" 
	gridLabel="Dynamic Grid"
	OnCreateDataSet="CreateDataSet"
	rowLabelWidth="225"
 	scrollIntoView="true"
 	dragEnabled="true"
	ondrag="return(zenPage.setDragData(dragData));"
>
<gridColumn width="100" />
<gridColumn width="100" />
<gridColumn width="100" />
</dynaGrid>
</hgroup>


<spacer height="25"/>
<hgroup>
<spacer width="50"/>
<dynaGrid id="dynaGrid2" 
	gridLabel="Calculator"
	rowLabelWidth="200"
	onchange="zenPage.calcCellChange(zenThis);"
	ondrawcell="return zenPage.calcCellDraw(zenThis,data);"
	dragEnabled="true"
	dropEnabled="true"
	ondrag="return(zenPage.setDragData(dragData));"
	ondrop="return(zenPage.setCellFromDrop(dragData));"
>
<gridColumn label="Col 1" width="100" />
<gridColumn label="Col 2" width="100" />
<gridColumn label="Col 3" width="100" />
<gridColumn label="Total" width="200" readOnly="true" style="background: #E0E0F0; font-weight: bold;"/>

<gridRow label="Row 1" />
<gridRow label="Row 2" />
<gridRow label="Row 3" />
<gridRow label="Total" readOnly="true" style="background: #E0E0F0; font-weight: bold;"/>
</dynaGrid>	
</hgroup>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="setDragData">
<FormalSpec>dragData</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var div = ZLM.getDragInnerSource();
	if (div) {
		var id = div.id;
		if (id.indexOf('td')==0) { // only draging a data cell
			var txt = div.innerHTML;	// get the contents of the cell	
			dragData.value = txt;	// use it to set the drag value
			dragData.text = txt;	// as well as the drag label
			ZLM.dragAvatar=null;	// reset the avatar so it doesn't look like we're trying to drag the whole grid
			ZLM.setDragCaption(txt);	// and explicitly set the avatar to match the value being dragged
			return(true);
		}
		if (id.indexOf('thCol')==0) { // trying to grab a column
			var tag = id.split('_');
			var cNum = parseInt(tag[1],10); // get the column number from the ID
			var zenNum = tag[2];			// the Zen number can be used to find a component when 'this' isn't passed
			var comp = zenPage.getComponent(zenNum); // get the grid 
			var v = [];	
			for (var i=1;i<4;i++) { 
				v.push(comp.getCellValue(i,cNum)); // get the value of each cell
			}
			var txt = v.join('|');	// turn the contents of the cells into a string	
			dragData.value = txt;	// use it to set the drag value
			dragData.text = txt;	// as well as the drag label
			ZLM.dragAvatar=null;	// reset the avatar so it doesn't look like we're trying to drag the whole grid
			ZLM.setDragCaption(txt);	// and explicitly set the avatar to match the value being dragged
			return(true);
			
		}
		if (id.indexOf('thRow')==0) { // trying to grab a whole row
			var tag = id.split('_');
			var rNum = parseInt(tag[1],10); // get the column number from the ID
			var zenNum = tag[2];			// the Zen number can be used to find a component when 'this' isn't passed
			var comp = zenPage.getComponent(zenNum); // get the grid 
			var v = [];	
			for (var i=1;i<4;i++) { 
				v.push(comp.getCellValue(rNum,i)); // get the value of each cell
			}
			var txt = v.join('|');	// turn the contents of the cells into a string	
			dragData.value = txt;	// use it to set the drag value
			dragData.text = txt;	// as well as the drag label
			ZLM.dragAvatar=null;	// reset the avatar so it doesn't look like we're trying to drag the whole grid
			ZLM.setDragCaption(txt);	// and explicitly set the avatar to match the value being dragged
			return(true);
		}
	}
	// We could have added more cases to say grab the whole grid on a gridLabel
	// drag, but this should be enough to illustrate the point.
	return(false);
]]></Implementation>
</Method>

<Method name="setCellFromDrop">
<FormalSpec>dragData</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// the drag data may be a single value or a vector of three values
	// split it into an array in any case.
	var value = dragData.value.split('|');
	var div = ZLM.getDragInnerDestination();
	if (div) {
		var id = div.id; 
		if (id.indexOf('td')==0) {	//  drop on a single data cells
			// All data cells are branded of the form td_row_col_zenNumber
			var tag = id.split('_');
			var row = tag[1];
			var col = tag[2];
			var zenNum = tag[3];
			var comp = zenPage.getComponent(zenNum); // get the grid 
			comp.setCellValue(value[0],row,col); 	// set the cell to whatever the drag value is
													// if a multivector was dropped onto a single cell
													// just paste the first element
			zenPage.calcCellChange(comp);
		}
		else if (id.indexOf('thRow')==0) { // paste a row full of data
			var tag = id.split('_');
			var rNum = tag[1];
			var zenNum = tag[2];
			var comp = zenPage.getComponent(zenNum); // get the grid 
			for (var i=0;i<value.length;i++) {
				comp.setCellValue(value[i],rNum,i+1);
			}
			zenPage.calcCellChange(comp);
		}
		else if (id.indexOf('thCol')==0) { // paste a column full of data
			var tag = id.split('_');
			var cNum = tag[1];
			var zenNum = tag[2];
			var comp = zenPage.getComponent(zenNum); // get the grid
			for (var i=0;i<value.length;i++) {
				comp.setCellValue(value[i],i+1,cNum);
			}
			zenPage.calcCellChange(comp);
		}
					
	}
	return(false);	// abort default processing
]]></Implementation>
</Method>

<Method name="calcCellChange">
<Description>
cellChange: called when cell is changed</Description>
<FormalSpec>grid</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// compute sum of cells
	var rows = grid.getRowCount();
	var cols = grid.getColumnCount();

	var total = 0;

	// first get totals of columns
	for (var c = 1; c < cols; c++) {
		var subtotal = 0;
		for (var r = 1; r < rows; r++) {
			var value = parseFloat(grid.getCellValue(r,c));
			value = isNaN(value) ? 0 : value;
			subtotal += value;
		}

		// set total cell
		grid.setCellValue(subtotal,rows,c);
		total += subtotal;
	}

	// next get totals of rows
	for (var r = 1; r < rows; r++) {
		var subtotal = 0;
		for (var c = 1; c < cols; c++) {
			var value = parseFloat(grid.getCellValue(r,c));
			value = isNaN(value) ? 0 : value;
			subtotal += value;
		}

		// set total cell
		grid.setCellValue(subtotal,r,cols);
	}

	// total
	grid.setCellValue(total,rows,cols);
]]></Implementation>
</Method>

<Method name="calcCellDraw">
<Description>
cellDraw: called when cell is about to be drawn in dynaGrid</Description>
<FormalSpec>grid,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// if we need to know the cell # being drawn, we
	// can get it vis grid.row and grid.column.

	if (''==data) {
		return '&nbsp;';
	}
	else if (parseInt(data) < 0) {
		// negative #
		return '<span style="color:red;">('+data+')</span>';
	}
	
	return data;
]]></Implementation>
</Method>

<Method name="clearGrid">
<Description>
Clear contents of the upper grid</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var grid = zenPage.getComponentById('dynaGrid');
	var dataSet = grid.getDataSet();
	dataSet.clear();
	grid.render();
]]></Implementation>
</Method>

<Method name="refreshGrid">
<Description>
Get new values for the upper grid from the server.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var grid = zenPage.getComponentById('dynaGrid');
	this.GetNewDataSet(grid,"replace");
]]></Implementation>
</Method>

<Method name="CreateDataSet">
<Description>
Server-side callback to provide data for the upper dynaGrid.</Description>
<FormalSpec>pGrid:%ZEN.Component.dynaGrid,pDataSet:%ZEN.Auxiliary.dataSet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do pDataSet.%Clear()
	
	#; fill in contents of dataSet
	#; This is a 2-D data structure

	#; row labels (dimension 1)
	Do pDataSet.%SetLabel("US",1,1)
	Do pDataSet.%SetLabel("Europe",2,1)
	Do pDataSet.%SetLabel("Japan",3,1)

	#; column labels  (dimension 2)
	Do pDataSet.%SetLabel("Cars",1,2)
	Do pDataSet.%SetLabel("Trucks",2,2)
	Do pDataSet.%SetLabel("Trains",3,2)

	#; find size of dataSet
	Set rows = pDataSet.%GetDimSize(1)
	Set cols = pDataSet.%GetDimSize(2)

	#; fill in initial data
	For r=1:1:rows {
		For c=1:1:cols {
			Do pDataSet.%SetValue($R(1000),r,c)
		}
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetNewDataSet">
<Description>
Get a new dataset from the server.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGrid:%ZEN.Component.dynaGrid,pMode:%String=""</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set pDataSet = pGrid.dataSet
	
	If (pMode = "client") {
		// change cells on client
		&js<zenPage.getComponentById('dynaGrid').setCellValue('New Value',2,2);>
	}
	ElseIf (pMode = "onecell") {
		// set one cell in the server model
		Do pDataSet.%SetValue("SERVER",3,2)
	}
	Else {
		// modify entire dataSet on server

		#; find size of dataSet
		Set rows = pDataSet.%GetDimSize(1)
		Set cols = pDataSet.%GetDimSize(2)
	
		#; add a new row
		//Do pDataSet.%SetLabel("ROW "_(rows+1),rows+1,1)

		#; get new dims	
		Set rows = pDataSet.%GetDimSize(1)
		Set cols = pDataSet.%GetDimSize(2)
		Set pages = pDataSet.%GetDimSize(3)

		#; fill in data
		For p=1:1:pages {
			#; if we are 3D- set page labels
			Set tLabel = p_" "_##class(%PopulateUtils).Company()
			Do pDataSet.%SetLabel(tLabel,p,3)
			For r=1:1:rows {
				For c=1:1:cols {
					Do pDataSet.%SetValue($R(1000),r,c,p)
				}
			}
		}
	}

	#; make sure grid gets redrawn
	Do pGrid.%ForceClientRender()

	Quit
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.Dashboard">
<Description>
Zen SVG Dashboard Demonstration page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60125,30066.203933</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Home</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
example of customized style sheet</Description>
<Data><![CDATA[
<style type="text/css">

#svgFrame {
	border-style: inset;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Contents of this page:
serialized set of Zen component objects</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Zen Demo">
<demo:demoTitle id="title" title="SVG Dashboard Demonstration"/>
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Dashboard" title="Sample SVG Dashboard" href="ZENDemo.Dashboard.cls"/>
</locatorBar>

<hgroup>
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates the following features:">
<demo:bullet text="SVG Charts" />
<demo:bullet text="SVG Meters" />
<demo:bullet text="Ability to work with HTML and SVG Components" />
</demo:sidebar>
</vgroup>

<spacer width="40"/>
<vgroup valign="top">
<spacer height="20"/>

<hgroup>
<html enclosingStyle="margin: 3px; font-size:1.2em; color: darkblue;">This is an example of a Zen Dashboard:</html>
<spacer width="10" />
<button caption="Update" onclick="zenPage.updateData();"/>
</hgroup>
<svgFrame id="svgFrame" 
	width="700" 
	height="400" 
	zoom="100"
	backgroundStyle="fill: black;"
	layout="horizontal">
<lineChart id="chart" 
	width="500" 
	height="400"
	title="Zen Chart"
	backgroundStyle="fill: black;"
	plotAreaStyle="fill: url(#glow-blueDiag);"
	plotStyle="stroke: black;"
	seriesColors="url(#glow-yellow)"
	seriesCount="1"
	seriesSize="12"
	marginRight="5"
	labelStyle="fill:yellow;"
	titleStyle="fill:yellow;"
	chartFilled="true"
	ongetData="return zenPage.getChartData(series);"
	ongetLabelX="return zenPage.getChartLabelX(value);"
	>
<yAxis id="yAxis"
	baseValue="0"
	minValue="-40" 
	maxValue="125" 
	majorUnits="25"
	minorUnits="5"
	title="Requests"
	minorGridLines="true"/>
</lineChart>

<svgGroup layout="vertical">
<speedometer id="speed1" 
	label="Important"
	animate="true"
	labelStyle="fill: yellow;"
	lowLampColor="url(#glow-green)"
	rangeUpper="100" width="125" height="125"/>
<speedometer id="speed2" 
	label="Urgent"
	animate="true"
	labelStyle="fill: yellow;"
	lowLampColor="url(#glow-green)"
	rangeUpper="100" width="125" height="125"/>
<speedometer id="speed3" 
	label="Overdue!"
	animate="true"
	labelStyle="fill: yellow;"
	lowLampColor="url(#glow-green)"
	rangeUpper="100" width="125" height="125"/>
</svgGroup>
</svgFrame>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="getNewChartData">
<Description>
Server-side method to calculate new chart data</Description>
<ClassMethod>1</ClassMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set pts = 12
	Set data = ""
	For n = 1:1:pts {
		Set data = data _ $S(data="":"",1:":") _ $R(1000)
	}

	&js<zenPage.updateChart('#(data)#');>
]]></Implementation>
</Method>

<Method name="getChartData">
<Description>
Callback to provide data for chart.</Description>
<FormalSpec>series</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// generate random data
	// cache it in a local property
	var chart = zenPage.getComponentById('chart');
	if (null == this._data) {
		this._data = new Array(chart.seriesSize);
	}

	// slide data over; generate new value at end
	var value = 50;
	for (var i = 0; i < chart.seriesSize; i++) {
		var x = this._data[i+1];
		if (null != x) {
			value = x;
		}
		else {
			// at end or first-time
			if (Math.random() > 0.9) {
				value += (Math.random() * 50) - 30;
			}
			else {
				value += (Math.random() * 20) - 9;
			}
		}
		this._data[i] = value;
	}

	return this._data;
]]></Implementation>
</Method>

<Method name="getChartLabelX">
<Description>
Callback to provide labels for chart.</Description>
<FormalSpec>val</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// convert val to time-of-day
	var hour = (parseInt(val) + 8) % 12;
	
	if (hour == 0) {
		return '12pm';
	}
	else if (hour >=8) {
		return hour + 'am';
	}

	return hour + 'pm';
]]></Implementation>
</Method>

<Method name="updateData">
<Description>
Update components to show new data</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var chart = this.getComponentById("chart");
	zenASSERT(chart,"Unable to find chart",arguments);
	chart.updateChart();

	this.getComponentById("speed1").setValue(Math.random() * 100);
	this.getComponentById("speed2").setValue(Math.random() * 100);
	this.getComponentById("speed3").setValue(Math.random() * 100);
]]></Implementation>
</Method>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.Data.Address">
<Description>
Sample data for Zen sample pages.</Description>
<Super>%SerialObject,%Populate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60126,74367.30226</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Street">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="State">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2"/>
</Property>

<Property name="ZIP">
<Type>%String</Type>
<Parameter name="MAXLEN" value="12"/>
<Parameter name="POPSPEC" value="USZip()"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>AddressState</State>
<StreamLocation>^ZENDemo.Data.AddressS</StreamLocation>
<Data name="AddressState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>City</Value>
</Value>
<Value name="2">
<Value>State</Value>
</Value>
<Value name="3">
<Value>Street</Value>
</Value>
<Value name="4">
<Value>ZIP</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ZENDemo.Data.City">
<Description>
Sample data class for Zen sample pages.
This defines a set of city names used for lookups.</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60126,74367.30226</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Name">
<Description>
City Name</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="100"/>
<Parameter name="POPSPEC" value="City()"/>
</Property>

<Property name="ZIP">
<Description>
ZIP Code</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="12"/>
<Parameter name="POPSPEC" value="USZip()"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENDemo.Data.CityD</DataLocation>
<DefaultData>CityDefaultData</DefaultData>
<IdLocation>^ZENDemo.Data.CityD</IdLocation>
<IndexLocation>^ZENDemo.Data.CityI</IndexLocation>
<StreamLocation>^ZENDemo.Data.CityS</StreamLocation>
<Data name="CityDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>ZIP</Value>
</Value>
</Data>
<Property name="Name"/>
<Property name="ZIP"/>
</Storage>
</Class>


<Class name="ZENDemo.Data.Employee">
<Description>
Sample data for Zen sample pages.</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60126,74367.30226</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="NameIdx">
<Description>
Index on name</Description>
<Properties>Name</Properties>
</Index>

<Index name="ActiveIdx">
<Description>
Index on active flag</Description>
<Type>bitmap</Type>
<Properties>Active</Properties>
</Index>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Title">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="SSN">
<Type>%String</Type>
<Parameter name="MAXLEN" value="15"/>
</Property>

<Property name="Salary">
<Type>%Numeric</Type>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="Active">
<Type>%Boolean</Type>
</Property>

<Property name="Ranking">
<Description>
Random number field used to demonstrate table refresh!</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {Ranking}=$Random(100) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="FavoriteColor">
<Type>%String</Type>
<Parameter name="MAXLEN" value="25"/>
<Parameter name="POPSPEC" value=".GenColor()"/>
<Parameter name="VALUELIST" value=",red,green,blue,black"/>
</Property>

<Property name="HireDate">
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
<Parameter name="POPSPEC" value=".MakeDate()"/>
</Property>

<Property name="FireDate">
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
<Parameter name="POPSPEC" value=".MakeDate()"/>
</Property>

<Property name="Home">
<Type>Address</Type>
</Property>

<Property name="KeyWords">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Method name="GenColor">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $LG($LB("red","green","blue","black"),$R(5))
]]></Implementation>
</Method>

<Method name="%OnSubmit">
<Description>
This user callback is invoked when the form bound to this class
is submitted.</Description>
<FormalSpec>pSubmit:%ZEN.Submit</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; fill in properties !!!
	Set ..Name = pSubmit.%GetValue("Name")
	If (pSubmit.%GetValue("Ranking")>90) {
		Do pSubmit.%SetError("Ranking","OUT OF RANGE")
	}
	
	Quit ..%Save()
]]></Implementation>
</Method>

<Query name="ListEmployees">
<Type>%SQLQuery</Type>
<FormalSpec>City:%String="",Title:%String=""</FormalSpec>
<SqlQuery>SELECT ID,Name,Title,Home_City FROM Employee
 WHERE (Home_City %STARTSWITH :City)
 ORDER BY Name</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Method name="MakeDate">
<Description>
Return random date for data population.</Description>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	#; Make a random date within past 2 years
	Quit +$H - $R(365*2)
]]></Implementation>
</Method>

<Method name="Cube">
<Description>
A sample SQL function used for some of the demo queries against
this class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>val:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[    Quit val * val * val
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENDemo.Data.EmployeeD</DataLocation>
<DefaultData>EmployeeDefaultData</DefaultData>
<IdLocation>^ZENDemo.Data.EmployeeD</IdLocation>
<IndexLocation>^ZENDemo.Data.EmployeeI</IndexLocation>
<StreamLocation>^ZENDemo.Data.EmployeeS</StreamLocation>
<Data name="EmployeeDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FavoriteColor</Value>
</Value>
<Value name="3">
<Value>FireDate</Value>
</Value>
<Value name="4">
<Value>HireDate</Value>
</Value>
<Value name="5">
<Value>Home</Value>
</Value>
<Value name="6">
<Value>Name</Value>
</Value>
<Value name="7">
<Value>SSN</Value>
</Value>
<Value name="8">
<Value>Title</Value>
</Value>
<Value name="9">
<Value>CField</Value>
</Value>
<Value name="10">
<Value>Nombre</Value>
</Value>
<Value name="11">
<Value>HealthPlan</Value>
</Value>
<Value name="12">
<Value>KeyWords</Value>
</Value>
<Value name="13">
<Value>Salary</Value>
</Value>
<Value name="14">
<Value>Active</Value>
</Value>
</Data>
<Property name="Active"/>
<Property name="FavoriteColor"/>
<Property name="FireDate"/>
<Property name="HireDate"/>
<Property name="Home"/>
<Property name="KeyWords"/>
<Property name="Name"/>
<Property name="Nombre"/>
<Property name="Ranking"/>
<Property name="SSN"/>
<Property name="Salary"/>
<Property name="Title"/>
</Storage>
</Class>


<Class name="ZENDemo.Data.Patient">
<Description>
Sample data class for Zen sample pages.</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60126,74367.30226</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="NameIdx">
<Description>
Index on Patient name</Description>
<Properties>Name</Properties>
</Index>

<Index name="SSNIdx">
<Description>
Index on SSN</Description>
<Properties>SSN</Properties>
</Index>

<Index name="CityIdx">
<Description>
Index on City</Description>
<Type>bitmap</Type>
<Properties>Home.City</Properties>
</Index>

<Index name="StateIdx">
<Description>
Index on State</Description>
<Type>bitmap</Type>
<Properties>Home.State</Properties>
</Index>

<Index name="SexIdx">
<Description>
Index on Patient sex</Description>
<Type>bitmap</Type>
<Properties>Sex</Properties>
</Index>

<Property name="Name">
<Description>
Patient Name</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="SSN">
<Description>
Patient SSN</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="15"/>
</Property>

<Property name="MaritalStatus">
<Description>
Patient Marital Status</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1"/>
<Parameter name="VALUELIST" value=",S,M,D,W,O"/>
</Property>

<Property name="Sex">
<Description>
Patient Sex</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1"/>
<Parameter name="VALUELIST" value=",M,F,O"/>
</Property>

<Property name="DOB">
<Description>
Patient Date of Birth</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
<Parameter name="POPSPEC" value=".MakeDOB()"/>
</Property>

<Property name="FavoriteColor">
<Description>
Patient's Favorite Color (so we can use a color control!)</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="25"/>
<Parameter name="POPSPEC" value=".MakeColor()"/>
</Property>

<Property name="Home">
<Description>
Home address</Description>
<Type>Address</Type>
</Property>

<Property name="NextVisit">
<Description>
Next scheduled visit date.</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
<Parameter name="POPSPEC" value=".MakeVisit()"/>
</Property>

<Property name="Memo">
<Description>
Memo field</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
<Parameter name="POPSPEC" value="Mission()"/>
</Property>

<Method name="MakeColor">
<Description>
Return a random color for data population.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $LG($LB("red","green","blue","black","orange","purple"),$R(6))
]]></Implementation>
</Method>

<Method name="MakeDOB">
<Description>
Return random birth date for data population.</Description>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	#; Make a random date within past 60 years
	Quit +$H - $R(365*60)
]]></Implementation>
</Method>

<Method name="MakeVisit">
<Description>
Return random visit date for data population.</Description>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	#; Make a random date within next year
	Quit +$H + $R(365)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENDemo.Data.PatientD</DataLocation>
<DefaultData>PatientDefaultData</DefaultData>
<IdLocation>^ZENDemo.Data.PatientD</IdLocation>
<IndexLocation>^ZENDemo.Data.PatientI</IndexLocation>
<StreamLocation>^ZENDemo.Data.PatientS</StreamLocation>
<Data name="PatientDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DOB</Value>
</Value>
<Value name="3">
<Value>FavoriteColor</Value>
</Value>
<Value name="4">
<Value>Home</Value>
</Value>
<Value name="5">
<Value>Name</Value>
</Value>
<Value name="6">
<Value>SSN</Value>
</Value>
<Value name="7">
<Value>MaritalStatus</Value>
</Value>
<Value name="8">
<Value>Sex</Value>
</Value>
<Value name="9">
<Value>Memo</Value>
</Value>
<Value name="10">
<Value>NextVisit</Value>
</Value>
</Data>
<Property name="DOB"/>
<Property name="FavoriteColor"/>
<Property name="Home"/>
<Property name="MaritalStatus"/>
<Property name="Memo"/>
<Property name="Name"/>
<Property name="SSN"/>
<Property name="Sex"/>
</Storage>
</Class>


<Class name="ZENDemo.DesktopDemo">
<Description>
This is the Desktop Demonstration page for the Zen demonstration application.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60348,35107.52354</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Desktop Demo</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDEMO</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

.zenLabel {
	font-size: 0.8em;
}

#desktop {
	border: 1px solid black;
	width: 800px;
	height: 550px;
	background: #404040;
	background-image: url(images/grad-gray-10x500.png);
	background-repeat: repeat-x;
}

#dgCalendar, #dgNotes, #dgGrid {
	background: #c5d6d6;
	background-image: url(images/sidebargradient.png);
	background-repeat: repeat-x;
	border: 1px solid black;
}

#dgCalendar {
	top: 50px;
	left: 100px;
}

#dgNotes {
	top: 50px;
	left: 400px;
}

#dgGrid {
	top: 50px;
	left: 700px;
}

#notes textarea {
	background: #FFEEAA;
}

/* Column labels for dynaGrid. */
table.dynaGrid th.dynaGridLabel,
table.dynaGrid th.dynaGridRow,
table.dynaGrid th.dynaGridColumn {
	color: black;
	background: #404040;
	background-image: url(images/grad-gray-10x100.png);
	background-repeat: repeat-x;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" 
	title="Zen Desktop Demo">
<demo:demoTitle id="title" title="Desktop Demonstration"/>
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Desktop Demo" title="Desktop Demo" />
</locatorBar>
<hgroup valign="top">
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates Zen's desktop components:">
<demo:bullet text="A desktop is a specialized group that allows the user to drag and position its child dragGroup components within a matrix of rows and columns."/>
<demo:bullet text="The desktop component supports interactive layout changes via mouse drag operations. DragGroups may be rearranged, resized or removed at will."/>
<demo:bullet text="The behavior of the desktop component can be controlled via its rowStyle and columnStyle properties."/>
</demo:sidebar>
</vgroup>
<spacer width="20"/>
<vgroup cellVAlign="top">
<hgroup labelPosition="left">
<select label="Row Style" valueList="FILL_ROW,ALIGN_ROW_TOP,ALIGN_ROW_CENTER,ALIGN_ROW_BOTTOM,FILL_UNIFORM,ALIGN_UNIFORM_TOP,ALIGN_UNIFORM_CENTER,ALIGN_UNIFORM_BOTTOM" onchange="zenPage.applyRowStyle(zenThis.getValue());"/>
<spacer width="20"/>
<select label="Column Style" valueList="FILL_COLUMN,ALIGN_COLUMN_LEFT,ALIGN_COLUMN_CENTER,ALIGN_COLUMN_RIGHT,FILL_WIDTH,ALIGN_WIDTH_LEFT,ALIGN_WIDTH_CENTER,ALIGN_WIDTH_RIGHT,FILL_UNIFORM,ALIGN_UNIFORM_LEFT,ALIGN_UNIFORM_CENTER,ALIGN_UNIFORM_RIGHT" onchange="zenPage.applyColStyle(zenThis.getValue());"/>
</hgroup>
<desktop id="desktop">
<dragGroup id="dgCalendar" header="Calendar" width="250px" height="250px">
<calendar/>
</dragGroup>
<dragGroup id="dgGrid" header="Calculator" width="250px" height="250px">
<dynaGrid gridLabel="QuikCalc"
	onchange="zenPage.calcCellChange(zenThis);"
>
<gridRow label="1"/>
<gridRow label="2"/>
<gridRow label="3"/>
<gridRow label="4"/>
<gridRow label="5"/>
<gridRow label="Total" readOnly="true" style="font-weight: bold;"/>
</dynaGrid>
</dragGroup>
<dragGroup id="dgNotes" header="Notes" width="250px" height="250px">
<textarea id="notes" controlStyle="width:100%;" rows="8"/>
</dragGroup>
</desktop>
</vgroup>
</hgroup>

</page>
]]></Data>
</XData>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>

<Method name="applyRowStyle">
<Description>
Apply the given row style to the desktop.</Description>
<FormalSpec>style</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var desktop = zenPage.getComponentById('desktop');
	desktop.setRowStyle(style);
]]></Implementation>
</Method>

<Method name="applyColStyle">
<Description>
Apply the given column style to the desktop.</Description>
<FormalSpec>style</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var desktop = zenPage.getComponentById('desktop');
	desktop.setColumnStyle(style);
]]></Implementation>
</Method>

<Method name="calcCellChange">
<Description>
cellChange: called when cell is changed</Description>
<FormalSpec>grid</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// compute sum of cells
	var rows = grid.getRowCount();

	// next get totals of rows
	var subtotal = 0;
	for (var r = 1; r < rows; r++) {
		var value = parseFloat(grid.getCellValue(r,1));
		value = isNaN(value) ? 0 : value;
		subtotal += value;

	}
	// set total cell
	grid.setCellValue(subtotal,r,1);
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.DragAndDropDemo">
<Description>
This is the Drag-and-Drop Demonstration page for the Zen demonstration application.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60348,35107.52354</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Drag and Drop Demo</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDEMO</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

#priority {
	color: red;
	font-weight: bold;
	font-size: 1.2em;
	border: 1px solid black;
	width: 600px;
	height: 93px;
	background: #C0C0C0;
	background-image: url(images/grad-halfgray-10x500.png);
	background-repeat: repeat-x;
	padding: 3px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" 
	title="Zen DragAndDrop Demo" dragAndDrop="true">
<demo:demoTitle id="title" title="Drag and Drop Demonstration"/>
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="DragAndDrop Demo" title="Drag and Drop Demo" />
</locatorBar>
<hgroup>
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates Zen's drag and drop capabilities:">
<demo:bullet text="The Zen page has a dragAndDrop property. Setting this true enables drag and drop behavior for the page." />
<demo:bullet text="Each component has properties called dragEnabled and dropEnabled. Setting these true enable the default drag or drop behavior for the component." />
<demo:bullet text="Many components have built-in drag and drop behavior (such as list boxes or other controls). It is also possible to override or extend this behavior." />
<demo:bullet text="In this example, the listBoxes override the default behavior in order to remove items after they are dropped." />
</demo:sidebar>
</vgroup>

<spacer width="40"/>

<vgroup valign="top" id="mainGroup">
<spacer height="25"/>
<titleBox title="Zen Drag-and-Drop Project Manager" 
subtitle="Use the mouse to move resources between projects."/>
<spacer height="25"/>
<hgroup>
<vgroup valign="top">
<titleBox title="Project 1"/>
<listBox id="listBox1" listWidth="150px" listHeight="241px"
	dragEnabled="true" dropEnabled="true"
	 onafterdrag="zenPage.afterDrag(zenThis,dragData);">
<option text="Adam" value="1"/>
<option text="Betty" value="2"/>
<option text="Claudio" value="3"/>
<option text="Deborah" value="4"/>
<option text="Edward" value="5"/>
<option text="Fred" value="6"/>
<option text="Ginger" value="7"/>
</listBox>
</vgroup>
<spacer width="50"/>
<vgroup valign="top">
<titleBox title="Project 2"/>
<listBox id="listBox2"  listWidth="150px" listHeight="241px"
	dragEnabled="true" dropEnabled="true"
	onafterdrag="zenPage.afterDrag(zenThis,dragData);">
</listBox>
</vgroup>
<spacer width="50"/>
<vgroup valign="top">
<titleBox title="Project 3"/>
<listBox id="listBox3"  listWidth="150px" listHeight="241px"
	dragEnabled="true" dropEnabled="true"
	onafterdrag="zenPage.afterDrag(zenThis,dragData);">
</listBox>
</vgroup>
<spacer width="50"/>
<vgroup valign="top">
<titleBox title="Text Box"/>
<text dropEnabled="true"/>
</vgroup>
</hgroup>
<spacer height="50"/>
<html id="priority">Project 1 and 2 are understaffed.</html>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>

<Method name="afterDrag">
<Description><![CDATA[
This method is called after a drag operation is completed.
<var>comp</var> is the component on which the drag started.
<var>dragData</var> is an object containing details about the 
drag operation.<br/>
<var>dragData</var> has the following properties:<br/>
<br/>
<var>dragData.value</var> - logical value of the drag data.<br/>
<var>dragData.text</var> - display value of the drag data.<br/>
<var>dragData.sourceComponent</var> - Zen component in which the drag started.<br/>
<var>dragData.targetComponent</var> - Zen component in which the drop occurred.<br/>
<var>dragData.sourceItem</var> - Component-specific value indicating where the drag started within the source.<br/>
<var>dragData.targetItem</var> - Component-specific value indicating where the drop occurred within the target.<br/>
<var>dragData.sourceMeta</var> - Arbitrary value set by the drag source.<br/>
<var>dragData.targetMeta</var> - Arbitrary value set by the drop target.<br/>
]]></Description>
<FormalSpec>listBox,dragData</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// override default behavior:
	// if this is a drag and drop between the 2 list boxes,
	// then remove the item from the drag source.
	
	// make sure target is a list box
	if (dragData.targetComponent.isOfType('listBox')) {
		// ignore drag onto ourselves
		if (dragData.targetComponent != listBox) {
			if (dragData.sourceItem >= 0) {
				listBox.removeOption(dragData.sourceItem);
				zenPage.updatePriorities();
			}
		}
	}
]]></Implementation>
</Method>

<Method name="updatePriorities">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// find items in each list box
	var p = new Array(3);
	p[0] = zenPage.getComponentById('listBox1').getOptionCount();
	p[1] = zenPage.getComponentById('listBox2').getOptionCount();
	p[2] = zenPage.getComponentById('listBox3').getOptionCount();

	var top = 0;
	var bottom = 2;
	if (p[0] < p[1]) {
		top = (p[0] < p[2]) ? 0 : 2;
		bottom = (p[1] > p[2]) ? 1 : 2;
	}
	else {
		top = (p[1] < p[2]) ? 1 : 2;
		bottom = (p[0] > p[2]) ? 0 : 2;
	}

	var msg = 'Project ' + (top+1) + ' is the top priority.';
	if (p[bottom] > 3) {
		msg += '<br/>' + 'Project ' + (bottom+1) + ' is not important.'
	}

	var html = zenPage.getComponentById('priority');
	html.setProperty('content',msg);
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.ExpenseCalculator">
<Description>
This example uses the dynamic grid control and a stacked
bar chart to create a simple expense report calculator.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60178,64228.461852</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Expense Calculator</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<Property name="dayList">
<Description>
Default list of days names to display in the chart.
By defining this as a caption, it will automatically be
added to the localization database.</Description>
<Type>%ZEN.Datatype.caption</Type>
<InitialExpression>"Sun,Mon,Tue,Wed,Thu,Fri,Sat"</InitialExpression>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

#calculator {
	border: 1px solid darkblue;
	overflow: auto;
}


/* Column labels for dynaGrid. */
table.dynaGrid th.dynaGridLabel,
table.dynaGrid th.dynaGridRow,
table.dynaGrid th.dynaGridColumn {
	color: black;
	background: #404040;
	background-image: url(images/grad-gray-10x100.png);
	background-repeat: repeat-x;
}

table.dynaGrid th.dynaGridLabel:hover,
table.dynaGrid th.dynaGridRow:hover,
table.dynaGrid th.dynaGridColumn:hover {
	color: white;
	background: black;
}

.button {
	width: 180px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Zen Expense Calculator">
<demo:demoTitle id="title" title="Zen Expense Calculator" />
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Expense Calculator" title="Expense Calculator" href="ZENDemo.ExpenseCalculator.cls"/>
</locatorBar>

<hgroup>
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates the following features:">
<demo:bullet text="Using the Dynamic Grid component" />
<demo:bullet text="Use of a Zen chart to visualize changing data" />
<demo:bullet text="How user events within SVG components (mouse click on the bar chart) can be used to to modify HTML components" />
</demo:sidebar>
</vgroup>
<spacer width="10"/>
<vgroup valign="top">
<spacer height="10"/>
<dynaGrid id="calculator" 
	OnCreateDataSet="CreateDataSet"
	gridLabel="Expenses"
	rowLabelWidth="200"
	onchange="zenPage.calcCellChange(zenThis);"
	ondrawcell="return zenPage.calcCellDraw(zenThis,data);"
>
<gridColumn label="Mon" width="100" />
<gridColumn label="Tue" width="100" />
<gridColumn label="Wed" width="100" />
<gridColumn label="Thu" width="100" />
<gridColumn label="Fri" width="100" />
<gridColumn label="Total" width="100" readOnly="true" style="background:#D0D0FF;font-weight: bold;"/>

<gridRow label="Breakfast" />
<gridRow label="Lunch" />
<gridRow label="Dinner" />
<gridRow label="Other" />
<gridRow label="Total" readOnly="true" style="background:#D0D0FF;font-weight: bold;"/>
</dynaGrid>	

<spacer height="10"/>

<svgFrame id="svgFrame" 
	height="400" 
	width="700" 
	backgroundStyle="fill: black;"
	layout="horizontal">
<barChart id="chart" 
	height="400"
	width="700" 
	title="Expenses By Day"
	titleStyle="fill: black;"
	backgroundStyle="fill: url(#glow-silver);"
	plotAreaStyle="fill: #AAAAFF; fill-opacity:0.2;"
	plotStyle="stroke: black;"
	labelStyle="fill: black;"
	legendStyle="fill: white; fill-opacity:0.2;"
	seriesColors="url(#glow-blueHz),url(#glow-greenHz),url(#glow-yellowHz),url(#glow-redHz),url(#glow-purpleHz)"
	seriesNames="Breakfast,Lunch,Dinner,Other"
	seriesCount="4"
	seriesSize="5"
	chartStacked="true"
	marginLeft="15"
	marginRight="20"
	marginTop="8"
	marginBottom="15"
	ongetData="return zenPage.getChartData(series);"
	ongetLabelX="return zenPage.getChartLabelX(value);"
	onelementClick="zenPage.chartElementClick(chart);"
	legendVisible="true"
	legendX="83"
	legendY="8"
	legendHeight=""
	legendWidth="17"
	>
<xAxis id="xAxis" 
	labelAngle="-45"
	title="Day of Week"
/>
<yAxis id="yAxis"
	baseValue="0"
	minValue="" 
	maxValue="" 
	majorUnits=""
	minorUnits=""
	title="US Dollars"
	minorGridLines="true"/>
</barChart>

</svgFrame>
<spacer height="10"/>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="CreateDataSet">
<Description>
Server-side callback to provide initial data for the dynaGrid.</Description>
<FormalSpec>pGrid:%ZEN.Component.dynaGrid,pDataSet:%ZEN.Auxiliary.dataSet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; fill in contents of dataSet
	#; This is a 2-D data structure

	#; fill in initial data for Monday
	Do pDataSet.%SetValue(10,1,1)
	Do pDataSet.%SetValue(4.5,2,1)
	Do pDataSet.%SetValue(8,3,1)
	Do pDataSet.%SetValue(12.95,4,1)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="calcCellChange">
<Description>
cellChange: called when cell is changed</Description>
<FormalSpec>grid</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// compute sum of cells
	var rows = grid.getRowCount();
	var cols = grid.getColumnCount();

	var total = 0;

	// first get totals of columns
	for (var c = 1; c < cols; c++) {
		var subtotal = 0;
		for (var r = 1; r < rows; r++) {
			var value = parseFloat(grid.getCellValue(r,c));
			value = isNaN(value) ? 0 : value;
			subtotal += value;
		}

		// set total cell
		grid.setCellValue(subtotal,rows,c);
		total += subtotal;
	}

	// next get totals of rows
	for (var r = 1; r < rows; r++) {
		var subtotal = 0;
		for (var c = 1; c < cols; c++) {
			var value = parseFloat(grid.getCellValue(r,c));
			value = isNaN(value) ? 0 : value;
			subtotal += value;
		}

		// set total cell
		grid.setCellValue(subtotal,r,cols);
	}

	// total
	grid.setCellValue(total,rows,cols);
	
	// update chart
	var chart = zenPage.getComponentById('chart');
	chart.updateChart();
]]></Implementation>
</Method>

<Method name="calcCellDraw">
<Description>
cellDraw: called when cell is about to be drawn in dynaGrid</Description>
<FormalSpec>grid,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// if we need to know the cell # being drawn, we
	// can get it via grid.row and grid.column.

	if (''==data) {
		return '&nbsp;';
	}
	else if (parseInt(data) < 0) {
		// negative #
		return '<span style="color:red;">('+data+')</span>';
	}
	else if (!isNaN(parseInt(data))) {
		// #
		var s = data.toString().split('.');
		if (s.length == 1) {
			return data + '.00';
		}
		else if (s.length == 2 && s[1].length==1) {
			return data + '0';
		}
		return data;
	}
	
	return data;
]]></Implementation>
</Method>

<Method name="getChartData">
<Description>
Callback to provide data for chart.</Description>
<FormalSpec>series</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var chart = zenPage.getComponentById('chart');
	var grid = zenPage.getComponentById('calculator');

	var data = new Array(chart.seriesSize);

	// get value from column cell
	var rows = grid.getRowCount();
	var cols = grid.getColumnCount();

	for (var c = 1; c < cols; c++) {
		var value = parseFloat(grid.getCellValue(series+1,c));
		value = isNaN(value) ? 0 : value;
		data[c-1] = value;
	}

	return data;
]]></Implementation>
</Method>

<Method name="getChartLabelX">
<Description>
Callback to provide labels for chart.</Description>
<FormalSpec>val</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var days = this.dayList.split(',');
	var day = days[val+1]; // val=0 for monday

	return (null==day) ? '?' : day;
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// force grid to calculate, give it focus
	var grid = zenPage.getComponentById('calculator');
	zenPage.calcCellChange(grid);
	grid.focus();
]]></Implementation>
</Method>

<Method name="chartElementClick">
<Description><![CDATA[
User mouse click on an element in the bar chart.<br>
We will move the corresponding cell in the grid.]]></Description>
<FormalSpec>chart</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var series = chart.getSelectedSeries();
	var item = chart.getSelectedItem();

	if (!isNaN(parseInt(series)) && !isNaN(parseInt(item))) {
		var grid = zenPage.getComponentById('calculator');
		grid.selectCell(series+1,item+1);
		grid.focus();
	}
]]></Implementation>
</Method>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.FormDemo">
<Description>
This is the Form Demonstration page for the Zen demonstration application.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60348,35107.52354</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Form Demo</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDEMO</Default>
</Parameter>

<Property name="patientID">
<Description>
This property holds the patient ID passed in by URL (if any).</Description>
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="ID"/>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

body {
	font-family: "lucida sans unicode";
}


/* form labels */
.zenLabel {
	font-size: 10pt;
}

.zenHint {
	font-size: 8pt;
	color: #404040;
}

.fieldSet {
	font-size: 10pt;
}
.radioSetCaption {
	font-size: 10pt;
}
.comboboxInput {
	border-top: 1px solid #8080FF;
	border-bottom: 1px solid #8080FF;
	border-left: 1px solid #8080FF;
}

.comboboxTextButton {
	border: 1px solid #8080FF;
}
.comboboxImgButton {
	border-top: 1px solid #8080FF;
	border-bottom: 1px solid #8080FF;
	border-right: 1px solid #8080FF;
}

/* customize the combobox dropdown */
.comboboxTable {
	background: #C0C0C0;
	background-image: url(images/grad-halfgray-10x500.png);
	background-repeat: repeat-x;
}

.comboboxTable td {
	padding: 1px;
	border-bottom: 1px solid gray;
}

#formGroup {
	background: #C0C0C0;
	background-image: url(images/grad-halfgray-10x500.png);
	background-repeat: repeat-x;
	border: 1px solid darkblue;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Zen Form Demo">
<demo:demoTitle id="title" title="Form Demonstration"/>
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Form Demo" title="Form Demo" />
</locatorBar>
<hgroup>
<vgroup valign="top">
<demo:sidebar text="This Zen form demonstrates the following features:">
<demo:bullet text="Data-driven combobox" />
<demo:bullet text="Data-driven radio buttons" />
<demo:bullet text="Different flavors of date input controls" />
<demo:bullet text="Custom component" />
<demo:bullet text="Use of server-side methods to populate the form" />
<demo:bullet text="Built-in form validation" />
<demo:bullet text="Server-side submit logic" />
<demo:bullet text="Expando box to hide and show the form" />
</demo:sidebar>
</vgroup>

<spacer width="40"/>

<vgroup valign="top" id="formGroup">
<expando caption="Patient Record Form" framed="true" animate="true">
<form id="patientForm" 
	width="100%" 
	layout="vertical"
	 labelPosition="top"
	cellStyle="padding: 3px;" 
	>

<hgroup>
<text label="Patient ID:" id="PatientID" 
	name="PatientID" size="8" readOnly="true" />
<spacer width="20"/>
<dataCombo label="Name:" id="Name" name="Name" size="24"
	dropdownWidth="450"
	editable="true"
	searchKeyLen="5"
	required="false"
	comboType="button"
	buttonCaption="Search"
	buttonTitle="Search for a record by Patient Name"
	onchange="zenPage.selectPatient(zenThis);"
	sql="SELECT TOP 25 ID,Name,Home_City FROM ZENDemo_Data.Patient WHERE Name %STARTSWITH ? ORDER BY Name"
	unrestricted="true"
	displayColumns="2,3"
	choiceColumn="2"
	valueColumn="2"
	auxColumn="1"
	/>

<spacer width="20"/>

<dataCombo label="SSN:" id="SSN" name="SSN" size="24"
	dropdownWidth="450"
	editable="true"
	searchKeyLen="5"
	required="false"
	comboType="button"
	buttonCaption="Search"
	buttonTitle="Search for a record by Social Security Number"
	onchange="zenPage.selectPatient(zenThis);"
	sql="SELECT TOP 25 ID,SSN,Name FROM ZENDemo_Data.Patient WHERE SSN %STARTSWITH ? ORDER BY SSN"
	unrestricted="true"
	displayColumns="2,3"
	choiceColumn="2"
	valueColumn="2"
	auxColumn="1"
	/>
</hgroup>

<hgroup cellVAlign="top">

<dateSelect label="Date of Birth:" id="DOB" name="DOB"
 hint="Composite date control"/>
<spacer width="25"/>
<dateText label="Next Visit:" id="NextVisit" name="NextVisit" 
	hint="Popup calendar control"
	onshowPopup="zenPage.calendarSettings(settings);" />
<spacer width="25"/>
<colorPicker label="Favorite Color:" 
	hint="Custom color control"
	id="FavoriteColor" 
	name="FavoriteColor" colorList="white,red,green,blue,black,yellow,orange,purple"/>
</hgroup>
<radioSet label="Sex:" id="Sex" name="Sex" displayList="Male,Female,Other" valueList="M,F,O"/>
<radioSet label="Marital Status:" id="MaritalStatus" 
	name="MaritalStatus" 
	displayList="Single,Married,Divorced,Widowed,Other" 
	valueList="S,M,D,W,O"/>

<fieldSet id="fieldSet" 
	legend="Home Address" 
	layout="vertical" 
	title="Patient's home address">
<text label="Street:" id="HomeStreet" name="HomeStreet" size="40" />
<text label="City:" id="HomeCity" name="HomeCity" size="25" />
<hgroup>
<text label="State:" id="HomeState" name="HomeState" size="2"  maxlength="2" />
<spacer width="10"/>
<text label="Zip Code:" id="HomeZip" name="HomeZip" size="10" />
</hgroup>
</fieldSet>

<textarea label="Memo:" id="Memo" name="Memo" cols="80" rows="3"/>
<spacer height="5" />
<hgroup width="100%" cellAlign="right">
<spacer width="5" />
<submit caption="Save" action="save"/>
<spacer width="5" />
<button caption="Reset" onclick="zenPage.resetForm();"/>
<spacer width="5" />
</hgroup>
</form>
</expando>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br>
Subclasses can override this to add, remove, or modify 
items within the page object model, or to provide values
for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If (..patientID '= "") {
		#; load contents of given object into form
		Set tForm = ..%GetComponentById("patientForm")
		Do ..LoadPatient(tForm,..patientID)
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="selectPatient">
<Description>
User has selected a new Patient from the list.</Description>
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = zenPage.getComponentById('PatientID');
	var patid = ctrl.getValue();

	// get id of patient
	// this is in the "auxiliary" value of the dataCombo
	var id = cb.getAuxValue();

	// if user has selected a new id, load it
	if (patid != id) {
		var form = zenPage.getComponentById('patientForm');
		
		// go to server; get patient data
		this.LoadPatient(form, id);

	}
]]></Implementation>
</Method>

<Method name="LoadPatient">
<Description>
Load given patient data into the form.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pForm:%ZEN.Component.form,pID:%ZEN.Datatype.string</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; open patient object from database
	Set tPatient = ##class(ZENDemo.Data.Patient).%OpenId(pID)
	If $IsObject(tPatient) {
		Do %page.%SetValueById("PatientID",pID)
		Do %page.%SetValueById("Name",tPatient.Name)
		Do %page.%SetValueById("SSN",tPatient.SSN)
		Do %page.%SetValueById("MaritalStatus",tPatient.MaritalStatus)
		Do %page.%SetValueById("Sex",tPatient.Sex)
		Do %page.%SetValueById("FavoriteColor",tPatient.FavoriteColor)
		Do %page.%SetValueById("Memo",tPatient.Memo)

		Do %page.%SetValueById("DOB",tPatient.DOBLogicalToDisplay(tPatient.DOB))
		Do %page.%SetValueById("HomeStreet",tPatient.Home.Street)
		Do %page.%SetValueById("HomeCity",tPatient.Home.City)
		Do %page.%SetValueById("HomeState",tPatient.Home.State)
		Do %page.%SetValueById("HomeZip",tPatient.Home.ZIP)
		Do %page.%SetValueById("NextVisit",tPatient.NextVisitLogicalToDisplay(tPatient.NextVisit))
	}
	Quit
]]></Implementation>
</Method>

<Method name="%OnSubmit">
<Description><![CDATA[
submit handler:
This method is called when this form is submitted.
The submitted values are placed within a special submit object
and are indexed by control <em>name</em>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSubmit:%ZEN.Submit</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If (pSubmit.%Action = "save") {
		Set tID = pSubmit.%GetValue("PatientID")

		#; open and save object (with lock)
		Set tPatient = ##class(ZENDemo.Data.Patient).%OpenId(tID,4)
		If $IsObject(tPatient) {
			Set tPatient.Name = pSubmit.%GetValue("Name")
			Set tPatient.SSN = pSubmit.%GetValue("SSN")
			Set tPatient.DOB = tPatient.DOBDisplayToLogical(pSubmit.%GetValue("DOB"))
			Set tPatient.NextVisit = tPatient.DOBDisplayToLogical(pSubmit.%GetValue("NextVisit"))
			Set tPatient.MaritalStatus = pSubmit.%GetValue("MaritalStatus")
			Set tPatient.Sex = pSubmit.%GetValue("Sex")
			Set tPatient.FavoriteColor = pSubmit.%GetValue("FavoriteColor")
			Set tPatient.Memo = pSubmit.%GetValue("Memo")

			Set tPatient.Home.Street = pSubmit.%GetValue("HomeStreet")
			Set tPatient.Home.City = pSubmit.%GetValue("HomeCity")
			Set tPatient.Home.State = pSubmit.%GetValue("HomeState")
			Set tPatient.Home.ZIP = pSubmit.%GetValue("HomeZip")

			Set tSC = tPatient.%Save()
			If $$$ISERR(tSC) {
				#; set form error
				Do pSubmit.%SetError("PatientID","There was an error saving this form.")
			}
		}
		
		#; pass ID on to new display of page
		Set %response.Context("ID") = tID
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>

<Method name="calendarSettings">
<Description>
Apply additional settings to popup calendar.</Description>
<FormalSpec>settings</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	settings.gapWidth = '60px';
]]></Implementation>
</Method>

<Method name="resetForm">
<Description>
Reset the contents of the form.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zenPage.getComponentById('patientForm');
	form.reset();
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.Home">
<Description>
This is the home page for the Zen demonstration application.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60348,35107.52354</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Home</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDEMO</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

/* style for lookout menu */
#lookout {
	border: 1px solid black;
	overflow: auto;
	background: white;
}

.lookoutTab {
	background: white;
	border-bottom: 1px solid black;
}

.lookoutButton {
	color: white;
	background: rgb(47,98,128);
	font-weight: bold;
	font-family: verdana;
	font-size: 1.0em;
	text-align: left;
	border: 1px solid rgb(27,78,108);
}

.lookoutButton:hover {
	background: rgb(47,128,98);
}

#iframe {
	border: none;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.
Setting XMLNamespace turns on StudioAssist for this XML block.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Zen Demo" height="100%">
<demo:demoTitle id="title" title="Welcome"/>
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page"/>
</locatorBar>
<hgroup width="100%" cellAlign="left" cellVAlign="top">
<lookoutMenu id="lookout" expandable="false" 
	onexpand="zenPage.onlayoutHandler();" 
	oncontract="zenPage.onlayoutHandler();"
	remember="true">
<tab caption="Overview" id="menuOverview">
<menuItem   caption="Form Demo"
					link="ZENDemo.FormDemo.cls"
					image="images/folder.gif"
					title="A demonstration of a form built with Zen"
					/>
<menuItem   caption="SVG Dashboards"
					link="ZENDemo.Dashboard.cls"
					image="images/folder.gif"
					title="A demonstration of an SVG-based Dashboard built with Zen"
					/>
<menuItem   caption="Expense Calculator"
					link="ZENDemo.ExpenseCalculator.cls"
					image="images/folder.gif"
					title="A demonstration of an interactive SVG-based Chart built with Zen"
					/>

<menuItem   caption="Drag and Drop"
					link="ZENDemo.DragAndDropDemo.cls"
					image="images/folder.gif"
					title="A demonstration of Zen's drag-and-drop capabilities"
					/>

<menuItem   caption="Active Groups"
					link="ZENDemo.ActiveGroupDemo.cls"
					image="images/folder.gif"
					title="A demonstration of Zen's active group components"
					/>

<menuItem   caption="Desktop"
					link="ZENDemo.DesktopDemo.cls"
					image="images/folder.gif"
					title="A demonstration of Zen's desktop components"
					/>


<menuItem   caption="Controls"
					link="ZENDemo.ControlTest.cls"
					image="images/folder.gif"
					title="A demonstration of the various controls included with Zen"
					/>
<menuItem   caption="Methods"
					link="ZENDemo.MethodTest.cls"
					image="images/folder.gif"
					title="A demonstration of method calls using Zen"
					/>

</tab>
<tab caption="Components" id="menuComponents">
<menuItem   caption="Grids"
					link="ZENTest.DynaGridTest.cls"
					image="images/folder.gif"
					title="A demonstration of the Zen grid component"
					/>
<menuItem   caption="Tables"
					link="ZENTest.TableTest.cls"
					image="images/folder.gif"
					title="A demonstration of the Zen table component"
					/>
<menuItem   caption="Trees"
					link="ZENTest.DynaTreeTest.cls"
					image="images/folder.gif"
					title="A demonstration of the Zen tree control"
					/>
<menuItem   caption="Tabs"
					link="ZENTest.TabTest.cls"
					image="images/folder.gif"
					title="A demonstration of the Zen tab component"
					/>
<menuItem   caption="Menus"
					link="ZENTest.MenuTest.cls"
					image="images/folder.gif"
					title="A demonstration of menus build with Zen"
					/>
<menuItem   caption="HTML Component"
					link="ZENTest.HTMLTest.cls"
					image="images/folder.gif"
					title="A demonstration of the Zen HTML component"
					/>
<menuItem   caption="Popup Windows"
					link="javascript: zenPage.showPopupWindow();"
					image="images/folder.gif"
					title="A demonstration of launching a popup window"
					/>
<menuItem   caption="Dialogs"
					link="javascript: zenPage.showFileSelectionWindow();"
					image="images/folder.gif"
					title="A demonstration of launching a dialog window"
					/>
</tab>
<tab caption="SVG Components" id="menuSVG">
<menuItem   caption="SVG Line Charts"
					link="ZENTest.SVGLineChartTest.cls"
					image="images/folder.gif"
					title="A demonstration of SVG line charts"
					/>

<menuItem   caption="SVG Bar Charts"
					link="ZENTest.SVGBarChartTest.cls"
					image="images/folder.gif"
					title="A demonstration of SVG bar charts"
					/>

<menuItem   caption="SVG Pie Charts"
					link="ZENTest.SVGPieChartTest.cls"
					image="images/folder.gif"
					title="A demonstration of SVG pie charts"
					/>

<menuItem   caption="SVG Components"
					link="ZENTest.SVGLayoutTest.cls"
					image="images/folder.gif"
					title="A demonstration of the SVG components"
					/>
<menuItem   caption="SVG OwnerDraw Test"
					link="ZENTest.SVGOwnerDrawTest.cls"
					image="images/folder.gif"
					title="A demonstration of the SVG owner-draw component"
					/>
</tab>
<tab caption="Model View Controller" id="menuMVC">
<menuItem   caption="Form Demo"
					link="ZENMVC.MVCForm.cls"
					image="images/folder.gif"
					title="A demonstration of an MVC form"
					/>

<menuItem   caption="Form Template Demo"
					link="ZENMVC.PatientForm.cls"
					image="images/folder.gif"
					title="A demonstration of an MVC form based on a template class"
					/>

<menuItem   caption="Master Detail Demo"
					link="ZENMVC.MVCMasterDetail.cls"
					image="images/folder.gif"
					title="A demonstration of master/detail page built using MVC"
					/>

<menuItem   caption="Chart Demo"
					link="ZENMVC.MVCChart.cls"
					image="images/folder.gif"
					title="A demonstration of an SVG chart driven by an MVC data model"
					/>
<menuItem   caption="Meter Demo"
					link="ZENMVC.MVCMeters.cls"
					image="images/folder.gif"
					title="A demonstration of SVG meters driven by an MVC data model"
					/>
</tab>

<tab caption="Sample Applications" id="menuApp">
<menuItem   caption="HelpDesk Application"
					link="ZENApp.SampleApp.cls"
					image="images/folder.gif"
					title="Show the HelpDesk sample application"
					/>


<menuItem   caption="Visual Navigator"
					link="ZENDemo.SVGBrowser.cls"
					image="images/folder.gif"
					title="Show the Visual Navigator sample application"
					/>

</tab>

<tab caption="Test Suite" id="menuTest">
<menuItem   caption="Zen Test Suite"
					link="ZENTest.TestApplication.cls"
					image="images/folder.gif"
					title="Show the list of available Zen test pages"
					/>

</tab>
</lookoutMenu>
<spacer width="20"/>
<vgroup valign="top">
<html id="description" width="800" OnDrawContent="DrawDescription"/>
<iframe id="iframe" src="images/zenLogo.svg" width="600" height="600"/>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="DrawDescription">
<Description>
DrawDescription</Description>
<FormalSpec>seed:%ZEN.Datatype.string</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Write $$$TextHTML("Welcome to Zen, the Web Application Development Framework!")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="onlayoutHandler">
<Description><![CDATA[
This client event, if present, is fired when the page 
is first loaded or whenever it is resized.<br>
If this is called at load time, then <var>load</var> will
be true.]]></Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// adjust size of lookout menu
	var menu = zenPage.getComponentById('lookout');
	zenASSERT(menu,'Unable to find menu',arguments);

	// find divs for title & mainMenu
	var title = zenPage.getComponentById('title');
	var locator = zenPage.getComponentById('locator');
	var divTitle = title.getEnclosingDiv();
	var divLocator = locator.getEnclosingDiv();

	// find height of window
	var winHeight = zenGetWindowHeight();

	// adjust size of menu
	var sz = winHeight - (parseInt(divTitle.offsetHeight) + parseInt(divLocator.offsetHeight)) - 20;
	menu.setSize(220,sz);
]]></Implementation>
</Method>

<Method name="showPopupWindow">
<Description>
Demonstration of launching a popup window. </Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenLaunchPopupWindow('%ZEN.Dialog.colorSelect.cls','ColorPicker','status,scrollbars,resizable=no,width=500,height=700');
]]></Implementation>
</Method>

<Method name="showFileSelectionWindow">
<Description>
Demonstration of launching a file selector window. </Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenLaunchPopupWindow('%ZEN.Dialog.fileSelect.cls','FileSelection','status,scrollbars,resizable,width=500,height=700');
]]></Implementation>
</Method>

<Method name="onPopupAction">
<Description>
This client event, if present, is fired when the a popup page
launched from this page fires an action.</Description>
<FormalSpec>popupName,action,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch(popupName) {
	case 'ColorPicker':
		// set background of the enclosing div of the page
		zenPage.getEnclosingDiv().style.background = value;
		break;
	}
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br>
Subclasses can override this to add, remove, or modify 
items within the page object model, or to provide values
for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; make sure we have demo data created
	Do ..CreateDemoData()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>

<Method name="CreateDemoData">
<Description>
Create the data used by the various demo page by calling
the appropriate Populate methods.
This is done the first time the demo pages are run.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#; patient
	&sql(SELECT COUNT(*) INTO :count FROM ZENDemo_Data.Patient)
	If (count = 0) {
		Do ##class(ZENDemo.Data.Patient).%KillExtent()
		Do ##class(ZENDemo.Data.Patient).Populate(1000)
	}

	#; employee
	&sql(SELECT COUNT(*) INTO :count FROM ZENDemo_Data.Employee)
	If (count = 0) {
		Do ##class(ZENDemo.Data.Employee).%KillExtent()
		Do ##class(ZENDemo.Data.Employee).Populate(1000)
	}

	#; invoice
	&sql(SELECT COUNT(*) INTO :count FROM ZENApp_Report.Invoice)
	If (count = 0) {
		Do ##class(ZENApp.Report.Invoice).%KillExtent()
		Do ##class(ZENApp.Report.Invoice).Populate(1000)
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.MethodTest">
<Description>
Zen Demo page for methods.
This page demonstrates the various ways in which Zen pages can invoke
methods.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60216,44506.960211</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Method Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDEMO</Default>
</Parameter>

<Property name="customClass">
<Description>
This property is here to make sure client page includes
definition of customClass.</Description>
<Type>ZENTest.customClass</Type>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
#menuTitleBox {
	color: white;
	background: #000040;
	background-image: url(images/grad-blue-10x100.png);
	background-repeat: repeat-x;
}

#menu {
	height: 500px;
	width: 400px;
	overflow-y: auto;
	overflow-x: hidden;
	border: 1px solid black;
}


</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Method Test Page">
<demo:demoTitle id="title" title="Zen Method Test Page" category="Zen Test Suite" />
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Method Test" title="Method Test Page" href="ZENDemo.MethodTest.cls"/>
</locatorBar>
<hgroup>
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates the following features:">
<demo:bullet text="Calling client-side methods in response to client events" />
<demo:bullet text="Calling server-side methods in response to events" />
<demo:bullet text="Calling server-side methods asynchronously and synchronously" />
<demo:bullet text="Dynamically creating components on a page" />
</demo:sidebar>
</vgroup>

<spacer width="50" />
<vgroup valign="top">
<spacer height="25" />
 <menu	id="menu" layout="vertical" cellVAlign="top">
<titleBox	title="Methods" 
	id="menuTitleBox"
			subtitle="Demonstration of invoking methods"
 />

<menuItem   caption="Client Instance Method" 
					onclick="zenPage.clientMethod();"
					help="Invoke an instance method of the client page object."
					/>

<menuItem   caption="Client Method: Objects created" 
					onclick="zenPage.clientMethodCreate();"
					help="Invoke an instance method that creates a component dynamically."
					/>

<menuItem   caption="Client Assertion Test" 
					onclick="zenPage.assertionTest();"
					help="Test the zenASSERT function."
					/>

<menuItem   caption="isOfType Method Test" 
					id="typeMenu"
					onclick="zenPage.isOfTypeTest();"
					help="Test the isOfType method."
					/>

<menuItem   caption="Server Instance Method" 
					onclick="zenPage.serverInstanceMethod();"
					help="Invoke server instance method."
					/>

<menuItem   caption="Server Instance Method with Arguments" 
					onclick="zenPage.serverInstanceMethodArgs(zenPage.getComponentById('title'),1,'hello');"
					help="Invoke server instance method with args."
					/>

<menuItem   caption="Server Instance Method with Return Value" 
					onclick="alert(zenPage.serverInstanceMethodRet());"
					help="Invoke server instance method that returns a value."
					/>

<menuItem   caption="Server Class Method" 
					onclick="zenPage.serverClassMethod();"
					help="Invoke server class method."
					/>

<menuItem   caption="Server Class Method with Arguments" 
					onclick="zenPage.serverClassMethodArgs(zenPage.getComponentById('title'),1,'hello');"
					help="Invoke server class method."
					/>

<menuItem   caption="Server Instance Method: Objects Created" 
					onclick="zenPage.serverInstanceMethodCreate();"
					help="Invoke server instance method that adds objects to the object model."
					/>

<menuItem   caption="Server Instance Method: Objects Modified" 
					onclick="zenPage.serverInstanceMethodMod();"
					help="Invoke server instance method that modifies the object model."
					/>

<menuItem   caption="Server Instance Method: Objects Deleted" 
					onclick="zenPage.serverInstanceMethodDelete();"
					help="Invoke server instance method that deletes objects."
					/>

<menuItem   caption="Server Class Method With Error" 
					onclick="zenPage.serverClassMethodWithError();"
					help="Invoke server class method that has an error in it."
					/>

<menuItem   caption="Create Custom Object" 
					onclick="zenPage.createCustomObject();"
					help="Create an instance of a custom JS class."
					/>

<menuItem   caption="Synch and Asynch Methods" 
					onclick="zenPage.methodMixed();"
					help="Invoke multiple server methods both synchronously and asynchronously."
					/>

<menuItem   caption="Refresh HTML Element" 
					onclick="zenPage.refreshHTML();"
					help="Invoke server method to refresh html element."
					/>

<menuItem   caption="Run Background Task"
					id="menuBGTask" 
					onclick="zenPage.RunBackgroundTask();"
					help="Run a server method in the background."
					/>
<menuSeparator />
<html id="html">This is an HTML element.</html>
<menuSeparator />
<html id="taskStatus"> </html>
<menuSeparator />
<menuItem   caption="Modal Group: Calendar"
					onclick="zenPage.modalGroupCal();"
					help="Create a calendar modal group."
					/>
<menuItem   caption="Modal Group: MsgBox"
					onclick="zenPage.modalGroupMsg();"
					help="Create a Message Box modal group."
					/>
<menuItem   caption="Modal Group: Dynamic" 
					onclick="zenPage.modalGroupDynamic();"
					help="Create a dynamic modal group."
					/>

<menuItem   caption="Modal Group: Static"
					onclick="zenPage.modalGroupStatic();"
					help="Display a modal group using a static definition within the page definition."
					/>
<menuSeparator />
<hgroup>
<checkbox caption="Trace JavaScript Calls" 
		title="Show JavaScript calls invoked from the server."
		onclick="zenPage.toggleDebugMode(zenThis,'js');"/>

<checkbox caption="Trace Events" 
		title="Trace client-side events."
		onclick="zenPage.toggleDebugMode(zenThis,'events');"/>

<checkbox caption="Trace Serialization" 
		title="Show serial state for each request."
		onclick="zenPage.toggleDebugMode(zenThis,'serialize');"/>
</hgroup>
</menu>

</vgroup>
<spacer width="100"/>
<group id="group">
<html id="out"/>
</group>
</hgroup>
<modalGroup id="mgStatic" groupTitle="Popup">
<text id="mgText" label="Value:" />
<button id="mgButton" caption="OK" onclick="zenPage.mgBtnClick();"/>
</modalGroup>
</page>
]]></Data>
</XData>

<Method name="clientMethod">
<Description>
Client method</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	alert('This is a client method.');
	return true;
]]></Implementation>
</Method>

<Method name="clientMethodCreate">
<Description>
A client-method that creates a component dynamically</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var group = this.getComponentById('group');

	// create a button
	var btn = this.createComponent('button');
	btn.setProperty('caption','button: ' + btn.index);
	
	// Add event handler-- note order of quotation marks
	btn.setProperty('onclick',"alert('This is a button!');");

	// add the button to the group
	group.addChild(btn);

	// refresh the contents of the group
	// true flag forces synchronous refresh.
	// (sync is not required, it is used here as a demonstration)
	group.refreshContents(true);
]]></Implementation>
</Method>

<Method name="assertionTest">
<Description>
ASSERT test method</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenASSERT(false,"This is an ASSERT",arguments);
]]></Implementation>
</Method>

<Method name="isOfTypeTest">
<Description>
test the isOfType method</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var item = zenPage.getComponentById('typeMenu');
	zenASSERT(item,"Unable to find typeMenu component",arguments);
	
	alert(item._type + ' is object: ' + item.isOfType('object'));
	alert(item._type + ' is component: ' + item.isOfType('component'));
	alert(item._type + ' is menuItem: ' + item.isOfType('menuItem'));
	alert(item._type + ' is form: ' + item.isOfType('form'));
]]></Implementation>
</Method>

<Method name="serverInstanceMethod">
<Description>
Server instance method</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; The server returns the following JavaScript statements to client
	#; for execution.
	&js<
	alert('Server instance method');
	alert('page: #(%page)#');
	alert('child 1: #(%page.children.GetAt(1))#');
	alert('title by id: #(%page.%GetComponentById("title"))#');
	alert('menu by id: #(%page.%GetComponentById("menu"))#');
	>
]]></Implementation>
</Method>

<Method name="serverInstanceMethodArgs">
<Description>
Server instance method</Description>
<FormalSpec>p1:%ZEN.Component.object,p2:%Integer,p3:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; The server returns the following JavaScript statements to client
	#; for execution.
	&js<
	alert('Server instance method (args)');
	alert('page: #(%page.nextIndex)#');
	alert('arg1: #(p1)#');
	alert('arg2: #(p2)#');
	alert('arg3: #(p3)#');
	alert('child 1: #(%page.children.GetAt(1))#');
	alert('title by id: #(%page.%GetComponentById("title"))#');
	alert('menu by id: #(%page.%GetComponentById("menu"))#');
	>
]]></Implementation>
</Method>

<Method name="serverInstanceMethodRet">
<Description>
Server instance method</Description>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	&js<alert('Server instance method');>
	Quit "This value is from the server: " _ $ZDT($H,3)
]]></Implementation>
</Method>

<Method name="serverInstanceMethodMod">
<Description>
Server instance method with server modifications</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; update
	Set html = %page.%GetComponentById("out")
	Set html.content = "This is an update from the server: " _ $ZH

	Set btn = %page.%GetComponentById("NewBtn1")
	If $IsObject(btn) {
		Set btn.caption = "Hey " _ ($ZH\1)
		Set btn.onclick = "alert('Don\'t tread on me!');"
	}
	Else {
		&js<alert('Unable to find button. Call Create first!');>	
	}
]]></Implementation>
</Method>

<Method name="serverInstanceMethodCreate">
<Description>
Server instance method with server modifications</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; create
	Set group = %page.%GetComponentById("group")
	If '$IsObject(group) {
		&js<alert('Unable to find group.');>
		Quit
	}
	Set count = group.children.Count()

	Set cal = ##class(%ZEN.Component.calendar).%New()
	Set cal.id = "NewCal"_count
	Do group.%AddChild(cal)

	Set btn = ##class(%ZEN.Component.button).%New()
	Set btn.id = "NewBtn"_count
	Set btn.caption = "New Button"
	Do group.%AddChild(btn)

	Set btn = ##class(%ZEN.Component.text).%New()
	Set btn.label = "Hey"
	Do group.%AddChild(btn)
]]></Implementation>
</Method>

<Method name="serverInstanceMethodDelete">
<Description>
Server instance method with server modifications</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; if there is a calendar, delete it!
	Set cal = %page.%GetComponentById("NewCal1")
	If $IsObject(cal) {
		#; remove object from its parent
		Do cal.parent.%RemoveChild(cal)
	}
	Else {
		#; this logic will only work if create is called once!
		&js<alert('No calendar component found to delete.');>
	}
]]></Implementation>
</Method>

<Method name="serverClassMethod">
<Description>
Server class method</Description>
<ClassMethod>1</ClassMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	&js<alert('Server class method');>
	&js<alert('page: #($G(%page,"missing"))# (should be missing!)');>
]]></Implementation>
</Method>

<Method name="serverClassMethodWithError">
<Description>
Server class method with an error to demonstrate
error handling.</Description>
<ClassMethod>1</ClassMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	Set x = 1 / 0
]]></Implementation>
</Method>

<Method name="serverClassMethodArgs">
<Description>
Server instance method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>p1:%ZEN.Component.object,p2:%Integer,p3:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; The server returns the following JavaScript statements to client
	#; for execution.
	&js<
	alert('Server class method (args)');
	alert('page: #(%page.nextIndex)#');
	alert('application: #(%application)#');
	alert('arg1: #(p1)#');
	alert('arg2: #(p2)#');
	alert('arg3: #(p3)#');
	alert('child 1: #(%page.children.GetAt(1))#');
	alert('title by id: #(%page.%GetComponentById("title"))#');
	alert('menu by id: #(%page.%GetComponentById("menu"))#');
	>
]]></Implementation>
</Method>

<Method name="createCustomObject">
<Description>
Create an instance of the customClass class.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	try {
		var custom = zenPage.createComponentNS('http://www.intersystems.com/zentest','customClass');
		custom.test();
	}
	catch(ex) {
		alert("ERROR: " + ex);
	}
]]></Implementation>
</Method>

<Method name="toggleDebugMode">
<Description>
User click on debug mode checkbox.</Description>
<FormalSpec>cb,name</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var flag = cb.getValue()==1 ? true : false;
	zenPage.setTraceOption(name,flag);
]]></Implementation>
</Method>

<Method name="refreshHTML">
<Description>
Refresh contents of html element.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var html = zenPage.getComponentById('html');
	zenASSERT(html,"Unable to find html element",arguments);

	// call server to refresh html
	// NOTE: this is for testing; an application would simply
	// call html.setProperty('content','...');
	html.content = "This text was sent to the server and back!"
	html.refreshContents();
]]></Implementation>
</Method>

<Method name="modalGroupCal">
<Description>
display a modalGroup calendar</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// create a modal group
	var group = zenPage.createComponent('modalGroup');
	group.setProperty('onaction','zenPage.calendarAction(group);');
	group.show('Select a date:','calendar','2005/12/12');
]]></Implementation>
</Method>

<Method name="calendarAction">
<Description>
User action handler for calendar flaotingGroup.</Description>
<FormalSpec>group</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert("You selected: " + group.getValue());
]]></Implementation>
</Method>

<Method name="modalGroupMsg">
<Description>
display a modalGroup msgBox</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// create a modal group
	var group = this.createComponent('modalGroup');
	group.show('Message','msgBox','This is a message!<br>It can contain <span style="color: red; font-weight: bold;">HTML</span>!');
]]></Implementation>
</Method>

<Method name="modalGroupDynamic">
<Description>
display a dynamic modalGroup</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// create a modal group
	var group = this.createComponent('modalGroup');

	// add components dynamically
	var cal = this.createComponent('calendar');
	group.addChild(cal);
	cal.setProperty('onchange','zenPage.endModal();');

	var btn = this.createComponent('button');
	group.addChild(btn);
	btn.setProperty('caption','My Button');

	// Show the group in "dynamic" mode.
	group.show('Dynamic','dynamic');
]]></Implementation>
</Method>

<Method name="modalGroupStatic">
<Description>
Display the static modalGroup.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// Find the group and show it
	var mg = this.getComponentById('mgStatic');
	mg.show();
]]></Implementation>
</Method>

<Method name="mgBtnClick">
<Description>
OK button pressed within static modalGroup.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = zenPage.getComponentById('mgText');

	// write user value into HTML component
	var html = zenPage.getComponentById('html');
	html.setProperty('content','User entered: ' + ctrl.getValue());
	
	// hide the modal group
	zenPage.endModal();
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	//alert('This method is called when the page is loaded.');
]]></Implementation>
</Method>

<Method name="RunBackgroundTask">
<Description>
Run a method in the background.</Description>
<ClassMethod>1</ClassMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; Run method BackgroundTask in a background job.
	Do ..%RunBackgroundMethod("BackgroundTask")
]]></Implementation>
</Method>

<Method name="BackgroundTask">
<Description>
This is an example of a task that is run in the background.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do ..%SetBackgroundMethodStatus("Started",0)

	#; simulated background task
	For n = 1:1:10 {
		Do ..%SetBackgroundMethodStatus("Running",n*10)
		Hang 1
	}
	Do ..%EndBackgroundMethod()
]]></Implementation>
</Method>

<Method name="%OnMonitorBackgroundTask">
<Description>
This server-side callback method is called whenever the client
calls to monitor the current background task.
Typically a subclass uses this to send back JavaScript to update
a progress bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTaskID:%String,pStatus:%String,pPercentComplete:%Float</FormalSpec>
<Implementation><![CDATA[
	#; write status into HTML component
	Set pMsg = pStatus _ ": " _ +pPercentComplete _ "%"
	&js<
	var html = zenPage.getComponentById('taskStatus');
	html.setProperty('content','#(pMsg)#');
	>
]]></Implementation>
</Method>

<Method name="%OnFinishBackgroundTask">
<Description>
This server-side callback method is called whenever the client
calls to monitor the current background task and the task is complete.
Typically a subclass uses this to send back JavaScript to update
the page.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTaskID:%String</FormalSpec>
<Implementation><![CDATA[
	#; Clear HTML component
	&js<
	var html = zenPage.getComponentById('taskStatus');
	html.setProperty('content','');
	>
]]></Implementation>
</Method>

<Method name="ontaskHandler">
<Description><![CDATA[
Client-side callback to update task status.<br>
<var>taskInfo</var> is an associative array (object) containing
task status indexed by taskid.]]></Description>
<FormalSpec>taskInfo</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var html = zenPage.getComponentById('taskStatus');
	if (null == taskInfo) {
		// no tasks
		html.setProperty('content','');
	}
	else {
		// get task info
		var msg = '';
		for (task in taskInfo) {
			msg += 'Task: ' + task + ': ' + taskInfo[task] + '<br>';
		}
		html.setProperty('content',msg);
	}
]]></Implementation>
</Method>

<Method name="methodMixed">
<Description>
Test of intermixed Synch and Asynch methods</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.ServerAsynch(1);
	this.ServerAsynch(2);
	alert(this.ServerSynch(1));
	this.ServerAsynch(3);
	this.ServerAsynch(4);
]]></Implementation>
</Method>

<Method name="ServerAsynch">
<Description>
test</Description>
<FormalSpec>x:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	&js<alert('This is an asynchronous method: #(x)#');>
]]></Implementation>
</Method>

<Method name="ServerSynch">
<Description>
test</Description>
<FormalSpec>x:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	Quit "This is a synchronous method: " _ x
]]></Implementation>
</Method>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.SVGBrowser">
<Description>
This page uses the SVG Owner Draw component to create a 
simple object browser.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60350,38020.475541</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Zen Visual Navigator</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Property name="currItemId">
<Description>
Id of current item in the diagram.</Description>
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="ID"/>
</Property>

<Property name="lastItemId">
<Description>
Id of last visited item in the diagram.</Description>
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
#cityForm {
	background: #404040;
	background-image: url(images/grad-gray-10x500.png);
	background-repeat: repeat-x;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Zen Visual Navigator Demo">
<demo:demoTitle id="title" title="Zen Visual Navigator"/>
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Visual Navigator" title="Visual Navigator Demo" />
</locatorBar>

<hgroup>
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates the following features:">
<demo:bullet text="Using the SVG userDraw component to create rich graphics" />
<demo:bullet text="Use of server-side methods to update the diagram" />
</demo:sidebar>
</vgroup>

<vgroup valign="top">
<svgFrame id="svgFrame" layout="vertical"
	height="500" width="500" zoomWithWheel="true">
<ownerDraw id="diagram"
	height="500" width="500"
	onrender="zenPage.drawDiagram(zenThis);"/>
</svgFrame>
</vgroup>
<vgroup valign="top">

<form id="cityForm" 
	width="100%" 
	layout="vertical" 
	cellStyle="padding: 4px; padding-left: 5px; padding-right: 5px;" 
	groupStyle="border:1px solid black;">
<titleBox title="City Statistics" titleStyle="background: #CCCCFF;" containerStyle="padding: 0px;" />
<spacer height="5"/>

<text label="Name:" id="Name" name="Name" size="20" readOnly="true"/>
<text label="Population:" id="Population" name="Population" size="20" readOnly="true"/>
<label id="Status" label="Status:" value="OK"/>
</form>

</vgroup>

</hgroup>
</page>
]]></Data>
</XData>

<Method name="selectItem">
<Description>
Update contents of Owner-draw svg component.</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.lastItemId = this.currItemId;
	this.currItemId = id;

	var svg = zenPage.getComponentById('diagram');
	svg.render();
]]></Implementation>
</Method>

<Method name="drawDiagram">
<Description>
Owner-draw notification for diagram component.</Description>
<FormalSpec>svg</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.getComponentById('Status').setValue('loading');

	// Get new contents from the server
	this.GetDiagramContents(this.currItemId, this.lastItemId,svg.index);
]]></Implementation>
</Method>

<Method name="GetDiagramContents">
<Description>
Execute server-logic to get SVG contents for Owner-draw component.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String,pLastID:%String,pIndex:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; construct a model
	Do ..CreateModel(pID, .tModel)

	#; draw the model
	Do ..CreateDiagram(pIndex, .tModel, pLastID)

	#; update form
	Set tName = pID
	Set tPop = +$G(tModel("Population"))
	&js<
		zenPage.getComponentById('Name').setValue('#(tName)#');
		zenPage.getComponentById('Population').setValue('#(tPop)#');
		zenPage.getComponentById('Status').setValue('OK');
	>
]]></Implementation>
</Method>

<Method name="CreateModel">
<Description>
Create an array that describes the model to be diagrammed.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String,*pModel</FormalSpec>
<Implementation><![CDATA[
	#; make sure we have data
	If '$D(^SVGBrowser) {
		Do ..BuildData()
	}

	#; if no id, find first item and use that
	If (pID = "") {
		Set pID = $O(^SVGBrowser(""))
	}

	#; make sure id exists
	If '$D(^SVGBrowser(pID)) {
		Quit
	}

	#; top node
	Set pModel("id") = pID
	Set pModel("Population") = +$G(^SVGBrowser(pID))
	
	#; child nodes: walk down ^SVGBrowser global
	Set n = 0
	Set key = $O(^SVGBrowser(pID,""))
	While (key '= "") {
		#; note that id and label are the same in this case
		Set n = n + 1
		Set pModel("ch",n) = ""
		Set pModel("ch",n,"id") = key
		Set pModel("ch",n,"label") = key

		#; how many connections does this item have?
		Set c = 0
		Set k2 = $O(^SVGBrowser(key,""))
		While (k2 '= "") {
			Set c = c + 1
			Set k2 = $O(^SVGBrowser(key,k2))
		}

		Set:c>1 pModel("ch",n,"count") = c - 1

		Set key = $O(^SVGBrowser(pID,key))
	}
]]></Implementation>
</Method>

<Method name="CreateDiagram">
<Description>
Given a simple model, draw it by sending
JavaScript back to the client.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIndex:%Integer,&pModel,pLastID:%String=""]]></FormalSpec>
<Implementation><![CDATA[
	#; get the svg component
	&js<var svg = zenPage.getComponent(#(pIndex)#);>

	#; get size of model (number of children)
	Set tSize = $O(pModel("ch",""),-1)

	Set tWidth = 500
	Set tHeight = 500
	Set tRadius = 100
	
	#; in some case, slide over line from label to center
	Set adj = $S(tSize#4=0:45,1:0)	

	#; execute JS to create contents
	#; background
	&js<
		var rect = svg.document.createElementNS(SVGNS,'rect');
		rect.setAttribute('x',0);
		rect.setAttribute('y',0);
		rect.setAttribute('width',#(tWidth)#);
		rect.setAttribute('height',#(tHeight)#);
		rect.setAttribute('style','fill: url(#glow-blueDiag); stroke: gray; stroke-width: 1;');
		svg.svgGroup.appendChild(rect);

		// connector to main label
		var line = svg.document.createElementNS(SVGNS,'line');
		line.setAttribute('x1',#(tWidth/2)#);
		line.setAttribute('y1',#(tHeight/2)#);
		line.setAttribute('x2',#((tWidth/2)-adj)#);
		line.setAttribute('y2',#(28)#);
		line.setAttribute('style','#("fill: none; stroke: black; stroke-width: 2; stroke-dasharray: 4,4;")#');
		svg.svgGroup.appendChild(line);

		// main label
		var text = svg.document.createElementNS(SVGNS,'text');
		text.setAttribute('x',#((tWidth/2)-adj)#);
		text.setAttribute('y',#(25)#);
		text.setAttribute('style','fill: yellow; stroke: none; font-size: 18pt; font-weight: bold;');
		text.setAttribute('text-anchor','middle');

		var textNode = svg.document.createTextNode('#($G(pModel("id")))#');
		text.appendChild(textNode);

		svg.svgGroup.appendChild(text);

		// set up group for coord space
		var group = svg.document.createElementNS(SVGNS,'g');
		group.setAttribute('transform','translate(#(tWidth/2)#,#(tHeight/2)#)');
		svg.svgGroup.appendChild(group);
	>

	#; items

	#; first, draw connectors
	If (tSize > 0) {
		For n = 1:1:tSize {
			Set tAngle = (n-1) * (($ZPI*2)/tSize)
			Do ..DrawConnector(tAngle,+$G(pModel("ch",n,"count")))
		}
	}


	#; main item
	Set id = $G(pModel("id"))
	Do ..DrawItem(id,"main")

	#; related items
	If (tSize > 0) {
		For n = 1:1:tSize {
			Set id = $G(pModel("ch",n,"id"))
			Set label = $G(pModel("ch",n,"label"))
			Set tAngle = (n-1) * (($ZPI*2)/tSize)
			Set tType = $S(pLastID=id:"last",1:"link")
			Do ..DrawItem(id,tType,tAngle,label)
		}
	}

	Quit
]]></Implementation>
</Method>

<Method name="DrawConnector">
<Description>
Create svg for a specific connector in the diagram</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pAngle:%Float,pCount:%Integer=0</FormalSpec>
<Implementation><![CDATA[
	Set tRadius = 100
	Set x = $zcos(pAngle) * tRadius
	Set y = $zsin(pAngle) * tRadius

	&js<
		var line = svg.document.createElementNS(SVGNS,'line');
		line.setAttribute('x1',0);
		line.setAttribute('y1',0);
		line.setAttribute('x2',#(+x)#);
		line.setAttribute('y2',#(+y)#);
		line.setAttribute('style','#("fill: none; stroke: black; stroke-width: 2;")#');
		group.appendChild(line);
	>

	For n = 1:1:pCount {
		
		Set range = (pCount-1) * 10
		
		Set off = (((n-1) * (range/pCount)) - (range/2)) * ($ZPI/180)
		Set a = pAngle + off
		Set x2 = x + ($zcos(a) * 60)
		Set y2 = y + ($zsin(a) * 60)
		
		&js<
			var line = svg.document.createElementNS(SVGNS,'line');
			line.setAttribute('x1',#(+x)#);
			line.setAttribute('y1',#(+y)#);
			line.setAttribute('x2',#(+x2)#);
			line.setAttribute('y2',#(+y2)#);
			line.setAttribute('style','#("fill: none; stroke: red; opacity: 0.9; stroke-width: 1; stroke-dasharray: 2,4;")#');
			group.appendChild(line);
		>
	}
]]></Implementation>
</Method>

<Method name="DrawItem">
<Description>
Create svg for a specific item in the diagram</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String,pType:%String,pAngle:%Float=0,pLabel:%String=""</FormalSpec>
<Implementation><![CDATA[
	Set tRadius = 100
	If (pType = "main") {
		Set x = 0
		Set y = 0
		Set tFill = "url(#glow-yellow)"
		Set tSize = 18
	}
	ElseIf (pType = "last") {
		Set x = $zcos(pAngle) * tRadius
		Set y = $zsin(pAngle) * tRadius
		Set tFill = "url(#glow-orange)"
		Set tSize = 12
	}
	Else {
		Set x = $zcos(pAngle) * tRadius
		Set y = $zsin(pAngle) * tRadius
		Set tFill = "url(#glow-green)"
		Set tSize = 10
	}

	&js<
		var item = svg.document.createElementNS(SVGNS,'circle');
		item.setAttribute('r',#(tSize)#);
		item.setAttribute('cx',#(+x)#);
		item.setAttribute('cy',#(+y)#);
		item.setAttribute('style','#("stroke: black; stroke-width: 2;")#');
		item.setAttribute('fill','#(tFill)#');

		item.addEventListener('click',new Function('evt','return zenPage.selectItem("#(pID)#");'),false);

		item.addEventListener('mouseover',new Function('evt','evt.target.setAttribute("fill","url(#glow-purple)");'),false);
		item.addEventListener('mouseout',new Function('evt','evt.target.setAttribute("fill","#(tFill)#");'),false);
		group.appendChild(item);
	>

	If ((pType '= "main") && (pLabel '= "")) {
		Set tx = $zcos(pAngle) * (tRadius+20)
		Set ty = $zsin(pAngle) * (tRadius+20)
		
		Set tAnchor = $S((tx<2)&&(tx>-2):"middle",tx>0:"start",1:"end")
		Set yadj = $S(ty>=0:4,1:-2)
		
		&js<
			var text = svg.document.createElementNS(SVGNS,'text');
			text.setAttribute('x',#(+tx)#);
			text.setAttribute('y',#(+ty+yadj)#);
			text.setAttribute('style','#("fill: yellow; stroke: none; font-size: 12pt; font-weight: bold;")#');
			text.setAttribute('text-anchor','#(tAnchor)#');
	
			var textNode = svg.document.createTextNode('#(pLabel)#');
			text.appendChild(textNode);
	
			group.appendChild(text);
		>
	}
]]></Implementation>
</Method>

<Method name="BuildData">
<Description>
Build sample data for the browser</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#; we will create a multi-dimensional array to hold related cities

	#; kill old data
	Kill ^SVGBrowser
	
	#; create list of cities
	Set tCount = 0
	For i=1:1:50 {
		Set tCity = ##class(%PopulateUtils).City()
		If ('$D(tCityList(tCity))) {
			Set tCount = tCount + 1
			Set tCityList(tCity) = tCount
			Set tCityIndex(tCount) = tCity
		}
	}
	
	#; create connections
	Set n = $O(tCityIndex(""))
	While (n '= "") {
		Set tFrom = tCityIndex(n)
		Set ^SVGBrowser(tFrom) = $R(1000000) // population
		
		Set tConnects = $R(4) + $R(8)
		For c=1:1:tConnects {
			Set idx = $R(tCount)+1
			If (idx '= n) {
				Set tTo = $G(tCityIndex(idx))
				If (tTo '= "") {
					Set ^SVGBrowser(tFrom,tTo) = ""
					Set ^SVGBrowser(tTo,tFrom) = ""
				}
			}
		}
		Set n = $O(tCityIndex(n))
	}
]]></Implementation>
</Method>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>
</Class>


<Class name="ZENDemo.SnapGridDemo">
<Description>
This is the SnapGrid Demonstration page for the Zen demonstration application.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>62627,51397.765387</TimeChanged>
<TimeCreated>60348,35107.52354</TimeCreated>
<LegacyInstanceContext>1</LegacyInstanceContext>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENDemo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>SnapGrid Demo</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENDEMO</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

.zenLabel {
	font-size: 0.8em;
}

.svgFrame {
	border:0px solid black;
}

.dragChildren {
	overflow:hidden;
}

.dragGroup {
	border:0px solid black;
	margin:0px;
}

.snapGridWallpaper {
	background:#C0FFEE;
}

#snapGrid {
	border: 1px solid black;
	width: 90%;
	height: 550px;
	background: black;
}

#dgCalendar {
	background: #000000;
}

table.calendar {
	font-size: 10px;
}

table.calendarOutline {
	margin-left:auto;
	margin-right:auto;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" 
	title="Zen SnapGrid Demo">
<demo:demoTitle id="title" title="SnapGrid Demonstration"/>
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="SnapGrid Demo" title="SnapGrid Demo" />
</locatorBar>

<hgroup valign="top">
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates Zen's snapGrid layout manager">
<demo:bullet text="A snapGrid is a specialized group that allows the user to drag and position its child dragGroup components within a fixed matrix of rows and columns."/>
<demo:bullet text="The snapGrid component supports interactive layout changes via mouse drag operations. DragGroups may be rearranged, resized or removed at will while in dynamic (edit) mode."/>
<demo:bullet text="The behavior of the snapGrid component is intended to create a tiled effect when in static mode.  DragGroups may overlap, but in static mode, the user has no way of revealing obscured window bits."/>
<demo:bullet text="The designer can specify up to two static layouts for the component, one for portrait and one for landscape presentation. If multiple layouts are specified the widget will select the one most apropos for the current geometry."/>
<demo:bullet text="The dragGroups are automatically restyled to reflect static versus dynamic mode for maximum use of screen real estate in static mode."/>
</demo:sidebar>
</vgroup>

<spacer width="20"/>
<vgroup cellVAlign="top" width="100%">
<hgroup>
<button caption="Update" onclick="zenPage.updateData();"/>
<button caption="Remove Headers" onclick="zenPage.removeHeaderStyles();"/>
<button caption="Restyle Headers" onclick="zenPage.restyleHeaderStyles();"/>
<button caption="Reset Headers" onclick="zenPage.resetHeaderStyles();"/>
<button caption="Add Column" onclick="zenPage.addColumn();"/>
<button caption="Remove Column" onclick="zenPage.removeColumn();"/>
<button caption="Add Row" onclick="zenPage.addRow();"/>
<button caption="Remove Row" onclick="zenPage.removeRow();"/>
<!--
<button caption="Force Narrow" onclick="zenPage.forceNarrow();"/>
-->
</hgroup>
<snapGrid id="snapGrid" cols="4" rows="4" >

<dragGroup id="dgCalendar" header="Calendar" onwindowgrab="zenPage.trackFocusWindow(zenThis);"
homeCol="0"  homeRow="0" colSpan="1" rowSpan="1" >
<calendar width="100%" height="100%" enclosingStyle="font-size:10px;"/>
</dragGroup>
<dragGroup id="dgChart" header="Chart" onresize="zenPage.resizeChart();"  onwindowgrab="zenPage.trackFocusWindow(zenThis);"
homeCol="1"  homeRow="0" colSpan="3" rowSpan="4" >
 <svgFrame id="svgChartFrame" 
	width="250px" 
	height="250px" 
	zoom="100"
	backgroundStyle="fill: black;"
	layout="horizontal">
<lineChart id="chart" 
	width="250" 
	height="250"
	title="Zen Chart"
	backgroundStyle="fill: black;"
	plotAreaStyle="fill: url(#glow-blueDiag);"
	plotStyle="stroke: black;"
	seriesColors="url(#glow-yellow)"
	seriesCount="1"
	seriesSize="12"
	marginRight="5"
	chartFilled="true"
	ongetData="return zenPage.getChartData(series);"
	ongetLabelX="return zenPage.getChartLabelX(value);"
	>
<yAxis id="yAxis"
	baseValue="0"
	minValue="-40" 
	maxValue="125" 
	majorUnits="25"
	minorUnits="5"
	title="Requests"
	minorGridLines="true"/>
</lineChart>
</svgFrame>
</dragGroup>

<dragGroup id="dgSpeed1" header="Speed1" onresize="zenPage.resizeMeter(1);"  onwindowgrab="zenPage.trackFocusWindow(zenThis);"
homeCol="0" homeRow="1" colSpan="1" rowSpan="1" >
 <svgFrame id="svgSpeed1Frame" 
	width="250px" 
	height="250px" 
	zoom="100"
	frameStyle="border-style:none;"
	backgroundStyle="fill: black;"
	layout="horizontal">
<speedometer id="speed1" 
	label="Important"
	animate="true"
	labelStyle="fill: yellow;"
	lowLampColor="url(#glow-green)"
	rangeUpper="100" width="250px" height="250px"/>
</svgFrame>
</dragGroup>

<dragGroup id="dgSpeed2" header="Speed2" onresize="zenPage.resizeMeter(2);" onwindowgrab="zenPage.trackFocusWindow(zenThis);"
homeCol="0" homeRow="2" colSpan="1" rowSpan="1" >
 <svgFrame id="svgSpeed2Frame" 
	width="250px" 
	height="250px" 
	zoom="100"
	frameStyle="border-style:none;"
	backgroundStyle="fill: black;"
	layout="horizontal">
<speedometer id="speed2" 
	label="Urgent"
	animate="true"
	labelStyle="fill: yellow;"
	lowLampColor="url(#glow-green)"
	rangeUpper="100" width="250" height="250"/>
</svgFrame>
</dragGroup>

<dragGroup id="dgSpeed3" header="Speed3" onresize="zenPage.resizeMeter(3);" onwindowgrab="zenPage.trackFocusWindow(zenThis);"
homeCol="0" homeRow="3" colSpan="1" rowSpan="1" >
 <svgFrame id="svgSpeed3Frame" 
	width="250px" 
	height="250px" 
	zoom="100"
	frameStyle="border-style:none;"
	backgroundStyle="fill: black;"
	layout="horizontal">
<speedometer id="speed3" 
	label="Overdue!"
	animate="true"
	labelStyle="fill: yellow;"
	lowLampColor="url(#glow-green)"
	rangeUpper="100" width="250" height="250"/>
</svgFrame>
</dragGroup>
</snapGrid>
</vgroup>
</hgroup>

</page>
]]></Data>
</XData>

<Method name="addColumn">
<Description>
Add a layout column to the abstract grid </Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.cols++;
	var g = zen("snapGrid");
	g.setProperty("cols",zenPage.cols);
	this.showCurrentGrid();
]]></Implementation>
</Method>

<Method name="removeColumn">
<Description>
Remove a layout column to the abstract grid </Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (zenPage.cols<2) return;
	zenPage.cols--;
	var g = zen("snapGrid");
	g.setProperty("cols",zenPage.cols);
	this.showCurrentGrid();
]]></Implementation>
</Method>

<Method name="addRow">
<Description>
Add a row to the underlying abstract grid</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.rows++;
	var g = zen("snapGrid");
	g.setProperty("rows",zenPage.rows);
	this.showCurrentGrid();
]]></Implementation>
</Method>

<Method name="removeRow">
<Description>
Remove a row to the underlying abstract grid</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (zenPage.rows<2) return;
	zenPage.rows--;
	var g = zen("snapGrid");
	g.setProperty("rows",zenPage.rows);
	this.showCurrentGrid();
]]></Implementation>
</Method>

<Method name="showCurrentGrid">
<Description>
Make a poor man's grid to show the drop zones and add it to the wallpaper</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var r = zenPage.rows;
	var c = zenPage.cols;
	var vPercent = 100/r;
	var hPercent = 100/c;
	var h = [];
	for (var i=1;i<r;i++) {
		h.push("<div style='width:100%;height:1px;position:absolute;top:"+(vPercent*i)+"%;left:0px;background:black;'></div>");
	}
	for (var i=1;i<c;i++) { 
		h.push("<div style='height:100%;width:1px;position:absolute;left:"+(hPercent*i)+"%;top:0px;background:black;'></div>");
	}
	var g = zen("snapGrid");
	var m = g.getGroupManager();
	var w = m.getWallpaperDiv();
	w.innerHTML = h.join(" ");
]]></Implementation>
</Method>

<Method name="resizeChart">
<Description>
Method to get the SVG chart to scale accordingly each time its parent Drag Group is resized</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var dragWin = zen("dgChart");
	if (dragWin.isResizeInProgress()) return; // wait for last event
	var h = dragWin.getWindowHeight()+1;
	if (h<2) return;
	var w = dragWin.getWindowWidth()+2;
	if (w<3) return;
	var svgWin = zen("svgChartFrame");
	svgWin.setProperty("width",w+"px");
	svgWin.setProperty("height",h+"px");
	var chart = zen("chart");
	chart.setProperty("width",w);
	chart.setProperty("height",h);
]]></Implementation>
</Method>

<Method name="dumpObj">
<FormalSpec>obj</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	ZLM.cerr(obj.id+":");
	ZLM.cerr("Home row: "+obj.homeRow);
	ZLM.cerr("Home column: "+obj.homeCol);
	ZLM.cerr("Row Span: "+obj.rowSpan);
	ZLM.cerr("Col Span: "+obj.colSpan);
]]></Implementation>
</Method>

<Method name="resizeMeter">
<Description>
Method to get the SVG meters to resize proportionally each time their parent Drag Group 
window is resized</Description>
<FormalSpec>n</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var dragWin = zen("dgSpeed"+n);
	if (dragWin.isResizeInProgress()) return; // wait for last event
	var h = dragWin.getWindowHeight()+1;
	if (h<2) return;
	var w = dragWin.getWindowWidth()+2;
	if (w<3) return;
	var svgWin = zen("svgSpeed"+n+"Frame");
	svgWin.setProperty("width",w+"px");
	svgWin.setProperty("height",h+"px");
	var meter = zen("speed"+n);
	meter.setProperty("width",w);
	meter.setProperty("height",h);
]]></Implementation>
</Method>

<Method name="restyleHeaderStyles">
<Description>
Use the snapGrid's broadcast capabilities to restyle all active drag groups to make
a more static, but zoom-able dashboard.  With the restyled headers the user can no longer
move windows around but can still elect to maximize individual windows by clicking on their
title bars</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var g = zen("snapGrid");
	g.broadcast("removeDragHeader");
	g.broadcast("disableResize");
	g.broadcast("enableHeaderMaxToggle");
	g.broadcast("setHeaderStyle","{'height':'16px','overflow':'hidden','borderBottom':'2px solid #ffff55','color':'#ffff55','background':'#000000','font':'bold 12px sans-serif' }");
	g.broadcast("setHeaderLayout","T");
	g.broadcast("resize");
	zenPage.headerMode = "simple";
]]></Implementation>
</Method>

<Method name="removeHeaderStyles">
<Description>
Use the snapGrid's broadcast capabilities to remove the drag handles on all active drag groups 
to make a truly static-layout, read-only dashboard</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var g = zen("snapGrid");
	g.broadcast("removeDragHeader");
	zenPage.headerMode = "none";
]]></Implementation>
</Method>

<Method name="resetHeaderStyles">
<Description>
Restore all drag group headers to factory settings, restoring dragging and resizing ability
as well.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var g = zen("snapGrid");
	g.broadcast("setHeaderLayout","CIFT");
	g.broadcast("disableHeaderMaxToggle");
	g.broadcast("setHeaderStyle","{'color':'','background':'url(\"images/grayDragHeader.png\") repeat-x scroll 0 0 #23242C','font':'bold 14px sans-serif'}");
	g.broadcast("restoreDragHeader");
	zenPage.focusWindow = null;
	zenPage.headerMode = "full";
]]></Implementation>
</Method>

<Method name="styleFocusHeader">
<Description>
Paint the last active drag window a slightly different color</Description>
<FormalSpec>div</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var h = div.zenObj.getHeaderDiv();
	h.style.backgroundImage = 'url("images/btngradient.png")';
]]></Implementation>
</Method>

<Method name="styleNormalHeader">
<Description>
Restore original coloring of the given drag window</Description>
<FormalSpec>div</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var h = div.zenObj.getHeaderDiv();
	h.style.background = "";
]]></Implementation>
</Method>

<Method name="GetQuickLinks">
<Description>
Return an array of quick links to be displayed by the locator bar.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pLinks</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
]]></Implementation>
</Method>

<Method name="onresizeHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sg = zen("snapGrid");
	sg.forceRefresh();
]]></Implementation>
</Method>

<Method name="forceNarrow">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sg = zen("snapGrid");
	sg.setProperty("width","50%");
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
Initialize the display and set a few status variables for internal operations</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var div = document.getElementById("snapGrid");
	div.style.overflow="hidden";
	zenPage.resizeAll();
	zenPage.rows = 4;
	zenPage.cols = 4;
	zenPage.headerMode = "full";
	zenPage.focusWindow = null;

	var sg = zen("snapGrid");
	sg.forceRefresh();
]]></Implementation>
</Method>

<Method name="trackFocusWindow">
<Description>
Log which drag window was touched last and style the drag header accordingly</Description>
<FormalSpec>who</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var div = who.getEnclosingDiv();
	if (zenPage.focusWindow && zenPage.focusWindow.parentNode) zenPage.styleNormalHeader(zenPage.focusWindow);
	zenPage.focusWindow = div;
	zenPage.styleFocusHeader(div);
]]></Implementation>
</Method>

<Method name="resizeAll">
<Description>
Use the snapGrid's broadcast feature to ensure that all drag groups are making optimum 
use of their available space.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var g = zen("snapGrid");
	g.broadcast("resize");
]]></Implementation>
</Method>

<Method name="updateData">
<Description>
Update components to show new data</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var chart = this.getComponentById("chart");
	zenASSERT(chart,"Unable to find chart",arguments);
	chart.updateChart();

	this.getComponentById("speed1").setValue(Math.random() * 100);
	this.getComponentById("speed2").setValue(Math.random() * 100);
	this.getComponentById("speed3").setValue(Math.random() * 100);
]]></Implementation>
</Method>

<Method name="getNewChartData">
<Description>
Server-side method to calculate new chart data</Description>
<ClassMethod>1</ClassMethod>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set pts = 12
	Set data = ""
	For n = 1:1:pts {
		Set data = data _ $S(data="":"",1:":") _ $R(1000)
	}

	&js<zenPage.updateChart('#(data)#');>
]]></Implementation>
</Method>

<Method name="getChartData">
<Description>
Callback to provide data for chart.</Description>
<FormalSpec>series</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// generate random data
	// cache it in a local property
	var chart = zenPage.getComponentById('chart');
	if (null == this._data) {
		this._data = new Array(chart.seriesSize);
	}

	// slide data over; generate new value at end
	var value = 50;
	for (var i = 0; i < chart.seriesSize; i++) {
		var x = this._data[i+1];
		if (null != x) {
			value = x;
		}
		else {
			// at end or first-time
			if (Math.random() > 0.9) {
				value += (Math.random() * 50) - 30;
			}
			else {
				value += (Math.random() * 20) - 9;
			}
		}
		this._data[i] = value;
	}

	return this._data;
]]></Implementation>
</Method>

<Method name="getChartLabelX">
<Description>
Callback to provide labels for chart.</Description>
<FormalSpec>val</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// convert val to time-of-day
	var hour = (parseInt(val) + 8) % 12;
	
	if (hour == 0) {
		return '12pm';
	}
	else if (hour >=8) {
		return hour + 'am';
	}

	return hour + 'pm';
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.Address">
<Description>
Simple example of an embedded class that is also a DataModel.</Description>
<Super>%SerialObject,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60555,53324.051819</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="City">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="State">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2"/>
</Property>

<Property name="Zip">
<Type>%String</Type>
<Parameter name="MAXLEN" value="15"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>AddressState</State>
<StreamLocation>^ZENMVC.AddressS</StreamLocation>
<Data name="AddressState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>City</Value>
</Value>
<Value name="2">
<Value>State</Value>
</Value>
<Value name="3">
<Value>Zip</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ZENMVC.CRUDTemplate">
<Description><![CDATA[
Example of a CRUD (create, read, update, delete) base class.<br/>
This class provides a basic template for the look and feel of a
series of data entry pages.<br/>
To use:
<ol>
<li>Create a subclass of this template class,</li>
<li>Set the MODELCLASS parameter to the name of your DataModel class,</li>
<li>Set the LOOKUPTABLE parameter to the SQL table name used to show the pick list of objects,</li>
<li>Set the LOOKUPCOLUMN parameter (default is "Name") to the SQL column name used in the pick list</li>
</ol>]]></Description>
<Abstract>1</Abstract>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60650,61623.675778</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENMVC.MVCApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Parameter name="MODELCLASS">
<Description>
Name of MVC DataModel class that supplies data for the form.</Description>
<Type>STRING</Type>
</Parameter>

<Parameter name="LOOKUPTABLE">
<Description>
SQL name of table that provides contents of the lookup table.</Description>
<Type>STRING</Type>
</Parameter>

<Parameter name="LOOKUPCOLUMN">
<Description>
SQL name of column to display withn the lookup table.</Description>
<Type>STRING</Type>
<Default>Name</Default>
</Parameter>

<Property name="ObjectID">
<Description>
ID of object to edit.
This can be passed in as a URL parameter.</Description>
<Type>%String</Type>
<Parameter name="ZENURL" value="ID"/>
</Property>

<Property name="ModelClass">
<Description>
Holds the name of the model class.
This should be set to the name of a DataModel class.</Description>
<Type>%String</Type>
<InitialExpression>..#MODELCLASS</InitialExpression>
</Property>

<Property name="LookupTable">
<Description>
Holds the name of the lookup table.
This should be the name of an SQL table.</Description>
<Type>%String</Type>
<InitialExpression>..#LOOKUPTABLE</InitialExpression>
</Property>

<Property name="LookupColumn">
<Description>
Holds the name of the lookup column.
This should be the name of a column within the lookup table.</Description>
<Type>%String</Type>
<InitialExpression>..#LOOKUPCOLUMN</InitialExpression>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

/* style for title bar */
#title {
	background: #404040;
	background-image: url(images/grad-gray-10x500.png);
	background-repeat: repeat-x;
	border-bottom: 1px solid black;
	text-align: center;
}

#titleBox {
	color: #202020;
	border: none;
	font-family: Arial;
	font-size: 20pt;
	font-weight: bold;
}

#navBar .tnbrTable {
	width: 500px;
}

#pickList {
	width: 500px;
}

.CRUDTemplate-title-text {
	color: #202020;
	font-family: Arial;
	font-size: 2.0em;
	font-weight: bold;
	padding: 5px;
	padding-left: 50px;
}

.CRUDTemplate-subtitle-text {
	font-size: 8pt;
}

#formGroup {
	border: 1px solid black;
	padding: 0px;
	background: #C0C0C0;
	background-image: url(images/grad-halfgray-10x500.png);
	background-repeat: repeat-x;
}

#btnGroup {
	padding: 2px;
}

.zenLabel {
	font-family: arial;
	font-weight: bold;
}

/* Input box of combobox. */
.comboboxInput {
	border: blue 1px solid;
}

a.radioSetCaption,span.checkboxCaption {
}

/* Table around navigator bar. */
.tnbrTable {
}


</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo">
<demo:demoTitle id="title" title="MVC Form Template Demonstration"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="MVC Template Form" title="MVC Form Template Demo" />
</locatorBar>
<hgroup>
<vgroup valign="top">
<demo:sidebar text="This page demonstrates the following features:">
<demo:bullet text="Using a base template class to define a set of common behaviors." />
<demo:bullet text="Creating a simple form page by creating a subclass of the template class and supplying some parameter values." />
<demo:bullet text="You can use the filter box at the top of the item list to filter the set of choices." />
</demo:sidebar>
</vgroup>
<vgroup valign="top">
<spacer height="20"/>
<hgroup cellVAlign="top">
<spacer width="20"/>
<vgroup>
<tableNavigatorBar id="navBar" tablePaneId="pickList"/>
<tablePane id="pickList" tableName="#(%page.LookupTable)#"
caption="Items"
useKeys="true" 
useSnapshot="true" 
showZebra="true"
showQuery="false"
showFilters="true"
showRowNumbers="true"
valueColumn="ID"
pageSize="15"
maxRows="5000"
headerLayout="headersOnTop"
onselectrow="zenPage.rowSelected(zenThis,which);">
<column colName="ID" hidden="true"/>
<column id="displayColumn" 
colName="#(%page.LookupColumn)#" 
filterType="text" width="200"/>
</tablePane>
</vgroup>
<spacer width="10"/>
<vgroup id="formGroup">
<dataController id="controller" modelClass="#(%page.ModelClass)#" modelId="#(%page.ObjectID)#"/>
<dynaForm id="form" controllerId="controller" labelPosition="left"
cellStyle="padding: 3px;">
<titleBox id="titleBox" title="#(%page.title)#" titleStyle="border:none;" />
</dynaForm>
<hgroup id="btnGroup" cellAlign="right" width="100%">
<button id="btnNew" caption="New" title="Create a new item" onclick="zenPage.newItem();"/>
<spacer width="10"/>
<button id="btnSave" caption="Save" title="Save the current item" onclick="zenPage.saveItem();"/>
<spacer width="10"/>
<button id="btnCancel" caption="Cancel" title="Cancel the current edit operation" onclick="zenPage.cancelItem();"/>
<spacer width="10"/>
<button id="btnDelete" caption="Delete" title="Delete the current item" onclick="zenPage.deleteItem();"/>
<spacer width="10"/>
</hgroup>
</vgroup>
</hgroup>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="rowSelected">
<Description><![CDATA[
Row selected in pick list; update controller.
<var>which</var> indicates how this event was fired.]]></Description>
<FormalSpec>table,which</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if ('keypress' == which) {
		// defer this action in case the user is arrowing through a number of items
		var id = table.getValue();
		var action = new Function("zenPage.showObject('"+id+"');"); 
		zenSetDeferredAction(action,200);
	}
	else {
		// select immediately
		var id = table.getValue();
		zenPage.showObject(id);
	}
]]></Implementation>
</Method>

<Method name="showObject">
<Description>
Load the object with the given id into the form.</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('controller');
	controller.setModelId(id);
]]></Implementation>
</Method>

<Method name="newItem">
<Description>
Create a new item to edit.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('controller');
	controller.createNewObject();
]]></Implementation>
</Method>

<Method name="cancelItem">
<Description>
Cancel current edit.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (confirm('Do you wish to cancel the current operation?')) {
		var controller = zenPage.getComponentById('controller');
		var id = controller.getModelId();
		controller.setModelId(id);
	}
]]></Implementation>
</Method>

<Method name="deleteItem">
<Description>
Delete current item from database</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('controller');
	var id = controller.getModelId();

	if ('' == id) {
		alert('Nothing selected to delete.');
	}
	else if (confirm('Do you wish to delete this item?')) {
		controller.deleteId(id);

		var table = zenPage.getComponentById('pickList');
		table.executeQuery();
	}
]]></Implementation>
</Method>

<Method name="saveItem">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zenPage.getComponentById('form');
	form.save();

	// refresh the table
	var table = zenPage.getComponentById('pickList');
	table.executeQuery();
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.ChartDataModel">
<Description>
Sample DataModel used by MVC Chart page.
This model defines a set of values that will be displayed 
by a set of charts (as well as a grid).</Description>
<Super>%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60429,48445.869535</TimeCreated>

<Property name="P1">
<Type>%Integer</Type>
</Property>

<Property name="P2">
<Type>%Integer</Type>
</Property>

<Property name="P3">
<Type>%Integer</Type>
</Property>

<Property name="P4">
<Type>%Integer</Type>
</Property>

<Property name="P5">
<Type>%Integer</Type>
</Property>

<Property name="P6">
<Type>%Integer</Type>
</Property>

<Property name="P7">
<Type>%Integer</Type>
</Property>

<Method name="%OnLoadModel">
<Description>
This callback method does the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set scale = 1
	
	Set ..P1 = $R(100) * scale
	Set ..P2 = $R(100) * scale
	Set ..P3 = $R(100) * scale
	Set ..P4 = $R(100) * scale
	Set ..P5 = $R(100) * scale
	Set ..P6 = $R(100) * scale
	Set ..P7 = $R(100) * scale

	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.ChartDataModel2">
<Description>
Alternate Sample DataModel used by MVC Chart page.
This model defines a set of values that will be displayed 
by a set of charts (as well as a grid).</Description>
<Super>%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60429,48445.869535</TimeCreated>

<Property name="Cars">
<Type>%Integer</Type>
</Property>

<Property name="Trucks">
<Type>%Integer</Type>
</Property>

<Property name="Trains">
<Type>%Integer</Type>
</Property>

<Property name="Airplanes">
<Type>%Integer</Type>
</Property>

<Property name="Ships">
<Type>%Integer</Type>
</Property>

<Method name="%OnLoadModel">
<Description>
This callback method does the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set scale = 100

	#; this model has multiple data series
	#; we set up the data series here

	Set ..%seriesCount = 4
	Set ..%seriesNames(1) = "USA"
	Set ..%seriesNames(2) = "Europe"
	Set ..%seriesNames(3) = "Asia"
	Set ..%seriesNames(4) = "Mars"


	#; now we provide data for each property within each series
	#; We use the %data array so that we can address multiple series

	For n = 1:1:..%seriesCount {
		Set ..%data(n,"Cars") = $R(100) * scale
		Set ..%data(n,"Trucks") = $R(100) * scale
		Set ..%data(n,"Trains") = $R(100) * scale
		Set ..%data(n,"Airplanes") = $R(100) * scale
		Set ..%data(n,"Ships") = $R(100) * scale
	}

	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.FormDataModel">
<Description>
Sample DataModel used by MVC Form page.</Description>
<Super>%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60429,48445.869535</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="ZENGROUP" value="group1"/>
<Parameter name="ZENTITLE" value="This is a name"/>
</Property>

<Property name="SSN">
<Type>%String</Type>
<Parameter name="MAXLEN" value="15"/>
<Parameter name="ZENGROUP" value="group1"/>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="ZENGROUP" value="group1"/>
</Property>

<Property name="State">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2"/>
<Parameter name="ZENGROUP" value="group1"/>
</Property>

<Property name="Memo">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="MaritalStatus">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1"/>
<Parameter name="VALUELIST" value=",S,M,D,W,O"/>
</Property>

<Method name="SSNIsValidJS">
<Description>
JavaScript validation for SSN property</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return (value==666) ? 'invalid SSN' : '';
]]></Implementation>
</Method>

<Method name="%OnNewSource">
<Description>
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[	Quit ##class(ZENDemo.Data.Patient).%New()
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[	Quit ##class(ZENDemo.Data.Patient).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pSource:ZENDemo.Data.Patient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = pSource.%Save()
	Set ..%id = pSource.%Id()
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ##class(ZENDemo.Data.Patient).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
This callback method does the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:ZENDemo.Data.Patient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..Name = pSource.Name
	Set ..SSN = pSource.SSN
	Set ..Memo = pSource.Memo
	Set ..City = pSource.Home.City
	Set ..State = pSource.Home.State
	Set ..MaritalStatus = pSource.MaritalStatus
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
This callback method does the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:ZENDemo.Data.Patient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pSource.Name = ..Name
	Set pSource.SSN = ..SSN
	Set pSource.Memo = ..Memo
	Set pSource.Home.City = ..City
	Set pSource.Home.State = ..State
	Set pSource.MaritalStatus = ..MaritalStatus	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetPropertyInfo">
<Description>
Dynamically modify information about properties contained by this model.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIndex:%Integer,&pInfo:%String,pExtended:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnInvokeAction">
<Description>
Invoke a named action on this dataModel.</Description>
<FormalSpec>pAction:%String,pData:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If (pAction = "log") {
		#; log this action to a global
		Set ^ZENMVC = "time: " _ $ZH _ " id:" _ ..%id
	}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.FormDataModel2">
<Description>
Sample DataModel used by MVC Form page.</Description>
<Super>%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60429,48445.869535</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="SSN">
<Type>%String</Type>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="ZENSQL" value="Select ID,Name,ZIP FROM ZENDemo_Data.City ORDER BY Name,ZIP"/>
<Parameter name="ZENSQLLOOKUP" value="Select Name,ZIP FROM ZENDemo_Data.City WHERE ID = ?"/>
</Property>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[	Quit ##class(ZENDemo.Data.Patient).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pSource:ZENDemo.Data.Patient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit pSource.%Save()
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
This callback method does the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:ZENDemo.Data.Patient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..Name = pSource.Name
	Set ..SSN = pSource.SSN
	Set ..City = pSource.Home.City
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
This callback method does the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:ZENDemo.Data.Patient</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pSource.Name = ..Name
	Set pSource.SSN = ..SSN
	Set pSource.Home.City = ..City
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.MVCApplication">
<Description>
Application definition for ZENMVC test pages.</Description>
<Super>%ZEN.application</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60160,40061.551706</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Zen MVC Test Suite</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>ZENMVC.MVCMasterDetail.cls</Default>
</Parameter>

<XData name="Style">
<Description>
example of customized style sheet for application</Description>
<Data><![CDATA[
<style type="text/css">
/* default body style */
body {
	font-family: arial;
	background: #F0F0F0;
}

/* descriptive text */
#description {
	color: black;
	font-size: 1.2em;
	padding: 5px;
	padding-top: 10px;
	padding-bottom: 10px;
}

#description:first-letter {
	font-size: 1.5em;
}

.locatorBarTable td {
	background: rgb(47,98,128);
	background-image: none;
	border-bottom: 1px solid darkblue;
	padding-bottom: 1px;
	color: white;
}

.locatorBarLinks {
	color: white;
}

.locatorBarLinks a {
	color: white;
}

.locatorBarLinks a:visited {
	color: white;
}

.locatorBarSelect {
	color: white;
}

.locatorBarLinks a:hover {
	color: red;
	background: #FFFAE7;
}

#intro {
	font-family: arial;
	color: darkblue;
	font-size: 1.2em;
	margin: 10px;
}

/* Column labels for dynaGrid. */
table.dynaGrid th.dynaGridLabel,
table.dynaGrid th.dynaGridRow,
table.dynaGrid th.dynaGridColumn {
	color: black;
	background: #404040;
	background-image: url(images/grad-gray-10x100.png);
	background-repeat: repeat-x;
}

table.dynaGrid th.dynaGridLabel:hover,
table.dynaGrid th.dynaGridRow:hover,
table.dynaGrid th.dynaGridColumn:hover {
	color: white;
	background: #F0F0F0;
	background-image: url(images/grad-gray2-10x100.png);
	background-repeat: repeat-x;
}

/* descriptive text */
.msg {
	font-size: 0.8em;
	color: darkblue;
	width: 500px;
	padding-top: 3px;
	padding-bottom: 10px;
}

.msg:first-letter {
	font-size: 0.9em;
	font-weight: bold;
}

</style>
]]></Data>
</XData>
</Class>


<Class name="ZENMVC.MVCChart">
<Description>
Model-View-Controller demo page.
This page uses the Zen MVC mechanism to connect data to several charts.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENMVC.MVCApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>MVC Chart Page</Default>
</Parameter>

<XData name="Style">
<Description>
Domain used for localization.
Parameter DOMAIN = "";</Description>
<Data><![CDATA[
<style type="text/css">
#btnGroup .button {
	width: 150px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="MVC Chart Page">
<demo:demoTitle id="title" title="MVC Chart Demonstration"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="MVC Chart" title="MVC Chart Demo" />
</locatorBar>

<hgroup>
<vgroup valign="top">
<demo:sidebar text="This page demonstrates the following features:">
<demo:bullet text="Using the Zen dataController component to automatically link data from a server-side Data Model to components on a web page." />
<demo:bullet text="A dynaGrid component is linked to the dataController. Changes in the grid are automatically propagated to other linked components." />
<demo:bullet text="A set of SVG charts are linked to the dataController and automatically change state in response to data changes." />
<demo:bullet text="The Previous and Next buttons change the id of the data object linked to the dataController." />
<demo:bullet text="The Change Model button causes the dataController to connect to a different type of dataModel class." />
</demo:sidebar>
</vgroup>
<spacer width="10"/>

<vgroup valign="top">
<spacer height="10"/>

<hgroup id="btnGroup">
<button caption="Previous" onclick="zenPage.previousObject();" />
<spacer width="20"/>
<button caption="Next" onclick="zenPage.nextObject();" />
<spacer width="20"/>
<button caption="Change Model" onclick="zenPage.changeModel();" />
</hgroup>

<spacer height="25"/>
<dataController id="source" modelClass="ZENMVC.ChartDataModel" modelId="1"/>

<hgroup>
<dynaGrid id="dynaGrid" 
	gridLabel="dynaGrid"
	controllerId="source"
	rowLabelWidth="225"
	columnWidth="150"
/>

</hgroup>
<spacer height="25"/>

<svgFrame id="svgFrame" 
	height="300" 
	width="900" 
	backgroundStyle="fill: black;"
	layout="horizontal">
<pieChart id="chart1" 
	controllerId="source"
	height="300"
	width="300" 
	title="Pie Chart"
	titleStyle="fill: black;"
	backgroundStyle="fill: url(#glow-silver);"
	plotAreaStyle="fill: white;"
	labelStyle="fill: black;"
	legendVisible="true"
	legendX="83"
	legendY="8"
	legendHeight=""
	legendWidth="15"
	>
</pieChart>

<barChart id="chart2" 
	controllerId="source"
	height="300"
	width="300" 
	chartPivot="false"
	title="Bar Chart"
	titleStyle="fill: black;"
	backgroundStyle="fill: url(#glow-silver);"
	plotAreaStyle="fill: white;"
	plotStyle="stroke-width: 0.1; stroke: black;"
	seriesColorScheme="bright"
	labelStyle="fill: black;"
	legendVisible="true"
	legendX="83"
	legendY="8"
	legendHeight=""
	legendWidth="15"
	>
</barChart>

<lineChart id="chart3" 
	controllerId="source"
	height="300"
	width="300" 
	chartFilled="true"
	chartStacked="true"
	title="Line Chart"
	titleStyle="fill: black;"
	backgroundStyle="fill: url(#glow-silver);"
	plotAreaStyle="fill: white;"
	plotStyle="stroke-width: 0.8; fill-opacity: 0.25;"
	labelStyle="fill: black;"
	legendVisible="true"
	legendX="83"
	legendY="8"
	legendHeight=""
	legendWidth="15"
	>
	</lineChart>
</svgFrame>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="nextObject">
<Description>
Point controller to next object.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('source');
	var id = controller.getProperty('modelId');
	id = parseInt(id) + 1;
	id = (id >= 3) ? 1 : id;
	controller.setProperty('modelId',id);
]]></Implementation>
</Method>

<Method name="previousObject">
<Description>
Point controller to previous object.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('source');
	var id = controller.getProperty('modelId');
	id = parseInt(id) - 1;
	id = (id <= 0) ? 3 : id;
	controller.setProperty('modelId',id);
]]></Implementation>
</Method>

<Method name="changeModel">
<Description>
Point controller to a different model class.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('source');
	var model = controller.getProperty('modelClass');
	model = ('ZENMVC.ChartDataModel' == model) ? 'ZENMVC.ChartDataModel2' : 'ZENMVC.ChartDataModel';
	controller.setProperty('modelClass',model);
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.MVCDynaForm">
<Description>
Model-View-Controller dyanamic form demo page.
This page uses the Zen MVC mechanism to create a dynamic form.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENMVC.MVCApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>MVC Dynamic Form Page</Default>
</Parameter>

<XData name="Style">
<Description>
Domain used for localization.
Parameter DOMAIN = "";</Description>
<Data><![CDATA[
<style type="text/css">

#userControls {
	height: 200px;
	overflow: auto;
}

.required {
	font-weight: bold;
}

.required:after {
	content: " (required)";
	font-style: italic;
	font-size: 0.8em;
	
}

#indicator {
	background: #D0D0FF;
	font-weight: bold;
	border: 1px solid darkblue;
	padding: 2px;
}

#group1, #group2 {
	border: 1px solid darkblue;
}

.zenLabel {
	padding-top: 2px;
	font-size: 0.8em;
	color: darkblue;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="MVC Form Page">
<demo:demoTitle id="title" title="MVC Form Demonstration"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="MVC Form" title="MVC Form Demo" />
</locatorBar>
<hgroup>
<vgroup valign="top">
<demo:sidebar text="This page demonstrates the following features:">
<demo:bullet text="Using the Zen dataController component to automatically link data from a server-side Data Model to components on a web page." />
<demo:bullet text="A set of forms are linked to the dataController. Changes in data are automatically propagated to all the forms." />
</demo:sidebar>
</vgroup>
<spacer width="10"/>

<vgroup valign="top">
<spacer height="10"/>

<dataController id="source" 
	modelClass="ZENMVC.Person" modelId=""/>

<hgroup>

<dynaForm id="MyForm" controllerId="source" valign="top"/>
</hgroup>
<hgroup>
<spacer width="100"/>
<button caption="Previous" onclick="zenPage.previousObject();" />
<spacer width="20"/>
<button caption="Next" onclick="zenPage.nextObject();" />
<spacer width="20"/>
<button caption="Save" onclick="zenPage.save();" />
</hgroup>
</vgroup>
</hgroup>

</page>
]]></Data>
</XData>

<Method name="save">
<Description>
save model to database</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// validate and save form
	var form = zenPage.getComponentById('MyForm');
	form.save();
]]></Implementation>
</Method>

<Method name="nextObject">
<Description>
Point controller to next object.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('source');
	var id = controller.getProperty('modelId');
	id = parseInt(id) + 1;
	id = (id >= 3) ? 1 : id;
	controller.setProperty('modelId',id);
]]></Implementation>
</Method>

<Method name="previousObject">
<Description>
Point controller to previous object.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('source');
	var id = controller.getModelId();
	id = parseInt(id) - 1;
	id = (id <= 0) ? 3 : id;
	controller.setModelId(id);
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.MVCForm">
<Description>
Model-View-Controller form demo page.
This page uses the Zen MVC mechanism to create a form.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENMVC.MVCApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>MVC Form Page</Default>
</Parameter>

<Property name="ObjID">
<Description><![CDATA[
This defines the ID of the initial object to display.
You can pass this in via the URL parameter, <var>ID</var>, if you like.]]></Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="ZENURL" value="ID"/>
</Property>

<XData name="Style">
<Description>
Domain used for localization.
Parameter DOMAIN = "";</Description>
<Data><![CDATA[
<style type="text/css">

#userControls {
	height: 200px;
	overflow: auto;
}

.required {
	font-weight: bold;
}

.required:after {
	content: " (required)";
	font-style: italic;
	font-size: 0.8em;
	
}

#indicator {
	background: #D0D0FF;
	font-weight: bold;
	border: 1px solid darkblue;
	padding: 2px;
}

#group1, #group2 {
	border: 1px solid darkblue;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="MVC Form Page">
<demo:demoTitle id="title" title="MVC Form Demonstration"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="MVC Form" title="MVC Form Demo" />
</locatorBar>
<hgroup>
<vgroup valign="top">
<demo:sidebar text="This page demonstrates the following features:">
<demo:bullet text="Using the Zen dataController component to automatically link data from a server-side Data Model to components on a web page." />
<demo:bullet text="A form whose fields are bound to the properties supplied by the dataController." />
</demo:sidebar>
</vgroup>
<spacer width="10"/>

<vgroup valign="top">
<spacer height="10"/>

<dataController id="source" 
	modelClass="ZENMVC.FormDataModel" modelId="#(%page.ObjID)#"/>

<hgroup labelPosition="left">
<spacer width="10"/>
<text label="ID:" id="objid" value="#(%page.ObjID)#" size="4" onchange="zenPage.findObject();" />
<button caption="Load" onclick="zenPage.findObject();" />
</hgroup>
<spacer height="10"/>

<hgroup>
<form id="MyForm" layout="vertical" 
	controllerId="source" valign="top"
>
<text label="Name:" id="Name" name="Name" 
	dataBinding="Name"
	labelClass="required" required="true"/>

<text label="SSN:" id="SSN" name="SSN" 
	dataBinding="SSN"
	labelClass="required" required="true"/>

<dataCombo label="City:" id="City" name="City" 
	dataBinding="City"
	/>

<textarea label="Memo:" id="Memo" name="Memo" 
	dataBinding="Memo"
/>
<button caption="Save" onclick="zenPage.save();" />
</form>
<spacer width="50"/>
</hgroup>
</vgroup>
</hgroup>

</page>
]]></Data>
</XData>

<Method name="save">
<Description>
save model to database</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// validate and save form
	var form = zenPage.getComponentById('MyForm');
	form.save();
]]></Implementation>
</Method>

<Method name="findObject">
<Description>
Find and load the object whose id is in the objid text box.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = zenPage.getComponentById('objid');
	var id = ctrl.getValue();
	var controller = zenPage.getComponentById('source');
	controller.setModelId(id);
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.MVCMasterDetail">
<Description>
Model-View-Controller MasterDetail page.
This page uses the Zen MVC mechanism to create a simple Master-Detail page.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENMVC.MVCApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>MVC Master-Detail Page</Default>
</Parameter>

<Property name="deleteMsg">
<Description>
Localized string that will be available to the client.</Description>
<Type>%ZEN.Datatype.caption</Type>
<InitialExpression>$$$Text("Ok to delete this record?","ZENDEMO")</InitialExpression>
</Property>

<XData name="Style">
<Description>
Domain used for localization.
Parameter DOMAIN = "";</Description>
<Data><![CDATA[
<style type="text/css">

#userControls {
	height: 200px;
	overflow: auto;
}

.required {
	font-weight: bold;
}

.required:after {
	content: " (required)";
	font-style: italic;
	font-size: 0.8em;
	
}

#indicator {
	background: #D0D0FF;
	font-weight: bold;
	border: 1px solid darkblue;
	padding: 2px;
}

#table {
	width: 800px;
	border: 1px solid darkblue;
}

#myForm {
	width: 800px;
	border: 1px solid black;
	background: #404040;
	background-image: url(images/grad-gray-10x500.png);
	background-repeat: repeat-x;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="MVC Master Detail Page">
<demo:demoTitle id="title" title="MVC Master Detail Demonstration"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="MVC Master Detail" title="MVC Master Detail Demo" />
</locatorBar>

<hgroup valign="top">
<vgroup valign="top">
<demo:sidebar text="This page demonstrates the following features:">
<demo:bullet text="Using the Zen dataController component to automatically link data from a server-side Data Model to components on a web page." />
<demo:bullet text="A tablePane is used to display the results of an SQL query." />
<demo:bullet text="A form is bound to the dataController." />
<demo:bullet text="When the user selects a row in the table, the object id of the dataController is changed. This causes new data to be loaded and applied to the linked form." />
</demo:sidebar>
</vgroup>

<spacer width="10"/>

<vgroup valign="top">
<spacer height="10"/>

<dataController id="source" 
	modelClass="ZENMVC.FormDataModel" modelId="#(%url.ID)#"/>
<tableNavigatorBar tablePaneId="table" 
	showPageSize="true"
	showFilter="false" onfilterChange="zenPage.filterChanged(value);" />
<spacer height="10"/>
<tablePane id="table" 
	caption="Master Table"
	tableName="ZENDemo_Data.Patient"
	useSnapshot="true"
	showFilters="true"
	showQuery="false"
	showZebra="true"
	pageSize="20"
	fixedHeaders="true"
	bodyHeight="13.0em"
	headerLayout="filtersOnTop"
	valueColumn="ID"
	value="#(%url.ID)#"
	maxRows="1000"
	useKeys="true"
	onselectrow="zenPage.rowSelected(zenThis,which);"
	>
<column colName="ID" width="25"/>
<column colName="Name" width="180" filterType="text"/>
<column colName="SSN" width="100" filterType="text"/>
<column colName="MaritalStatus" width="20" filterType="text"/>
<column colName="City" colExpression="Home_City" width="100" filterType="text"/>
<column colName="State" colExpression="Home_State" width="25" filterType="text" filterOp="="/>

</tablePane>
<spacer height="10"/>
<hgroup>
<form id="myForm" layout="vertical" controllerId="source">
<hgroup>
<vgroup valign="top">
<text label="ID:" id="ID" name="ID" 
	dataBinding="%id" size="5"
	readOnly="true"/>

<text label="Name:" id="Name" name="Name" 
	dataBinding="Name" size="30"
	labelClass="required" required="true"/>

<text label="SSN:" id="SSN" name="SSN" 
	dataBinding="SSN"
	size="15"
	labelClass="required" required="true"/>
</vgroup>
<spacer width="10"/>
<vgroup valign="top">

<text label="City:" id="City" name="City" 
	size="12"
	dataBinding="City"
	/>

<text label="State:" id="State" name="State" 
	size="2"
	dataBinding="State"
	/>
	
<select label="MaritalStatus:" id="MaritalStatus1" name="MaritalStatus" 
	dataBinding="MaritalStatus"
	valueList="S,M,D,W,O" displayList="Single,Married,Divorced,Widowed,Other"/>
</vgroup>
</hgroup>

<spacer height="10"/>
<hgroup>
<button caption="New" onclick="zenPage.newItem();" />
<spacer width="10"/>
<button caption="Save" onclick="zenPage.saveItem();" />
<spacer width="10"/>
<button caption="Cancel" onclick="zenPage.cancel();" />
<spacer width="10"/>
<button caption="Delete" onclick="zenPage.deleteItem();" />
<spacer width="10"/>
<button caption="Action" onclick="zenPage.invokeAction();" />
</hgroup>
</form>
<spacer width="50"/>
</hgroup>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="filterChanged">
<Description>
Filter changed in table navigator</Description>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert(value);
]]></Implementation>
</Method>

<Method name="rowSelected">
<Description><![CDATA[
Row in Master table select; update controller.
<var>which</var> indicates how this event was fired.]]></Description>
<FormalSpec>table,which</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if ('keypress' == which) {
		// defer this action in case the user is arrowing through a number of items
		var id = table.getValue();
		var action = new Function("zenPage.getComponentById('source').setProperty('modelId','"+id+"');"); 
		zenSetDeferredAction(action,200);
	}
	else {
		// select immediately
		var id = table.getValue();
		var controller = zenPage.getComponentById('source');
		controller.setProperty('modelId',id);
	}
]]></Implementation>
</Method>

<Method name="newItem">
<Description>
Create new object via dataModel</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('source');
	controller.createNewObject();
]]></Implementation>
</Method>

<Method name="saveItem">
<Description>
save form to database</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zenPage.getComponentById('myForm');
	form.save();

	var table = zenPage.getComponentById('table');
	table.executeQuery(true);
]]></Implementation>
</Method>

<Method name="cancel">
<Description>
cancel the current action</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zenPage.getComponentById('myForm');
	form.reset();

	var table = zenPage.getComponentById('table');
	table.selectRow(-1);

	var controller = zenPage.getComponentById('source');
	controller.setProperty('modelId','');
]]></Implementation>
</Method>

<Method name="deleteItem">
<Description>
Delete current item from database</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (confirm(this.deleteMsg)) {
		var controller = zenPage.getComponentById('source');
		controller.deleteId(controller.getModelId());
	
		var table = zenPage.getComponentById('table');
		table.executeQuery(true);
	}
]]></Implementation>
</Method>

<Method name="invokeAction">
<Description>
Invoke an action on the dataModel</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('source');
	controller.invokeAction('log');
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.MVCMeters">
<Description>
Model-View-Controller Meter demo page.
This page uses the Zen MVC mechanism to connect data to several meters.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENMVC.MVCApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>MVC Meter Page</Default>
</Parameter>

<XData name="Style">
<Description>
Domain used for localization.
Parameter DOMAIN = "";</Description>
<Data><![CDATA[
<style type="text/css">
#btnGroup .button {
	width: 150px;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="MVC Meter Page">
<demo:demoTitle id="title" title="MVC Meter Demonstration"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="MVC Meters" title="MVC Meter Demo" />
</locatorBar>

<hgroup valign="top">
<vgroup valign="top">
<demo:sidebar text="This page demonstrates the following features:">
<demo:bullet text="Using the Zen dataController component to automatically link data from a server-side Data Model to components on a web page." />
<demo:bullet text="A dynaGrid component is linked to the dataController. Changes in the grid are automatically propagated to other linked components." />
<demo:bullet text="A set of SVG meters are linked to the dataController and automatically change state in response to data changes." />
<demo:bullet text="The Previous and Next buttons change the id of the data object linked to the dataController." />
</demo:sidebar>
</vgroup>

<spacer width="10"/>

<dataController id="source" modelClass="ZENMVC.ChartDataModel" modelId="1"/>

<vgroup valign="top">
<spacer height="10"/>

<hgroup id="btnGroup">
<button caption="Previous" onclick="zenPage.previousObject();" />
<spacer width="20"/>
<button caption="Next" onclick="zenPage.nextObject();" />
</hgroup>

<spacer height="25"/>

<hgroup>
<dynaGrid id="dynaGrid" 
	gridLabel="dynaGrid"
	controllerId="source"
	rowLabelWidth="225"
	columnWidth="150"
/>

</hgroup>
<spacer height="25"/>

<svgFrame id="svgFrame" 
	height="300" 
	width="900" 
	backgroundStyle="fill: darkblue; stroke: black;"
	layout="horizontal">
<speedometer id="m1" 
	controllerId="source"
	height="150"
	width="150" 
	dataBinding="P1"
	label="P1"
	labelStyle="fill: yellow;"
	/>

<trafficLight id="m2" 
	controllerId="source"
	height="150"
	width="75" 
	dataBinding="P2"
	label="P2"
	labelStyle="fill: yellow;"
	/>

<smiley id="m3" 
	controllerId="source"
	height="150"
	width="150" 
	dataBinding="P3"
	label="P3"
	labelStyle="fill: yellow;"
	/>

<lightBar id="m4" 
	controllerId="source"
	height="150"
	width="75" 
	dataBinding="P4"
	label="P4"
	labelStyle="fill: yellow;"
	/>

<lightBar id="m5" 
	controllerId="source"
	height="150"
	width="75" 
	dataBinding="P5"
	label="P5"
	labelStyle="fill: yellow;"
	/>

<svgGroup layout="vertical">
<svgSpacer height="10"/>

<indicatorLamp id="mi4" 
	controllerId="source"
	height="25"
	width="100" 
	dataBinding="P4"
	thresholdLower="10"
	thresholdUpper="90"
	label="Lamp P4"
	normalStyle="fill:url(#glow-yellow);"
	/>

<indicatorLamp id="mi5" 
	controllerId="source"
	height="25"
	width="100" 
	dataBinding="P5"
	thresholdLower="10"
	thresholdUpper="90"
	label="Lamp P5"
	normalStyle="fill:url(#glow-silver);"
	/>

<indicatorLamp id="mi6" 
	controllerId="source"
	height="25"
	width="100" 
	dataBinding="P6"
	thresholdLower="10"
	thresholdUpper="90"
	label="Lamp P6"
	/>

<indicatorLamp id="mi7" 
	controllerId="source"
	height="25"
	width="100" 
	dataBinding="P7"
	rangeUpper="0"
	rangeLower="100"
	thresholdLower="90"
	thresholdUpper="10"
	label="Lamp P7"
	/>
</svgGroup>
</svgFrame>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="nextObject">
<Description>
Point controller to next object.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('source');
	var id = controller.getProperty('modelId');
	id = parseInt(id) + 1;
	id = (id >= 3) ? 1 : id;
	controller.setProperty('modelId',id);
]]></Implementation>
</Method>

<Method name="previousObject">
<Description>
Point controller to previous object.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('source');
	var id = controller.getProperty('modelId');
	id = parseInt(id) - 1;
	id = (id <= 0) ? 3 : id;
	controller.setProperty('modelId',id);
]]></Implementation>
</Method>

<Method name="changeModel">
<Description>
Point controller to a different model class.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zenPage.getComponentById('source');
	var model = controller.getProperty('modelClass');
	model = ('ZENMVC.ChartDataModel' == model) ? 'ZENMVC.ChartDataModel2' : 'ZENMVC.ChartDataModel';
	controller.setProperty('modelClass',model);
]]></Implementation>
</Method>
</Class>


<Class name="ZENMVC.PatientForm">
<Description>
Example form page based on the CRUD (Create, Read, Update, Delete) base class.</Description>
<Super>ZENMVC.CRUDTemplate</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60730,47640.241004</TimeCreated>

<Parameter name="PAGETITLE">
<Description>
Title of this page.</Description>
<Default>Patient Form</Default>
</Parameter>

<Parameter name="MODELCLASS">
<Description>
Name of DataModel class that drives the form.</Description>
<Default>ZENMVC.FormDataModel</Default>
</Parameter>

<Parameter name="LOOKUPTABLE">
<Description>
Name of SQL table that drives the pick list.</Description>
<Default>ZENDemo_Data.Patient</Default>
</Parameter>

<Parameter name="LOOKUPCOLUMN">
<Description>
Name of SQL column displayed in the pick list.</Description>
<Default>Name</Default>
</Parameter>
</Class>


<Class name="ZENMVC.Person">
<Description>
Simple example of a persistent class that is also a DataModel.</Description>
<Super>%Persistent,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60453,84002.991881</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="SSN">
<Type>%String</Type>
</Property>

<Property name="Home">
<Type>Address</Type>
</Property>

<Property name="Business">
<Type>Address</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENMVC.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^ZENMVC.PersonD</IdLocation>
<IndexLocation>^ZENMVC.PersonI</IndexLocation>
<StreamLocation>^ZENMVC.PersonS</StreamLocation>
<Data name="PersonDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Home</Value>
</Value>
<Value name="4">
<Value>DOB</Value>
</Value>
<Value name="5">
<Value>FavoriteColor</Value>
</Value>
<Value name="6">
<Value>MaritalStatus</Value>
</Value>
<Value name="7">
<Value>SSN</Value>
</Value>
<Value name="8">
<Value>Sex</Value>
</Value>
<Value name="9">
<Value>Home2</Value>
</Value>
<Value name="10">
<Value>Business</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ZENMobile.Data.Scribbles">
<Description>
</Description>
<Super>%Persistent,%Populate</Super>
<TimeChanged>62832,79626.079173</TimeChanged>
<TimeCreated>60126,74367.30226</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Name">
<Description>
ScribbleName</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Art">
<Description>
Capture of a scribble area</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENMobile.Data.ScribblesD</DataLocation>
<DefaultData>ScribblesDefaultData</DefaultData>
<IdLocation>^ZENMobile.Data.ScribblesD</IdLocation>
<IndexLocation>^ZENMobile.Data.ScribblesI</IndexLocation>
<StreamLocation>^ZENMobile.Data.ScribblesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ScribblesDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Art</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ZENMobile.HomePage">
<Description>
Zen Mobile Test Suite Home Page.
This page shows a set of links to the various Zen test pages intended for mobile devices</Description>
<Super>%ZEN.Mobile.mobilePage</Super>
<TimeChanged>62833,34497.027718</TimeChanged>
<TimeCreated>60125,30066.203933</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENMobile.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Home Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENTEST</Default>
</Parameter>

<Property name="simulatedDeviceWidth">
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>640</InitialExpression>
</Property>

<Property name="simulatedDeviceHeight">
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>960</InitialExpression>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
.vmenuTable {
	border: 1px solid gray;
	font-family: arial;
	font-size: 24px;
	font-weight: bold;
	padding: 0px;
	color: black;
	background: white;
}

a.menuItem {
	color: black;
}

a.menuItem:hover {
	color: darkblue;
}

#menu {
}


#intro {
	font-weight: normal;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Contents of this page:
serialized set of Zen component objects</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Test Suite">
<demo:demoTitle id="title" title="Zen Mobile Test Suite Home Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Mobile Test Suite" title="Mobile Test Suite" />
</locatorBar>

<html id="intro">
Welcome to the Zen Mobile Test Suite Home Page.<p/>
Use the links below to go to one of the Zen mobile test pages.<p/>
Please note that these demos are designed for mobile devices and 
may not be fully functional on systems lacking multi-touch screens, 
compasses and gyroscopes.
</html>

<hgroup>
<spacer width="100"/>
 <vmenu id="menu">
</vmenu>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<Description>
This callback is called after the server-side page 
object and all of its children are created.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; add items to main menu
	Set tMenu = ..%GetComponentById("menu")

	#; get pages in our application
	Do ##class(%ZEN.Utils).%GetPagesInApplication(..#APPLICATION, .tList)

	#; order pages by page name
	Set tPage = $O(tList(""))
	While (tPage '= "") {
		If (tPage '= ..%ClassName(1)) {
			Set tLabel = ..FindPageName(tPage)
			If (tLabel '= "") {
				Set tPageList(tLabel) = tPage
			}
		}

		#; next
		Set tPage = $O(tList(tPage))
	}

	#; now create a menu dynamically from the list

	Set tLabel = $O(tPageList(""),1,tPage)
	While (tLabel '= "") {
		#; menuitem
		Set tItem = ##class(%ZEN.Component.menuItem).%New()
		Set tItem.caption = tLabel
		Set tItem.link = tPage _ ".cls"
		Do tMenu.%AddChild(tItem)

		Set tLabel = $O(tPageList(tLabel),1,tPage)
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindPageName">
<Description>
Get the page name for the given class (if possible).</Description>
<FormalSpec>pClass:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap"
	Set tPageName = $zobjclassmethod(pClass,"%GetPageName")
	Quit $S(tPageName="":pClass,1:tPageName)
Trap
	Set $ZT=""
	Quit pClass
]]></Implementation>
</Method>
</Class>


<Class name="ZENMobile.ScribbleModel">
<Super>%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>62832,79340.694009</TimeChanged>
<TimeCreated>61956,58344.227184</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Art">
<Type>%String</Type>
</Property>

<Method name="%OnNewSource">
<Description>
Load an instance of a new (unsaved) source object for this DataModel.</Description>
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[    Quit ##class(ZENMobile.Data.Scribbles).%New()
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<Description>
Save instance of associated source object.</Description>
<FormalSpec>pSource:ZENMobile.Data.Scribbles</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC=pSource.%Save()
    Set ..%id=pSource.%Id()
    Quit tSC
]]></Implementation>
</Method>

<Method name="%OnOpenSource">
<Description>
Load an instance of the source object for this DataModel.</Description>
<FormalSpec>pID:%String,pConcurrency:%Integer=-1,*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[    Quit ##class(ZENMobile.Data.Scribbles).%OpenId(pID,pConcurrency,.pSC)
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<Description>
Delete instance of associated source object.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[   Quit ##class(ZENMobile.Data.Scribbles).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<Description>
Do the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:ZENMobile.Data.Scribbles</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ..Name = pSource.Name
    Set ..Art = pSource.Art
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description>
Do the actual work of storing values into the source object.</Description>
<FormalSpec>pSource:ZENMobile.Data.Scribbles</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set pSource.Name = ..Name
    Set pSource.Art = ..Art
    Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENMobile.TestApplication">
<Description>
Application definition for Zen Test Suite application.</Description>
<Super>%ZEN.application</Super>
<TimeChanged>62832,76011.538022</TimeChanged>
<TimeCreated>60160,40061.551706</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Zen Mobile Test Suite</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>ZENMobile.HomePage.cls</Default>
</Parameter>

<XData name="Style">
<Description>
example of customized style sheet for application</Description>
<Data><![CDATA[
<style type="text/css">
/* default body style */
body {
	font-family: arial;
	background: #F0F0F0;
}

/* descriptive text */
#description {
	color: black;
	font-size: 1.2em;
	padding: 5px;
	padding-top: 10px;
	padding-bottom: 10px;
}

#description:first-letter {
	font-size: 1.5em;
}

.locatorBarTable td {
	background: rgb(47,98,128);
	background-image: none;
	border-bottom: 1px solid darkblue;
	padding-bottom: 1px;
	color: white;
}

.locatorBarLinks {
	color: white;
}

.locatorBarLinks a {
	color: white;
}

.locatorBarLinks a:visited {
	color: white;
}

.locatorBarSelect {
	color: white;
}

.locatorBarLinks a:hover {
	color: red;
	background: #FFFAE7;
}

#intro {
	color: darkblue;
	font-size: 1.2em;
	margin: 10px;
}

/* descriptive text */
.msg {
	font-size: 0.8em;
	color: darkblue;
	width: 500px;
	padding-top: 3px;
	padding-bottom: 10px;
}

.msg:first-letter {
	font-size: 0.9em;
	font-weight: bold;
}

/* override calendar style for Sunday and Saturday */
table.calendar td.calendarDay0,
table.calendar td.calendarDay6
{
	background: #F8F8F8;
	color: gray;
}

/* Column labels for dynaGrid. */
table.dynaGrid th.dynaGridLabel,
table.dynaGrid th.dynaGridRow,
table.dynaGrid th.dynaGridColumn {
	color: black;
	background: #404040;
	background-image: url(images/grad-gray-10x100.png);
	background-repeat: repeat-x;
}

table.dynaGrid th.dynaGridLabel:hover,
table.dynaGrid th.dynaGridRow:hover,
table.dynaGrid th.dynaGridColumn:hover {
	color: white;
	background: #F0F0F0;
	background-image: url(images/grad-gray2-10x100.png);
	background-repeat: repeat-x;
}

</style>
]]></Data>
</XData>
</Class>


<Class name="ZENMobile.ZenASketch">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mobile.mobilePage</Super>
<TimeChanged>62850,47828.906869</TimeChanged>
<TimeCreated>62832,76434.622843</TimeCreated>

<Parameter name="DEFAULTPREVENTGESTURES">
<Description>
Turn off scroll and zoom defaults </Description>
<Default>1</Default>
</Parameter>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENMobile.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Zen A Sketch</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
#zen1 {
	background: #dd0000;
	width:100%;
	height:100%;
	position:relative;
	top:0px;
	left:0px;
}

.knobEdge {
	width:80px;
	height:80px;
	border:2px solid #777777;
	border-radius: 40px;
	-webkit-radius: 40px;
	position:absolute;
	bottom: 10px;
 	background: -webkit-linear-gradient(left, #aaaaaa, #ffffff, #cccccc);
	background: -moz-linear-gradient(left, #aaaaaa, #ffffff, #cccccc);  
	background: -ms-linear-gradient(left, #aaaaaa, #ffffff, #cccccc);
 	background: -o-linear-gradient(left, #aaaaaa, #ffffff, #cccccc);
}

.knobTop {
	width:60px;
	height:60px;
	position:absolute;
	top:8px;
	left:8px;
	border-radius:30px;
	-webkit-radius:30px;
	background:#ffffff;
	border:2px solid #f0f0f0;
	background: -webkit-radial-gradient(circle, #ffffff, #c7c7c7);
  	background: -moz-radial-gradient(circle, #ffffff, #c7c7c7);
	background: -ms-radial-gradient(circle, #ffffff, #c7c7c7);
}

.screen {
	position:absolute;
	top:35px;
	right:45px;
	left:45px;
	bottom:110px;
	border:10px solid #bb0000;
	border-radius:14px;
	-webkit-radius:14px;
	overflow:hidden;
	background:silver;
}

.logo {
	position:absolute;
	left:0px;
	right:0px;
	bottom:50px;
	text-align:center;
}

#logoLabel {
	font-size: 32px;
	font-weight: bold;
	font-family: "Comic Sans MS",cursive,sans-serif;
	color: gold;
	
}

#canvas {
	width:100%;
	height:100%;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="" layout="none" enclosingStyle="position:relative;top:0px;lef:0px;">
<group layout="none" enclosingClass="knobEdge" enclosingStyle="left:10px;">
<group layout="none" enclosingClass="knobTop" >
</group>
</group>
<group layout="none" enclosingClass="knobEdge" enclosingStyle="right:10px;">
<group layout="none" enclosingClass="knobTop" >
</group>
</group>
<group layout="none" enclosingClass="screen" >
<canvas id="canvas" onrender="zenPage.refreshCanvas();"/>
</group>
<group layout="none" enclosingClass="logo" >
<label id="logoLabel" value="Zen-A-Sketch" />
</group>
</page>
]]></Data>
</XData>

<Method name="onloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.ptX = 0;
	this.ptY = 0;
	this.deltaX = 0;
	this.deltaY = 0;

	setTimeout("zenPage.updateCanvas();",500);
]]></Implementation>
</Method>

<Method name="ontouchstartHandler">
<FormalSpec>event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ww = zenPage.getNativeWindowWidth();
	var wh = zenPage.getNativeWindowHeight();
	
	this.vX = 50;
	this.vY = wh-50;
	this.hX = ww-50;
	this.hY = this.vY;
	// get knob centers
	this.vcX = 50;
	this.vcY = wh-50;
	this.hcX = ww-50;
	this.hcY = this.vY;
	
	this.vD = 0;
	this.hD = 0;
	
	var t=event.touches;
	for (var i=t.length-1;i>=0;i--) {
		var pt = t[i];
		var px = pt.pageX;
		var py = pt.pageY;
		// if the touch was in the right area, get the starting point
		if (py>wh-100) {
			if (px<100) {
				this.vX = px;
				this.vY = py;
			}
			else if (px>ww-100) {
				this.hX = px;
				this.hY = py;
			}
		}
	}
]]></Implementation>
</Method>

<Method name="ontouchmoveHandler">
<Description>
Process (potentially simultaneous) gestures on the knobs.  Because
both 'knobs' operate independently but in parallel, it's actually 
easier to process one combined event stream than to break out the 
knobs into separate widgets (where the simultaneous nature of their
updates might be lost in an event queue.  In effect, this is the 
diffeence between using both controls in parallel to make a diagonal
line, versus using them serially to create a stair-stepping one.</Description>
<FormalSpec>event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ww = zenPage.getNativeWindowWidth();
	var wh = zenPage.getNativeWindowHeight();
	
	// initialize potential destination points
	var vmX = -1;
	var vmY = -1;
	var hmX = -1;
	var hmY = -1;
		
	var t=event.touches;
	for (var i=t.length-1;i>=0;i--) {
		var pt = t[i];
		var px = pt.pageX;
		var py = pt.pageY;
		// it the touch is in the right region, mark it as a destination
		if (py>wh-100) {
			if (px<100) {
				vmX = px;
				vmY = py;
			}
			else if (px>ww-100) {
				hmX = px;
				hmY = py;
			}
		}
	}
	if (vmX> -1) { // movement detected on the vertical control
		var dx = vmX-this.vX;
		var dy = vmY-this.vY;
		var d = dx*dx+dy*dy;
		// Figure out the major axis of motion
		if (Math.abs(dx)>Math.abs(dy)) dy=0;
		else dx=0;
		
		// Figure out which quandrant we started in
		var q = 1;
		if (this.vX<this.vcX) q++;
		if (this.vY>this.vcY) q+=2;
		
		var val = 0; // no motion yet
		if (d>5) { // enough motion to test
			if (q==1) {
				if (dx<0 || dy<0) val++; // ccw
				else if (dx>0 || dy>0) val--; // cw
			} else if (q==2) {
				if (dx<0 || dy>0) val++;
				else if (dx>0 || dy<0) val--;
			} else if (q==3) {
				if (dx>0 || dy<0) val++;
				else if (dx<0 || dy>0) val--;
			} else {
				if (dx>0 || dy>0) val++;
				else if (dx<0 || dy<0) val--;
			}
			if (val!=0) {
				this.vY = vmY;
				this.vX = vmX;
				this.deltaY -= val;
			}
		}
	}
	if (hmX> -1) { // movement detected on the horizontal control
		var dx = hmX-this.hX;
		var dy = hmY-this.hY;
		var d = dx*dx+dy*dy;
		// Figure out the major axis of motion
		if (Math.abs(dx)>Math.abs(dy)) dy=0;
		else dx=0;
		// Figure out which quandrant we started in
		var q = 1;
		if (this.hX<this.hcX) q++;
		if (this.hY>this.hcY) q+=2;
		
		var val = 0; // no motion yet
		if (d>5) { // enough motion to test
			if (q==1) {
				if (dx<0 || dy<0) val++; // ccw
				else if (dx>0 || dy>0) val--; // cw
			} else if (q==2) {
				if (dx<0 || dy>0) val++;
				else if (dx>0 || dy<0) val--;
			} else if (q==3) {
				if (dx>0 || dy<0) val++;
				else if (dx<0 || dy>0) val--;
			} else {
				if (dx>0 || dy>0) val++;
				else if (dx<0 || dy<0) val--;
			}
			if (val!=0) {
				this.hY = hmY;
				this.hX = hmX;
				this.deltaX -= val;
			}
		}
	}
]]></Implementation>
</Method>

<Method name="ondevicemotionHandler">
<Description>
Watch for a simple, face down shake to clear the screen.</Description>
<FormalSpec>event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (event.accelerationIncludingGravity.z > 10.5) {
		zenPage.clearCanvas();
	}
]]></Implementation>
</Method>

<Method name="updateCanvas">
<Description>
Periodically update the canvas based on the movement deltas registered 
since the last update.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (this.context) {
		var ctx = this.context;
		ctx.strokeStyle = "#111111";
		ctx.fillStyle = "#111111";
		ctx.lineWidth = "5px";
		ctx.lineCap = "round";
		var len = this.path.length;
		if (len==0) {
			this.path.push({"x":this.ptX,"y":this.ptY});
			ctx.beginPath();
			ctx.moveTo(this.ptX,this.ptY);
			ctx.lineTo(this.ptX,this.ptY);
			ctx.stroke();
		}
		else if (this.deltaX!=0 || this.deltaY!=0) {
			var obj = this.path[len-1];
			var newX = obj.x+3*this.deltaX;
			var newY = obj.y+3*this.deltaY;
			if (newX<0) newX = 0;
			if (newY<0) newY = 0;
			if (newX>this.cvsWidth) newX = this.cvsWidth;
			if (newY>this.cvsHeight) newY = this.cvsHeight;
			this.deltaX = 0;
			this.deltaY = 0;
			ctx.beginPath();
			ctx.moveTo(obj.x,obj.y);
			ctx.lineTo(newX,newY);
			ctx.stroke();
			this.ptX = newX;
			this.ptY = newY;
			this.path.push({"x":newX,"y":newY});
		}
	}
	setTimeout("zenPage.updateCanvas();",100);
]]></Implementation>
</Method>

<Method name="clearCanvas">
<Description>
Clear the screen</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctx = this.context;
	if (ctx) {
		ctx.fillStyle="silver";
		ctx.fillRect(0,0,this.cvsWidth,this.cvsHeight);
	}
]]></Implementation>
</Method>

<Method name="initCanvas">
<Description>
Initialize the canvas and save certain values for faster processing later</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.canvasInitialized = true;

	this.canvas = zen("canvas");
	this.context = this.canvas.getContext();
	var div = this.canvas.getEnclosingDiv();
	this.cvsWidth = div.offsetWidth;
	this.cvsHeight = div.offsetHeight;
	
	var ctrl = this.canvas.findElement('canvas');
	ctrl.width = this.cvsWidth;
	ctrl.height = this.cvsHeight;
	
	this.ptX = this.cvsWidth/2;
	this.ptY = this.cvsHeight/2;
	this.path = [];
	if (this.cvsHeight<1) this.canvasInitialized = false;
]]></Implementation>
</Method>

<Method name="refreshCanvas">
<Description>
Initialize and or refresh the canvas as needed</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (!this.canvasInitialized) {
		this.initCanvas();
		setTimeout("zenPage.refreshCanvas();",100);
	}
	else {
//		var ctx = this.context;
		zenPage.clearCanvas();
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZENMobile.ZenDoodle">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mobile.mobilePage</Super>
<TimeChanged>62833,40560.771714</TimeChanged>
<TimeCreated>61951,47536.161208</TimeCreated>

<Parameter name="DEFAULTPREVENTGESTURES">
<Description>
Turn off scroll and zoom defaults </Description>
<Default>0</Default>
</Parameter>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENMobile.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Zen Doodle</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
.scribbleArea {
	width:100%;
	height:100%;
	overflow:hidden;
	border:1px solid gray;
	background:#f5f5f5;
	color:#000044;
}

.button {
	font:bold 24px Arial;
	width:100%;
}

#TopBar {
	position:absolute;
	top:0px;
	left:0px;
	right:0px;
	height:40px;
}

#WorkArea {
	position:absolute;
	top:40px;
	left:0px;
	right:0px;
	bottom:40px;
}

#BottomBar {
	position:absolute;
	left:0px;
	right:0px;
	bottom:0px;
	height:40px;
}

</style>
]]></Data>
</XData>

<Property name="v">
<Type>%ZEN.Datatype.string</Type>
</Property>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="">
<group layout="none" id="TopBar" >
<text label="ID:" id="objId" value="7" size="4" onchange="zenPage.findObject();" 
labelStyle="position:absolute;top:0px;left:0px;font:bold 24px Arial;"
controlStyle="position:absolute;top:0px;left:25%;width:20%;font:bold 24px Arial;"
/>
<button caption="Load" onclick="zenPage.findObject();" enclosingStyle="position:absolute;top:0px;left:50%;width:50%;"/>
</group>

<group id="WorkArea" layout="none" >
<dataController id="scribbleData" modelClass="ZENMobile.ScribbleModel" modelId="1" />
<form controllerId="scribbleData" id="aForm" layout="none">
<text id="name" label="Title:" dataBinding="Name" value="untitled"
labelStyle="position:absolute;top:0px;left:0px;font:bold 24px Arial;"
controlStyle="position:absolute;top:0px;left:25%;width:70%;font:bold 24px Arial;"
/>
<scribbleArea id="masterpiece" culling="0" nib="2" smoothness="1" dataBinding="Art" enclosingStyle="position:absolute;top:40px;left:0px;right:0px;bottom:0px;"/>
</form>
</group>

<group id="BottomBar" layout="none">
<button caption="New" onclick="zenPage.newRecord();" enclosingStyle="position:absolute;top:0px;left:0%;width:33%;"/>
<button caption="Clear" onclick="zenPage.clearCanvas();" enclosingStyle="position:absolute;top:0px;left:33%;width:33%;"/>
<button caption="Save" onclick="zenPage.save();" enclosingStyle="position:absolute;top:0px;left:66%;width:33%;"/>
</group>

</page>
]]></Data>
</XData>

<Method name="findObject">
<Description>
Find and load the object whose id is in the objid text box.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = zenPage.getComponentById('objId');
	var id = ctrl.getValue();
	var controller = zenPage.getComponentById('scribbleData');
	controller.setModelId(id);
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/* MVC STUFF */
]]></Content>
</UDLText>

<Method name="newRecord">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zen('scribbleData');
	controller.createNewObject();
]]></Implementation>
</Method>

<Method name="save">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zen('aForm');
	form.save();
]]></Implementation>
</Method>

<Method name="updateRecord">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var controller = zen('scribbleData');
	controller.update();
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[/* END OF MVC STUFF */
]]></Content>
</UDLText>

<Method name="clearCanvas">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var s = this.getComponentById("masterpiece");
	s.clear();
]]></Implementation>
</Method>

<Method name="export">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var s = this.getComponentById("masterpiece");
	var b = s.Export("c:\\zout.dat","Just another test");
	alert(b);
]]></Implementation>
</Method>

<Method name="getData">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var s = this.getComponentById("masterpiece");
	var path = s.getValue();
//	var d = document.getElementById("dumpspace");
//	d.innerHTML = path;
]]></Implementation>
</Method>

<Method name="autoRefresh">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.findObject();
	this.max--;
	if (this.max>0)setTimeout("zenPage.autoRefresh();",1000);
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	return;
	
	if (navigator.userAgent.indexOf("Mobile")>0) return;

	var ctrl = zenPage.getComponentById('objId');
	var id = ctrl.getValue();
	this.max = 600;
	if (id=="7") this.autoRefresh();
]]></Implementation>
</Method>

<Method name="makeCRCTable">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.ArrayOfDataTypes</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set a = ##class(%Library.ArrayOfDataTypes).%New()
	For n=0:1:256 {
		Set c = n
		For k=0:1:8 {
			Set odd = $ZBOOLEAN(c,1,1)
			If (odd) {
				// c = -306674912 ^ ((c >> 1) & 0x7fffffff);
			}
			Else {
      			// c = (c >> 1) & 0x7fffffff;
			}
		}	
		Do a.SetAt(c,n)			
	}
	Quit a
]]></Implementation>
</Method>
</Class>


<Class name="ZENMobile.ZenInMotion">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mobile.mobilePage</Super>
<TimeChanged>62832,78329.263842</TimeChanged>
<TimeCreated>62832,76768.634245</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENMobile.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Zen In Motion</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
#goal {
	width:60px;
	height:60px;
	border-radius: 30px;
	-webkit-radius: 30px;
	position: absolute;
	background-color: #000042;
}

#ball {
	width: 40px;
	height: 40px;
	border-radius: 20px;
	-webkit-radius: 20px;
	background-color: red;
	position:absolute;
	top: 0px;
	left: 0px;
}

.bumber {
	position:absolute;
	width: 25px;
	height: 25px;
	border-radius: 3px;
	-webkit-radius: 3px;
	border: 2px solid #00aa00;
	background: #55ff66;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="">
<group layout="none" id="timestamp" enclosingStyle="text-align:center;font:bold 24px Arial;">
</group>
</page>
]]></Data>
</XData>

<Method name="buildScreen">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var body = document.getElementById("zenBody");
	if (this.noJoy) {
		body.innerHTML = "Your browser or device does not support Device Orientation and Motion API. Try this sample with iPhone, iPod or iPad with iOS 4.2+.";
	}
	else {
		var w = zenPage.activeWidth;
		var h = zenPage.activeHeight;
		
		var gd = document.createElement("DIV");
		gd.setAttribute("id","goal");
		gd.ux = w/2-45;
		gd.uy = h/2-45;
		gd.lx = gd.ux+35;
		gd.ly = gd.uy+35
		gd.style.top = (gd.uy+15)+"px";
		gd.style.left = (gd.ux+15)+"px";
		body.appendChild(gd);
		this.goalDiv = gd;

		this.bumpers = [];
		var xSlice = w/8;
		var ySlice = h/8;
		for (var i=0;i<20;i++) {
			var b = document.createElement("DIV");
			b.setAttribute("class","bumber");
			var x = Math.round(Math.random()*2*xSlice);
			var y = Math.round(Math.random()*2*ySlice);
			if (Math.random()>0.5) x+=5*xSlice;
			else x+=xSlice;
			if (Math.random()>0.5) y+=5*ySlice;
			else y+=ySlice;
			b.style.top = y + "px";
			b.style.left = x + "px";
			b.ux = x;
			b.uy = y;
			b.lx = x+25;
			b.ly = y+25;
			body.appendChild(b);
			this.bumpers.push(b);
		}	
		this.ballDiv = document.createElement("DIV");
		this.ballDiv.setAttribute("id","ball");
		body.appendChild(this.ballDiv);
	}
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// Ball position
	this.x = 0;
	this.y = 0;
	
	// Ball Speed
	this.vx = 0;
	this.vy = 0;

	// Acceleration
	this.ax = 0;
	this.ay = 0;

	this.delay = 10;
	this.vMultiplier = 0.01;
	this.noJoy = true;
	if (zenPage.featureDeviceMotion) {
		this.noJoy = false;
		setTimeout("zenPage.moveBall();",1000);
	}		
	setTimeout("zenPage.buildScreen();",0);
	this.startTime = "new";
	this.timeDiv = zen("timestamp").getEnclosingDiv();
]]></Implementation>
</Method>

<Method name="ondevicemotionHandler">
<FormalSpec>event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.ax = event.accelerationIncludingGravity.x;
	this.ay = event.accelerationIncludingGravity.y;
	// if, for some reason, orientation isn't locked, we need
	// to accound for the fact that the display is rotated but the
	// coordinate system of the gyroscopes is not.
	if (window.orientation == 180) { // upside down portrait reverse sign
		this.ax = -this.ax;
		this.ay = -this.ay;
	}
	else if (window.orientation == -90) { // landscape 
		var t = this.ax;
		this.ax = this.ay;
		this.ay = -t;
	}
	else if (window.orientation == 90) { // other landscape
		var t = this.ax;
		this.ax = -this.ay;
		this.ay = t;
	}
	
/*
	if (event.accelerationIncludingGravity.z > 10.5 && !this.tripped) {
		this.tripped = true;
		alert("Clear!");
	}
*/
]]></Implementation>
</Method>

<Method name="intersect">
<FormalSpec>x1,y1,r1,x2,y2,r2</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var dSquare = (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
	var rSquare = (r1+r2)*(r1+r2);
	return(dSquare<rSquare);
]]></Implementation>
</Method>

<Method name="moveBall">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var now = Date.now();
	if (this.startTime=="new") this.startTime = now;
	var deltaT = Math.round((now-this.startTime)/100)/10;
	this.timeDiv.innerHTML = "Ellapsed Time: "+deltaT;
	
	var e = 0.5;
	var done=false;
	
	this.vy += -(this.ay);
	this.vx += this.ax;

	this.y = Math.floor(this.y + this.vy * this.vMultiplier);
	this.x = Math.floor(this.x + this.vx * this.vMultiplier);
		
	var bux = this.x;
	var buy = this.y;
	var blx = bux+40;
	var bly = buy+40;
	
	for (var i=this.bumpers.length-1;i>=0;i--) {
		var b = this.bumpers[i];
		if (this.intersect(bux+20,buy+20,20,(b.ux+b.lx)/2,(b.uy+b.ly)/2,(b.lx-b.ux)/2)) {		
			if (bux<b.lx && bux>b.ux) { // bump to the right?
				this.x = b.lx;
				this.vx = -2*e*this.vx;	
			}
			else if (this.x+40>b.ux && this.x+40<b.lx){ // bump to left
				this.x = b.ux-40;
				this.vx = -2*e*this.vx;
			}
			if (this.y<b.ly && this.y>b.uy) { // bump down
				this.y = b.ly;
				this.vy = -2*e*this.vy;
			}
			else if (this.y+40>b.uy && this.y+40<b.ly) { // bump up
				this.y = b.uy-40;
				this.vy = -2*e*this.vy;
			}
		}
	}
	if (this.x<0) { 
		this.x = 0; 
		this.vx = -e*this.vx; 
	}
	if (this.y<0) { 
		this.y = 0; 
		this.vy = -e*this.vy; 
	}
	if (this.x>zenPage.activeWidth-40) { 
		this.x = zenPage.activeWidth-40;
		this.vx = -e*this.vx; 
	}
	if (this.y>zenPage.activeHeight-40) { 
		this.y = zenPage.activeHeight-40; 
		this.vy = -e*this.vy; 
	}

	if (this.x>this.goalDiv.ux && this.x<this.goalDiv.lx &&
		this.y>this.goalDiv.uy && this.y<this.goalDiv.ly) {
			done = true;
			this.x = zenPage.activeWidth/2-20;
			this.y = zenPage.activeHeight/2-20;
			this.ballDiv.style.background = "#aa0000";
	}
	if (this.ballDiv) {
		this.ballDiv.style.top = this.y + "px";
		this.ballDiv.style.left = this.x + "px";
	}
	if (!done) setTimeout("zenPage.moveBall();",zenPage.delay);
]]></Implementation>
</Method>
</Class>


<Class name="ZENMobile.ZenSudoku">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mobile.mobilePage</Super>
<TimeChanged>62873,37413.281951</TimeChanged>
<TimeCreated>62832,76572.341768</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENMobile.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Zen Sudoku</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENTEST</Default>
</Parameter>

<Property name="titleHeight">
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>20</InitialExpression>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
#splashScreen {
	position:absolute;
	top:0px;
	left:0px;
	right:0px;
	bottom:0px;
	background: #a7cfdf; /* Old browsers */
	background: -moz-linear-gradient(top, #a7cfdf 0%, #23538a 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#a7cfdf), color-stop(100%,#23538a)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top, #a7cfdf 0%,#23538a 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top, #a7cfdf 0%,#23538a 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top, #a7cfdf 0%,#23538a 100%); /* IE10+ */
	background: linear-gradient(to bottom, #a7cfdf 0%,#23538a 100%); /* W3C */
}

.scrollRollTop {
	position:absolute;
	left:5%;
	right:5%;
	height:10%;
	border:1px solid #001020;
	background: #f6e6b4; /* Old browsers */
	background: -moz-linear-gradient(top, #f6e6b4 0%, #ed9017 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f6e6b4), color-stop(100%,#ed9017)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top, #f6e6b4 0%,#ed9017 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top, #f6e6b4 0%,#ed9017 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top, #f6e6b4 0%,#ed9017 100%); /* IE10+ */
	background: linear-gradient(to bottom, #f6e6b4 0%,#ed9017 100%); /* W3C */	
	animation-duration:3s;
	animation-name: rollUp;
}

@keyframes rollUp {
	from {
		top:40%;
	}
	to {
		top:5%;
	}
}

.scrollRollBottom {
	position:absolute;
	left:5%;
	right:5%;
	height:100%;
	border:1px solid #001020;
	background: #f6e6b4; /* Old browsers */
	background: -moz-linear-gradient(top, #f6e6b4 0%, #ed9017 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f6e6b4), color-stop(100%,#ed9017)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top, #f6e6b4 0%,#ed9017 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top, #f6e6b4 0%,#ed9017 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top, #f6e6b4 0%,#ed9017 100%); /* IE10+ */
	background: linear-gradient(to bottom, #f6e6b4 0%,#ed9017 100%); /* W3C */	
}

.lowerScrollPart {
	position:absolute;
	left:0%;
	right:0%;
	height:10%;
	animation-duration:3s;
	animation-name: rollDown; 
}

@keyframes rollDown {
	from {bottom:40%;}
	to {bottom:5%;}
}

@-webkit-keyframes rollDown {
	from {bottom:40%;}
	to {bottom:5%;}
}

@-moz-keyframes rollDown {
	from {bottom:40%;}
	to {bottom:5%;}
}

.scrollBody {
	position:absolute;
	left:5%;
	right:5%;

	top:15%;
	bottom:15%;

	border:1px solid #001020;
	background: #e6d6a4;
	overflow:hidden;
	animation-duration:3s;
	animation-name: openBody;
}

@keyframes openBody {
	from {top:50%;bottom:50%;}
	to {top:15%; bottom:15%;}
}

@-webkit-keyframes openBody {
	from {top:50%;bottom:50%;}
	to {top:15%;bottom:15%;}
}

@-moz-keyframes openBody {
	from {top:50%;bottom:50%;}
	to {top:15%;bottom:15%;}
}

.scrollRender {
	width:100%;
	height:222px;
	position:relative;
	animation-duration:3s;
	animation-name: openRender;
}

@keyframes openRender {
	from {top:-111px;}
	to {top:0px;}
}

@-webkit-keyframes openRender {
	from {top:-111px;}
	to {top:0px;}
}

@-moz-keyframes openRender {
	from {top:-111px;}
	to {top:0px;}
}

#baseScreen {
	position:absolute;
	top:0px;
	left:0px;
	right:0px;
	bottom:0px;
}

#topBar {
	position:absolute;
	display:block;
	top:0px;
	left:0px;
	width:100%;
	color:#003366;
	font-weight:bold;
	font-size:18px;
	text-align:center;
}

#playspaceLandscape {
	position:absolute;
	display:block;
	top:20px;
	left:0px;
	right:0px;
	bottom:0px;
}
	
#sideBarLandscape {
	position:absolute;
	display:block;
	top:0px;
	left:0px;
	height:100%;
}

#playspacePortrait {
	position:absolute;
	display:none;
	top:20px;
	left:0px;
	right:0px;
	bottom:0px;
}

#bottomBarPortrait {
	position:absolute;
	display:block;
	bottom:0px;
	left:0px;
	width: 100%;
}

#board {
	position:absolute;
	display:block;
	right:0px;
	background:#003366;
}

#tooSmallError {
	position:absolute;
	top:0px;
	left:0px;
	right:0px;
	bottom:0px;
	background:#ffff00;
	color:#ff0000;
	font:bold 28px sans-serif;
	text-align:center;
	padding:10%;
	display:none;
}

#mainBody {
	
}

.focusMarker {
	position:absolute;
	top:0px;
	left:0px;
	bottom:1px;
	right:1px;
	display:none;
	border:3px solid #ffff22;
	-webkit-border-radius: 3px;
	-moz-border-radius: 3px;
	border-radius: 3px;
}
	
.tallKey {
	position:absolute;
	display:block;
	border:2px solid #003366;
	bottom:4%;
	width:8%;
	text-align:center;
	font-family:sans-serif;
	font-weight:bold;
	background: #5083B6;
	color: #efef11;
	-webkit-border-radius: 3px;
	-moz-border-radius: 3px;
	border-radius: 3px;
}

.sideKey {
	position:absolute;
	display:block;
	border:2px solid #003366;
	width:27%;
	text-align:center;
	font-family:sans-serif;
	font-weight:bold;
	background: #5083B6;
	color: #efef11;
	-webkit-border-radius: 3px;
	-moz-border-radius: 3px;
	border-radius: 3px;
}

.timestamp {
	position:absolute;
	left:0%;
	width:100%;
	height:24px;
	bottom:4%;
	font:bold 24px Arial;
	display:block;
	color:#003366;
	text-align:center;	
}

.keyPlate {
	position:absolute;
	top:0px;
	left:0px;
	right:0px;
	bottom:0px;
	background:#ffffff;
	opacity:0.8;
	display:none;
}

.cellPlain {
	position:absolute;
	display:block;
	width:11%;
	height:11%;
	border:1px solid #a7a7a7;
	background:#003366;
}

.givenCell {
	width:90%;
	height:90%;
	margin-top:10%;
	text-align:center;
	font-family:sans-serif;
	font-weight:bold;
	color: #e0e0e0;
}

.guessedCell {
	width:90%;
	height:90%;
	margin-top:10%;
	text-align:center;
	font-family:sans-serif;
	font-weight:bold;
	color: #ffff22;
}

.notesCell {
	width:90%;
	height:90%;
	position:absolute;
	top:5%;
	left:5%;
}

.noteTxt {
	width:33%;
	height:33%;
	position:absolute;
	text-align:center;
	font-family:sans-serif;
	font-weight:bold;
	color: #ffff22;
	display:none;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="" layout="none">
<group layout="none" id="baseScreen">
<group layout="none" id="topBar">
</group>

<group layout="none" id="playspaceLandscape">
<group layout="none" id="sideBarLandscape">
</group>
</group>

<group layout="none" id="playspacePortrait">
<group layout="none" id="bottomBarPortrait">
</group>
</group>

<group layout="none" id="board">
</group>

<group layout="none" id="tooSmallError" >
<html>
Please do not run this App in Landscape mode on a tiny screen.  It's just not worth it.
</html>
</group>
</group>

<!--
<group layout="none" id="splashScreen" >
<group layout="none" enclosingClass="scrollBody" >
<group layout="none" enclosingClass="scrollRender">
<html enclosingStyle="margin-left:auto; margin-right:auto;width:205px;margin-top:10px;">
<svg 
     version="1.1" 
     xmlns="http://www.w3.org/2000/svg" 
     xmlns:xlink="http://www.w3.org/1999/xlink" 
     width="205px" height="78px" 
     viewBox="0 0 205 78" preserveAspectRatio="none"> 
   <g> 
<image width="205" height="78" xlink:href="data:image/gif;base64, 
R0lGODlhzQBOAMQAAMzI05mWwGZlrfLu4uXh3UA/ntnV2LKvyoB+tllYqI2Ku3NxsaWjxb+8z01M
ozMzmf/65wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAA
AAAALAAAAADNAE4AAAX/ICSOZGmeaKqubOu+cCzPdG3feK7vfO//wKBwSCwaj8ikcslsOp/QqHRK
rVqv2Kx2y+16v+CweEwum8/oKmANIA8YggcifX3YH2IC4m4f0Kt8YQcFfHYBf1SBX3uFDggHiFOK
XQGFCAaRgHdeAHwFbZmadl4JdwWYoaJ4XJ13DaksBqBGigQBAQwoB7e8vb63kLa/wCIAvwyoJAp3
CSYNvLkmwrcE0sbD2NXY1CW7tyfP3ygGCIQPfrSbEAN31SZxhfF8AhCt8vQQlffJEKV20SQO8EGn
7I4DEm/8yVv4oA3DhiXgrYp4h58IAhINHZl0R8GJjA/t0LMXD5++hZBE//CZNYKdKxMKPYpgYC6k
vDYK47GEsBLmnZ2D4hUgOISjnaHvbM6rx9Dkw1Mq7xAdsaBjCZd23DFSehMCyJ4kwIb9GbBQAQQN
3BUxqpHiPwDoFM5Zh8leArUEUJ0MMACAgpr4+FgUIdBOs7KGRWw1tSDAGlQN+LiD6/UOwHpT+Rwi
QYBPSggGCvFVwvYBUhISWUrcPMIePhN7RxioWY3PKxMDahLdmqvwHQQ7W08akVpF6Dusi2kmbmpw
ulFRkbuFyLytcJEoYo9Y9q+yHZkmtn6GQBuCA1PBSZBMaif9dewkGCwHzedyktKmiRav/iA5U/iw
SffeHCcVgEJkdsz13/8DC0CAoB3OqWcQe9ShQNJh2/Ex10kHNYHfA+B5V6GI/rmWnYAiYEVPZ3eM
R4I5BorA3QOQnNTgCiZO595MhUz3AD5VfefEhw+otZ8IErmYY4DWRYePRA5MpVhFIpzXBwRB9sfC
kvztmE8hapm3lIgu3qcOTyV1ScJJO3G5JopOKgfnCA96xCKDSM55gpsienlSe2NNSOaQZ6KUJ3Qj
sFkCnyJoJyeeImT5gHPmHCSfHSnNeKMKfB55gqRaPqpOliGSVqhICiElUQmKSgggq3D6xhoBNWFI
wlYGKISOb+fgeMdraqYAEni8QnfpAx0ywZYAJDW46puAuvpAAmys4Y7/o1i2GB8fpdJn2B2bYhVq
Cp1aVu1O8KSbqEhU3kmjh6f+CMGMDzTw7LrRvhfPZo66G6aII1YZz3iL/XvVrxTGU8JvdiQbZKsS
nWYqoggPYKVpF8Oar6iiNYqiRMBeVFOUJdB75Qi0IqyCyqgtZCuaDZ3pj2+gHGfHpmZSDB9Jw325
8YL7eqwRAZKm9yCIJdh8swnHPmDfwq8eKg9CP8EDylEws0bvbTlPxPKfZwodsD0O+ALKSQKAinMJ
RZdw8bsJRwhzyCIi4Iu0ADACyXH0oGixKQYTsSwJOSEqdpssayxPAlK2NHLJA52QsmGNz03hjvb4
fEgrHpmjoLdRrxUv/7Cz9Qjt2ImfXgjjKxydnG9008ktCqn3mcKx/zWoTy7qbqtnUaOX0PREhy9a
uwhHz85CxAQxOsJiXAdKt6eKr5MYI230ToKkcv8wONs9t/pe7A7+euzLKLjLmvMppipl7dQXJC95
o8ATKdZXjVy598FflfHpiAud2A6hqxZs5TTsE4HS1mY5HQkLPvA4TodOsqf5iE5n85uO4gKYQcUd
YkbRS4G7UpJAsQUMfmRBQe+4g6AbnSRw9Aoc/zAYu3sVT1rki02dXJClG5VQBAoJGQp/FiiZXAoe
/Eqh/37zHK8J0IY+Q50Ao3gIrKBPF4r4IdBYMsSABWozrTDHbezhHv9eybAH39Pg6ezjPO0o5Iyc
EcyCyEehz3XRPXdiDZge5R8SXKxbM3RiB/njQeNNUTszKhPtyKJFCPgmRnFyYAUxNYK3vaePIzjf
BQUJyZYZjoqGHCS+QvUgBqJAIW1opLjUckcs5gtkgTKlAnsGhNJ8pB2nK9HxQGk9/LGgJ40UU75a
eQLxnSREu4wO8YJgy8vlMpQ5/NhLVsCrR9HRmRC4Uyel5p4ZzeJB4xHUIj9Zy3gtk5vPxOGJrHOS
z53gbwmy5gvkCDRsUoggBhCAPvmhEBHSMpAj+KensDXHdY7LZtssAQFygopGrkdU9ixBP5eHS9wo
RJZoNOctN0bQNsL/6WIhzGRNxtVIiWzqoZ70ojJbEL9ciUUIzZSkjObk0SZtxZ1veJsc1MmCxXwG
pcE6WNhSIB4SNABUgAToSiO6GmgaNDkPQooBGACqePI0BQNYjK2Aik4TaHEvU13ASK26yYAOtatS
06VhznW2OdVqrKYIKftsMVKo6ItCDDhXNR50zVE+BJPM1ChTafqQAZZgMQtRQOP4pIfCmUZJtHSs
dNDWguGVpHtKhdk5bccftS7EsNISSgDOyKivOGAwXNVs0LbSV47xYQFeCix0lLbReqXUs1PjpR/N
ghYW8FVynhiNV2n5VxK1gGc/YgAch1CtFDXXBLKwFgmiC4B/9YWtUGy4CBsMRl0AYJYzbIjQHgRw
gP1ddw1exa50qbtc5z4XFvCNr3znS9/62ve++M2vfvfL3/76978ADrCAB0zgAhv4wAhOsIIXzOAG
O/jBDA4BADs=
"/> 
   </g> 
</svg>	
</html>
</group>
</group>
<group layout="none" enclosingClass="lowerScrollPart" enclosingStyle="bottom:5%" >
<group layout="none" enclosingClass="scrollRollBottom" enclosingStyle="bottom:5%">
</group>
</group>

<group layout="none" enclosingClass="scrollRollTop" enclosingStyle="top:5%">
</group>
</group>
-->
</page>
]]></Data>
</XData>

<Method name="makeBottomBarKey">
<FormalSpec>val,bar,sz</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "bbk_"+val;
	div.setAttribute("class","tallKey");
	div.setAttribute("onclick","zenPage.keypadClick("+val+");");
	div.setAttribute("ontouchstart","zenPage.keypadTouchStart(this,event);");
	div.setAttribute("ontouchend","zenPage.keypadTouchEnd(this,event,"+val+");");
	div.style.left = (val*10-4)+"%";
	div.style.top = "44%";
	div.style.bottom = "4%";
	//div.style.height = (sz*1.1)+"px";
	div.innerHTML = "<div style='position:absolute;top:50%;left:0px;right:0px;margin-top:-50%'>"+val+"</div>";
	div.style.fontSize = sz+"px";
	bar.appendChild(div);

	var plate = document.createElement("DIV");
	plate.setAttribute("class","keyPlate");
	plate.id = div.id+"_p";
	plate.setAttribute("onclick","ZLM.killEvent(event);");
	plate.setAttribute("ontouchstart","ZLM.killEvent(event);");
	div.appendChild(plate);
]]></Implementation>
</Method>

<Method name="makeSideBarKey">
<FormalSpec>val,bar,sz</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var boxHeight = Math.round(sz*1.2);
	var row = Math.floor((val-1)/3);
	var col = (val-1)-row*3;
	var top = (1+row)*(boxHeight+5)+"px";
	var left = (5+col*30)+"%";
	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "sbk_"+val;
	div.setAttribute("class","sideKey");
	div.setAttribute("onclick","zenPage.keypadClick("+val+");");
	div.setAttribute("ontouchstart","zenPage.keypadTouchStart(this,event);");
	div.setAttribute("ontouchend","zenPage.keypadTouchEnd(this,event,"+val+");");
	div.style.top = top;
	div.style.left = left;
	div.style.height = boxHeight+"px";
	var margin = "-50%";
	if (zenIsGecko) margin = "-35%"; // different font engine
	div.innerHTML = "<div style='position:absolute;top:50%;left:0px;right:0px;margin-top:"+margin+"'>"+val+"</div>";
	div.style.fontSize = sz+"px";
	bar.appendChild(div);
	
	var plate = document.createElement("DIV");
	plate.setAttribute("class","keyPlate");
	plate.id = div.id+"_p";
	plate.setAttribute("onclick","ZLM.killEvent(event);");
	plate.setAttribute("ontouchstart","ZLM.killEvent(event);");
	div.appendChild(plate);
]]></Implementation>
</Method>

<Method name="disableEntryKey">
<FormalSpec>n</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var d = document.getElementById("sbk_"+n+"_p");
	if (d) d.style.display="block";
	var d = document.getElementById("bbk_"+n+"_p");
	if (d) d.style.display="block";
]]></Implementation>
</Method>

<Method name="enableEntryKey">
<FormalSpec>n</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var d = document.getElementById("sbk_"+n+"_p");
	if (d) d.style.display="none";
	var d = document.getElementById("bbk_"+n+"_p");
	if (d) d.style.display="none";
]]></Implementation>
</Method>

<Method name="populateBottomBar">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var b = this.getComponentById("bottomBarPortrait").getEnclosingDiv();
	for (var v=1;v<10;v++) this.makeBottomBarKey(v,b,this.fontSize);

	var lblSz = this.fontSize/2;
	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "bbk_solving";
	div.setAttribute("class","tallKey");
	div.style.left = "6%";
	div.style.width = "88%";
	div.style.top = "4%";
	div.style.bottom = "60%";
	div.innerHTML = "<div>Solving...</div>";
	div.style.fontSize = lblSz+"px";
	div.setAttribute("onclick","zenPage.switchMode(1,event);");
	div.setAttribute("ontouchstart","zenPage.switchMode(1,event);");
	b.appendChild(div);

	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "bbk_annotating";
	div.setAttribute("class","tallKey");
	div.style.left = "6%";
	div.style.width = "88%";
	div.style.top = "4%";
	div.style.bottom = "60%";
	div.innerHTML = "<div >Annotating...</div>";
	div.style.fontSize = lblSz+"px";
	div.style.display = "none";
	div.style.color = "#5083B6";
	div.style.background= "#efef11";
	div.setAttribute("onclick","zenPage.switchMode(0,event);");
	div.setAttribute("ontouchstart","zenPage.switchMode(0,event);");
	b.appendChild(div);
	
	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "bbk_solved";
	div.setAttribute("class","tallKey");
	div.style.left = "6%";
	div.style.width = "88%";
	div.style.top = "4%";
	div.style.bottom = "60%";
	div.innerHTML = "<div >DONE!</div>";
	div.style.fontSize = lblSz+"px";
	div.style.display = "none";
	div.style.color = "#5083B6";
	div.style.background= "#efef11";
	div.setAttribute("onclick","zenPage.switchMode(2,event);");
	div.setAttribute("ontouchstart","zenPage.switchMode(2,event);");

	b.appendChild(div);
]]></Implementation>
</Method>

<Method name="populateSideBar">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var sz = this.fontSize;
	var b = this.getComponentById("sideBarLandscape").getEnclosingDiv();
	for (var v=1;v<10;v++) this.makeSideBarKey(v,b,sz);

	var boxHeight = Math.round(sz*1.2);
	var l2Top =(4*(boxHeight+5)+5)+"px";
	var l1Top = "5px";
	
	var lblSz = this.fontSize/2;
	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "sbk_solving";
	div.setAttribute("class","tallKey");
	div.style.left = "5%";
	div.style.width = "87%";
	div.style.top = l1Top;
	div.style.height = this.fontSize+"px";
	div.innerHTML = "<div>Solving...</div>";
	div.style.fontSize = lblSz+"px";
	div.setAttribute("onclick","zenPage.switchMode(1,event);");
	div.setAttribute("ontouchstart","zenPage.switchMode(1,event);");
	b.appendChild(div);

	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "sbk_annotating";
	div.setAttribute("class","tallKey");
	div.style.left = "5%";
	div.style.width = "87%";
	div.style.top = l1Top;
	div.style.height = this.fontSize+"px";
	div.innerHTML = "<div >Annotating...</div>";
	div.style.fontSize = lblSz+"px";
	div.style.display = "none";
	div.style.color = "#5083B6";
	div.style.background= "#efef11";
	div.setAttribute("onclick","zenPage.switchMode(0,event);");
	div.setAttribute("ontouchstart","zenPage.switchMode(0,event);");
	b.appendChild(div);
	
	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "sbk_solved";
	div.setAttribute("class","tallKey");
	div.style.left = "5%";
	div.style.width = "87%";
	div.style.top = l1Top;
	div.style.height = this.fontSize+"px";
	div.innerHTML = "<div >DONE!</div>";
	div.style.fontSize = lblSz+"px";
	div.style.display = "none";
	div.style.color = "#5083B6";
	div.style.background= "#efef11";
	div.setAttribute("onclick","zenPage.switchMode(2,event);");
	div.setAttribute("ontouchstart","zenPage.switchMode(2,event);");
	b.appendChild(div);

	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "sbk_clear";
	div.setAttribute("class","tallKey");
	div.style.left = "5%";
	div.style.width = "87%";
	div.style.top = l2Top;
	div.style.height = this.fontSize+"px";
	div.innerHTML = "<div >Clear</div>";
	div.style.fontSize = lblSz+"px";
	div.style.display = "block";
	div.setAttribute("onclick","zenPage.clearFocusCell();");

	b.appendChild(div);

	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "sb_clock";
	div.setAttribute("class","timestamp");

	b.appendChild(div);
	zenPage.sbClock = div;
]]></Implementation>
</Method>

<Method name="makeGridCell">
<FormalSpec>row,col,board</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// The projection of a grid cell is a box with several overlapping
	// internal divs
	var div = document.createElement("DIV");
	if (!div) return;
	div.id = "rc_"+row+"_"+col;
	div.idx = row*9+col;
	zenPage.cells[div.idx] = div;
	var right = false;
	if (col==2 || col==5) right=true;
	var bottom = false;
	if (row==2 || row==5) bottom=true;
	div.setAttribute("class","cellPlain");
	div.setAttribute("onclick","zenPage.setCellFocus(this,event);");
	div.setAttribute("ontouchstart","zenPage.setCellFocus(this,event);");
	div.style.top = (0.5+row*11)+"%";
	div.style.left = (0.5+col*11)+"%";
	var bright = false;
	if (row<3 && col>=3 && col<=5) bright=true;
	else if (row>=3 && row<=5 && (col<3 || col>5)) bright=true;
	else if (row>5 && col>=3 && col<=5) bright=true;
	if (bright) {
		div.brightZone=1;
		div.style.background = "#225588";
	}
	board.appendChild(div);
	
	div.guess = -1;
	div.mode = "open";
	div.row = row;
	div.col = col;
	div.block = Math.floor(col/3)+Math.floor(row/3)*3;
	div.notes = [0,0,0,0,0,0,0,0,0];
	div.given = -1;
	
	var g = document.createElement("DIV");
	g.setAttribute("class","guessedCell");
	g.style.fontSize = this.fontSize+"px";
	g.style.display = "none";
	div.guessDiv = g;
	div.appendChild(g);

	var g = document.createElement("DIV");
	g.setAttribute("class","notesCell");
//	g.style.fontSize = this.fontSize+"px";
	g.style.display = "none";
	div.notesDiv = g;
	div.appendChild(g);
	for (var i=0;i<9;i++) {
		var n = document.createElement("DIV");
		n.setAttribute("class","noteTxt");
		n.setAttribute("id",div.id+"_n"+(i+1));
		n.innerHTML = (i+1);
		var nr = Math.floor(i/3);
		n.style.top = (nr*33)+"%";
		n.style.left = ((i-(nr*3))*33)+"%";
		n.style.fontSize = Math.floor(this.fontSize/3)+"px";
		g.appendChild(n);
	}
	
	var d = document.createElement("DIV");
	d.setAttribute("class","focusMarker");
	div.focusDiv = d;
	div.appendChild(d);
]]></Implementation>
</Method>

<Method name="makeBlankBoard">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var b = this.getComponentById("board").getEnclosingDiv();
	for (var i=0;i<9;i++) {
		for (var j=0;j<9;j++) {
			this.makeGridCell(i,j,b);
		}
	}
	
	var div = document.createElement("DIV");
	div.style.position="absolute";
	div.style.top = "33.5%";
	div.style.left = "0.5%";
	div.style.width = "99%";
	div.style.height = "0px";
	div.style.borderTop = "3px solid #e0e0e0";
	b.appendChild(div);

	var div = document.createElement("DIV");
	div.style.position="absolute";
	div.style.top = "66.5%";
	div.style.left = "0.5%";
	div.style.width = "99%";
	div.style.height = "0px";
	div.style.borderTop = "3px solid #e0e0e0";
	b.appendChild(div);

	var div = document.createElement("DIV");
	div.style.position="absolute";
	div.style.left = "66.5%";
	div.style.top = "0.5%";
	div.style.width = "0px";
	div.style.height = "99%";
	div.style.borderLeft = "3px solid #e0e0e0";
	b.appendChild(div);

	var div = document.createElement("DIV");
	div.style.position="absolute";
	div.style.left = "33.5%";
	div.style.top = "0.5%";
	div.style.width = "0px";
	div.style.height = "99%";
	div.style.borderLeft = "3px solid #e0e0e0";
	b.appendChild(div);
]]></Implementation>
</Method>

<Method name="getCell">
<FormalSpec>r,c</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var id = "rc_"+r+"_"+c;
	return(document.getElementById(id));
]]></Implementation>
</Method>

<Method name="setCellGiven">
<FormalSpec>r,c,val</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var div = this.getCell(r,c);
	if (!div) return;
	div.value = val;
	div.mode = "given";
	// Disable event handlers here
	div.innerHTML = "<div class='givenCell' style='font-size:"+this.fontSize+"px;'>"+val+"</div>"
]]></Implementation>
</Method>

<Method name="initPuzzle">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var given="7--632-------81--9134-----2---8-4-2--2--1--5--7-3-5---2-----6783--15-------278--5";
	zenPage.solution="798632541562481739134597862953864127826719453471325986215943678387156294649278315";
	var idx = 0;
	for (var r=0;r<9;r++) {
		for (var c=0;c<9;c++) {
			var ch = given.charAt(idx);
			if (ch != "-") this.setCellGiven(r,c,ch);
			idx++;
		}
	}
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ww = zenPage.getNativeWindowWidth();
	this.cells = [];
	
	this.fontSize = 26;
	if (ww>500) this.fontSize = 60;
	
	var TB = this.getComponentById("topBar").getEnclosingDiv();
	TB.innerHTML = "ZEN Sudoku - Mobile App Test page"
	this.makeBlankBoard();
	this.gameMode = 0;
	this.baseScreen = this.getComponentById("baseScreen").getEnclosingDiv();
//	setTimeout("zenPage.forceSimulatedRotate();",0);
	setTimeout("zenPage.populateBottomBar();",0);
	setTimeout("zenPage.populateSideBar();",0);
	setTimeout("zenPage.initPuzzle();",0);
	setTimeout("zenPage.updateTime();",1000);
]]></Implementation>
</Method>

<Method name="onrotateHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.baseScreen.style.display="none";
	var TB = this.topBarStyle;
	if (!TB) {
		TB = this.getComponentById("topBar").getEnclosingDiv().style;
		this.topBarStyle = TB;
	}
	var PP = this.playspacePortraitStyle;
	if (!PP) {
		PP = this.getComponentById("playspacePortrait").getEnclosingDiv().style;
		this.playspacePortraitStyle = PP;
	}
	PP.display="none";
	var PL = this.playspaceLandscapeStyle;
	if (!PL) {
		PL = this.getComponentById("playspaceLandscape").getEnclosingDiv().style;
		this.playspaceLandscapeStyle = PL;
	}
	PL.display="none";

	var SBL = this.sideBarLandscapeStyle;
	if (!SBL) {
		SBL = this.getComponentById("sideBarLandscape").getEnclosingDiv().style;
		this.sideBarLandscapeStyle = SBL;
	}
	
	var BBP = this.bottomBarPortraitStyle;
	if (!BBP) {
		BBP = this.getComponentById("bottomBarPortrait").getEnclosingDiv().style;
		this.bottomBarPortraitStyle = BBP;
	}
	var B = this.boardStyle;
	if (!B) {
		B = this.getComponentById("board").getEnclosingDiv().style;
		this.boardStyle = B;
	}
	var TSE = this.tooSmallErrorStyle;
	if (!TSE) {
		TSE = this.getComponentById("tooSmallError").getEnclosingDiv().style;
		this.tooSmallErrorStyle = TSE;
	}
	TSE.display = "none";
	
	TB.height = this.titleHeight+"px";
	PP.top = this.titleHeight+"px";
	PL.top = this.titleHeight+"px";
	B.top = this.titleHeight+"px";
	
	if (this.orientation=="landscape") {
		if (zenPage.activeHeight<300) {
			TSE.display="block";
			return;
		}
		PP.display="none";
		PL.display="block";
		var boardSize = zenPage.activeHeight-this.titleHeight;
		B.width = boardSize+"px";
		B.height = B.width;
		B.right = "0px";
		SBL.width = (zenPage.activeWidth-boardSize)+"px";
	}
	else {
		PL.display="none";
		PP.display="block";
		var boardSize = zenPage.activeWidth;
		var bannerSize = zenPage.activeHeight-boardSize-this.titleHeight;
		if (bannerSize<64) {
			bannerSize = 64;
			boardSize = zenPage.activeHeight-bannerSize-this.titleHeight;
			B.right = Math.round((zenPage.activeWidth-boardSize)/2)+"px";
		}
		B.width = boardSize+"px";
		B.height = B.width;
		BBP.height = bannerSize+"px";
	}
	this.baseScreen.style.display="block";
]]></Implementation>
</Method>

<Method name="setCellFocus">
<FormalSpec>who,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (!who) return;
	if (this.focusCell && this.focusCell.focusDiv) this.focusCell.focusDiv.style.display="none";
	this.focusCell = who;
	if (who.focusDiv) who.focusDiv.style.display="block";
	event.preventDefault();
]]></Implementation>
</Method>

<Method name="switchMode">
<FormalSpec>mode,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	
	this.gameMode = mode;
	var bSolve = this.bottomBarSolve;
	if (!bSolve) {
		bSolve = document.getElementById("bbk_solving");
		this.bottomBarSolve = bSolve;
	}
	var bDone = this.bottomBarDone;
	if (!bDone) {
		bDone = document.getElementById("bbk_solved");
		this.bottomBarDone = bDone;
	}
	var bNotes = this.bottomBarNotes;
	if (!bNotes) {
		bNotes = document.getElementById("bbk_annotating");
		this.bottomBarNotes;
	}
	var sSolve = this.sideBarSolve;
	if (!sSolve) {
		sSolve = document.getElementById("sbk_solving");
		this.sideBarSolve = sSolve;
	}
	var sDone = this.sideBarDone;
	if (!sDone) {
		sDone = document.getElementById("sbk_solved");
		this.sideBarDone = sDone;
	}
	var sNotes = this.sideBarNotes;
	if (!sNotes) {
		sNotes = document.getElementById("sbk_annotating");
		this.sideBarNotes = sNotes;
	}
	if (mode==1) { // switch to notes
		if (bSolve) bSolve.style.display = "none";
		if (bDone) bDone.style.display = "none";
		if (bNotes) bNotes.style.display = "block";
		if (sSolve) sSolve.style.display = "none";
		if (sDone) sDone.style.display = "none";
		if (sNotes) sNotes.style.display = "block";
	}
	else if (mode==0) {
		if (bSolve) bSolve.style.display = "block";
		if (bNotes) bNotes.style.display = "none";
		if (bDone) bDone.style.display = "none";
		if (sSolve) sSolve.style.display = "block";
		if (sNotes) sNotes.style.display = "none";
		if (sDone) sDone.style.display = "none";
	}
	else if (mode==2) {
		if (bSolve) bSolve.style.display = "none";
		if (bNotes) bNotes.style.display = "none";
		if (bDone) bDone.style.display = "block";
		if (sSolve) sSolve.style.display = "none";
		if (sNotes) sNotes.style.display = "none";
		if (sDone) sDone.style.display = "block";
	}
	if (event) event.preventDefault();
]]></Implementation>
</Method>

<Method name="validatePuzzle">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var done = true;
	var valid = [];
	for (var i=0;i<9;i++) valid[i]=0;
	for (var i=0;i<81;i++) {
		var c = zenPage.cells[i];
		if (c.mode=="open") done=false;
		else if (c.mode=="solved") valid[parseInt(c.guess)-1]++;
		else if (c.mode=="given") valid[parseInt(c.value)-1]++;
	}
	for (var i=0;i<9;i++) {
		if (valid[i]>=9) zenPage.disableEntryKey(i+1);
	}
	if (done) zenPage.switchMode(2);
]]></Implementation>
</Method>

<Method name="validateCell">
<FormalSpec>who</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (!who) return;
	var idx = who.idx;
	var trueValue = zenPage.solution.charAt(idx);
	if (who.guess == parseInt(trueValue)) {
		who.mode = "solved";
		// Disable event handlers here
		who.innerHTML = "<div class='guessedCell' style='font-size:"+this.fontSize+"px;'>"+who.guess+"</div>"
		zenPage.validatePuzzle();
	}
]]></Implementation>
</Method>

<Method name="guessCell">
<FormalSpec>who,val</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (who && who.guessDiv) {
		who.guessDiv.innerHTML = val;
		who.guessDiv.style.display = "block";
		who.mode = "filled";
		who.guess = val;
		
		// clear related hints here...
		var row = who.row;
		var col = who.col;
		var blk = who.block;
		for (var i=0;i<81;i++) {
			var c = zenPage.cells[i];
			if (c && (c.row==row || c.col == col || c.block ==blk)) {
				zenPage.clearNote(c,val);
			}
		}
		zenPage.validateCell(who);	
	}
]]></Implementation>
</Method>

<Method name="clearNote">
<FormalSpec>who,val</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (who && who.notesDiv) {
		var idx = parseInt(val)-1;
		who.notes[idx]=0;
		var d = document.getElementById(who.id+"_n"+val);
		if (d) d.style.display="none";
	}
]]></Implementation>
</Method>

<Method name="clearAllNotes">
<FormalSpec>who</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (who && who.notesDiv) {
		for (var i=0;i<9;i++) {
			who.notes[i]=0;
			var d = document.getElementById(who.id+"_n"+(i+1));
			if (d) d.style.display = "none";
		}
		who.notesDiv.style.display = "none";
	}
]]></Implementation>
</Method>

<Method name="clearCell">
<FormalSpec>who</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zenPage.clearAllNotes(who);
	if (who && who.guessDiv && who.mode!="solved") {
		who.guessDiv.innerHTML = "";
		who.guessDiv.style.display = "none";
		who.mode = "open";
		who.guess = -1;
	}
]]></Implementation>
</Method>

<Method name="clearFocusCell">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (!this.focusCell) return;
	zenPage.clearCell(this.focusCell);
]]></Implementation>
</Method>

<Method name="setNote">
<FormalSpec>who,val</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (who && who.notesDiv) {
		var idx = parseInt(val)-1;
		who.notes[idx]=1;
		var d = document.getElementById(who.id+"_n"+val);
		if (d) d.style.display="block";
	}
]]></Implementation>
</Method>

<Method name="toggleNotes">
<FormalSpec>who,val</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (who && who.notesDiv ) {
		var n = who.notes;
		var idx = parseInt(val)-1;
		if (n[idx]==0) { // adding note
			zenPage.setNote(who,val);
			who.notesDiv.style.display = "block";
		}
		else { // removing note
			zenPage.clearNote(who,val);
		}
	}
]]></Implementation>
</Method>

<Method name="forceSimulatedRotate">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (!zenPage.isDesktopBrowser()) return;
	var tmp = zenPage.simulatedDeviceWidth;
	zenPage.simulatedDeviceWidth = zenPage.simulatedDeviceHeight;
	zenPage.simulatedDeviceHeight = tmp;
	zenPage.fireOnRotateEvent();
]]></Implementation>
</Method>

<Method name="keypadClick">
<FormalSpec>val</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (!this.focusCell) return;
	if (this.gameMode==0) { // user has entered a guess
		zenPage.guessCell(this.focusCell,val);
	}
	else { // user is toggling hints
		zenPage.toggleNotes(this.focusCell,val);
	}
]]></Implementation>
</Method>

<Method name="keypadTouchStart">
<FormalSpec>who,event</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (!this.focusCell) return;
	var t=event.touches;
	if (t.length!=1) return;
	who.armed = true;
	who.preventDefault();
]]></Implementation>
</Method>

<Method name="keypadTouchEnd">
<FormalSpec>who,event,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (!this.focusCell) return;
	if (!who.armed) return;
	who.armed = false;
	zenPage.keypadClick(value);
	event.preventDefault();
]]></Implementation>
</Method>

<Method name="updateTime">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (zenPage.gameMode == 2) return;
	var now=Date.now();
	if (!zenPage.startTime) zenPage.startTime = now;
	var ellapsedTime = now-zenPage.startTime;
	var seconds = Math.floor(ellapsedTime/1000);
	var minutes = Math.floor(seconds/60);
	var ticks = seconds-minutes*60;
	var s = [];
	s.push(minutes+":");
	if (ticks<10) s.push("0");
	s.push(ticks);
	zenPage.sbClock.innerHTML = s.join("");
	setTimeout("zenPage.updateTime();",1000);
]]></Implementation>
</Method>
</Class>


<Class name="ZENReports.PageLayouts">
<Description>
Test case for Zen Report.</Description>
<Super>%ZEN.Report.reportPage</Super>
<TimeChanged>62270,42281.291803</TimeChanged>
<TimeCreated>60288,67444.278856</TimeCreated>

<Property name="ReportAuthor">
<Description>
Author of the report.</Description>
<Type>%String</Type>
<InitialExpression>"BOB"</InitialExpression>
</Property>

<Property name="Month">
<Description>
Month (1 to 12) to run this report for. "" for all months.</Description>
<Type>%Integer</Type>
<Parameter name="MAXVAL" value="12"/>
<Parameter name="MINVAL" value="1"/>
<Parameter name="ZENURL" value="MONTH"/>
</Property>

<Parameter name="XSLTMODE">
<Default>server</Default>
</Parameter>

<Parameter name="DEFAULTMODE">
<Default>pdf</Default>
</Parameter>

<XData name="ReportDefinition">
<Description>
XML that defines the contents of this report.</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/definition</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/definition" name='myReport' runonce="true">
<attribute name='runTime' expression='$ZDT($H,3)' />
<attribute name='runBy' expression='$UserName' />
<attribute name='author' expression='..ReportAuthor' />
<group name='Sales' sql="SELECT ID,Customer,Num,SalesRep,SaleDate 
	FROM ZENApp_Report.Invoice 
	WHERE (Month(SaleDate) = ?) OR (? IS NULL)
	ORDER BY SalesRep,SaleDate">
<parameter expression='..Month'/>
<parameter expression='..Month'/>
<attribute name='month' expression='..GetMonth()' />
<aggregate name='grandTotal' type="SUM" field='Num' />
<group name="SalesRep" breakOnField="SalesRep">
<attribute name='name' field='SalesRep' />
<aggregate name='count' type="COUNT" field='Num' />
<aggregate name='subtotal' type="SUM" field='Num' />
<aggregate name='avg' type="AVG" field='Num' />
<group name="record">
<attribute name='id' field='ID' />
<attribute name='number' field='Num' />
<element name='date' field='SaleDate' />
<element name='customer' field='Customer' />
</group>
</group>
</group>
<group name="ByNumber" sql="SELECT ID,Customer,Num,SalesRep,SaleDate 
	FROM ZENApp_Report.Invoice 
	WHERE ((Month(SaleDate) = ?) OR (? IS NULL)) AND (Num > 0)
	ORDER BY Num,Customer">
<parameter expression='..Month'/>
<parameter expression='..Month'/>
<group name="NumbRecs" breakOnField="Num">
<attribute name='number' field='Num' />
<group name="record">
<attribute name='id' field='ID' />
<attribute name='name' field='SalesRep' />
<element name='date' field='SaleDate' />
<element name='customer' field='Customer' />
</group>
</group>
</group>
<group name="ByDate" sql="SELECT ID,Customer,Num,SaleDate 
	FROM ZENApp_Report.Invoice 
	WHERE ((Month(SaleDate) = ?) OR (? IS NULL)) AND (Num = 0)
	ORDER BY SaleDate">
<parameter expression='..Month'/>
<parameter expression='..Month'/>
<group name="DateRecs"  breakOnField="SaleDate">
<attribute name='date' field='SaleDate' />
<group name="record">
<attribute name='id' field='ID' />
<element name='number' field='Num' />
<element name='customer' field='Customer' />
</group>
</group>
</group>
</report>
]]></Data>
</XData>

<XData name="ReportDisplay">
<Description>
XML description for the display of this report. Used to generate
XSlT stylesheets for both HTML and XSL-FO</Description>
<XMLNamespace>http://www.intersystems.com/zen/report/display</XMLNamespace>
<Data><![CDATA[
<report xmlns="http://www.intersystems.com/zen/report/display" name='myReport' 
title='HelpDesk Sales Report' style='standard' >

<section name="myReport" sectionName="Sales" primaryGroup="Sales/SalesRep">
<pagemaster>
<masterreference masterReference="first" pagePosition="first">
<document width="8.5in" height="11in" 
marginLeft="1.25in" marginRight="1.25in"
 marginTop="1.0in" marginBottom="1.0in" headerHeight="2.0in">
</document>
<pageheader>
<p class="banner1">HelpDesk Sales Report</p>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
<table orient="row" width="3.5in" class='table1'>
<item value="Sales by Sales Rep" width="2in">
<caption value="Title:" width="1.35in"/>
</item>
<item field="/myReport/Sales/@month" caption="Month:"/>
<item field="/myReport/@author" caption="Author:"/>
<item field="/myReport/@runBy" caption="Prepared By:"/>
<item field="/myReport/@runTime" caption="Time:"/>
</table>
</pageheader>
</masterreference>
<masterreference masterReference="rest" pagePosition="rest">
<document width="8.5in" height="11in" marginLeft="1.25in" 
marginRight="1.25in" marginTop="1.0in" 
marginBottom="1.0in" headerHeight=".75in">
</document>
<pageheader>
<table orient="col" layout="fixed" width="6in">
<item style="text-align:left" value="Sales Report" /> 
<item style="text-align:right" special="page-number-of-with-xpath" field="@name" />
</table>
</pageheader>
</masterreference>
</pagemaster>
<body genLastPageIdOn="@name">
<group name="Sales/SalesRep" primaryGroup="true">
<!-- SALES REP INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="3.8in" class='table2'>
<item field="@name" width="2in"><caption value="Sales Rep:" width="2in"/></item>
<item field="count"><caption value="Number of Sales:"/></item>
<item field="subtotal" formatNumber='###,###,##0.00;(#)'><caption value="Total Value of Sales:"/></item>
</table>
<line pattern="empty"/>


<!-- AVERAGE/DEVIATION -->
<table orient="col" width="6in" style="border:thin solid gray;" class="invisible">
<table orient="row" width="3in" style="margin-bottom:1em;padding-left:0;" class="table1" align="left">
<item field="avg" class="table1" style="margin-bottom:1em;padding-left:3px;" width="1.7in" formatNumber='###,###,##0.000;(#)'><caption value="Average Sale:" style="width:1.3in"/></item>
</table>
</table>
</header>

<!-- TABLE OF SALES -->
<table orient="col" group="record" width="6in" class="table4" altcolor="#DFDFFF" oldSummary="false">
<item special="number" width=".45in" style="color: darkblue;">
<caption value="#" />
</item>
<item field="@id" width=".7in" style="border:none;padding-right:4px">
<caption value="Sale ID"/>
</item>
<item field="date" width="1.5in" style="padding-left: 4px;">
<caption value="Date"/>
</item>
<item field="customer" width="2.65in">
<caption value="Customer"/>
</item>
<item caption="Amount" width=".7in" style="text-align:right;" field="@number" formatNumber='###,###,##0.00;(#)'>
<caption value="Amount"/>
<summary style="font-style:italic;text-align:right;background-color:yellow" value=" "/>
<summary style="font-style:italic;text-align:right;background-color:purple" value=" "/>
<summary style="font-style:italic;text-align:right;background-color:orange" value=" "/>
<summary field="subtotal" style="font-style:italic;text-align:right;background-color:blue" formatNumber='###,###,##0.00;(#)'/>
<summary field="subtotal" style="font-weight:bold;text-align:right;background-color:red" formatNumber='###,###,##0.00;(#)'/>
</item>
</table>
</group>
</body>	
</section>
<section name="myReport" sectionName="ByNumber" primaryGroup="ByNumber" >
<pagemaster>
<masterreference masterReference="first" pagePosition="first">
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" 
marginTop="1.0in" marginBottom="1.0in" headerHeight="1.0in" footerHeight="1.0in">
</document>
<pageheader>
<p class="banner1">Sales Report: Number of Sales</p>
</pageheader>
<pagefooter>
<table orient="col" layout="fixed" width="6in">
<item style="text-align:left" value="Sales Report" /> 
<item style="text-align:right" special="page-number-of-with-xpath" field="NumbRecs" />
</table>
</pagefooter>
</masterreference>
<masterreference masterReference="rest" pagePosition="rest">
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" 
marginTop="1.0in" marginBottom="1.0in" footerHeight="1.0in">
</document>
<pageheader>
</pageheader>
<pagefooter>
<table orient="col" layout="fixed" width="6in">
<item style="text-align:left" value="Sales Report" /> 
<item style="text-align:right" special="page-number-of-with-xpath" field="NumbRecs" />
</table>
</pagefooter>
</masterreference>
<masterreference masterReference="last" pagePosition="last">
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" 
marginTop="1.0in" marginBottom="1.0in" footerHeight="2.0in">
</document>
<pageheader>	
</pageheader>
<pagefooter>
<table orient="row" class="table1" width="2.5in">
<item caption="Grand Total:" field="/myReport/Sales/grandTotal" />
</table>
<fo><line pattern="empty"/><line pattern="empty"/></fo>
<table orient="col" layout="fixed" width="6in">
<item style="text-align:left" value="Sales Report" /> 
<item style="text-align:right" special="page-number-of-with-xpath" field="NumbRecs" />
</table>
</pagefooter>
</masterreference>
</pagemaster>
<body genLastPageIdOn="NumbRecs">
<!-- MAIN REPORT GROUP -->
<group name="ByNumber" primaryGroup="true">
<group name="NumbRecs" pagebreak="true" >

<!-- SALES REP INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="3.8in" class='table2'>
<item field="@number" width="2in"><caption value="Number of Sales:" width="2in"/></item>
</table>
<line pattern="empty"/>
</header>

<!-- TABLE OF SALES -->
<table orient="col" group="record" width="6in" class="table4" altcolor="#DFDFFF" oldSummary="false">
<item special="number" width=".4in" style="color: darkblue;">
<caption value="#" />
</item>
<item field="@id" width=".6in" style="border:none;padding-right:4px">
<caption value="Sale ID"/>
</item>
<item field="date" width="1.5in" style="padding-left: 4px;">
<caption value="Date"/>
</item>
<item field="customer" width="2.5in">
<caption value="Customer"/>
</item>
<item field="@name" width="1in">
<caption value="Sales Rep" width="2in"/>
</item>
</table>
</group>
</group>
</body>	
</section>
<section name="myReport" sectionName="ByDate" primaryGroup="ByDate" >
<pagemaster>
<masterreference masterReference="NumbA" pagePosition="any">
<document width="8.5in" height="11in" marginLeft="1.25in" marginRight="1.25in" 
marginTop="1.0in" marginBottom="1.0in" headerHeight="1.0in" footerHeight="1.0in">
</document>
<pageheader>
<p class="banner1">Sales Report: Date of Sale</p>
</pageheader>
<pagefooter>
<table orient="col" layout="fixed" width="6in">
<item style="text-align:left" value="Sales Report" /> 
<item style="text-align:right" special="page-number-of-with-xpath" field="DateRecs" />
</table>
</pagefooter>
</masterreference>
</pagemaster>
<body genLastPageIdOn="DateRecs">
<!-- MAIN REPORT GROUP -->
<group name="ByDate" primaryGroup="true">
<group name="DateRecs">
<foblock keepCondition="keep-together.within-page='always'">
<!-- SALES REP INFO -->
<header>
<line pattern="empty"/>
<table orient="row" width="4in" class='table2'>
<item field="@date" width="2in"><caption value="Date of Sales:" width="2in"/></item>
</table>
<line pattern="empty"/>
</header>

<!-- TABLE OF SALES -->
<table orient="col" group="record" width="4in" class="table4" altcolor="#DFDFFF" oldSummary="false">
<item special="number" width=".4in" style="color: darkblue;">
<caption value="#" />
</item>
<item field="@id" width=".6in" style="border:none;padding-right:4px">
<caption value="Sale ID"/>
</item>
<item field="customer" width="3in">
<caption value="Customer"/>
</item>
</table>
</foblock>
</group>
</group>
</body>	
</section>
</report>
]]></Data>
</XData>

<Method name="GetMonth">
<Description>
Return a formatted version of the month property.</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..Month="") Quit "ALL"
	
	#; convert to month name:
	Set tDT = "2006-"_$TR($J(..Month,2)," ","0")_"-01"
	Set tDT = $ZDTH(tDT,3) // convert to $H
	Set tDT = $ZDT(tDT,5) // convert to MMM format
	Quit $E(tDT,1,3)
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.ComboTest">
<Description>
ZENTest.ComboTest</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Combobox Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

.labelText {
	border: 1px solid darkblue;
	padding: 1px;
	margin: 1px;
	background: white;
	width: 100px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Combobox Test Page">
<demo:demoTitle id="title" title="Zen Combobox Test Page" category="Zen Test Suite" />

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="ComboBox" title="ComboBox Test Page" />
</locatorBar>

<titleBox title="Zen ComboBox Test Page" 
		subtitle="Use this page to test the various Zen custom combo box controls." />
<spacer height="25"/>
<hgroup>
<spacer width="25"/>
<select id="select" label="select" 
	valueList="True,False"
	displayList="Yes,No"
	showEmpty="false"
	value="False"
	onchange="zenPage.notifyOnChange(zenThis);"
	>
</select>

<spacer width="25"/>
<combobox id="combobox" label="combobox"
		onchange="zenPage.notifyOnChange(zenThis);"
		editable="false">
<option value="" text="" />
<option value="1" text="Apple" />
<option value="2" text="Banana" style="font-size: 2.5em; "/>
<option value="3" text="Carnitas" />
</combobox>

<spacer width="25"/>
<combobox id="comboboxEdit" label="combobox Editable" 
		onchange="zenPage.notifyOnChange(zenThis);"
		editable="true"
		unrestricted="true"	>
<option value="1" text="Apple" />
<option value="2" text="Banana" style="font-size: 2.5em; "/>
</combobox>

<spacer width="25"/>
<dataCombo id="dataCombo"
		comboType="button"
		buttonCaption="Find" 
		label="dataCombo" name="dataCombo"
		editable="true"
	 	unrestricted="true"	
		searchKeyLen="0"
		choiceColumn="1"
		valueColumn="2"
		maxRows="10000"
		displayColumns="1,4,3"
		dropdownWidth="50.0em"
		sql="SELECT Name,ID,Title,SSN FROM ZENDemo_Data.Employee ORDER BY Name"
		columnHeaders="Name,SSN,Title"
		onchange="zenPage.notifyOnChange(zenThis);"
		>
</dataCombo>

<spacer width="25"/>
<dataCombo id="dataCombo2"
		label="dataCombo2" name="dataCombo2"
		editable="true"
		unrestricted="true"
		searchKeyLen="3"
		dropdownWidth="20.0em"
		OnCreateResultSet="CreateComboRS"
		onchange="zenPage.notifyOnChange(zenThis);"
		>
</dataCombo>

<spacer width="25"/>
<dataCombo id="dataCombo3"
		comboType="timer"
		delay="400" 
		label="dataComboTimer" name="dataCombo3"
		editable="true"
		searchKeyLen="10"
		maxRows="10"
		onchange="zenPage.notifyOnChange(zenThis);"
		sql="SELECT TOP 100 ID,Name FROM ZENDemo_Data.Employee WHERE Name %STARTSWITH ? ORDER BY Name"
		sqlLookup="SELECT Name FROM ZENDemo_Data.Employee WHERE ID = ?"
		>
</dataCombo>

<spacer width="25"/>
<dataCombo id="dataComboX"
		label="dataComboX" name="dataComboX"
		editable="true"
		searchKeyLen="3"
		dropdownWidth="20.0em"
		queryClass="ZENDemo.Data.Employee"
		queryName="ListEmployees"
		onchange="zenPage.notifyOnChange(zenThis);"
		>
</dataCombo>
</hgroup>
<spacer height="50"/>

<hgroup>
<spacer width="25"/>
<listBox id="listBox" label="listBox" 
	listWidth="300px" 
	onchange="zenPage.notifyOnChange(zenThis);"
	value="2">
<option value="1" text="Apple" />
<option value="2" text="Banana" style="font-size: 1.5em; "/>
<option value="3" text="Cherry" />
<option value="4" text="Apple" />
<option value="5" text="Banana" style="font-size: 1.5em; "/>
<option value="6" text="Cherry" />
<option value="7" text="Apple" />
<option value="8" text="Banana" style="font-size: 1.5em; "/>
<option value="9" text="Cherry" />
<option value="10" text="Cherry" />
<option value="11" text="Cherry" />
<option value="12" text="Cherry" />
<option value="13" text="Cherry" />
<option value="14" text="Cherry" />
<option value="15" text="Cherry" />
<option value="16" text="Cherry" />
<option value="17" text="Cherry" />
</listBox>
<spacer width="25"/>
<dataListBox id="dataListBox" label="dataListBox" name="dataListBox"
		maxRows="1000"
		listHeight="300px"
		sql="SELECT Name FROM ZENDemo_Data.Employee ORDER BY Name"
		onchange="zenPage.notifyOnChange(zenThis);"
		>
</dataListBox>
</hgroup>
<vgroup>
<text id="currComp" label="Component:" readOnly="true"/>
<text id="currText" label="Text:" readOnly="true"/>
<text id="currValue" label="Value:" onchange="zenPage.changeValue(zenThis);"/>
<spacer height="25"/>
<button caption="Clear combobox" onclick="zenPage.getComponentById('combobox').resetOptions();"/>
<button caption="Add to combobox" onclick="zenPage.getComponentById('combobox').appendOption(22,'Elvis');"/>
</vgroup>

</page>
]]></Data>
</XData>

<Method name="CreateComboRS">
<Description>
Create the result set used by dataCombo2.</Description>
<FormalSpec>*tSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	Set tRS = ""
	Set tSC = $$$OK

	Set sql = "SELECT Name FROM ZENDemo_Data.Employee WHERE Name %STARTSWITH ? ORDER BY Name"
	Set tRS = ##class(%ResultSet).%New()
	Set tSC = tRS.Prepare(sql)
	Set pInfo.queryText = sql

	Quit tRS
]]></Implementation>
</Method>

<Method name="notifyOnChange">
<Description>
notifyOnChange: on change event handler.</Description>
<FormalSpec>comp</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// remember which component was changed
	this._currComp = comp;
	
	// display current value of component
	this.getComponentById('currComp').setValue(comp.id);
	this.getComponentById('currValue').setValue(comp.getValue());
	if (comp.id != "select") {
		this.getComponentById('currText').setValue(comp.getProperty('text'));
	} else {
		this.getComponentById('currText').setValue('');
	}
]]></Implementation>
</Method>

<Method name="changeValue">
<Description>
Change value of current component.</Description>
<FormalSpec>ctrl</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var comp = null;
	if (this._currComp) {
		comp = this._currComp;
	}

	// !!!
	//comp = zenPage.getComponentById('dataCombo');
	//comp.executeQuery();

	if (comp) {
		comp.setValue(ctrl.getValue());
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.DataGridTest">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>63337,51230.71907</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>DataGrid Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
#dataGrid {
	width: 100%;
	height: 500px;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="">
<demo:demoTitle id="title" title="Zen DataGrid Test Page" category="Zen Test Suite" />

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="DataGridTest" title="DataGrid Test Page" />
</locatorBar>

<titleBox title="Zen DataGrid Test Page" 
		subtitle="Use this page to test the various DataGrid box controls." />
<spacer height="25"/>
<jsonSQLProvider id="json" />
<vgroup width="100%" height="100%">
<hgroup enclosingStyle="background:#F0F0F0;">
<spacer width="600"/>
<label value="Filter current results : "/>
<image src="deepsee/ds2_magnify_18.png" onclick="zenPage.SetFilter(zen('txtFilter'));"/>
<text id="txtFilter" onchange="zenPage.SetFilter(zenThis);"/>
</hgroup>
 <dataGrid pageSize="20"  id="dataGrid" pagingMode="client" controllerId="json" sortMode="client" selectMode="cells" onaction="zenPage.fireAction(row,name,value);" onchangecell="return zenPage.fireChangeCell(value);" ongetlookupdata="return zenPage.fireLookupData();" >
 <columnDescriptor caption="ID" type="string" readOnly="false"/>
 <columnDescriptor caption="Age" type="string" readOnly="false"/>
 <columnDescriptor caption="DOB" type="string" readOnly="false"/>
 <columnDescriptor caption="FavoriteColors" type="lookup" readOnly="false" ongetlookupspec="return zenPage.fireLookupDataFavColors();"/>
 <columnDescriptor caption="Name" type="string" readOnly="false"/>
 <columnDescriptor caption="SSN" type="string" readOnly="false"/>
 <columnDescriptor caption="Spouse" type="lookup" readOnly="false"/>
 <columnDescriptor caption="Home_City" type="string" readOnly="false"/>
 <columnDescriptor caption="Home_State" type="lookup" readOnly="false" ongetlookupspec="return zenPage.fireLookupDataState('Home');"/>
 <columnDescriptor caption="Home_Street" type="string" readOnly="false"/>
 <columnDescriptor caption="Home_Zip" type="string" readOnly="false"/>
 <columnDescriptor caption="Office_City" type="string" readOnly="false"/>
 <columnDescriptor caption="Office_State" type="lookup" readOnly="false" ongetlookupspec="return zenPage.fireLookupDataState('Office');"/>
 <columnDescriptor caption="Office_Street" type="string" readOnly="false"/>
 <columnDescriptor caption="Office_Zip" type="string" readOnly="false"/>
 </dataGrid>
 <hgroup enclosingStyle="background:#F0F0F0;">
 <label value="Show all Names starting with : "/>
 <button caption="A" onclick="zenPage.changeQuery('A');"/>
 <button caption="B" onclick="zenPage.changeQuery('B');"/>
 <button caption="C" onclick="zenPage.changeQuery('C');"/>
 <label value=" ... "/>
 <button caption="Z" onclick="zenPage.changeQuery('Z');"/>
 <spacer width="10"/>
 <button caption="Show All" onclick="zenPage.changeQuery('');"/>
 </hgroup>
</vgroup>
</page>
]]></Data>
</XData>

<Method name="SetFilter">
<FormalSpec>pTextBox:%ZEN.Component.text</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	zen('dataGrid').setProperty('filterKey',pTextBox.getValue());
	zen('dataGrid').renderContents();
]]></Implementation>
</Method>

<Method name="fireChangeCell">
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	var cCol=zen('dataGrid').getProperty('currColumn');
	var cRow=zen('dataGrid').getProperty('currRow');
	var cPage=zen('dataGrid').getProperty('currPage');

	return value;
]]></Implementation>
</Method>

<Method name="fireLookupData">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var cCol=zen('dataGrid').getProperty('currColumn');

	if (cCol==4) return zenPage.fireLookupDataFavColors();  //Favorite Colors
	if (cCol==9) return zenPage.fireLookupDataState('Home');  //Home_State
	if (cCol==13) return zenPage.fireLookupDataState('Office');  //Office_State
]]></Implementation>
</Method>

<Method name="fireLookupDataFavColors">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//var values = ['Red','Orange','Yellow','Green','Blue','Purple','Black','White'];
	
	var FavColString = zenPage.GetFavoriteColors();
	var values = FavColString.split(',');
		  	
	return values
]]></Implementation>
</Method>

<Method name="GetFavoriteColors">
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	Quit "Red,Orange,Yellow,Green,Blue,Purple,Black,White"
]]></Implementation>
</Method>

<Method name="fireLookupDataState">
<FormalSpec>what</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var StatesString;
	
	if (what=='Home') StatesString = zenPage.GetStates(true);
	else  StatesString = zenPage.GetStates(false);
	
	var values = StatesString.split(',');
	//var values = ['MA','NY','OH'];
	
	return values
]]></Implementation>
</Method>

<Method name="GetStates">
<FormalSpec>Home:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	set sql="select distinct("_$s(Home=1:"Home",1:"Office")_"_State) as State from Sample.Person order by "_$s(Home=1:"Home",1:"Office")_"_State "_$s(Home=1:"asc",1:"desc")
	
	Set rs=##class(%ResultSet).%New()
	do rs.Prepare(sql)
	do rs.Execute()
	
	Set StatesString=""
	While (rs.Next()) {
		Set StatesString=StatesString_rs.Get("State")_","
	}
	
	do rs.Close()
	
	Set:$e(StatesString,$l(StatesString))="," StatesString=$e(StatesString,1,$l(StatesString)-1)
	
	Quit StatesString
]]></Implementation>
</Method>

<Method name="fireAction">
<FormalSpec>row,name,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert(row + ' : ' + name + ' : ' + value + ' : ' + zen('dataGrid').getCurrPage());
]]></Implementation>
</Method>

<Method name="changeQuery">
<FormalSpec>namestartswith</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ret = zenPage.ChangeQueryOnServer(namestartswith);
	zen('json').reloadContents();
]]></Implementation>
</Method>

<Method name="ChangeQueryOnServer">
<FormalSpec>namestartswith:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	
	set %page.%GetComponentById("json").sql = "select * from sample.person "_$s(namestartswith'="":"where name %startswith '"_namestartswith_"'",1:"")_" order by name"
	quit 1
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br/>
Subclasses can override this to add, remove, or modify 
items within the page object model, or to provide values
for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set provider = ..%GetComponentById("json")
	Set provider.sql = "select * from sample.person order by name"
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.DataModel">
<Description>
DataModel class used for test page.</Description>
<Super>%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60551,64600.642165</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="40"/>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="MAXLEN" value="40"/>
</Property>

<Property name="Sex">
<Description>
Enumerated property.</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",Male,Female,Other"/>
<Parameter name="MAXLEN" value="1"/>
<Parameter name="VALUELIST" value=",M,F,O"/>
</Property>

<Property name="Memo">
<Description>
Stream property.</Description>
<Type>%GlobalCharacterStream</Type>
</Property>

<Property name="Employee">
<Description>
Object reference property.</Description>
<Type>ZENDemo.Data.Employee</Type>
<Parameter name="ZENSQL" value="Select %Id,Name From ZENDemo_Data.Employee"/>
<Parameter name="ZENSQLLOOKUP" value="Select Name From ZENDemo_Data.Employee Where %Id=?"/>
</Property>

<Method name="%OnLoadModel">
<Description>
This callback method does the actual work of loading values from the source object.</Description>
<FormalSpec>pSource:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	If (..%id '= "") {
		Set ..Name = $G(^DataModel.Test(..%id,"Name"))
		Set ..City = $G(^DataModel.Test(..%id,"City"))
		Set ..Sex = $G(^DataModel.Test(..%id,"Sex"))
		Do ..Memo.Write($G(^DataModel.Test(..%id,"Memo")))
		Set id = $G(^DataModel.Test(..%id,"Employee"))
		Set:id'="" ..Employee = ##class(ZENDemo.Data.Employee).%OpenId(id)
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<Description><![CDATA[
This callback method does the actual work of copying values 
from the DataModel to the data source.<br>]]></Description>
<FormalSpec>pSource:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	If (..%id '= "") {
		Set ^DataModel.Test(..%id,"Name") = ..Name
		Set ^DataModel.Test(..%id,"City") = ..City
		Set ^DataModel.Test(..%id,"Sex") = ..Sex
		Set ^DataModel.Test(..%id,"Memo") = ..Memo.Read(32000)
		If $IsObject(..Employee) {
			Set ^DataModel.Test(..%id,"Employee") = ..Employee.%Id()
		}
		Else {
			Set ^DataModel.Test(..%id,"Employee") = ""
		}
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.DynaGridTest">
<Description>
Test of dynaGrid component.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60178,64228.461852</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Dynamic Grid Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

#dynaGrid {
	border: 1px solid darkblue;
	height: 200px;
	width: 600px;
	overflow: auto;
}

.button {
	width: 180px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Dynamic Grid Control Test">
<demo:demoTitle id="title" title="Zen dynaGrid Control Test Page" category="Zen Test Suite" />

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="dynaGrid" title="dynaGrid Test Page" />
</locatorBar>

<spacer height="25"/>

<hgroup>
<spacer width="50"/>
<button caption="Refresh from Server" onclick="zenPage.refreshGrid();" />
<spacer width="20"/>
<button caption="Hide Cells" onclick="zenPage.hideCells();" />
<spacer width="20"/>
<button caption="Add Page" onclick="zenPage.addPage();" />
<spacer width="20"/>
<button caption="Next Page" onclick="zenPage.nextPage();" />
<spacer width="20"/>
<button caption="Clear" onclick="zenPage.clearGrid();" />
<spacer width="20"/>
</hgroup>

<spacer height="5"/>
<hgroup>
<spacer width="50"/>
<button caption="Add Row" onclick="zenPage.addRow();" />
<spacer width="20"/>
<button caption="Add Column" onclick="zenPage.addColumn();" />
<spacer width="20"/>
<button caption="Move Row Up" onclick="zenPage.move('row',-1);" />
<spacer width="20"/>
<button caption="Move Row Down" onclick="zenPage.move('row',1);" />
<spacer width="20"/>
<button caption="Move Column Left" onclick="zenPage.move('col',-1);" />
<spacer width="20"/>
<button caption="Move Column Right" onclick="zenPage.move('col',1);" />
</hgroup>

<spacer height="5"/>

<hgroup>
<spacer width="50"/>
<dynaGrid id="dynaGrid" 
	gridLabel="Dynamic Grid"
	OnCreateDataSet="CreateDataSet"
	onchangecell="zenPage.cellChange(zenThis);"
	oneditcell="return zenPage.cellEdit(zenThis);"
	onclickcolumn="return zenPage.columnClick(column);"
	onclickrow="return zenPage.rowClick(row);"
	rowLabelWidth="225"
 	scrollIntoView="true"
>
<gridColumn width="100" style="color: red;" />
<gridColumn width="100"  readOnly="false"/>
<gridColumn width="100" title="This is column 3!" />
<gridColumn width="100" />
<gridColumn width="100" />

<gridRow style="color: blue;" />
<gridRow style="font-weight: bold;" title="This is row 2!" />
<gridRow readOnly="false" />
</dynaGrid>
</hgroup>


<spacer height="25"/>
<hgroup>
<spacer width="50"/>
<dynaGrid id="dynaGrid2" 
	gridLabel="Calculator"
	rowLabelWidth="200"
	onchange="zenPage.calcCellChange(zenThis);"
	ondrawcell="return zenPage.calcCellDraw(zenThis,data);"
>
<gridColumn label="Col 1" width="100" />
<gridColumn label="Col 2" width="100" />
<gridColumn label="Col 3" width="100" />
<gridColumn label="Total" width="200" readOnly="true" style="background: #E0E0F0; font-weight: bold;"/>

<gridRow label="Row 1" />
<gridRow label="Row 2" />
<gridRow label="Row 3" />
<gridRow label="Total" readOnly="true" style="background: #E0E0F0; font-weight: bold;"/>
</dynaGrid>	
</hgroup>

</page>
]]></Data>
</XData>

<Method name="CreateDataSet">
<Description>
Server-side callback to provide data for the dynaGrid.</Description>
<FormalSpec>pGrid:%ZEN.Component.dynaGrid,pDataSet:%ZEN.Auxiliary.dataSet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do pDataSet.%Clear()
	
	#; fill in contents of dataSet
	#; This is a 2-D data structure

	#; row labels (dimension 1)
	Do pDataSet.%SetLabel("US",1,1)
	Do pDataSet.%SetLabel("Europe",2,1)
	Do pDataSet.%SetLabel("Japan",3,1)
	Do pDataSet.%SetLabel("MidEast",4,1)
	Do pDataSet.%SetLabel("PacRim",5,1)
	Do pDataSet.%SetLabel("Latin America",6,1)

	#; column labels  (dimension 2)
	Do pDataSet.%SetLabel("Cars",1,2)
	Do pDataSet.%SetLabel("Trucks",2,2)
	Do pDataSet.%SetLabel("Trains",3,2)
	Do pDataSet.%SetLabel("Planes",4,2)
	Do pDataSet.%SetLabel("Boats",5,2)

	#; find size of dataSet
	Set rows = pDataSet.%GetDimSize(1)
	Set cols = pDataSet.%GetDimSize(2)

	#; fill in initial data
	For r=1:1:rows {
		For c=1:1:cols {
			Do pDataSet.%SetValue("R"_r_"C"_c,r,c)
		}
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="cellChange">
<Description>
cellChange: called when cell is changed in dynaGrid</Description>
<FormalSpec>grid</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
</Method>

<Method name="cellEdit">
<Description>
cellEdit: called when cell is about to be edited in dynaGrid</Description>
<FormalSpec>grid</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	return ''; // !!!

	var ret = '';
	var r = grid.getCurrRow();
	var c = grid.getCurrColumn();
	var value = grid.getCellValue(r,c);

	if (r==2 && c==2) {
		ret = '<input id="cellEditor" type="checkbox" onkeydown="zenPage.getComponent('+grid.index+').keyHandler(event);" onblur="zenPage.getComponent('+grid.index+').editCell(-1,-1);" />';
	}
	if (r==3 && c==3) {
		ret = '<select id="cellEditor" onkeydown="zenPage.getComponent('+grid.index+').keyHandler(event);" ><option value=1>Apple</option><option value=2>Orange</option></select>'
	}
	return ret;
]]></Implementation>
</Method>

<Method name="columnClick">
<Description>
click on column label</Description>
<FormalSpec>column</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	return;
	//alert('column: ' + column + ' clicked.');

	// toggle style of selected column
	var grid = zenPage.getComponentById('dynaGrid');
	var style = grid.getColumnProperty(column,'style');
	style = (''==style) ? 'background:orange;' : '';
	grid.setColumnProperty(column,'style',style);
]]></Implementation>
</Method>

<Method name="rowClick">
<Description>
click on row label</Description>
<FormalSpec>row</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	return;
	// toggle style of selected row
	var grid = zenPage.getComponentById('dynaGrid');
	var style = grid.getRowProperty(row,'style');
	style = (''==style) ? 'background:cyan;' : '';
	grid.setRowProperty(row,'style',style);
]]></Implementation>
</Method>

<Method name="hideCells">
<Description>
Show/hide cells in table</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var grid = zenPage.getComponentById('dynaGrid');

	grid.setColumnProperty(2,'hidden',!grid.getColumnProperty(2,'hidden'));
	grid.setRowProperty(2,'hidden',!grid.getRowProperty(2,'hidden'));
	grid.setRowProperty(4,'hidden',!grid.getRowProperty(4,'hidden'));
]]></Implementation>
</Method>

<Method name="addRow">
<Description>
Add a row to the grid</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var grid = zenPage.getComponentById('dynaGrid');
	var dataSet = grid.getDataSet();

	// resize our dataSet to add an additional row.
	dataSet.redim(dataSet.getDimensions(),dataSet.getDimSize(1)+1,dataSet.getDimSize(2),dataSet.getDimSize(3));
	grid.render();
]]></Implementation>
</Method>

<Method name="addColumn">
<Description>
Add a column to the grid</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var grid = zenPage.getComponentById('dynaGrid');
	var dataSet = grid.getDataSet();

	// resize our dataSet to add an additional row.
	dataSet.redim(dataSet.getDimensions(),dataSet.getDimSize(1),dataSet.getDimSize(2)+1,dataSet.getDimSize(3));
	grid.render();
]]></Implementation>
</Method>

<Method name="addPage">
<Description>
Add a page to the grid</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var grid = zenPage.getComponentById('dynaGrid');
	var dataSet = grid.getDataSet();

	// change dimensions of dataSet to add a new page (a third dimension)
	dataSet.redim(3,dataSet.getDimSize(1),dataSet.getDimSize(2),dataSet.getDimSize(3)+1);
	grid.render();
]]></Implementation>
</Method>

<Method name="nextPage">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var grid = zenPage.getComponentById('dynaGrid');
	var dataSet = grid.getDataSet();

	var page = grid.getProperty('currPage')*1;
	page = (page>=dataSet.getDimSize(3)) ? 1 : (page+1);
	grid.setProperty('currPage',page);
]]></Implementation>
</Method>

<Method name="clearGrid">
<Description>
Clear contents of the grid</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var grid = zenPage.getComponentById('dynaGrid');
	var dataSet = grid.getDataSet();
	dataSet.clear();
	grid.render();
]]></Implementation>
</Method>

<Method name="move">
<Description>
Move current row or column in the grid.
type is 'row'|'col', dir is +1,-1</Description>
<FormalSpec>type,dir</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var grid = zenPage.getComponentById('dynaGrid');
	var dataSet = grid.getDataSet();
	if (type == 'row') {
		dataSet.swap(1,grid.getCurrRow()-1,grid.getCurrRow()+dir-1,true);
	}
	else {
		dataSet.swap(2,grid.getCurrColumn()-1,grid.getCurrColumn()+dir-1,true);
	}
	grid.render();
]]></Implementation>
</Method>

<Method name="refreshGrid">
<Description>
Get new values for the grid from the server.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//zenPage.setTraceOption('js',true);
	var grid = zenPage.getComponentById('dynaGrid');
	this.GetNewDataSet(grid,"replace");
]]></Implementation>
</Method>

<Method name="GetNewDataSet">
<Description>
Get a new dataset from the server.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGrid:%ZEN.Component.dynaGrid,pMode:%String=""</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Set pDataSet = pGrid.dataSet
	
	//&js<alert('#(pDataSet.%GetLabel(3,1))#');>
	//&js<alert('#(pDataSet.%GetValue(3,2))#');>

	If (pMode = "client") {
		// change cells on client
		&js<zenPage.getComponentById('dynaGrid').setCellValue('New Value',2,2);>
	}
	ElseIf (pMode = "onecell") {
		// set one cell in the server model
		Do pDataSet.%SetValue("SERVER",3,2)
	}
	Else {
		// modify entire dataSet on server

		#; find size of dataSet
		Set rows = pDataSet.%GetDimSize(1)
		Set cols = pDataSet.%GetDimSize(2)
	
		#; add a new row
		//Do pDataSet.%SetLabel("ROW "_(rows+1),rows+1,1)

		#; get new dims	
		Set rows = pDataSet.%GetDimSize(1)
		Set cols = pDataSet.%GetDimSize(2)
		Set pages = pDataSet.%GetDimSize(3)

		#; fill in data
		For p=1:1:pages {
			#; if we are 3D- set page labels
			Set tLabel = p_" "_##class(%PopulateUtils).Company()
			Do pDataSet.%SetLabel(tLabel,p,3)
			For r=1:1:rows {
				For c=1:1:cols {
					Do pDataSet.%SetValue($R(1000),r,c,p)
				}
			}
		}
	}

	#; make sure grid gets redrawn
	Do pGrid.%ForceClientRender()

	Quit
]]></Implementation>
</Method>

<Method name="calcCellChange">
<Description>
cellChange: called when cell is changed</Description>
<FormalSpec>grid</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// compute sum of cells
	var rows = grid.getRowCount();
	var cols = grid.getColumnCount();

	var total = 0;

	// first get totals of columns
	for (var c = 1; c < cols; c++) {
		var subtotal = 0;
		for (var r = 1; r < rows; r++) {
			var value = parseFloat(grid.getCellValue(r,c));
			value = isNaN(value) ? 0 : value;
			subtotal += value;
		}

		// set total cell
		grid.setCellValue(subtotal,rows,c);
		total += subtotal;
	}

	// next get totals of rows
	for (var r = 1; r < rows; r++) {
		var subtotal = 0;
		for (var c = 1; c < cols; c++) {
			var value = parseFloat(grid.getCellValue(r,c));
			value = isNaN(value) ? 0 : value;
			subtotal += value;
		}

		// set total cell
		grid.setCellValue(subtotal,r,cols);
	}

	// total
	grid.setCellValue(total,rows,cols);
]]></Implementation>
</Method>

<Method name="calcCellDraw">
<Description>
cellDraw: called when cell is about to be drawn in dynaGrid</Description>
<FormalSpec>grid,data</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// if we need to know the cell # being drawn, we
	// can get it vis grid.row and grid.column.

	if (''==data) {
		return '&nbsp;';
	}
	else if (parseInt(data) < 0) {
		// negative #
		return '<span style="color:red;">('+data+')</span>';
	}
	
	return data;
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.DynaTreeTest">
<Description>
dynaTree Control Test</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Dynamic Tree Control Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
#tree {
	border: 1px darkblue solid;
	background: #CBE6EB;
	background-position: right;
	background-image: url(images/docindexgradient.png);
	background-repeat: repeat-y;
	height: 600px;
	width: 300px;
	overflow: auto;
}

#label {
	border: 1px darkblue solid;
	background: white;
	padding: 2px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Dynamic Tree Control Test">
<demo:demoTitle id="title" title="Zen dynaTree Control Test Page" category="Zen Test Suite" />

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="dynaTree" title="dynaTree Test Page" />
</locatorBar>


<spacer height="25"/>
<hgroup>
<dynaTree
	id="tree"
	OnGetTreeInfo="GetTreeInfo"
	onclick="zenPage.treeClick(zenThis);">
	<parameter paramName="count" value="20"/>
	</dynaTree>
<spacer width="25"/>
<vgroup valign="top">
<spacer height="25"/>
<radioSet displayList="Simple Tree,Class Hierarchy,Time" valueList="GetTreeInfo,GetClassInfo,GetTimeInfo"  value="GetTreeInfo" onchange="zenPage.setTreeCallback(zenThis.getValue());"/>
<spacer height="25"/>
<checkbox caption="Lines" onchange="zenPage.treeLines();"/>
<spacer height="25"/>
<label id="label" value="No click"/>
<spacer height="25"/>
<button caption="Set Node Text" onclick="zenPage.setNodeText();"/>
<button caption="Set Node Style" onclick="zenPage.setNodeStyle();"/>
<button caption="Get Node Parent" onclick="zenPage.getNodeParent();"/>
<button caption="Reload Node" onclick="zenPage.reloadNode();"/>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="GetTreeInfo">
<Description>
Sample of a OnGetTreeInfo callback.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRoot:%String,*pTree,&pParms]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; top-most nodes are children of 0
	#; each node supplies: $LB(caption, value, hasChildren, link, expanded, icon)
	if pRoot=""
	{
		Set pTree(0,"ch",1) = ""
		Set pTree(0,"ch",2) = ""
		Set pTree(0,"ch",3) = ""

		Set pTree(1) = $LB("Animal","Animal",1,"",1,,"General types of animal")
		Set pTree(2) = $LB("Mineral","Mineral",1,"",1,,"General types of mineral")
		Set pTree(3) = $LB("Vegetable","Vegetable",1,"",1,,"General types of vegetable")
	}
	elseif pRoot="Animal" //id 1
	{
		Set pTree(4) = $LB("Mammal","Mammal",1,"",1)
		Set pTree(0,"ch",4) = ""
	}
	elseif pRoot="Mineral" //id 2
	{
		Set pTree(7) = $LB("Rock","Rock",0,"",1)
		Set pTree(0,"ch",7) = ""
	}
	elseif pRoot="Vegetable" //id 3
	{
		Set pTree(8) = $LB("Fruit","Fruit",1,"",1)
		Set pTree(0,"ch",8) = ""
	}
	elseif pRoot="Mammal" //id 4
	{
		Set pTree(5) = $LB("Cat","Cat",0,"",1)
		Set pTree(6) = $LB("Dog","Dog",0,"",1)
		Set pTree(0,"ch",5) = ""
		Set pTree(0,"ch",6) = ""
	}
	elseif pRoot="Fruit" //id 8
	{
		Set pTree(9) = $LB("Apple","Apple",0,"",1)
		Set pTree(10) = $LB("Banana","Banana",0,"",1)
		Set pTree(11) = $LB("Cherry","Cherry",0,"",1)
		Set pTree(0,"ch",9) = ""
		Set pTree(0,"ch",10) = ""
		Set pTree(0,"ch",11) = ""
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTimeInfo">
<Description>
Sample of a OnGetTreeInfo callback.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRoot:%String,*pTree,&pParms]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; use utility method to build tree of time values
	Set tParms("spec") = "Y,M,D"
	Set tParms("startYear") = 2007
	Set tParms("endYear") = 2009
	Quit ##class(%ZEN.TreeUtils).TimePeriodTree(pRoot,.pTree,.tParms)
]]></Implementation>
</Method>

<Method name="GetClassInfo">
<Description>
Sample of a OnGetTreeInfo callback.
This one recursively loads the set of visible packages and classes in 
the current namespace.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pRoot:%String,*pTree,&pParms]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; pRoot is "" for the top-most call.
	#; otherwise it contains the package name at the folder node
	If (pRoot = "") {
		Set n = 1
		Set tCurrPkg = ""

		#; return top-level packages
		Set tKey = $O(^rINDEXCLASS(""))
		While (tKey '= "") {
			Set tClass = $LG(^rINDEXCLASS(tKey),2)
			Set tPkg = $P(tClass,".",1)
			If (tPkg '= tCurrPkg) {
				Set tCurrPkg = tPkg
				Set pTree(n) = $LB(tPkg,tPkg_".pkg",1)
				Set pTree(0,"ch",n) = ""
				Set n = n + 1
			}
			Set tKey = $O(^rINDEXCLASS(tKey))
		}
	}
	Else {
		#; pRoot is parent package; check extension
		Set tExt = $P(pRoot,".",$L(pRoot,"."))
		Set pRoot = $P(pRoot,".",1,$L(pRoot,".")-1)

		If (tExt = "pkg") {
			Set n = 1
			Set tCurrPkg = ""
			Set tLevel = $L(pRoot,".")
	
			#; find packages and classes within pRoot (at this level)
			Set tKey = $O(^rINDEXCLASS($ZCVT(pRoot,"U")))
			While (tKey '= "") {
				Set tClass = $LG(^rINDEXCLASS(tKey),2)
				If (pRoot '= $P(tClass,".",1,tLevel)) {
					#; we've moved on to the next top-level package
					Quit
				}
				Set tName = $P(tClass,".",tLevel+1)
				Set tPkg = $P(tClass,".",1,tLevel+1)
				If (tPkg = tClass) {
					#; this is a class name
					Set pTree(n) = $LB(tName,tClass_".cls",0)
					Set pTree(0,"ch",n) = ""
					Set n = n + 1
				}
				ElseIf (tPkg '= tCurrPkg) {
					Set tCurrPkg = tPkg
					Set pTree(n) = $LB(tName,tPkg_".pkg",1)
					Set pTree(0,"ch",n) = ""
					Set n = n + 1
				}
				Set tKey = $O(^rINDEXCLASS(tKey))
			}
		}
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="reloadNode">
<Description>
Reload a node within the tree.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tree = this.getComponentById('tree');
	tree.reloadNode(tree.getSelectedIndex());
]]></Implementation>
</Method>

<Method name="setNodeText">
<Description>
Change the text of the current node in the tree.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tree = this.getComponentById('tree');
	tree.setNodeText(tree.getSelectedIndex(),'New Text');
]]></Implementation>
</Method>

<Method name="setNodeStyle">
<Description>
Change the style of the current node in the tree.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tree = this.getComponentById('tree');
	tree.setNodeStyle(tree.getSelectedIndex(),'color: red;');
]]></Implementation>
</Method>

<Method name="getNodeParent">
<Description>
Show the index of the parent node of the current node.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tree = this.getComponentById('tree');
	alert('Parent of this node is: ' + tree.getNodeParent(tree.getSelectedIndex()));
]]></Implementation>
</Method>

<Method name="setTreeCallback">
<Description>
Change the callback for the tree</Description>
<FormalSpec>code</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
 var tree = this.getComponentById('tree');
 zenPage.ReallySetTreeCallback(tree,code);
]]></Implementation>
</Method>

<Method name="ReallySetTreeCallback">
<Description>
tree.setProperty('OnGetTreeInfo',code); is not allowed. This property must be set server-side.
Rather than blindly accepting any value, we validate the property name against a list of permitted values.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTree:%ZEN.Component.dynaTree,pMethod:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
 If '$ListFind($ListBuild("GetTreeInfo","GetClassInfo","GetTimeInfo"),pMethod) Quit
 
 Set pTree.OnGetTreeInfo = pMethod
 Do pTree.ReallyRefreshContents() //Re-render the tree after changing the property.
]]></Implementation>
</Method>

<Method name="treeLines">
<Description>
Change the showLines property for the tree</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tree = this.getComponentById('tree');
	tree.setProperty('showLines',!tree.getProperty('showLines'));
]]></Implementation>
</Method>

<Method name="treeExpand">
<Description>
expand the tree</Description>
<FormalSpec>tree</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tree = this.getComponentById('tree');
	tree.expandAll(true);
]]></Implementation>
</Method>

<Method name="treeContract">
<Description>
contract the tree</Description>
<FormalSpec>tree</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tree = this.getComponentById('tree');
	tree.expandAll(false);
]]></Implementation>
</Method>

<Method name="treeClick">
<Description>
treeClick</Description>
<FormalSpec>tree</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var label = this.getComponentById('label');
	label.setValue('Click on node: ' + tree.getProperty('selectedIndex') + ' text: ' + tree.getProperty('text')+ ' value: ' + tree.getProperty('value'));
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.DynaViewTest">
<Description>
dynaView Control Test</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Dynamic View Control Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
/* override of label control style */
.labelText {
	padding: 2px;
	background: white;
	border: 1px solid black;
	height: 1.0em;
	width: 12.0em;
}

#view {
	width: 400px;
	height: 300px;
	overflow: auto;
	border: 1px solid black;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Dynamic View Control Test">
<demo:demoTitle id="title" title="Zen dynaView Control Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="dynaView" title="dynaView Test Page" />
</locatorBar>

<spacer height="25"/>
<vgroup containerStyle="padding-left:20px;">
<dynaView id="view" 
	viewType="list" 
	OnGetViewContents="GetViewContents"
	rows="15" 
	onchange="zenPage.viewChange(zenThis);"
	ondblclick="alert('dbl: ' + zenThis.getProperty('value'));"
	>
	<parameter paramName="label" value="ABC" />
	<parameter paramName="dateFormat" value="3" />
	</dynaView>
<spacer height="25"/>
<form>
<label id="currValue" label="value:" value="..."/>
<spacer height="5"/>
<text id="selectedIndex" label="selectedIndex:" onchange="zenPage.selectViewItem(zenThis);" />
<spacer height="5"/>
<radioSet label="viewType:"
		valueList="list,details" 
		titleList="Put view into list mode,Put view into display mode" 
		value="list" onchange="zenPage.changeViewType(zenThis);"/>
<spacer height="5"/>
<text label="rows:" id="rows"
		title="Number of rows to use for list mode." 
		value="15" />
<spacer height="5"/>
<text label="Label: " id="labelVal"
		title="Label parameter value for the dynaView." 
		 hint="Set this and press Apply"
		value="ABC" />
<spacer height="5"/>
<text label="Date Format: " id="dateFormatVal"
		title="dateFormat parameter value for the dynaView." 
		 hint="Enter a number from 1 to 14"
		value="3" />
<spacer height="5"/>
<button caption="Apply" onclick="zenPage.refreshView();" />
</form>
</vgroup>

</page>
]]></Data>
</XData>

<Method name="refreshView">
<Description>
Refresh contents of the view</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var view = this.getComponentById('view');

	// change value of rows
	view.setProperty('rows',this.getComponentById('rows').getValue());

	// set label parameter
	view.setProperty('parameters','label',this.getComponentById('labelVal').getValue());

	// set date format parameter
	view.setProperty('parameters','dateFormat',this.getComponentById('dateFormatVal').getValue());
]]></Implementation>
</Method>

<Method name="changeViewType">
<Description>
Change type of view</Description>
<FormalSpec>rs</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var view = this.getComponentById('view');
	view.setProperty('viewType',rs.getValue());
]]></Implementation>
</Method>

<Method name="selectViewItem">
<Description>
new value of selected index</Description>
<FormalSpec>ctrl</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var view = this.getComponentById('view');
	view.setProperty('selectedIndex',ctrl.getValue());
]]></Implementation>
</Method>

<Method name="viewChange">
<Description>
view value has changed</Description>
<FormalSpec>view</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.getComponentById('currValue').setValue(view.getProperty('value'));
	this.getComponentById('selectedIndex').setValue(view.getProperty('selectedIndex'));
]]></Implementation>
</Method>

<Method name="GetViewContents">
<Description><![CDATA[
This callback determines the contents of the dynaView component.
It is passed an array, <var>pParms</var> that contains a set 
of input parameters (values subscripted by name). These are
defined by the parameter property of the dynaView component.
On return, this method fills in two arrays:<br>
<var>pHeaders</var> is an array of column headers (for multi-column display) subscripted by column number.<br> 
<var>pContents</var> is an array of item descriptions 
subscripted by item number. Each item is a $List containing:<br>
textValue,logicalValue,icon, followed by any additional columns
to be displayed in "details" mode. ]]></Description>
<FormalSpec><![CDATA[&pParms:%String,*pContents:%String,*pHeaders:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Set detail headers
	Set pHeaders(1) = "Name"
	Set pHeaders(2) = "Size"
	Set pHeaders(3) = "Date"

	#; read parameters
	Set tLabel = $G(pParms("label"))
	Set tFormat = $G(pParms("dateFormat"),3)
	Set tFormat = $S(tFormat<1:3,tFormat>14:3,1:tFormat)

	#; text, value, icon,size,date
	For n=1:1:50 {
		Set icon = "images/folder.gif"
		Set pContents(n) = $LB(tLabel_" "_n,tLabel _ " " _n,icon,$R(1000),$ZDT($H-$R(1000),tFormat))
	}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.DynamicComponentsTest">
<Description>
Test of creating components dynamically.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60178,64228.461852</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Dynamic Component Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
.button {
	width: 180px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:test="http://www.intersystems.com/zentest" xmlns:demo="http://www.intersystems.com/zendemo" 
	title="Dynamic Components Test">
<demo:demoTitle id="title" title="Zen Dynamic Components Test Page" category="Zen Test Suite"/>

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Dynamic Components" title="Dynamic components test page" />
</locatorBar>


<spacer height="25"/>

<hgroup>
<spacer width="25"/>
<html enclosingClass="msg">
Use the combo boxes below to select a component to create dynamically. This logic can be run on the client or on the server.<br/>
</html>
</hgroup>

<hgroup>
<spacer width="25"/>
<combobox id="cbClient" label="Component (client-side):"
		title="Select a component to create on the client."
		onchange="zenPage.showComponentClient(zenThis.getValue());"
		editable="false">
<option text="button" value="button" />
<option text="calendar" value="calendar" />
<option text="text" value="text" />
<option text="demoMenu" value="http://www.intersystems.com/zendemo^demoMenu" />
<option text="customComponent" value="http://www.intersystems.com/zentest^customComponent" />
</combobox>
<spacer width="25"/>

<combobox id="cbServer" label="Component (server-side):"
		title="Select a component to create on the server."
		onchange="zenPage.showComponentServer(zenThis.getValue());"
		editable="false">
<option text="button" value="button" />
<option text="calendar" value="calendar" />
<option text="text" value="text" />
<option text="tablePane" value="tablePane" />
<option text="demoMenu" value="http://www.intersystems.com/zendemo^demoMenu" />
</combobox>
<spacer width="25"/>
<fieldSet legend="Table Columns" 
	id="tableOptions" layout="horizontal" >

<checkbox id="tcName" caption="Name" onchange="zenPage.tcChange(zenThis,'Name');" />
<checkbox id="tcTitle" caption="Title" onchange="zenPage.tcChange(zenThis,'Title');"/>
<checkbox id="tcSSN" caption="SSN" onchange="zenPage.tcChange(zenThis,'SSN');"/>
</fieldSet>
</hgroup>

<spacer height="5"/>
<hgroup>
<spacer width="25"/>

<!-- Use import property to make sure that code for demoMenu && customComponent is
part of the client model -->
<fieldSet legend="dynamic component" id="holder" 
	import="ZENDemo.Component.demoMenu,ZENTest.customComponent" />
</hgroup>
<!--
<button caption="objects" onclick="zenPage.showObjects();" />
<html id="objList"/>
-->
</page>
]]></Data>
</XData>

<Method name="showComponentClient">
<Description>
Display the component specified by the component combobox.</Description>
<FormalSpec>type</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// use client-side methods to create new components
	var holder = zenPage.getComponentById('holder');

	// if present, remove old component
	var comp = zenPage.getComponentById('dynamicComponent');
	if (comp) {
		zenPage.deleteComponent(comp);
	}

	// create new component within "holder"
	// if custom component, type is NS^type
	var ns = '';
	var t = type.split('^');
	if (t.length > 1) {
		ns = t[0];
		type = t[1]
	}
	
	var comp = zenPage.createComponentNS(ns,type);

	if (comp) {
		switch (type) {
		case 'button':
			comp.setProperty('caption','Button');
			break;
		case 'text':
			comp.setProperty('label','Name:');
			break;
		case 'calendar':
			break;
		}
		
		comp.setProperty('id','dynamicComponent');
		holder.addChild(comp);
		holder.refreshContents();
	}
]]></Implementation>
</Method>

<Method name="showComponentServer">
<Description>
Display the component specified by the component combobox.</Description>
<FormalSpec>pType:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; use server-side methods to create new components
	Set tHolder = %page.%GetComponentById("holder")

	#; if present, remove old component
	Set tComp = %page.%GetComponentById("dynamicComponent")
	If $IsObject(tComp) {
		#; remove component from its group
		Do tHolder.%RemoveChild(tComp)
	}

	#; create new component
	#; translate component name to actual class name
	Set tComp = ""
	If (pType = "button") {
		Set tComp = ##class(%ZEN.Component.button).%New()
		Set tComp.caption = "Button"
	}
	ElseIf (pType = "text") {
		Set tComp = ##class(%ZEN.Component.text).%New()
		Set tComp.label = "Name:"
	}
	ElseIf (pType = "calendar") {
		Set tComp = ##class(%ZEN.Component.calendar).%New()
		Set tComp.label = "Date:"
	}
	ElseIf (pType = "http://www.intersystems.com/zendemo^demoMenu") {
		Set tComp = ##class(ZENDemo.Component.demoMenu).%New()
	}
	ElseIf (pType = "tablePane") {
		Set tComp = ##class(%ZEN.Component.tablePane).%New()
		Set tComp.tableName="ZENDemo_Data.Employee"
		Set tComp.useSnapshot=1
		Set tComp.pageSize=20
		Set tCol = tComp.%AddColumn()
		Set tCol.colName = "ID"
		Set tCol.width = "50"

		#; add additional columns based on column options
		For tName = "Name","Title","SSN" {
			Set opt = %page.%GetComponentById("tc"_tName)
			If ($IsObject(opt)&&(opt.value)) {
				Set tCol = tComp.%AddColumn()
				Set tCol.colName = tName
				Set tCol.width = "200"
			}
		}
	}

	If $IsObject(tComp) {
		Set tComp.id = "dynamicComponent"
		Do tHolder.%AddChild(tComp)
	}
]]></Implementation>
</Method>

<Method name="tcChange">
<Description>
Table column checkbox has changed.</Description>
<FormalSpec>cb,name</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// see if the dynamic component is a tablePane
	// if so, modify its columns
	var table = zenPage.getComponentById('dynamicComponent');
	if (table && table.isOfType('tablePane')) {
		// call server method to recreate tablePane
		zenPage.showComponentServer('tablePane');
	}
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br>
Subclasses can override this to add, remove, or modify 
items within the page object model, or to provide values
for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*
	Set tGroup = ##class(%ZEN.Component.group).%New()
	Do %page.%AddChild(tGroup)

	Set tBtn = ##class(%ZEN.Component.button).%New()
	Set tBtn.caption = "Button 1"
	Do tGroup.%AddChild(tBtn)

	Set tBtn = ##class(%ZEN.Component.button).%New()
	Set tBtn.caption = "Button 2"
	Do tGroup.%AddChild(tBtn)
	
	Do %page.%RemoveChild(tGroup)
	*/

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="showObjects">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var html = new Array();

	html[html.length] = zenPage.nextIndex + '<br/>';

	for (var i = 20; i < _zenIndex.length; i++) {
		html[html.length] = i + ': ' + (_zenIndex[i] ? _zenIndex[i]._type + (_zenIndex[i].children?_zenIndex[i].children.length:'') : 'null') + '<br/>';
	}
	
	var div = zenPage.getComponentById('objList').getEnclosingDiv();
	div.innerHTML = html.join('');
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.EmptyPage">
<Description>
ZENTest.EmptyPage
This is just what it says, an empty page.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60249,64943.602954</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>EmptyPage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" height="100%">
</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br>
Subclasses can override this to add, remove, or modify 
items within the page object model, or to provide values
for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.ExpandoTest">
<Description>
expando Control Test</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Expando Control Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="expando Control Test Page">

<demo:demoTitle id="title" title="Zen expando Control Test Page" category="Zen Test Suite" />

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="expando" title="expando Test Page" />
</locatorBar>

<spacer height="25"/>
<expando caption="expando" childIndent="25px" remember="true">
<titleBox title="Zen expando Control Test Page" 
		subtitle="Use this page to test the Zen expando control." />
<titleBox title="Zen expando Control Test Page" 
		subtitle="Use this page to test the Zen expando control." />
<titleBox title="Zen expando Control Test Page" 
		subtitle="Use this page to test the Zen expando control." />

<expando caption="Subexpando" OnDrawContent="DrawContent" remember="true">
<titleBox title="Zen expando Control Test Page" 
		subtitle="Use this page to test the Zen expando control." />
<titleBox title="Zen expando Control Test Page" 
		subtitle="Use this page to test the Zen expando control." />
<titleBox title="Zen expando Control Test Page" 
		subtitle="Use this page to test the Zen expando control." />
<text label="Edit"/>

</expando>
</expando>

</page>
]]></Data>
</XData>

<Method name="DrawContent">
<Description>
OnDrawContent callback</Description>
<FormalSpec><![CDATA[&expando:%ZEN.Component.expando]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<&nbsp;<b>*</b>>
	// Set expando.expanded = 0
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.FinderPaneTest">
<Description>
ZENTest.FinderPaneTest
Test page for the Zen Finder Pane component.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60249,64943.602954</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>FinderPane Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

/* establish size of finder */
#finder {
	border: 1px solid black;
	width: 900px;
	height: 400px;
	overflow-x: auto;
	overflow-y: hidden;
	background: rgb(180,190,200);
}

/* fix width/height of each finder column */
.finderColumn {
	width: 300px;
	height: 400px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" height="100%">
<demo:demoTitle id="title" title="Zen FinderPane Test" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="FinderPane Test" title="FinderPane Test" />
</locatorBar>
<!-- this provides the object content for the finder -->
<jsonProvider id="json" OnGetArray="GetFinderArray"/>

<html>
<div style="padding:5px;">
The Finder Panel displays a random organization chart (is that redundant?) based on data served as JSON content.
</div>
</html>
<spacer height="50"/>

<hgroup cellVAlign="top">
<spacer width="50"/>
<!-- the finder asked the jsonProvider for the data -->
<finderPane id="finder" ongetdata="return zen('json').getContentObject();" 
	onselectitem="return zenPage.itemSelected(item);"
	ondrawdetails="return zenPage.drawDetails(item);"
	ondrawempty="return zenPage.drawEmptyFinder();"
	/>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="GetFinderArray">
<Description>
Provide the source data (as an array) that will drive the finder.</Description>
<FormalSpec><![CDATA[&pParameters,*pMetaData,*pData]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// The MetaData list specifies the names of the properties of the 
	// JavaScript objects and the order in which they appear within
	// nodes of the data array.
	Set pMetaData = $LB("name","title","supervisor","phoneNo")

	// create a random org chart
	Set d = 0
	For tDept = "Sales","Marketing","Engineering","HR","Finance" {
		// add top-level entry for each department
		Set d = d + 1
		Set pData(d) = $LB(tDept) // name, but no other properties

		// add executive to each dept
		Set tVPName = ##class(%PopulateUtils).Name()
		Set pData(d,1) = $LB(tVPName,"Vice President, "_ tDept)

		// add 2nd level managers
		For n = 1:1:($R(10)+2) {
			Set tMgrName = ##class(%PopulateUtils).Name()
			Set pData(d,1,n) = $LB(tMgrName,"Manager",tVPName)

			// add workers
			For w = 1:1:($R(25)+2) {
				Set tWkrName = ##class(%PopulateUtils).Name()
				Set tTitle = ##class(%PopulateUtils).Title()
				Set pData(d,1,n,w) = $LB(tWkrName,tTitle,tMgrName)
			}

		}
	}
	Quit $$$OK	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="drawDetails">
<Description>
Provide HTML for details on selected item in finder.</Description>
<FormalSpec>item</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (null == item) return '';
	var html = new Array();
	html[html.length] = '<div style="text-align:center; padding: 5px;">';
	if (item.name) {
		html[html.length] = '<b>' + item.name + '</b><br/>';
		html[html.length] = '<hr/>';
	}

	var icon = '/csp/broker/images/einstein.jpg';
	html[html.length] = '<img alt="" src="' + icon + '"/></b><br/><br/>';

	if (item.title) {
		html[html.length] = '<b>Title:</b>&nbsp;' + item.title + '<br/>';
		html[html.length] = '<hr/>';
	}
	if (item.phoneNo) {
		html[html.length] = '<b>Phone No:</b>&nbsp;' + item.phoneNo + '<br/>';
		html[html.length] = '<hr/>';
	}

	html[html.length] = '</div>';
	return html.join('');
]]></Implementation>
</Method>

<Method name="drawEmptyFinder">
<Description>
Provide HTML for empty finder.</Description>
<FormalSpec>item</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var html = new Array();
	html[html.length] = 'This finder pane is empty.' + '<br/>';

	return html.join('');
]]></Implementation>
</Method>

<Method name="itemSelected">
<Description>
Item selected within the Finder.</Description>
<FormalSpec>item</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return true;
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.FormTest">
<Description>
ZENTest.FormTest</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Form Test Page</Default>
</Parameter>

<XData name="Style">
<Description>
Domain used for localization.
Parameter DOMAIN = "ZENTEST";</Description>
<Data><![CDATA[
<style type="text/css">

#userControls {
	height: 200px;
	overflow: auto;
}

.required {
	font-weight: bold;
}

.required:after {
	content: " (required)";
	font-style: italic;
	font-size: 0.8em;
	
}

.button {
	width: 15.0em;
}

#indicator {
	background: #D0D0FF;
	font-weight: bold;
	border: 1px solid darkblue;
	padding: 2px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Form Test Page">

<demo:demoTitle id="title" title="Zen Form Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Form Test" title="Form Test Page" />
</locatorBar>
<html><a href="ZENTest.FormTest.cls?$SUBMIT=clear">Link</a>
</html>
<spacer height="25"/>
<hgroup>
<spacer width="100"/>
<form id="MyForm" layout="vertical" 
	onchange="zenPage.formChange(zenThis);">
<html id="indicator"/>
<text label="Name:" id="Name" name="Name" 
	labelClass="required" required="true"/>
<text label="Age:" id="Age" name="Age" hidden="true"
		onvalidate="return zenPage.validateAge(zenThis);" />
<dateText label="Date Of Birth:" id="DOB" name="DOB" />
<dataCombo label="Patient:" id="Patient" name="Patient"
	title="Enter a value and press dropdown button to search for patients..."
	editable="true"
	size="24"
	searchKeyLen="8"
	sql="SELECT ID,Name FROM ZENDemo_Data.Employee WHERE Name %STARTSWITH ? OR (? IS NULL) ORDER BY Name"
	sqlLookup="SELECT Name FROM ZENDemo_Data.Employee WHERE ID = ?" />
<dataCombo label="Doctor:" id="Doctor" name="Doctor"
	editable="true"
	size="24"
	searchKeyLen="3"
	sql="SELECT ID,SSN FROM ZENDemo_Data.Employee WHERE SSN %STARTSWITH ? OR (? IS NULL) ORDER BY SSN"
	sqlLookup="SELECT SSN FROM ZENDemo_Data.Employee WHERE ID = ?" />
<combobox label="Priority:" id="Priority" name="Priority">
<option value="1" text="One"/>
<option value="2" text="Two"/>
</combobox>
<checkbox caption="Enabled" label="Status:" id="Enabled" name="Enabled"
	onvalidate="return zenPage.validateEnabled(zenThis);"
		/>
<radioSet label="Quark:" id="Quark" name="Quark" valueList="Up,Down,Charmed,Strange,Top,Bottom" />
<fieldSet id="custom" legend="User Components" condition="$D(^controls)" />

<hgroup>
<radioButton caption="R1" id="A1" name="A1" optionValue="10"/>
<radioButton caption="R2" name="A1" optionValue="20"/>
<radioButton caption="R3" name="A1" optionValue="30"/>
</hgroup>
<submit caption="Submit" action="save"/>
<button caption="Validate" onclick="zenPage.validateForm();"/>
<submit caption="Save and Go Home" action="save"
	nextPage="ZENTest.HomePage.cls"
	title="Submit this and go back to the main test page."
	 />
<button caption="Programmatic Submit" 
	title="Submit this form programmatically."
	onclick="zenPage.submitForm();"/>

<button caption="Clear Modified" 
	title="Reset the modified state of this form."
	onclick="zenPage.formClearModified();"/>

<button caption="Reset" 
	title="Reset this form."
	onclick="zenPage.resetForm();"/>

<button caption="TEST" 
	onclick="zenPage.test();"/>

</form>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="test">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = zenPage.getComponentById('Age');
	ctrl.setProperty('hidden',!ctrl.getProperty('hidden'));
]]></Implementation>
</Method>

<Method name="formInvalid">
<Description>
Form invalid handler</Description>
<FormalSpec>form,list</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	alert(list.length);
	return false;
]]></Implementation>
</Method>

<Method name="formChange">
<FormalSpec>form</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// get mod state of form
	var flag = form.isModified();
	
	// update indicator
	var html = zenPage.getComponentById('indicator');
	html.setProperty('content',flag ? 'Form Modified' : 'Form OK');
]]></Implementation>
</Method>

<Method name="formClearModified">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zenPage.getComponentById('MyForm');
	form.clearModified();
]]></Implementation>
</Method>

<Method name="keyPress">
<Description>
MyMethod</Description>
<FormalSpec>combo,evt</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert(evt.keyCode);
]]></Implementation>
</Method>

<Method name="validateAge">
<Description>
validateAge</Description>
<FormalSpec>ctrl</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var value = ctrl.getValue();
	return (value > 0 && value < 120);
]]></Implementation>
</Method>

<Method name="validateEnabled">
<Description>
validateEnabled</Description>
<FormalSpec>ctrl</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// make sure check box is checked!
	var value = ctrl.getValue();
	return (value == true);
]]></Implementation>
</Method>

<Method name="submitForm">
<Description>
Submit the form programmatically</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zenPage.getComponentById('MyForm');
	form.submit('save');
]]></Implementation>
</Method>

<Method name="validateForm">
<Description>
Validate the form programmatically</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zenPage.getComponentById('MyForm');
	form.validate();
]]></Implementation>
</Method>

<Method name="resetForm">
<Description>
Reset the form programmatically</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zenPage.getComponentById('MyForm');
	form.reset();
]]></Implementation>
</Method>

<Method name="test1">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = zenPage.getComponentById('Name');
	zenPage.addOverlay();
]]></Implementation>
</Method>

<Method name="test2">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = zenPage.getComponentById('Name');
	zenPage.removeOverlay();
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
This callback is called after the page model is created.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tGroup = ..%GetComponentById("custom")

	If $D(^controls) {

		Set tGroup = ..%GetComponentById("custom")
		Set tInnerGroup = ##class(%ZEN.Component.vgroup).%New()
		Set tInnerGroup.id = "userControls"
		Do tGroup.%AddChild(tInnerGroup)
	
		// create dynamic set of controls
		// ^controls = type^label
		Set key = $O(^controls(""))
		While (key '= "") {
			Set tType = $P(^controls(key),"^",1)
			Set tLabel = $P(^controls(key),"^",2)
	
			Set ctrl = $zobjclassmethod(tType,"%New")
			Set ctrl.label = tLabel
			Set ctrl.name = tLabel
			Do tInnerGroup.%AddChild(ctrl)
			
			Set key = $O(^controls(key))
		}
	}

	// give values to controls
	Do ..%SetValueById("A1",$G(^formTest("A1")))
	Do ..%SetValueById("Name",$G(^formTest("Name")))
	Do ..%SetValueById("Age",$G(^formTest("Age")))
	Do ..%SetValueById("DOB",$G(^formTest("DOB")))
	Do ..%SetValueById("Patient",$G(^formTest("Patient")))
	Do ..%SetValueById("Doctor",$G(^formTest("Doctor")))
	Do ..%SetValueById("Quark",$G(^formTest("Quark")))
	Do ..%SetValueById("Enabled",$G(^formTest("Enabled")))
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnSubmit">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSubmit:%ZEN.Submit</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If (pSubmit.%Action = "save") {
		
		// validate
		If (pSubmit.%GetValue("Name")="BAD") {
			Do pSubmit.%SetError("Name","BAD VALUE")
		}
		If (pSubmit.%GetValue("Age")>120) {
			Do pSubmit.%SetError("Age","OUT OF RANGE")
		}
		If (pSubmit.%GetValue("Quark")="Bottom") {
			Do pSubmit.%SetError("Quark","Not discovered!")
		}

		If (pSubmit.%HasErrors()) {
			#; set form error
			Do pSubmit.%SetError("MyForm","There are errors on this form.")
		}
		Else {
			#; save
			Set ^formTest("Name") = pSubmit.%GetValue("Name")
			Set ^formTest("Age") = pSubmit.%GetValue("Age")
			Set ^formTest("DOB") = pSubmit.%GetValue("DOB")
			Set ^formTest("Patient") = pSubmit.%GetValue("Patient")
			Set ^formTest("Doctor") = pSubmit.%GetValue("Doctor")
			Set ^formTest("Quark") = pSubmit.%GetValue("Quark")
			Set ^formTest("Enabled") = pSubmit.%GetValue("Enabled")
			Set ^formTest("A1") = pSubmit.%GetValue("A1")
		}
	}
	ElseIf (pSubmit.%Action = "clear") {
		// clear data
		Kill ^formTest
	}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.FormTest2">
<Description>
ZENTest.FormTest</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Form Test Page (2)</Default>
</Parameter>

<Property name="EmpID">
<Description>
Id of employee to show on form</Description>
<Type>%ZEN.Datatype.integer</Type>
<Parameter name="ZENURL" value="ID"/>
</Property>

<XData name="Style">
<Description>
Domain used for localization.
Parameter DOMAIN = "";</Description>
<Data><![CDATA[
<style type="text/css">

#userControls {
	height: 200px;
	overflow: auto;
}

.required {
	font-weight: bold;
}

.required:after {
	content: " (required)";
	font-style: italic;
	font-size: 0.8em;
	
}

.zendiv {
	padding-bottom: 5px;
}

#indicator {
	background: #D0D0FF;
	font-weight: bold;
	border: 1px solid darkblue;
	padding: 2px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Form Test Page">
<demo:demoTitle id="title" title="Zen Form Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Form Test" title="Form Test Page" />
</locatorBar>

<spacer height="25"/>
<hgroup>
<spacer width="100"/>
<form id="MyForm" layout="vertical" 
	key="#(%page.EmpID)#"
	OnLoadForm="LoadForm"
	OnSubmitForm="SubmitForm"
>
<hgroup cellVAlign="bottom">
<text label="ID:" id="ID" 
	name="ID" onchange="zenPage.reloadForm();" />
</hgroup>

<text label="Name:" id="Name" name="Name" 
	labelClass="required" required="true"/>

<text label="SSN:" id="SSN" name="SSN" 
	labelClass="required" required="true"/>
	
<!-- demonstrate how to use the file selection dialog -->	
<fieldSet legend="File Selection" labelPosition="left">

<text label="File name:" id="txtFilename" name="txtFilename" size="40"/>
<text id="wildcard" label="File type wildcard:" value="*"/>
<checkbox id="showdirectoryonly" label="Show directories only:"/>
<button caption="Browse..." onclick="zenPage.showFileSelectionWindow();"/>

</fieldSet>
<submit caption="Submit" action="save"/>
</form>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="LoadForm">
<Description>
Callback to get values for form</Description>
<FormalSpec><![CDATA[pKey:%String,&pValues:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set emp = ##class(ZENDemo.Data.Employee).%OpenId(pKey)
	If ($IsObject(emp)) {
		Set pValues("ID") = emp.%Id()
		Set pValues("Name") = emp.Name
		Set pValues("SSN") = emp.SSN
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SubmitForm">
<Description>
Callback to process values submitted for form.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSubmit:%ZEN.Submit</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	If (pSubmit.%Action = "save") {
		// validate
		If (pSubmit.%GetValue("Name")="BAD") {
			Do pSubmit.%SetError("Name","BAD VALUE")
			Do pSubmit.%SetValue("SSN",666) // !!!
		}

		If (pSubmit.%HasErrors()) {
			#; set form error
			Do pSubmit.%SetError("MyForm","There are errors on this form.")
		}
		Else {
			Set emp = ##class(ZENDemo.Data.Employee).%OpenId(pSubmit.%FormKey)
			If ($IsObject(emp)) {
				Set emp.Name = pSubmit.%GetValue("Name")
				Set emp.SSN = pSubmit.%GetValue("SSN")
				Set tSC = emp.%Save()
				
			}
		}
		#; pass ID along to new page
		Set %response.Context("ID") = pSubmit.%FormKey
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="reloadForm">
<Description>
reloadForm:</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var id = zenPage.getComponentById('ID').getValue();
	var form = zenPage.getComponentById('MyForm');
	form.reload(id);
]]></Implementation>
</Method>

<Method name="showFileSelectionWindow">
<Description>
Demonstration of launching a file selector window. </Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var Dir = zenPage.getComponentById("txtFilename").getValue();
	var wildcard = zenPage.getComponentById("wildcard").getValue();
	var showdirectoryonly = zenPage.getComponentById("showdirectoryonly").getValue();
	var url = "%ZEN.Dialog.fileSelect.cls?Dir=" + cspEncodeUTF8(Dir) + "&wildcard=" + wildcard;
	if (showdirectoryonly) url = url +"&showdirectoryonly=1";
	zenLaunchPopupWindow(url,'FileSelection','status,scrollbars,resizable,width=500,height=700');
]]></Implementation>
</Method>

<Method name="onPopupAction">
<Description>
Returning from file select dialog and setting the value into the Filename field</Description>
<FormalSpec>popupName,action,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (action == "ok") {
		var txtFilename = zenPage.getComponentById("txtFilename");
		txtFilename.setValue(value);
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.GlobalMenu">
<Description>
Tree Menu defined by a global.
This page uses the dynaTree control to display menu based on a global.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Global Tree Menu Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
body {
	background: #F0F0FF;
	font-family: verdana;
} 

#tree {
	border: 1px darkblue solid;
	background: white;
	height: 600px;
	width: 300px;
	overflow: auto;
	border-radius: 5px;
}

#label {
	border: 1px darkblue solid;
	background: white;
	padding: 2px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Global Menu Test Page">

<demo:demoTitle id="title" title="Global Menu Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Global Menu" title="Global Menu Test Page" />
</locatorBar>

<spacer height="25"/>
<hgroup>
<dynaTree
	id="tree"
	dataGlobal="^ZENTest.menu"
/>
<spacer width="25"/>
<vgroup valign="top">
<button caption="Create Global" onclick="zenPage.CreateGlobal();"/>
<button caption="Kill Global" onclick="zenPage.KillGlobal();"/>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="CreateGlobal">
<Description>
Create the global that defines this menu</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Kill ^ZENTest.menu

	Set ^ZENTest.menu("Demo","Form") = "ZENDemo.FormDemo.cls"
	Set ^ZENTest.menu("Demo","Home") = "ZENDemo.Home.cls"

	Set ^ZENTest.menu("Test","Form") = "ZENTest.FormTest.cls"
	Set ^ZENTest.menu("Test","Home") = "ZENTest.HomePage.cls"
	Set ^ZENTest.menu("Test","Timer") = "ZENTest.TimerTest.cls"

	#; go to object edit page
	For n=1:1:25 {
		Set ^ZENTest.menu("Demo","Form",n) = "ZENDemo.FormDemo.cls?ID="_n
	}

	#; links to local JS method
	For n=1:1:10 {
		Set ^ZENTest.menu("Local",n) = "javascript:zenPage.localMethod("_n_");"
	}

	#; make sure tree gets updated
	&js<zenPage.getComponentById('tree').refreshContents();>
]]></Implementation>
</Method>

<Method name="KillGlobal">
<Description>
Create the global that defines this menu</Description>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Kill ^ZENTest.menu

	#; make sure tree gets updated
	&js<zenPage.getComponentById('tree').refreshContents();>
]]></Implementation>
</Method>

<Method name="localMethod">
<Description>
localMethod</Description>
<FormalSpec>n</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert('This is a local, client method: ' + n);
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.HTMLTest">
<Description>
HTML Component Test</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>HTML Component Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<Property name="object">
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"HEY"</InitialExpression>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
/* set style used for html element */
#html1 {
	border: 1px solid darkblue;
	background: white;
	padding: 5px;
	width: 500px;
}

#html2 {
	border: 1px solid darkblue;
	background: white;
	padding: 5px;
	width: 500px;
	height: 200px;
	overflow: auto;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="HTML Component Test Page">
<demo:demoTitle id="title" title="Zen HTML Component Test Page" category="Zen Test Suite"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="HTML" title="HTML Test Page" />
</locatorBar>

<hgroup>
<demo:sidebar text="This Zen page demonstrates the following features:">
<demo:bullet text="How you can use the HTML component to inject any HTML content within a Zen page" />
<demo:bullet text="How the contents of an HTML component can be modified dynamically" />
</demo:sidebar>

<spacer width="25"/>
<vgroup>
<spacer height="25"/>
<html id="html1">The name of this page is: <b>#(%page.title)#</b>.<br/>
The current object is: #(%page.object)#<br/>
URL Parm ID is #(%url.ID)#
</html>
<spacer height="20"/>
<hgroup>
<button caption="Set client content" onclick="zenPage.setContent(zenThis,'html1');"/>
<spacer width="10"/>
<button caption="Refresh content" onclick="zenPage.refreshHTML(zenThis,'html1');"/>
</hgroup>
<spacer height="25"/>
<html id="html2" OnDrawContent="getHTML"/>
<spacer height="20"/>
<hgroup>
<button caption="Refresh content" onclick="zenPage.refreshHTML(zenThis,'html2');"/>
</hgroup>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="getHTML">
<Description>
Provide HTML for html2 component</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tColors = $LB("red","green","blue","black","orange")
	Set tCount = $R(10)+1
	For n = 1:1:tCount {
		Set tColor = $LG(tColors,$R($LL(tColors))+1)
		&html<<div style="color: #(tColor)#;">#(n)#: This #(tColor)# HTML is provided from a callback!</div>>
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="setContent">
<Description>
Set content</Description>
<FormalSpec>btn,id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var html = this.getComponentById(id);
	var content = prompt("Enter new content",html.getProperty('content'));
	if (content || content=='') {
		html.setProperty('content',content);
	}
]]></Implementation>
</Method>

<Method name="refreshHTML">
<Description>
Refresh HTML from server.</Description>
<FormalSpec>btn,id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var html = this.getComponentById(id);
	html.refreshContents();
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.HomePage">
<Description>
Zen Test Suite Home Page.
This page shows a set of links to the various Zen test pages.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60125,30066.203933</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Home Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
.vmenuTable {
	border: 1px solid gray;
	font-family: arial;
	font-size: 0.9em;
	padding: 0px;
	color: black;
	background: white;
}

a.menuItem {
	color: black;
}

a.menuItem:hover {
	color: darkblue;
}

#menu {
}


#intro {
	font-weight: normal;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Contents of this page:
serialized set of Zen component objects</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Test Suite">
<demo:demoTitle id="title" title="Zen Test Suite Home Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" />
</locatorBar>

<html id="intro">
Welcome to the Zen Test Suite Home Page.<br/>
Use the links below to go to one of the Zen test pages.
</html>

<hgroup>
<spacer width="100"/>
 <vmenu id="menu">
</vmenu>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<Description>
This callback is called after the server-side page 
object and all of its children are created.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; add items to main menu
	Set tMenu = ..%GetComponentById("menu")

	#; get pages in our application
	Do ##class(%ZEN.Utils).%GetPagesInApplication(..#APPLICATION, .tList)

	#; order pages by page name
	Set tPage = $O(tList(""))
	While (tPage '= "") {
		If (tPage '= ..%ClassName(1)) {
			Set tLabel = ..FindPageName(tPage)
			If (tLabel '= "") {
				Set tPageList(tLabel) = tPage
			}
		}

		#; next
		Set tPage = $O(tList(tPage))
	}

	#; now create a menu dynamically from the list

	Set tLabel = $O(tPageList(""),1,tPage)
	While (tLabel '= "") {
		#; menuitem
		Set tItem = ##class(%ZEN.Component.menuItem).%New()
		Set tItem.caption = tLabel
		Set tItem.link = tPage _ ".cls"
		Do tMenu.%AddChild(tItem)

		Set tLabel = $O(tPageList(tLabel),1,tPage)
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="FindPageName">
<Description>
Get the page name for the given class (if possible).</Description>
<FormalSpec>pClass:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap"
	Set tPageName = $zobjclassmethod(pClass,"%GetPageName")
	Quit $S(tPageName="":pClass,1:tPageName)
Trap
	Set $ZT=""
	Quit pClass
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.LayoutTest">
<Description>
Zen Test: Layout Test Page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60125,30066.203933</TimeCreated>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>LayoutTest</Default>
</Parameter>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
div.lyo {
	border: 1px solid black;
	background: orange;
}
body {
	white-space:nowrap;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Contents of this page:</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page title="Zen Layout Demo" xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" layout="vertical" cellVAlign="top">
<demo:demoTitle id="title" title="Zen Layout Test Page" category="Zen Test Suite"/>

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Layout" title="Layout Test Page" />
</locatorBar>

<group layout="horizontal" width="100%" 
	cellSize="stretch"
	cellAlign="center">
<html slice="2"><div class="lyo">Ant</div></html>
<html slice="4"><div class="lyo">Bear</div></html>
<html slice="1"><div class="lyo">Cat</div></html>
</group>

<spacer height="100"/>
<vgroup width="100%" cellVAlign="top">
<hgroup>
<html><div class="lyo">-A1-</div></html>
<html><div class="lyo">-B1-</div></html>
<html><div class="lyo">-C1-</div></html>
</hgroup>
<hgroup width="80%" cellAlign="center">
<html><div class="lyo">-A2-</div></html>
<html><div class="lyo">-B2-</div></html>
<html><div class="lyo">-C2-</div></html>
</hgroup>
<hgroup width="100%" cellAlign="left">
<html width="90%"><div class="lyo">-A3-</div></html>
<html><div class="lyo">-B3-</div></html>
<html><div class="lyo">-C3-</div></html>
</hgroup>
<hgroup width="100%" cellAlign="right">
<html><div class="lyo">-A3-</div></html>
<html><div class="lyo">-B3-</div></html>
<html><div class="lyo">-C3-</div></html>
</hgroup>
<hgroup width="100%" cellAlign="even">
<html><div class="lyo">-A4-</div></html>
<html><div class="lyo">-B4-</div></html>
<html><div class="lyo">-C4-</div></html>
</hgroup>
<hgroup width="100%" cellSize="same">
<html><div class="lyo">-A5-</div></html>
<html><div class="lyo">-B5-</div></html>
<html><div class="lyo">-C5-</div></html>
<html><div class="lyo">-D5-</div></html>
<html><div class="lyo">-E5-</div></html>
<spacer/>
<html><div class="lyo">-FFFFFFFFFFFFFF-</div></html>
</hgroup>
<hgroup width="100%" cellSize="stretch">
<html><div class="lyo">-A6-</div></html>
<html><div class="lyo">-B6-</div></html>
<html><div class="lyo">-C6-</div></html>
</hgroup>
<hgroup width="100%" cellSize="stretch">
<html slice="1"><div class="lyo">-A7-</div></html>
<html slice="4"><div class="lyo">-B7-</div></html>
<spacer slice="22"/>
<html slice="16"><div class="lyo">-C7-</div></html>
</hgroup>
<hgroup width="100%" cellSize="stretch">
<html slice="2"><div class="lyo">-A8-</div></html>
<html slice="4"><div class="lyo">-B8-</div></html>
<spacer slice="1"/>
<html slice="8"><div class="lyo">-C8-</div></html>
</hgroup>
</vgroup>
<hgroup height="25%">
<vgroup>
<html><div class="lyo">-A1-</div></html>
<html><div class="lyo">-B1-</div></html>
<html><div class="lyo">-C1-</div></html>
<html><div class="lyo">-A1-</div></html>
<html><div class="lyo">-B1-</div></html>
<html><div class="lyo">-C1-</div></html>
<html><div class="lyo">-A1-</div></html>
<html><div class="lyo">-B1-</div></html>
<html><div class="lyo">-C1-</div></html>
</vgroup>
<vgroup height="100%" cellSize="stretch">
<html slice="1"><div class="lyo">-A2-</div></html>
<html slice="2"><div class="lyo">-B2-</div></html>
<html slice="6"><div class="lyo">-C2-</div></html>
</vgroup>
<vgroup cellVAlign="bottom">
<html><div class="lyo">-A3-</div></html>
<html><div class="lyo">-B3-</div></html>
<html><div class="lyo">-C3-</div></html>
</vgroup>
<vgroup height="100%" cellVAlign="even">
<html><div class="lyo">-A3-</div></html>
<html><div class="lyo">-B3-</div></html>
<html><div class="lyo">-C3-</div></html>
</vgroup>
</hgroup>

</page>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.LogPage">
<Description>
Zen Event log viewer page.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Event Log Page</Default>
</Parameter>

<XData name="Style">
<Description>
Domain used for localization.
Parameter DOMAIN = "ZENTEST";</Description>
<Data><![CDATA[
<style type="text/css">

table.tpTable {
	table-layout: auto;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Event Log Page">

<demo:demoTitle id="title" title="Zen Event Log Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Event Log" title="Event Log Page" />
</locatorBar>
<tablePane
	id="logTable"
	caption="Zen Event Log"
	queryClass="%ZEN.Utils"
	queryName="EnumerateLog"
	useSnapshot="true"
	pageSize="1000"

	fixedHeaders="true"
	bodyHeight="25.0em"
	filtersDisabled="false"

	showZebra="true"
	showRowNumbers="true"
	maxRows="10000"
	useKeys="true"
	showValueInTooltip="true"
>
<!--
<column colName="Type" width="80"/>
<column colName="Job" width="50"/>
<column colName="Time" width="120"/>
<column colName="Class" width="200"/>
<column colName="Message" width="350"/>
<column colName="Object" width="80"/>
-->
</tablePane>
<spacer height="25"/>
<hgroup>
<spacer width="25"/>
<checkbox id="cbEnabled" caption="Logging Enabled" onchange="zenPage.enabledChange(zenThis);"/>
<spacer width="25"/>
<button caption="Refresh" onclick="zenPage.refreshLog();"/>
<spacer width="25"/>
<button caption="Reset" onclick="zenPage.resetLog();"/>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="refreshLog">
<Description>
Refresh the event log table.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('logTable');
	table.executeQuery();
]]></Implementation>
</Method>

<Method name="resetLog">
<Description>
Reset the event log.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.EnableLog();
	this.refreshLog();
]]></Implementation>
</Method>

<Method name="enabledChange">
<Description>
User has changed enabled checkbox.</Description>
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.EnableLog(cb.getValue()==1 ? true : false);
	this.refreshLog();
]]></Implementation>
</Method>

<Method name="EnableLog">
<Description>
Turn logging on or off.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>flag:%Boolean=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	If (flag = "") {
		Set flag = ##class(%ZEN.Utils).%LoggingEnabled()
	}
	If (flag) {
		Do ##class(%ZEN.Utils).%StartLog()
	}
	Else {
		Do ##class(%ZEN.Utils).%StopLog()
	}
	Quit 1
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description>
This callback is called after the page model is created.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tCB = ..%GetComponentById("cbEnabled")
	Set tCB.value = $S(##class(%ZEN.Utils).%LoggingEnabled():1,1:0)
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.LookoutMenuTest">
<Description>
lookoutMenu Test</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Lookout Menu Test Page</Default>
</Parameter>

<Property name="StartTab">
<Description>
If provided, start with this tab open.</Description>
<Type>%ZEN.Datatype.string</Type>
<Parameter name="ZENURL" value="TAB"/>
</Property>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
body {
	background: #F0F0FF;
	font-family: verdana;
}

#lookout {
	border: 1px solid darkblue;
	overflow: auto;
	height: 600px;
	width: 200px;
	background: darkgray;
}

.lookoutTab {
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="lookout Menu Test Page">
<demo:demoTitle id="title" title="lookout Test Page" category="Zen Test Suite"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Lookout Menu" title="lookout Menu Test Page" />
</locatorBar>
<hgroup>
<lookoutMenu id="lookout" >
<tab caption="Animal" id="animal">
<menuItem   caption="Mineral" 
					link="javascript: zenPage.toggleTab('mineral');"
					image="images/folder.gif"
					/>
<menuItem   caption="Vegetables" 
					link="javascript: zenPage.toggleTab('vegetable');"
					image="images/folder.gif"
					/>
<menuItem   caption="Cheese" 
					link="javascript: zenPage.toggleTab('vegetable');"
					image="images/folder.gif"
					/>

</tab>
<tab caption="Mineral" id="mineral" tabResource="MyResource">
<form>
<text label="Name:" />
<text label="Weight:" />
</form>


</tab>
<tab caption="Vegetable" id="vegetable" disabled="true">
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu B" 
					link="javascript: alert('B');"
					help="Option B"
					image="images/folder.gif"
					/>

<menuItem   caption="Disable" 
					link="javascript: zenPage.toggleTab('vegetable');"
					image="images/folder.gif"
					/>

</tab>
<tab caption="Cheese" id="cheese">
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>

</tab>
</lookoutMenu>
</hgroup>

</page>
]]></Data>
</XData>

<Method name="%OnAfterCreatePage">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; try to go to specified tab
	Set tTab = ..%GetComponentById(..StartTab)
	If $IsObject(tTab) {
		Do tTab.%Activate()
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="toggleTab">
<Description>
Toggle disabled state of given tab.</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tab = zenPage.getComponentById(id);
	tab.setProperty('disabled',!tab.getProperty('disabled'));
]]></Implementation>
</Method>

<Method name="onlayoutHandler">
<Description><![CDATA[
This client event, if present, is fired when the page 
is first loaded or whenever it is resized.<br>
If this is called at load time, then <var>load</var> will
be true.]]></Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// adjust size of lookout menu
	var menu = zenPage.getComponentById('lookout');
	zenASSERT(menu,'Unable to find menu',arguments);

	// find div for titleBox & locator
	var title = zenPage.getComponentById('title');
	var divTitle = title.getEnclosingDiv();

	var loc = zenPage.getComponentById('locator');
	var divLoc = loc.getEnclosingDiv();

	// find height of window
	var winHeight = zenGetWindowHeight();

	// adjust size of menu
	var sz = winHeight - (parseInt(divTitle.offsetHeight)) - (parseInt(divLoc.offsetHeight)) - 20;
	menu.setSize(null,sz);
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.MVCDynaFormTest">
<Description>
Test page for MVC DynaForm.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>MVC Form Test Page</Default>
</Parameter>

<XData name="Style">
<Description>
Domain used for localization.
Parameter DOMAIN = "ZENTEST";</Description>
<Data><![CDATA[
<style type="text/css">

#userControls {
	height: 200px;
	overflow: auto;
}

.required {
	font-weight: bold;
}

.required:after {
	content: " (required)";
	font-style: italic;
	font-size: 0.8em;
	
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="MVC Form Test Page">

<demo:demoTitle id="title" title="Zen MVC Form Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="MVC Form Test" title="MVC Form Test Page" />
</locatorBar>

<spacer height="25"/>
<hgroup>
<spacer width="100"/>
<dataController id="controller" modelClass="ZENTest.DataModel" modelId="1"/>
<dynaForm id="MyForm" layout="vertical" controllerId="controller"
defaultGroupId="group">

<vgroup id="group"/>

<spacer height="20"/>
<hgroup>
<button caption="Save" onclick="zenPage.saveForm();"/>
</hgroup>
	
</dynaForm>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="saveForm">
<Description>
saveForm</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zenPage.getComponentById('MyForm');
	form.save();
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.MVCFormTest">
<Description>
Test page for MVC Form.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>MVC Form Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
Domain used for localization.
Parameter DOMAIN = "ZENTEST";</Description>
<Data><![CDATA[
<style type="text/css">

#userControls {
	height: 200px;
	overflow: auto;
}

.required {
	font-weight: bold;
}

.required:after {
	content: " (required)";
	font-style: italic;
	font-size: 0.8em;
	
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="MVC Form Test Page">

<demo:demoTitle id="title" title="Zen MVC Form Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="MVC Form Test" title="MVC Form Test Page" />
</locatorBar>

<spacer height="25"/>
<hgroup>
<spacer width="100"/>
<dataController id="controller" modelClass="ZENTest.DataModel" modelId="1"/>
<form id="MyForm" layout="vertical" controllerId="controller">

<!-- changing this will automatically change the dataController id -->
<text label="ID:" id="id" name="id" 
	dataBinding="%id" size="5"/>

<text label="Name:" id="Name" name="Name" 
	labelClass="required" required="true" 
	dataBinding="Name"/>

<text label="City:" id="City" name="City" 
	dataBinding="City"/>

<textarea label="Memo:" id="Memo" name="Memo" rows="8" cols="30"
	dataBinding="Memo"/>

<radioSet label="Sex:" id="Sex" name="Sex" 
	dataBinding="Sex" valueList="Male,Female,Other,Unknown"/>

<text label="Employee:" id="Employee" name="Employee" size="5"
	dataBinding="Employee"/>

<spacer height="20"/>
<hgroup>
<button caption="Save" onclick="zenPage.saveForm();"/>
</hgroup>
	
</form>

</hgroup>

</page>
]]></Data>
</XData>

<Method name="saveForm">
<Description>
saveForm</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var form = zenPage.getComponentById('MyForm');
	form.save();
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br>
Subclasses can override this to add, remove, or modify 
items within the page object model, or to provide values
for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*
	Set img = ..%GetComponentById("Picture")
	Set id=##class(%FileCharacterStream).GetStreamIdForFile("\temp\zentitle.jpg")
	Set img.streamId = id
	*/
	
	/// !!!
	Set %session.Preserve = 1

	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.MenuTest">
<Description>
Zen Test: Menu bar test page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60125,30066.203933</TimeCreated>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Menu Test</Default>
</Parameter>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<XData name="Style">
<Description>
example of customized style sheet</Description>
<Data><![CDATA[
<style type="text/css">

.msg {
	margin: 10px;
	font-family: verdana;
}

.helpMsg {
	margin: 10px;
	padding: 10px;
	width: 200px;
	border: 1px solid gray;
	background: #FFEEAA;
	opacity: 0.75;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Contents of this page:</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Menu Test Page">
<demo:demoTitle id="title" title="Menu Test Page" category="Zen Test Suite"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Menus" title="Menu Test Page" />
</locatorBar>

<hmenu id="topMenu">
<menuItem   caption="Home" 
					link="ZENDemo.Home.cls"
					help="Go to main demo page."
					/>
<menuItem   caption="Menu Demo" 
					link="ZENTest.HomePage.cls"
					help="Go to testing home page."
					/>
</hmenu>

<spacer height="25"/>
<html enclosingClass="msg">The following are examples of menus.</html>
<html><hr/></html>
<html enclosingClass="msg">Vertical menu:<br/></html>
<hgroup width="100%" cellAlign="left">
<spacer width="100" />
<menu id="menu2" layout="vertical">
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					/>
<menuSeparator />
<menuItem   caption="Menu B" 
					link="javascript: alert('B');"
					/>
<menu id="menu2B" caption="Submenu" layout="vertical" onactivate="zenPage.activateMenu2B();">

<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					id="menu2B_A"
					/>
<menuItem   caption="Menu B" 
					link="javascript: alert('B');"
					/>
<menu id="menu2BB" caption="Sub Submenu"  layout="vertical">

<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					/>
<menuItem   caption="Menu B" 
					link="javascript: alert('B');"
					/>
<menuItem   caption="Form C" 
					link="javascript: alert('C');"
					/>
</menu>

<menuItem   caption="Form C" 
					link="javascript: alert('C');"
					/>
</menu>

<menuItem   caption="Form C" 
					link="javascript: alert('C');"
					/>
<menu id="menu2C" caption="Submenu Two" layout="vertical">

<menuItem   caption="Menu C2" 
					link="javascript: alert('C2');"
					/>

</menu>
</menu>
</hgroup>

<html><hr/></html>
<html enclosingClass="msg">Horizontal menu:</html>
<hgroup width="100%" cellAlign="left">
<spacer width="100" />
<menu id="menu2ii" layout="horizontal"
	onshowHelp="zenPage.showHelp(help);"
	help="Top">
<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					help="Option A"
					image="images/folder.gif"
					/>
<menuSeparator />
<menuItem   caption="Menu B" 
					link="javascript: alert('B');"
					help="Option B"
					image="images/folder.gif"
					/>
<menu id="menu2B2" caption="Submenu" layout="vertical">

<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					image="images/folder.gif"
					/>
<menuItem   caption="Menu B" 
					link="javascript: alert('B');"
					/>
<menu id="menu2BB2" caption="Sub Submenu"  layout="vertical">

<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					/>
<menuItem   caption="Menu B" 
					link="javascript: alert('B');"
					/>
<menuItem   caption="Form C" 
					link="javascript: alert('C');"
					help="Sub Option C"
					/>
<menu id="menu2BC" caption="Sub Sub Submenu" layout="vertical">

<menuItem   caption="Menu A" 
					link="javascript: alert('A');"
					/>
</menu>

</menu>

<menuItem   caption="Form C" 
					link="javascript: alert('C');"
					/>
</menu>

<menuItem   caption="Form C" 
					link="javascript: alert('C');"
					help="Option C"
					/>
<menu id="menu2C3" caption="Submenu Two" layout="vertical">

<menuItem   caption="Menu C2" 
					link="javascript: alert('C2');"
					/>

</menu>
</menu>
</hgroup>

<html id="help"></html>
</page>
]]></Data>
</XData>

<Method name="activateMenu2B">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// submenu 2B is activated
	var item = zenPage.getComponentById('menu2B_A');
	if (item) {
		item.setDisabled(!item.getDisabled());
	}
]]></Implementation>
</Method>

<Method name="showHelp">
<FormalSpec>msg</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var html = zenPage.getComponentById('help');
	if (html) {
		if ('' == msg) {
			html.setHidden(true);
		}
		else {
			html.setHidden(false);
			html.setProperty('content','<div class="helpMsg">' + msg + '</div>');
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.ProxyObjectTest">
<Description>
Zen test page for proxy objects.
This page demonstrates the various ways in which Zen pages can invoke
methods using proxy objects.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>62136,70602.197883</TimeChanged>
<TimeCreated>60216,44506.960211</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Proxy Object Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
#menuTitleBox {
	color: black;
	background: #000040;
	background-image: url(images/grad-gray-10x100.png);
	background-repeat: repeat-x;
}

#menu {
}

#html {
	background: white;
	border: 1px solid black;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Proxy Object Test Page">
<demo:demoTitle id="title" title="Zen Proxy Object Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Proxy Test" title="Proxy Object Test Page" />
</locatorBar>
<hgroup>
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates the following features:">
<demo:bullet text="Using a light-weight proxy object to communicate between the client and server." />
<demo:bullet text="How a proxy object can be used with the HTML component." />
</demo:sidebar>
</vgroup>

<spacer width="50" />
<vgroup valign="top">
<spacer height="25" />
 <menu	id="menu" layout="vertical" cellVAlign="top">
<titleBox	title="Methods" 
	id="menuTitleBox"
			subtitle="Invoking Methods using proxy objects"
 />

<menuItem   caption="Server Instance Method Using a Proxy Object" 
					onclick="zenPage.testServerInstanceMethod();"
					help="Invoke server instance method."
					/>

<menuItem   caption="Server Instance Method that Modifies the Proxy Object" 
					onclick="zenPage.testServerInstanceMethodMod();"
					help="Invoke server instance method that modifies the proxy."
					/>

<menuItem   caption="Server Class Method that Modifies the Proxy Object" 
					onclick="zenPage.testServerClassMethodMod();"
					help="Invoke server class method that modifies the proxy."
					/>

<menuItem   caption="Server Class Method returning a Proxy Object" 
					onclick="zenPage.testServerClassMethodReturn();"
					help="Invoke server class method that returns a proxy."
					/>

<menuItem   caption="Update HTML component using a Proxy Object" 
					onclick="zenPage.testHTMLUpdate();"
					help="Refresh HTML component from server using a proxy."
					/>

</menu>
<spacer height="20"/>
<html id="html" OnDrawContent="DrawHTML"></html>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="DrawHTML">
<Description>
Draw contents of HTML box.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $IsObject(pSeed) {
		&html<<table>>
		&html<<tr><td>Name:</td><td>#(pSeed.Name)#</td></tr>>
		&html<<tr><td>SSN:</td><td>#(pSeed.SSN)#</td></tr>>
		&html<</table>>
	}
	Else {
		&html<<i>No data to display</i>>
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="testServerInstanceMethod">
<Description>
Test of server instance method.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// create a proxy object
	var proxy = new zenProxy();
	proxy.Name = "Elvis";
	proxy.SSN = "111-22-3333";

	// pass this object to the server
	zenPage.serverInstanceMethod(proxy);
]]></Implementation>
</Method>

<Method name="serverInstanceMethod">
<Description>
Server instance method</Description>
<FormalSpec>pProxy:%ZEN.proxyObject</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; The server returns the following JavaScript statements to client
	#; for execution.
	&js<
	alert('Server instance method received: #(pProxy.Name)#, #(pProxy.SSN)#');
	>
]]></Implementation>
</Method>

<Method name="testServerInstanceMethodMod">
<Description>
Test of server instance method that modifies the proxy object.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// create a proxy object
	var proxy = new zenProxy();
	proxy.Name = "Elvis";
	proxy.SSN = "111-22-3333";

	// pass this object to the server
	zenPage.serverInstanceMethodMod(proxy);
	
	alert('Server returned:\nName:\t'+proxy.Name+'\nTime:\t'+proxy.ServerTime);
]]></Implementation>
</Method>

<Method name="serverInstanceMethodMod">
<Description>
Server instance method that modifies the proxy.
This is a synchronous call.</Description>
<FormalSpec>pProxy:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; The server returns the following JavaScript statements to client
	#; for execution.
	&js<
	alert('Server instance method received: #(pProxy.Name)#, #(pProxy.SSN)#');
	>
	
	#; Modify proxy
	Set pProxy.Name = "Jack"
	Set pProxy.ServerTime = $ZH
	
	Quit 1
]]></Implementation>
</Method>

<Method name="testServerClassMethodMod">
<Description>
Test of server class method that modifies the proxy object.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// create a proxy object
	var proxy = new zenProxy();
	proxy.Name = "Elvis";
	proxy.SSN = "111-22-3333";

	// pass this object to the server
	zenPage.serverClassMethodMod(proxy);
	
	alert('Server returned:\nName:\t'+proxy.Name+'\nTime:\t'+proxy.ServerTime);
]]></Implementation>
</Method>

<Method name="serverClassMethodMod">
<Description>
Server class method that modifies the proxy.
This is a synchronous call.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProxy:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; The server returns the following JavaScript statements to client
	#; for execution.
	&js<
	alert('Server class method received: #(pProxy.Name)#, #(pProxy.SSN)#');
	>
	
	#; Modify proxy
	Set pProxy.Name = "Jill"
	Set pProxy.ServerTime = $ZH
	
	Quit 1
]]></Implementation>
</Method>

<Method name="testServerClassMethodReturn">
<Description>
Test of server class method that returns a proxy object.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var proxy = zenPage.serverClassMethodReturn();
	alert('Server returned:\nName:\t'+proxy.Name+'\nTime:\t'+proxy.ServerTime);
]]></Implementation>
</Method>

<Method name="serverClassMethodReturn">
<Description>
Server class method that modifies proxy.
This is a synchronous call.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%ZEN.proxyObject</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; Create proxy
	Set tProxy = ##class(%ZEN.proxyObject).%New()
	Set tProxy.Name = "Jim"
	Set tProxy.ServerTime = $ZH
	Quit tProxy
]]></Implementation>
</Method>

<Method name="testHTMLUpdate">
<Description>
Test of server class method that updates the HTML component.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var proxy = new zenProxy();
	proxy.Name = 'Marla';
	proxy.SSN = '333-22-1111';

	var html = zenPage.getComponentById('html');
	html.seed = proxy;
	html.refreshContents();
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.RepeatingGroupTest">
<Description>
Repeating Group Test</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Repeating Group Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<Property name="Rows">
<Description>
Rows to fetch from query.</Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>10</InitialExpression>
<Parameter name="ZENURL" value="ROWS"/>
</Property>

<Property name="SearchKey">
<Description>
Search key value used by repeating group query.</Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>"A"</InitialExpression>
<Parameter name="ZENURL" value="KEY"/>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
#repeatingGroup input.button {
	width: 300px;
	margin: 1px;
	text-align: left;
}

/* div around repeating group */
#repeatingGroup {
	border: 1px solid black;
	background: #E0D0E0;
}

/* items within the repeating group */
.repeatingGroup,.repeatingGroupSelected {
	border-bottom: 1px solid gray;
	border-right: 1px solid gray;
	padding: 10px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="RepeatingGroup Test Page">
<demo:demoTitle id="title" title="RepeatingGroup Test Page" category="Zen Test Suite"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Repeating Group" title="Repeating Group Test Page" />
</locatorBar>

<spacer height="25"/>
<hgroup>
<spacer width="25"/>
<vgroup id="vg">
<repeatingGroup id="repeatingGroup"
	maxRows="1000"
	sql="SELECT TOP ? Name,Title FROM ZENDemo_Data.Employee WHERE Name %STARTSWITH ?">
	<parameter value="#(%page.Rows)#" />
	<parameter value="#(%page.SearchKey)#" />
<hgroup id="hg">
<button caption='#(%query.Name)#' onclick="alert('#(%query.Name)#')"/>
<spacer width="25"/>
<button caption='#(%query.Title)#' onclick="alert('#(%query.Title)#')"/>
<spacer width="10"/>
<html>Item #(%this.tuple)#: <b>#(%query.Title)#</b></html>
</hgroup>
</repeatingGroup>
<spacer height="25"/>
<form>
<text id="search" label="Key:" value="#(%page.SearchKey)#" size="10"/>
<text id="rows" label="Rows:" value="#(%page.Rows)#" size="5"/>
<button caption="Search" onclick="zenPage.refreshGroup();" />
</form>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="refreshGroup">
<Description>
Refresh contents of the repeating group
using a new search key.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var rg = this.getComponentById("repeatingGroup");
	var skey = this.getComponentById("search");
	var rows = this.getComponentById("rows");

	rg.parameters[0].value = parseInt(rows.getValue());
	rg.parameters[1].value = skey.getValue();
	rg.refreshContents();
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.SVGAreaChartTest">
<Description>
Test page for area Chart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>62829,58599.880964</TimeChanged>
<TimeCreated>60540,51547.452227</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Area Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<lineChart id="chart" 
	ongetData="return zenPage.getChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	plotAreaStyle="fill: #eeeeee;"
	title="Zen Area Chart"
	seriesCount="1"
	seriesSize="10"
    seriesColorScheme="solid"
    chartFilled="true"
	width="400" 
	height="400">
<xAxis id="xAxis" />
<yAxis id="yAxis"
   baseValue="0"
	minorGridLines="true"/>
</lineChart>
</svgFrame>

</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGBarChartTest">
<Description>
Test page for barChart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>62829,58600.375225</TimeChanged>
<TimeCreated>60540,52335.225935</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Bar Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<barChart id="chart" 
	ongetData="return zenPage.getChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	plotAreaStyle="fill: #eeeeee;"
	title="Zen Bar Chart"
	seriesColorScheme="solid"
  	seriesCount="3"
	seriesSize="10"
	width="400" 
	height="400">
<xAxis id="xAxis" />
<yAxis id="yAxis"
   baseValue="0"
	minorGridLines="true"/>
</barChart>
</svgFrame>

</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGBubbleChartTest">
<Description>
Test page for bubbleChart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>62829,57643.082479</TimeChanged>
<TimeCreated>60540,52335.225935</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Bubble Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<bubbleChart id="chart" 
	ongetData="return zenPage.getBubbleChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	plotAreaStyle="fill: #eeeeee;"
	title="Zen Bubble Chart"
	seriesColorScheme="solid"
  	seriesCount="5" 
    xCenterValue="80"
	seriesSize="10"
    radius="3"
    showRegression="true"
	lineStyle="stroke:black; stroke-width:1px;"
	width="400" 
	height="400">
<xAxis id="xAxis" />
<yAxis id="yAxis"
   baseValue="0"
	minorGridLines="true"/>
</bubbleChart>
</svgFrame>

</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGBullseyeChartTest">
<Description>
Test page for bullseyeChart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60540,52335.225935</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Bullseye Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<bullseyeChart id="chart" 
	ongetData="return zenPage.getBullseyeChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	plotAreaStyle="fill: #eeeeee;"
	title="Zen Bullseye Chart"
    labelValue="value"
  	seriesCount="3" 
	seriesSize="3"
	width="400" 
	height="400">
</bullseyeChart>
</svgFrame>

</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGChartTest">
<Description>
Zen SVG Chart test page.
This is an abstract base class from which the actual chart test pages
are created.</Description>
<Abstract>1</Abstract>
<Super>%ZEN.Component.page</Super>
<TimeChanged>62838,45071.528414</TimeChanged>
<TimeCreated>60178,64228.461852</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>SVG Chart Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

#objectInspector {
	border: 1px solid darkblue;
	height: 400px;
	width: 400px;
	overflow: auto;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="SVG Chart Test">
<demo:demoTitle id="title" title="Zen SVG Chart Test Page" category="Zen Test Suite" />

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Chart Demo" title="Chart Demo" />
</locatorBar>

<hgroup cellVAlign="top">
<demo:sidebar text="This Zen page demonstrates the following features:">
<demo:bullet text="How you can place dynamic charts within web page using the Zen chart components" />
<demo:bullet text="How the attributes of the Zen chart components can be modified dynamically" />
</demo:sidebar>

<hgroup cellVAlign="top">
<!-- subclass will provide contents of this pane -->
<vgroup cellVAlign="top">
<pane paneName="chartPane"/>
<hgroup>
<spacer width="50"/>
<button caption="Update" 
	title="Provide new data for this chart"
	onclick="zenPage.updateChart();" />
</hgroup>
<spacer height="25"/>
<vgroup>
<hgroup>
<link caption="areaChart" href="ZENTest.SVGAreaChartTest.cls"/>
<spacer width="25"/>
<link caption="barChart" href="ZENTest.SVGBarChartTest.cls"/>
<spacer width="25"/>
<link caption="percentbarChart" href="ZENTest.SVGPercentbarChartTest.cls"/>
<spacer width="25"/>
<link caption="stackedbarChart" href="ZENTest.SVGStackedBarChartTest.cls"/>
</hgroup>
<hgroup>
<link caption="bubbleChart" href="ZENTest.SVGBubbleChartTest.cls"/>
<spacer width="25"/>
<link caption="comboChart" href="ZENTest.SVGComboChartTest.cls"/>
<spacer width="25"/>
<link caption="diffChart" href="ZENTest.SVGDiffChartTest.cls"/>
<spacer width="25"/>
<link caption="hilowChart" href="ZENTest.SVGHilowChartTest.cls"/>
</hgroup>
<hgroup>
<link caption="lineChart" href="ZENTest.SVGLineChartTest.cls"/>
<spacer width="25"/>
<link caption="pieChart" href="ZENTest.SVGPieChartTest.cls"/>
<spacer width="25"/>
<link caption="xyChart" href="ZENTest.SVGxyChartTest.cls"/>
<spacer width="25"/>
<link caption="treeMapChart" href="ZENTest.SVGTreeMapChartTest.cls"/>
</hgroup>
<hgroup>
<link caption="bullseyeChart" href="ZENTest.SVGBullseyeChartTest.cls"/>
</hgroup>
</vgroup>
</vgroup>
<spacer width="25"/>

<vgroup valign="top">

<titleBox title="Chart Attributes" />
<html enclosingClass="msg">Set attribute values of the chart.</html>
<radioSet id="element" 
	valueList="chart,xAxis,yAxis"
	displayList="Chart,X axis,Y axis"
	value="chart"
	onchange="zenPage.inspectElement(zenThis.getValue());"
	/>
<objectInspector id="objectInspector" columnWidth="100"/>
</vgroup>

</hgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenPage.inspectElement('chart');
]]></Implementation>
</Method>

<Method name="inspectElement">
<Description>
Point object inspector to given component.</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var obj = zenPage.getComponentById(id);
	var inspector = zenPage.getComponentById('objectInspector');
	inspector.setCurrObject(obj);
]]></Implementation>
</Method>

<Method name="updateChart">
<FormalSpec>idx</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// connect inspector to chart
	var chart = zenPage.getComponentById('chart');
	chart.updateChart();
]]></Implementation>
</Method>

<Method name="getChartData">
<Description>
Callback to provide data for chart.</Description>
<FormalSpec>series</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var chart = zenPage.getComponentById('chart');
	var data = new Array(chart.seriesSize);
	var value = 50;
	
	for (var i = 0; i < chart.seriesSize; i++) {
		if (Math.random() > 0.9) {
			value += (Math.random() * 50) - 35;
		}
		else {
			value += (Math.random() * 20) - 9;
		}
		data[i] = value;
	}
	return data;
]]></Implementation>
</Method>

<Method name="getBubbleChartData">
<Description>
Callback to provide data for bubble chart.</Description>
<FormalSpec>series</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var chart = zenPage.getComponentById('chart');
	var data = new Array(chart.seriesSize);
	var value = 50;
	if (series == 0) // x values
	{
		for (var i = 0; i < chart.seriesSize; i++) {
		
			value += i;
	
			data[i] = value;
		}
	}
    if (series == 1) // y values
	{
		for (var i = 0; i < chart.seriesSize; i++) {
		
			value += (Math.random() * 20) - 9;
		    data[i] = value;
	    }
	}
    if (series == 2) // radius
	{
		for (var i = 0; i < chart.seriesSize; i++) {
			data[i] = 0;
		}
	}
    if (series == 3) // color
	{
		for (var i = 0; i < chart.seriesSize; i++) {
			data[i] = (i%3)?"group 1":"group 2"
		}
	}
    if (series == 4) // opacity
	{
		data[1] = 1;
		data[2] = 4;
		data[3] = 1;
		data[4] = 1;
		data[5] = 4;
		data[6] = 1;
		data[7] = 4;
		data[8] = 4;
		data[9] = 4; 
	}
	return data;
]]></Implementation>
</Method>

<Method name="getHilowChartData">
<Description>
Callback to provide data for hilow chart.</Description>
<FormalSpec>series</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var chart = zenPage.getComponentById('chart');
	var data = new Array(chart.seriesSize);
	var value = 50;

if (series == 0) // high
	{
		for (var i = 0; i < chart.seriesSize; i++) {
		
			value = (Math.random() * 10) + 200;
	
			data[i] = value;
		}
	}
    if (series == 1) // low
	{
		
		for (var i = 0; i < chart.seriesSize; i++) {
		
			value = (Math.random() * 10) + 50;
	
			data[i] = value;
		}
	}
    if (series == 2) // mid
	{
		for (var i = 0; i < chart.seriesSize; i++) {
		
			value = (Math.random() * 50) + 100;
	
			data[i] = value;
		}

	}
	return data;
]]></Implementation>
</Method>

<Method name="getBullseyeChartData">
<Description>
Callback to provide data for bullseye chart.</Description>
<FormalSpec>series</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var chart = zenPage.getComponentById('chart');
	var data = new Array(chart.seriesSize);
	var value = 50;

if (series == 0) // high
	{
		for (var i = 0; i < chart.seriesSize; i++) {
		
			value = (Math.random() * 1000) + (i * 100);
	
			data[i] = value;
		}
	}
    if (series == 1) // low
	{
		
		for (var i = 0; i < chart.seriesSize; i++) {
		
			value = (Math.random() * 500) + (i * 500);
	
			data[i] = value;
		}
	}
    if (series == 2) // mid
	{
		for (var i = 0; i < chart.seriesSize; i++) {
		
			value = (Math.random() * 10) + (i * 100);
	
			data[i] = value;
		}

	}
	return data;
]]></Implementation>
</Method>

<Method name="getCountryLabels">
<Description>
Return labels</Description>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var label = null;
	
	switch(parseInt(value)) {
	case 0:
		label = 'North America';
		break;
	case 1:
		label = 'Asia';
		break;
	case 2:
		label = 'Europe';
		break;
	case 3:
		label = 'South America';
		break;
	case 4:
		label = 'Africa';
		break;
	case 5:
		label = 'Australia';
		break;
	}
	
	return label;
]]></Implementation>
</Method>

<Method name="getPercentBarXLabels">
<Description>
Return label displayed on the X axis for the Percent Bar Chart.</Description>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var label = null;
	
    switch(parseInt(value)) {
	case 0:
		label = "Products";
		break;
	case 1:
		label = "Services";
		break;
	case 2:
		label = "Training";
		break;
	}
	return label;
]]></Implementation>
</Method>

<Method name="chartElementClick">
<Description>
chartElementClick</Description>
<FormalSpec>chart</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var series = chart.getSelectedSeries();
	var item = chart.getSelectedItem();

	if (!isNaN(parseInt(series)) && !isNaN(parseInt(item))) {
		alert('You have selected item ' + item + ' in series ' + series + '.');
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.SVGComboChartTest">
<Description>
Test page for comboChart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>62829,63235.602545</TimeChanged>
<TimeCreated>60540,52335.225935</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Combo Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<comboChart id="chart" 
	ongetData="return zenPage.getChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	plotAreaStyle="fill: #eeeeee;"
	title="Zen Combo Chart"
    seriesColors="red,teal,blue,orange"
  	seriesCount="4"
	seriesSize="10"
    seriesTypes="area,bar,line,line"
    lineStyle="stroke-width:1px;"
	width="400" 
	height="400">
<xAxis id="xAxis" />
<yAxis id="yAxis"
   baseValue="0"
   minValue="" 
   maxValue="" 
   majorUnits=""
   minorUnits=""
    minorGridLines="true"/>
</comboChart>
</svgFrame>

</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGComponentTest">
<Description>
Test page for a custom SVG Component.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,48007.995811</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>SVG Custom Component Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

.button {
	width: 120px;
}

</style>
]]></Data>
</XData>

<XData name="SVGStyle">
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" xmlns:test="http://www.intersystems.com/zentest" title="SVG Custom Component Test Page" >
<demo:demoTitle id="title" title="Zen SVG Custom Component Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="SVG Custom Component" title="SVG Custom Component" />
</locatorBar>

<spacer height="25"/>
<hgroup cellVAlign="top">
<spacer width="25"/>
<svgFrame id="svgFrame" layout="vertical"
	height="400" width="400">
<test:customSVGComponent id="myComponent"/>
</svgFrame>
</hgroup>

<hgroup>
<spacer width="25"/>
<button caption="Change Size" onclick="zenPage.changeSize();"/>
<spacer width="10"/>
<button caption="Change Style" onclick="zenPage.changeStyle();"/>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="changeSize">
<Description>
Change the size of the custom SVG component.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var svg = zenPage.getComponentById('myComponent');
	svg.setSize(Math.random()*200+ 10,Math.random()*200 + 10);
]]></Implementation>
</Method>

<Method name="changeStyle">
<Description>
Change the style of the custom SVG component.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var svg = zenPage.getComponentById('myComponent');
	var style = svg.getProperty('style');
	style = ('fill: red;' == style) ? 'fill: green;' : 'fill: red;';
	svg.setProperty('style',style);
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.SVGDiffChartTest">
<Description>
Test page for diffChart components.
TESTING</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60540,51547.452227</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Difference Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<diffChart id="chart" 
	ongetData="return zenPage.getChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	plotAreaStyle="fill: #eeeeee;"
	title="Zen Difference Chart"
	seriesCount="2"
	seriesSize="10"
    refLineStyle="stroke-dasharray: 5,5; stroke-width: 1;"
    seriesColors="black,lightblue"
	width="400" 
	height="400">
<xAxis id="xAxis" />
<yAxis id="yAxis"
   baseValue="0"
	minorGridLines="true"/>
</diffChart>
</svgFrame>
</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGHilowChartTest">
<Description>
Test page for hilowChart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>62829,58600.166859</TimeChanged>
<TimeCreated>60540,52335.225935</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG High/Low Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<hilowChart id="chart" 
	ongetData="return zenPage.getHilowChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	plotAreaStyle="fill: #eeeeee;"
	title="Zen High/Low Chart"
	seriesColorScheme="solid"
    labelsVisible="true"
  	seriesCount="3"
	seriesSize="10"
	width="400" 
	height="400">
<xAxis id="xAxis" />
<yAxis id="yAxis"
   baseValue="0"
	minorGridLines="true"/>
</hilowChart>
</svgFrame>

</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGLayoutTest">
<Description>
Simple SVG Component Layout Test page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,48007.995811</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>SVG Layout Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
.button {
	width: 120px;
}

#objectInspector {
	width: 24.0em;
	height: 300px;
	overflow: auto;
	border: 1px solid black;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="SVG Layout Page">
<demo:demoTitle id="title" title="Zen SVG Layout Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="SVG Layout" title="SVG Layout" />
</locatorBar>

<spacer height="25"/>
<hgroup cellVAlign="top">
<spacer width="25"/>
<svgFrame id="svgFrame" 
   svgAutoSize="true"
	layout="horizontal"
	height="400" width="800"
	onselectItem="zenPage.itemSelected(item);"
	onmoveItem="zenPage.itemMoved();"
	onresizeItem="zenPage.itemResized();"
	 >

<!-- Set position="fixed" so that the slider will not zoom -->
<slider id="zoomInd" position="fixed" 
x="15" y="15"
height="300" width="30"
tickMarks="11"
value="4"
onchange="zenPage.sliderChange(zenThis);"
rangeLower="0" rangeUpper="11"/>

<rect id="rect1" style="fill: red;" onclick="zenPage.select(zenThis);"/>
<svgGroup id="subGroup">
<rect id="rect4" style="fill: yellow; stroke: orange;" width="50" height="50" onclick="zenPage.select(zenThis);"/>
<rect id="rect5" style="fill: black; stroke: orange;" width="50" height="50" onclick="zenPage.select(zenThis);"/>
<rect id="rect6" style="fill: plum; stroke: orange;" width="50" height="50" onclick="zenPage.select(zenThis);"/>
</svgGroup>
<rect id="rect2" style="fill: green;" onclick="zenPage.select(zenThis);" />
<rect id="rect3" style="fill: blue;" onclick="zenPage.select(zenThis);"/>
<speedometer id="speedometer" 
	animate="true"
	onclick="zenPage.select(zenThis);" 
	width="150" height="150" />
<fuelGauge id="fuelGauge" 
	animate="true"
	onclick="zenPage.select(zenThis);" 
	width="150" height="150" />

<lightBar id="lightBar" 
	animate="true"
	onclick="zenPage.select(zenThis);" 
	width="75" height="150" />
<trafficLight id="trafficLight" 
	animate="true"
	onclick="zenPage.select(zenThis);" 
	width="75" height="150" />

<smiley id="smiley" 
	onclick="zenPage.select(zenThis);" 
	width="150" height="150" />

</svgFrame>
<spacer width="25"/>

<vgroup valign="top">

<titleBox title="Attributes" />
<html enclosingClass="msg">Set attribute values of the selected shape.</html>
<objectInspector id="objectInspector" />
</vgroup>

</hgroup>

<fieldSet legend="TopMost" layout="horizontal">
<spacer width="25"/>
<radioSet
	id="topLayout"
	displayList="No layout,Vertical,Horizontal"
	valueList=",vertical,horizontal"
	value="horizontal"
	onchange="zenPage.changeLayout('svgFrame',zenThis.getValue());"/>
<spacer width="25"/>
<checkbox id="editMode" caption="Edit Mode" onchange="zenPage.editMode(zenThis);"/>
</fieldSet>

<fieldSet legend="SubGroup" layout="horizontal">
<spacer width="25"/>
<radioSet
	displayList="No layout,Vertical,Horizontal"
	valueList=",vertical,horizontal" 
	onchange="zenPage.changeLayout('subGroup',zenThis.getValue());"/>
<spacer width="25"/>
</fieldSet>
<button caption="Set Value" onclick="zenPage.applyTestValue();"/>
</page>
]]></Data>
</XData>

<Method name="sliderChange">
<Description>
User has moved the zoom slider.</Description>
<FormalSpec>slider</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var svg = zenPage.getComponentById('svgFrame');
	
	// Set the zoom level to the current slider value.
	svg.setZoomIndex(slider.value);
	zenPage.updateInspector();
]]></Implementation>
</Method>

<Method name="applyTestValue">
<Description>
Apply a random value to the current selected item.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var svg = zenPage.getComponentById('svgFrame');
	var item = svg.getSelectedItem();
	if (item) {
		item.setProperty('value',Math.round(Math.random() * 100));

		zenPage.updateInspector();
	}
]]></Implementation>
</Method>

<Method name="editMode">
<Description>
Toggle edit mode.</Description>
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var svg = zenPage.getComponentById('svgFrame');
	svg.setEditMode((cb.getValue()==1) ? 'drag' : 'none');
]]></Implementation>
</Method>

<Method name="changeLayout">
<Description>
Change layout of specified group</Description>
<FormalSpec>groupId,type</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var group = zenPage.getComponentById(groupId);
	group.setProperty('layout',type);
	zenPage.updateInspector();
]]></Implementation>
</Method>

<Method name="select">
<Description>
Select the given item and set the inspector to refer to it.</Description>
<FormalSpec>item</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// if svgFrame is in Edit mode, then clicks are intercepted
	// and this method will not be called.
	var svg = zenPage.getComponentById('svgFrame');
	svg.selectItem(item,false);
]]></Implementation>
</Method>

<Method name="itemSelected">
<Description>
Notification that user has selected an SVG component.</Description>
<FormalSpec>item</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var inspector = zenPage.getComponentById('objectInspector');
	if (null == item) {
		// select the svgFrame
		item = zenPage.getComponentById('svgFrame');
	}

	inspector.setCurrObject(item);
]]></Implementation>
</Method>

<Method name="itemMoved">
<Description>
Notification that user has moved an SVG component.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenPage.updateInspector();
]]></Implementation>
</Method>

<Method name="updateInspector">
<Description>
Update the object inspector.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var inspector = zenPage.getComponentById('objectInspector');
	inspector.update();
]]></Implementation>
</Method>

<Method name="itemResized">
<Description>
Notification that user has resized an SVG component.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenPage.updateInspector();
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// turn off layout; turn on edit mode
	var svg = zenPage.getComponentById('svgFrame');
	svg.setProperty('layout','');
	svg.setProperty('editMode','drag');

	var ctrl = zenPage.getComponentById('topLayout');
	ctrl.setValue('');
	var ctrl = zenPage.getComponentById('editMode');
	ctrl.setValue(1);

	var inspector = this.getComponentById('objectInspector');
	inspector.setCurrObject(svg);
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.SVGLineChartTest">
<Description>
Test page for lineChart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>62838,50883.322606</TimeChanged>
<TimeCreated>60540,51547.452227</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Line Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<lineChart id="chart" 
	ongetData="return zenPage.getChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	plotAreaStyle="fill: #eeeeee;"
    bandUpper="60"
    bandUpperStyle="fill: #eeffee"
    bandLower="20"
    bandLowerStyle="fill: #ffeeee"
    borderOffset="30"
	title="Zen Line Chart"
	seriesColorScheme="solid"
	seriesCount="3"
	seriesSize="10"
    lineStyle="stroke-width: 1px;"
    hasZoom="true"
	width="400" 
	height="400">
<xAxis id="xAxis" minorGridLines="true" />
<yAxis id="yAxis" baseValue="0" minorGridLines="true" />
</lineChart>
</svgFrame>

</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGOwnerDrawTest">
<Description>
Test page for the owner-draw SVG Component.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,48007.995811</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>SVG Owner-Draw Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

.button {
	width: 120px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="SVG OwnerDraw Test Page">
<demo:demoTitle id="title" title="Zen SVG OwnerDraw Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="OwnerDraw" title="OwnerDraw Test Page" />
</locatorBar>

<spacer height="25"/>
<hgroup>
<spacer width="25"/>
<svgFrame id="svgFrame" layout="vertical"
	height="400" width="400">
<ownerDraw id="owner1"
	height="200" width="400" 
	onrender="zenPage.ownerDraw1(zenThis);"/>
<ownerDraw id="owner2"
	height="200" width="400" 
	onrender="zenPage.ownerDraw2(zenThis);"/>
</svgFrame>
</hgroup>

<hgroup>
<spacer width="25"/>
<button caption="Client Update" onclick="zenPage.update('owner1');"/>
<spacer width="10"/>
<button caption="Server Update" onclick="zenPage.update('owner2');"/>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="update">
<Description>
Update contents of Owner-draw svg component.</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var svg = zenPage.getComponentById(id);
	svg.render();
]]></Implementation>
</Method>

<Method name="ownerDraw1">
<Description>
Owner-draw notification for owner1 component.
This method creates content using client-side logic.</Description>
<FormalSpec>svg</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// clear contents of ownerDraw component
	svg.unrender();
	
	// create a line; add it to the svg component
	for (var n = 0; n < 30; n++) {
		var line = svg.document.createElementNS(SVGNS,'line');
		line.setAttribute('x1',200);
		line.setAttribute('y1',100);
		line.setAttribute('x2',Math.random() * 400);
		line.setAttribute('y2',Math.random() * 200);
		line.setAttribute('style','stroke: blue; stroke-width: 2;');
		svg.svgGroup.appendChild(line);
	}
]]></Implementation>
</Method>

<Method name="ownerDraw2">
<Description>
Owner-draw notification for owner2 component.
This method creates content using server-side logic.</Description>
<FormalSpec>svg</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// clear contents of ownerDraw component
	svg.unrender();

	// Get new contents from the server
	this.GetSVGContents(svg.index);
]]></Implementation>
</Method>

<Method name="GetSVGContents">
<Description>
Execute server-logic to get SVG contents for Owner-draw component.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pIndex:%Integer</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; get the svg component
	&js<var svg = zenPage.getComponent(#(pIndex)#);>
	
	#; execute JS to create contents
	&js<
		var rect = svg.document.createElementNS(SVGNS,'rect');
		rect.setAttribute('x',0);
		rect.setAttribute('y',0);
		rect.setAttribute('width',400);
		rect.setAttribute('height',200);
		rect.setAttribute('style','fill: blue; stroke: gray; stroke-width: 1;');
		svg.svgGroup.appendChild(rect);
	>

	#; lines
	For i=1:1:30 {
		&js<
			var line = svg.document.createElementNS(SVGNS,'circle');
			//line.setAttribute('x1',200);
			//line.setAttribute('y1',100);
			line.setAttribute('r',5);
			line.setAttribute('cx',#(10+$Random(380))#);
			line.setAttribute('cy',#(10+$Random(180))#);
			line.setAttribute('style','#("fill: yellow; stroke: black; stroke-width: 2;")#');
			svg.svgGroup.appendChild(line);
		>
	}
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.SVGPercentbarChartTest">
<Description>
Test page for percentbarChart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>62829,64859.352477</TimeChanged>
<TimeCreated>60540,52335.225935</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Percent Bar Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<percentbarChart id="chart" 
	ongetData="return zenPage.getChartData(series);"
    ongetLabelX="return zenPage.getPercentBarXLabels(value);"
	plotAreaStyle="fill: #eeeeee;"
	title="Zen Percent Bar Chart"
	seriesColorScheme="solid"
  	seriesCount="3"
	seriesSize="6"
    appearance="2D"
	seriesNames="North America,Asia,Europe,South America,Africa,Australia"
	width="400" 
	height="400">
<xAxis id="xAxis" /> 
<yAxis id="yAxis"
   baseValue="0"
	minorGridLines="true"/>
</percentbarChart>
</svgFrame>

</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGPieChartTest">
<Description>
Test page for pieChart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>62829,65942.331867</TimeChanged>
<TimeCreated>60540,52359.802086</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Pie Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<pieChart id="chart" 
	ongetData="return zenPage.getChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	title="Zen Pie Chart"
	plotAreaStyle="fill: #eeeeee;"
	seriesCount="3"
	seriesSize="6"
    plotBy="items"
	seriesColorScheme="solid"
	seriesNames="Products,Services,Training"
	ongetLabelY="return zenPage.getCountryLabels(value);"
	legendVisible="false"
    appearance="2D"
	width="400" 
	height="400">
</pieChart>
</svgFrame>

</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGRadialNavigatorTest">
<Description><![CDATA[
Test page for the <class>%ZEN.SVGComponent.radialNavigator</class> SVG Component.]]></Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,48007.995811</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>SVG radialNavigator Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

.button {
	width: 120px;
}

div.objectInspectorDiv {
	width: 30.0em;
	height: 400px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="SVG radialNavigator Test Page">
<demo:demoTitle id="title" title="Zen SVG radialNavigator Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Radial Navigator" title="Radial Navigator Test Page" />
</locatorBar>

<spacer height="25"/>
<hgroup>
<spacer width="25"/>
<svgFrame id="svgFrame" layout="vertical"
	height="500" width="500">
<radialNavigator id="navigator" mainLabel="Navigator"
	height="500" width="500" 
>
<radialNode caption="Node 1" style="fill: green;"/>
<radialNode caption="Node 2"/>
<radialNode caption="Node 3"/>
</radialNavigator>
</svgFrame>

<spacer width="20"/>

<vgroup valign="top">

<titleBox title="Attributes" />
<html enclosingClass="msg">Set attribute values of the Navigator.</html>
<objectInspector id="objectInspector" />
</vgroup>
</hgroup>

<hgroup>
<spacer width="25"/>
<button caption="Client Update" onclick="zenPage.clientUpdate();"/>
<spacer width="10"/>
<button caption="Server Update" onclick="zenPage.serverUpdate();"/>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="clientUpdate">
<Description>
clientUpdate.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var nav = zenPage.getComponentById('navigator');
	var node = zenPage.createComponent('radialNode');
	node.caption = 'New Node';
	nav.appendNode(node);
]]></Implementation>
</Method>

<Method name="serverUpdate">
<Description>
serverUpdate: call server method to update Navigator</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//cspRunServerDebugWindow = true;
	var nav = zenPage.getComponentById('navigator');
	nav.clearNodes();
	var ok = this.UpdateNav(nav);
	nav.renderContents();
]]></Implementation>
</Method>

<Method name="UpdateNav">
<Description>
Rebuild the array of nodes used by the Navigator</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>nav:%ZEN.SVGComponent.radialNavigator</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	//Set tOld = nav.nodes.Count()
	//Do nav.nodes.Clear()
	
	#Dim %page As %ZEN.Component.page
	
	Set tCount = $R(10 + 20)
	
	For n=1:1:tCount {
		Set tNode = ##class(%ZEN.Auxiliary.radialNode).%New()
		Do %page.%AddComponent(tNode)
		Set tNode.caption = "Node " _ $R(999)
		Do nav.nodes.Insert(tNode)
	}

	Quit 1
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
Select the Navigator for inspecting.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var inspector = zenPage.getComponentById('objectInspector');
	var nav = zenPage.getComponentById('navigator');
	inspector.setCurrObject(nav);
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.SVGSliderTest">
<Description>
Zen SVG Slider test page.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60178,64228.461852</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>SVG Slider Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

#objectInspector {
	border: 1px solid darkblue;
	height: 400px;
	width: 400px;
	overflow: auto;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="SVG Slider Test">
<demo:demoTitle id="title" title="Zen SVG Chart Test Page" category="Zen Test Suite" />

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Slider Demo" title="Slider Demo" />
</locatorBar>

<hgroup cellVAlign="top">
<demo:sidebar text="This Zen page demonstrates the following features:">
<demo:bullet text="The SVG slider component" />
<demo:bullet text="How the attributes of the Zen components can be modified dynamically" />
</demo:sidebar>

<hgroup cellVAlign="top">
<vgroup cellVAlign="top">
<svgFrame id="svgFrame" height="400" width="600" layout="horizontal">
<slider id="slider" height="400" 
onchange="zenPage.updateValue(zenThis.getValue());" 
constrained="true" rangeLower="0" rangeUpper="100"/>
<smiley id="meter" height="150" width="150"/>
</svgFrame>
<spacer height="10"/>
<hgroup labelPosition="left">
<text id="value" label="Value:" onchange="zenPage.updateSlider(zenThis.getValue());" value="0" size="5"/>
<spacer width="25"/>
<checkbox id="constrained" value="1" caption="Constrained" onclick="zenPage.setConstrained(zenThis.getValue());"/>
</hgroup>
</vgroup>
<spacer width="25"/>

<vgroup valign="top">

<titleBox title="Slider Attributes" />
<html enclosingClass="msg">Set attribute values of the slider.</html>
<objectInspector id="objectInspector" columnWidth="100"/>
</vgroup>
</hgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="setConstrained">
<Description>
Update the contrained property of the slider.</Description>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var slider = zenPage.getComponentById('slider');
	slider.setProperty('constrained',value);
]]></Implementation>
</Method>

<Method name="updateSlider">
<Description>
Update the value of the slider.</Description>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var slider = zenPage.getComponentById('slider');
	slider.setValue(value);

	// show new value of slider
	zenPage.updateValue(slider.getValue());
]]></Implementation>
</Method>

<Method name="updateValue">
<Description>
Update the value in the text box.</Description>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = zenPage.getComponentById('value');
	ctrl.setValue(value);

	var meter = zenPage.getComponentById('meter');
	meter.setValue(value);
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	zenPage.inspectElement('slider');
]]></Implementation>
</Method>

<Method name="inspectElement">
<Description>
Point object inspector to given component.</Description>
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var obj = zenPage.getComponentById(id);
	var inspector = zenPage.getComponentById('objectInspector');
	inspector.setCurrObject(obj);
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.SVGSpriteTest">
<Description>
Simple SVG Sprint Component Test page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,48007.995811</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>SVG Sprite Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

#objectInspector {
	border: 1px solid darkblue;
	width: 20.0em;
	height: 500px;
	overflow-y: scroll;
	overflow-x: hidden;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="SVG Sprite Test Page" import="%ZEN.SVGComponent.sprite">
<demo:demoTitle id="title" title="Zen SVG Sprite Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="SVG Sprite Test" title="SVG Sprite Test" />
</locatorBar>

<spacer height="25"/>
<hgroup cellVAlign="top">

<spacer width="25"/>
<svgCanvas id="svgCanvas" 
	layout="horizontal"
	backgroundStyle="fill: blue; opacity: 0.1;"
	height="600" width="800"
	editMode="select"
	dragCanvas="true"
	zoomWithWheel="true"
	onselectItem="zenPage.itemSelected(item);"
	ondragCanvas="zenPage.updateInspector();"
	onmouseWheel="zenPage.updateInspector();"
	onmoveItem="zenPage.updateInspector();"
	onresizeItem="zenPage.updateInspector();"
	 />
<spacer width="25"/>

<vgroup valign="top">

<titleBox title="Attributes" />
<html enclosingClass="msg">Set attribute values of the selected shape.</html>
<objectInspector id="objectInspector" />
</vgroup>

</hgroup>

</page>
]]></Data>
</XData>

<Method name="select">
<Description>
Select the given item and set the inspector to refer to it.</Description>
<FormalSpec>item</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	var svg = zenPage.getComponentById('svgCanvas');
]]></Implementation>
</Method>

<Method name="selectSprite">
<Description>
Select the given sprite</Description>
<FormalSpec>sprite</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var canvas = zenPage.getComponentById('svgCanvas');
	canvas.selectItem(sprite);
	sprite.setOverlayMode(3);
]]></Implementation>
</Method>

<Method name="itemSelected">
<Description>
Notification that user has selected an SVG component.</Description>
<FormalSpec>item</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var inspector = zenPage.getComponentById('objectInspector');
	if (null == item) {
		// select the svgCanvas
		item = zenPage.getComponentById('svgCanvas');
	}

	inspector.setCurrObject(item);
]]></Implementation>
</Method>

<Method name="updateInspector">
<Description>
Update values in the inspector.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var inspector = zenPage.getComponentById('objectInspector');
	inspector.update();
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	this.initializeCanvas();
]]></Implementation>
</Method>

<Method name="initializeCanvas">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var canvas = zenPage.getComponentById('svgCanvas');
	if ((!canvas) || !canvas.document) {
		// ensure we don't execute code before the SVG document has been fully loaded
		setTimeout('zenPage.initializeCanvas();',10);
		return;
	}

	var inspector = this.getComponentById('objectInspector');
	inspector.setCurrObject(canvas);
	
	// create initial set of sprites & connectors
	var sprite = new Array();

	sprite[0] = canvas.createSprite('sprite',200,100);
	sprite[0].setProperty('onclick','zenPage.selectSprite(zenThis);');
	
	sprite[1] = canvas.createSprite('sprite',200,300);
	sprite[2] = canvas.createSprite('sprite',400,100);
	sprite[3] = canvas.createSprite('sprite',400,300);

	/*
	var connect = canvas.createConnector('connector');
	connect.addOutput(sprite[0],1);
	connect.addInput(sprite[1],0);
		
	var connect = canvas.createConnector('connector');
	connect.addOutput(sprite[2],1);
	connect.addInput(sprite[3],0);
	*/

	var connect = canvas.createConnector('connector');
	connect.addOutput(sprite[0],1);
	//connect.addOutput(sprite[2],1);
	connect.addInput(sprite[1],0);
	//connect.addInput(sprite[3],0);

	// turn off layout; turn on edit mode
	canvas.setProperty('layout','');
	canvas.setProperty('editMode','drag');
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.SVGStackedBarChartTest">
<Description>
Test page for stacked barChart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>62829,63076.621557</TimeChanged>
<TimeCreated>60540,52335.225935</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Stacked Bar Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<barChart id="chart" 
	ongetData="return zenPage.getChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	plotAreaStyle="fill: #eeeeee;"
	title="Zen Stacked Bar Chart"
	seriesColorScheme="solid"
    chartStacked="true"
  	seriesCount="3"
	seriesSize="10"
	width="400" 
	height="400">
<xAxis id="xAxis" />
<yAxis id="yAxis"
   baseValue="0"
	minorGridLines="true"/>
</barChart>
</svgFrame>
</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGTest">
<Description>
Simple SVG Component Test page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60251,48007.995811</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>SVG Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

.button {
	width: 40px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="SVG Test Page">
<demo:demoTitle id="title" title="Zen SVG Component Test Page" category="Zen Test Suite" />

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="SVG" title="SVG Test Page" />
</locatorBar>

<spacer height="25"/>
<hgroup>
<spacer width="25"/>
<svgFrame id="svgFrame" height="400" width="400">
<rect id="rect1" rx="5" onclick="zenPage.toggleStyle(zenThis);"/>
<rect id="rect2" rx="5" onclick="zenPage.toggleStyle(zenThis);"/>
</svgFrame>
</hgroup>

<hgroup>
<spacer width="25"/>
<button caption="&lt;&lt;" onclick="zenPage.moveLeft();"/>
<spacer width="5"/>
<button caption="&gt;&gt;" onclick="zenPage.moveRight();"/>
<spacer width="5"/>
<button caption="-" onclick="zenPage.makeSmaller();"/>
<spacer width="5"/>
<button caption="+" onclick="zenPage.makeBigger();"/>
<spacer width="5"/>
<button caption="Add" onclick="zenPage.createRect();"/>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="moveRight">
<Description>
Move rect to the right</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var rect = zenPage.getComponentById('rect1');
	rect.setProperty('x',(rect.getProperty('x')*1)+10);
]]></Implementation>
</Method>

<Method name="moveLeft">
<Description>
Move rect to the left</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var rect = zenPage.getComponentById('rect1');
	rect.setProperty('x',(rect.getProperty('x')*1)-10);
]]></Implementation>
</Method>

<Method name="makeBigger">
<Description>
Make rect bigger</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var rect = zenPage.getComponentById('rect1');
	rect.setProperty('width',rect.getProperty('width')*1.1);
	rect.setProperty('height',rect.getProperty('height')*1.1);
]]></Implementation>
</Method>

<Method name="makeSmaller">
<Description>
Make rect smaller</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var rect = zenPage.getComponentById('rect1');
	rect.setProperty('width',rect.getProperty('width')*0.9);
	rect.setProperty('height',rect.getProperty('height')*0.9);
]]></Implementation>
</Method>

<Method name="toggleStyle">
<Description>
Toggle style of rectangle</Description>
<FormalSpec>rect</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var style = rect.getProperty('style');
	rect.setProperty('style',(''==style)?'fill: yellow;':'');
]]></Implementation>
</Method>

<Method name="createRect">
<Description>
Create a new rect</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var frame = zenPage.getComponentById('svgFrame');

	var rect = this.createComponent('rect');
	rect.setProperty('rx',10);
	rect.setProperty('x',Math.random()*200);
	rect.setProperty('y',Math.random()*200);
	rect.setProperty('style','fill: green; opacity: 0.25;');
	frame.addChild(rect);
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.SVGTreeMapChartTest">
<Description>
Test page for treeMapChart.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>62839,50734</TimeChanged>
<TimeCreated>60540,52359.802086</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG Tree Map Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<treeMapChart id="chart" 
	ongetData="return zenPage.getChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	title="Zen Tree Map Chart"
	seriesCount="4"
	seriesSize="6"
    seriesColorScheme="pastel"
	ongetLabelY="return zenPage.getCountryLabels(value);"
    legendVisible="false"
    appearance="2D"
	width="400" 
	height="400">
</treeMapChart>
</svgFrame>

</pane>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.SVGxyChartTest">
<Description>
Test page for xyChart components.</Description>
<Super>ZENTest.SVGChartTest</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60540,51547.452227</TimeCreated>

<Parameter name="PAGENAME">
<Default>SVG XY Chart Test Page</Default>
</Parameter>

<XData name="chartPane">
<Description>
This XML block defines the contents of the chart pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<svgFrame id="svgFrame" height="400" width="400">
<xyChart id="chart" 
	ongetData="return zenPage.getChartData(series);"
	onelementClick="zenPage.chartElementClick(chart);"
	plotAreaStyle="fill: #eeeeee;"
	title="Zen XY Chart"
	seriesCount="4"
	seriesSize="15"
    seriesColorScheme="solid"
	plotStyle="stroke:none;"
	width="400" 
	height="400">
<xAxis id="xAxis" />
<yAxis id="yAxis"
   baseValue="0"
	minorGridLines="true"/>
</xyChart>
</svgFrame>

</pane>
]]></Data>
</XData>

<Method name="chartElementClick">
<Description>
chartElementClick</Description>
<FormalSpec>chart</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var series = chart.getSelectedSeries();
	var item = chart.getSelectedItem();

	if (!isNaN(parseInt(series)) && !isNaN(parseInt(item))) {
		alert('You have selected item ' + item + ' in series ' + (parseInt(series)+1) + '.');
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.ScheduleData">
<Description><![CDATA[
This persistent class represents a set of appointments within a schedule.<br/>
This is used by the <class>ZENTest.SchedulePaneTest</class> test page.]]></Description>
<Super>%Persistent,%ZEN.DataModel.Adaptor</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>61115,66706.192782</TimeCreated>
<Inheritance>right</Inheritance>

<Index name="PersonIdx">
<Properties>Person</Properties>
</Index>

<Index name="TimeIdx">
<Properties>StartTime</Properties>
</Index>

<Property name="Person">
<Description>
Person associated with the scheduled item.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Reason">
<Description>
Reason (short title) for the scheduled item.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Notes">
<Description>
Notes for the scheduled item.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="10000"/>
</Property>

<Property name="StartTime">
<Description>
Start time for the scheduled item.</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Duration">
<Description>
Duration (in minutes) of the scheduled item.</Description>
<Type>%Integer</Type>
<InitialExpression>30</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Priority">
<Description>
Priority of the scheduled item.</Description>
<Type>%String</Type>
<InitialExpression>"Normal"</InitialExpression>
<Parameter name="VALUELIST" value=",Low,Normal,High"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^ZENTest.ScheduleDataD</DataLocation>
<DefaultData>ScheduleDataDefaultData</DefaultData>
<IdLocation>^ZENTest.ScheduleDataD</IdLocation>
<IndexLocation>^ZENTest.ScheduleDataI</IndexLocation>
<StreamLocation>^ZENTest.ScheduleDataS</StreamLocation>
<Data name="ScheduleDataDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Person</Value>
</Value>
<Value name="3">
<Value>Reason</Value>
</Value>
<Value name="4">
<Value>Notes</Value>
</Value>
<Value name="5">
<Value>StartTime</Value>
</Value>
<Value name="6">
<Value>Duration</Value>
</Value>
<Value name="7">
<Value>Priority</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ZENTest.SchedulePaneTest">
<Description><![CDATA[

Test page for Zen SchedulePane component.<br/>

This page used the <class>ZENTest.ScheduleData</class> class to store

appointments entered via the schedule pane.]]></Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>62280,63768.69643</TimeChanged>
<TimeCreated>60125,30066.203933</TimeCreated>

<Parameter name="APPLICATION">
<Description>

Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Schedule Pane Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[

<style type="text/css">



body {

	font-family: lucida sans unicode;

}



#leftGroup {

	padding-left: 10px;

	padding-right: 10px;

	background: #AAAADD;

	border: 1px solid darkgray;

}



#schedule {

	width: 800px;

	background: white;

	border: 1px solid #4040C0;

}



</style>

]]></Data>
</XData>

<XData name="Contents">
<Description>

Contents of this page:</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[

<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" 

dragAndDrop="true"

title="Zen Schedule Pane Test">

<demo:demoTitle id="title" title="Zen Schedule Pane Test Page" category="Zen Test Suite"/>



<locatorBar id="locator">

<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>

<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>

<locatorLink caption="Schedule Pane" title="Schedule Pane Test Page" />

</locatorBar>



<spacer height="10"/>



<hgroup cellVAlign="top">

<vgroup cellAlign="left" id="leftGroup">

<calendar onchange="zenPage.selectDate(zenThis.getValue());"/>

<spacer height="10"/>

<hgroup>

<select label="Display" value="day"

	title="Select the display format for the Schedule Pane."

	showEmpty="false"

	onchange="zenPage.setScheduleView(zenThis.getValue());"

	displayList="Day,Week,Month"

	valueList="day,week,month"

/>

<spacer width="10"/>

<select label="Interval" value="30"

	title="Select the time interval to show for day view within the Schedule Pane."

	showEmpty="false"

	onchange="zenPage.setScheduleInterval(zenThis.getValue());"

	displayList="5m,15m,30m,60m"

	valueList="5,15,30,60"

/>

</hgroup>

<spacer height="10"/>

<dataController id="dataController" modelClass="ZENTest.ScheduleData"/>

<form id="theForm" controllerId="dataController">

<select label="Person" value="Bob"

	title="Select the person whose schedule you wish to see."

	id="ctrlPerson"

	showEmpty="false"

	dataBinding="Person"

	onchange="zenPage.setPerson(zenThis.getValue());"

	valueList="Bob,Fred,Sally,Zelda"

/>

<text label="Reason" title="The reason for the scheduled item."

	id="ctrlReason" dataBinding="Reason"/>

<text label="Time" id="ctrlTime" 

	title="Start time for the scheduled item."

	dataBinding="StartTime"/>

<select label="Duration" value="30"

	title="Select the duration of the scheduled item."

	id="ctrlDuration"

	dataBinding="Duration"

	showEmpty="false"

	displayList="5m,15m,30m,45m,1h,1h 30m,2h,2h 30m,3h,3h 30m,4h,4h 30m,5h"

	valueList="5,15,30,45,60,90,120,150,180,210,240,270,300"

/>

<select label="Priority" value="Normal"

	title="Priority of the scheduled item."

	id="ctrlPriority"

	dataBinding="Priority"

	valueList="Low,Normal,High"

/>

<textarea label="Notes" id="ctrlNotes" 

	title="Notes related to the scheduled item."

dataBinding="Notes"/>

<hgroup>

<button caption="Save" 

	title="Save the current scheduled item."

	onclick="zenPage.saveItem();"/>

<spacer width="10"/>

<button caption="Delete"

title="Delete the current scheduled item."

 onclick="zenPage.deleteItem();"/>

</hgroup>

</form>

</vgroup>

<spacer width="10"/>

<schedulePane id="schedule"

caption="Schedule for Bob"

dateFormat="5"

interval="30"

startTime="540"

endTime="1020"

 dropEnabled="true"

 ondrop="zenPage.scheduleDataDrop(dragData);"

onselectitem="zenPage.selectItem(id,time);"

 OnGetScheduleInfo="GetScheduleInfo">

 <parameter id="parmPerson" paramName="Person" value="Bob"/>

 </schedulePane>

 <spacer width="10"/>

 <vgroup>

 <titleBox title="Meeting Templates" 

 subtitle="Drag an item and drop it onto the Schedule Pane."/>

 <listBox dragEnabled="true">

 <option text="Massage" value="Massage:60"/>

 <option text="Pedicure" value="Pedicure:30"/>

 <option text="Mud Bath" value="Mud Bath:90"/>

 <option text="Staff Meeting" value="Staff Meeting:60"/>

 </listBox>

 </vgroup>

</hgroup>



</page>

]]></Data>
</XData>

<Method name="GetScheduleInfo">
<Description><![CDATA[

GetScheduleInfo callback for the Schedule Pange.<br/>

This method returns the set of scheduled items

that should be displayed on the schedulePane.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParms:%String,pStartDate:%Date,pEndDate:%Date,&pInfo:%List]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[

	// pParms is an array of parameter values associated with the schedule pane

	// pStartDate and pEndDate are the start and ending date values (in $H format)

	// that the schedule pane is interested in.

	// this method should find all appointments within the given time range

	// and return these in a list ordered by date and time:

	// pInfo(day,minute,n) =  $LB(Duration,ID,Reason,Type,Style)

	// where 'day' is the day number in $H format

	// 'minute' is the minute for the start time for the appointment

	// 'Duration' is duration in minutes of the appointment

	// 'ID' is the ID of the object representing the appointment

	// (in this case an instance of ZENTest.ScheduleData)

	// 'Reason' is the text to display for the appointment.

	// 'Type' is 1 for appointments, 0 for 'unavailable' time slots.

	// 'Style' is an optional css style string to apply to the appointment.

	// 

	// pInfo(day) contains css style for the entire day.

	

	// pParms("Person") should contain name of person

	Set tName = $G(pParms("Person"))

	Set (tID,tStartTime,tDuration,tReason,tPriority) = ""



	// Return an array of the form:

	// pInfo(day,time,n) = $LB(duration,value[,text,type,[,style]])

	// type=0--unavailable,1=booked



	// day-style (gray out weekends)

	// loop over days in range; if Sunday or Saturday

	// set day-wide style.

	For d = pStartDate:1:pEndDate {

		Set tWeekDay = +$ZDT(d,10)

		If ((tWeekDay = 0)||(tWeekDay = 6)) {

			Set pInfo(d) = "background: #C0C0F0;"

		}

	}



	// lookup scheduled items from table

	Set SQLCODE = 0

	Set t1 = $ZDT(pStartDate,3)

	Set t2 = $ZDT(pEndDate+1,3)

	&sql(DECLARE sql1 CURSOR FOR

		SELECT ID,StartTime,Duration,Reason,Priority

		INTO :tID,:tStartTime,:tDuration,:tReason,:tPriority

		FROM ZENTest.ScheduleData

		WHERE Person = :tName AND

		StartTime >= :t1 AND StartTime < :t2

	)

	&sql(OPEN sql1)

	&sql(FETCH sql1)

	While (SQLCODE = 0) {

		Set d = $ZDTH(tStartTime,3)

		Set tDate = +d

		Set tTime = $P(d,",",2)\60

		Set tStyle = $Case(tPriority,"High":"background:red;","Low":"background:#A0A0FF;",:"")

		Set pInfo(tDate,tTime,1) = $LB(tDuration,tID,tReason,1,tStyle)

		&sql(FETCH sql1)

	}

	&sql(CLOSE sql1)

	Quit 1

]]></Implementation>
</Method>

<Method name="saveItem">
<Description>

Save the current appointment information.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	zenPage.getComponentById('theForm').save();

	var schedule = zenPage.getComponentById('schedule');

	schedule.refreshContents();

]]></Implementation>
</Method>

<Method name="deleteItem">
<Description>

Delete the current appointment.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	var controller = zenPage.getComponentById('dataController');

	var id = controller.getModelId();

	if ('' != id) { 

		controller.deleteId(id);

		controller.setModelId('');

		var schedule = zenPage.getComponentById('schedule');

		schedule.refreshContents();

	}

]]></Implementation>
</Method>

<Method name="setPerson">
<Description><![CDATA[

View the schedule for the person <var>name</var>.]]></Description>
<FormalSpec>name</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	var schedule = zenPage.getComponentById('schedule');

	schedule.setProperty('caption','Schedule for ' + name);

	var parm = zenPage.getComponentById('parmPerson');

	parm.value = name;

	schedule.refreshContents();

	var controller = zenPage.getComponentById('dataController');

	controller.setModelId('');

	controller.setDataByName('Person',name);

	controller.raiseDataChange();

]]></Implementation>
</Method>

<Method name="selectDate">
<Description>

User has selected a new date in the calendar.

Update the schedule pane.</Description>
<FormalSpec>date</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	var schedule = zenPage.getComponentById('schedule');

	schedule.setDate(date);



	var controller = zenPage.getComponentById('dataController');

	controller.setModelId('');

]]></Implementation>
</Method>

<Method name="selectItem">
<Description>

User has selected a new item in the schedule.

Update the form showing details for the selected appointment.</Description>
<FormalSpec>id,time</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	

	var controller = zenPage.getComponentById('dataController');

	if (id) {

		// existing appointment

		// set the data controller to refer to the selected appointment

		// this will automatically update the form with appointment details.

		controller.setModelId(id);

	}

	else {

		// new appointment

		var schedule = zenPage.getComponentById('schedule');

		var name=zenPage.getComponentById('ctrlPerson').getValue();	

		// fill in form with default information

		controller.createNewObject();

		controller.setDataByName('Person',name);

		controller.setDataByName('StartTime',time);

		controller.setDataByName('Duration',schedule.selectedInterval);

		controller.raiseDataChange();

		

		// give focus to the reason field

		zenPage.getComponentById('ctrlReason').focus();

	}

]]></Implementation>
</Method>

<Method name="scheduleDataDrop">
<Description>

Data drop handler for schedule pane.

User has dropped an item on the schedule pane.</Description>
<FormalSpec>dragData</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	// Ask schedule what time slot was dropped on

	var schedule = zenPage.getComponentById('schedule');

	var time = schedule.getDropTimeSlot();

	if ('' != time) {

		var d = dragData.value.toString().split(':');

		var reason = d[0];

		var duration = d[1];



		// create a new appointment using the dataController

		// fill in its details, save them, and then

		// refresh the schedule pane.

		var controller = zenPage.getComponentById('dataController');

		var name=zenPage.getComponentById('ctrlPerson').getValue();

		controller.setModelId('');

		controller.setDataByName('Person',name);

		controller.setDataByName('StartTime',time);

		controller.setDataByName('Duration',duration);

		controller.setDataByName('Reason',reason);

		controller.raiseDataChange();

		zenPage.getComponentById('theForm').save();

		schedule.refreshContents();

	}

	return true;

]]></Implementation>
</Method>

<Method name="setScheduleView">
<Description><![CDATA[

Change what the schedule pane is displaying.

<var>view</var> is 'day','week', or 'month'.]]></Description>
<FormalSpec>view</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	var schedule = zenPage.getComponentById('schedule');

	schedule.setView(view);

]]></Implementation>
</Method>

<Method name="setScheduleInterval">
<Description>

Change the time interval displayed by the schedulePane.</Description>
<FormalSpec>interval</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	var schedule = zenPage.getComponentById('schedule');

	schedule.setProperty('interval',interval);

	schedule.refreshContents();

]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.TabTest">
<Description>
Test page for tabbed groups.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60125,30066.203933</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Tab Control Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

/* body of tab group */
.tabGroupBody {
	background: #C0D0FF;
}

/* selected tab */
td.tabGroupButtonOn {
	background: #C0D0FF;
}

/* div for tab group */
#tabGroup {
	height: 400px;
	width: 650px;
}

#grid {
	width: 400px;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
Contents of this page:</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Zen Tab Control Test">
<demo:demoTitle id="title" title="Zen Tab Component Test Page" category="Zen Test Suite"/>

<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Tab Control" title="Tabbed Dialog Test Page" />
</locatorBar>

<spacer height="50" />
<hgroup  width="75%" cellAlign="center">
<tabGroup id="tabGroup" showTabBar="true" onshowTab="zenPage.updateButtons();" remember="true">
<tab caption="First Page">
<spacer height="5"/>
<html>This is the first tab!</html>
<form width="75%" layout="vertical" cellStyle="padding: 2px; padding-left: 5px; padding-right: 5px;" groupStyle="border:1px solid darkblue;">
<titleBox title="My Form" titleStyle="background: #DDDDFF;" containerStyle="padding: 0px;" />
<spacer height="5"/>

<colorPicker title="This is a custom control!" label="Color (custom control):" name="Color" />
<text label="Color Name:" name="ColorName" size="12" />
<hgroup id="tgroup" cellVAlign="top">
<text label="DOB:" id="DOB" name="DOB" size="15" maxlength="10" valign="bottom"/>
</hgroup>
</form>
</tab>
<tab caption="Second Page">
<spacer height="5"/>
<html>This is the second tab!</html>
<dataCombo label="Patient:" name="Patient" size="24"
	sql="SELECT Name FROM ZENDemo_Data.Employee WHERE Name %STARTSWITH ? ORDER BY Name"/>
</tab>
<tab caption="Third Page" tabResource="MyResource">
<spacer height="5"/>
<html>This is the third tab!</html>
<dynaGrid id="grid" rowLabelWidth="25">
<gridColumn label="Name"   width="25%" />
<gridColumn label="Salary" width="25%"  />
<gridColumn label="Comment" width="50%" />
<gridRow label="R1" />
<gridRow label="R2" />
<gridRow label="R3" />
</dynaGrid>
</tab>
</tabGroup>
</hgroup>
<spacer height="50" />
<hgroup width="40%" cellAlign="right">
<button id="prev" caption=" Prev " onclick="zenPage.prevTab();" />
<spacer width="5" />
<button id="next" caption=" Next " onclick="zenPage.nextTab();" />
<spacer width="5" />
</hgroup>

</page>
]]></Data>
</XData>

<Method name="prevTab">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tab = this.getComponentById('tabGroup');
	tab.showPreviousTab();
	this.updateButtons();
]]></Implementation>
</Method>

<Method name="nextTab">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tab = this.getComponentById('tabGroup');
	tab.showNextTab();
	this.updateButtons();
]]></Implementation>
</Method>

<Method name="updateButtons">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var tab = this.getComponentById('tabGroup');
	var prev = this.getComponentById('prev');
	var next = this.getComponentById('next');

	if (1 == tab.getCurrTabNo()) {
		prev.setDisabled(true);
	}
	else {
		prev.setDisabled(false);
	}

	if (tab.getTabCount() == tab.getCurrTabNo()) {
		next.setDisabled(true);
	}
	else {
		next.setDisabled(false);
	}
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	this.updateButtons();
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.TableTest">
<Description>
tablePane Test Page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60202,41750.097132</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Table Pane Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

/* override of label control style */
.labelText {
	padding: 2px;
	background: white;
	color: darkblue;
	border: 1px solid black;
	height: 1.0em;
	width: 12.0em;
}

#table {
	border: 1px solid darkblue;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="tablePane Test Page">
<demo:demoTitle id="title" title="Zen tablePane Test Page" category="Zen Test Suite" />
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="tablePane" title="tablePane Test Page" />
</locatorBar>

<spacer height="20"/>
<vgroup>
<spacer height="5"/>
<hgroup width="100%">
<tablePane id="table" 
	caption="This is a tablePane"
	
	tableName="ZENDemo_Data.Employee"
	
	useSnapshot="true"
	showQuery="true"
	showFilters="true"
	fixedHeaders="true"
	bodyHeight="15.0em"
	ondblclick="alert(zenThis.getProperty('selectedIndex'));"
	filtersDisabled="false"
	autoExecute="true"

	showZebra="true"
	pageSize="10"
	showRowNumbers="true"
	valueColumn="ID"
	maxRows="1000"
	useKeys="true"

	onupdate="zenPage.updatePagingInfo();"
	onselectrow="zenPage.rowSelected(zenThis);"
	onunselectrow="zenPage.rowUnselected(zenThis);"
	onmultiselect="zenPage.rowMultiSelected(zenThis);"
	>
<parameter id="P1" value="B"/>

<column colName="ID" hidden="true"/>
<column colName="Name" id="nameColumn" width="20%" filterType="text" />
<column colName="Active" width="5%" 
	filterOp="=" 
	filterType="enum" 
	filterEnum="1,0"
	filterEnumDisplay="active,inactive"
	/>
<column colName="Title" width="30%" 
		cellTitle="Employee's title" 
		filterType="custom"
		filterOp="%STARTSWITH" 
		OnDrawFilter="DrawTitleFilter" />
<column colName="Home_City" width="20%" 
		OnDrawCell="DrawCity" seed="abc" 
		filterType="text"
		filterLabel="City:"
		filterOp="%STARTSWITH" />

<column colName="HireDate" width="20%" 
		filterType="datetime"
		filterLabel="Start:,End:"
		filterOp="BETWEEN" />

<column colName="Salary" width="20%" 
		filterType="text"
		filterOp="BETWEEN"
		filterLabel=" Range (Min,Max):"
		 />

<column width="50" />

<column linkCaption="Edit" width="10%" link="ZENTest.FormTest.cls?ID=#(%query.ID)#" cellTitle="Edit this record." />

<condition colName="Name" predicate="CONTAINS" value="K" rowStyle="background: #A0A0F0;"/>
<condition colName="Active" predicate="EQ" value="1" rowStyle="font-weight: bold;"/>
</tablePane>
</hgroup>
<tableNavigator tablePaneId="table"/>
<spacer height="5"/>
<form>
<text id="selectedIndex" label="selectedIndex:" onchange="zenPage.selectedIndexChange(zenThis);" />
<spacer height="5"/>
<text id="pageSize" label="pageSize:" value="#(#table.pageSize)#" onchange="zenPage.pageSizeChange(zenThis);" />
<spacer height="5"/>
<text id="value" label="value:" readOnly="true" />
<spacer height="5"/>
<text id="rowCount" label="rowCount:" readOnly="true" />
<spacer height="5"/>
<hgroup>
<checkbox id="rowSelect" caption="rowSelect" value="#(#table.rowSelect)#" onclick="zenPage.rowSelect(zenThis);" />
<checkbox id="multiSelect" caption="multiSelect" value="#(#table.multiSelect)#" onclick="zenPage.multiSelect(zenThis);" />
<spacer width="5"/>
<text id="selectedRows" label="selectedRows:" size="50" readOnly="true" />
</hgroup>
<radioSet id="headerLayout" label="headerLayout" value="#(#table.headerLayout)#" valueList="headersOnTop,filtersOnTop" onchange="zenPage.headerLayout(zenThis);" />
<spacer height="5"/>
<hgroup>
<checkbox id="showRowNos" caption="showRowNumbers" value="1" onclick="zenPage.showRowNumbers(zenThis);" />
<checkbox id="showRowSelector" caption="showRowSelector" value="#(#table.showRowSelector)#" onclick="zenPage.showRowSelector(zenThis);" />
<checkbox id="showZebra" caption="showZebra" value="#(#table.showZebra)#" onclick="zenPage.showZebra(zenThis);" />
<checkbox id="showFilters" caption="showFilters" value="#(#table.showFilters)#" onclick="zenPage.showFilters(zenThis);" />
<checkbox id="filtersDisabled" caption="filtersDisabled" value="#(#table.filtersDisabled)#" onclick="zenPage.filtersDisabled(zenThis);" />
<checkbox id="useSnapshot" caption="Use Snapshot" value="1" onclick="zenPage.useSnapshot(zenThis);" />
<checkbox id="autoExecute" caption="autoExecute" value="#(#table.autoExecute)#" onclick="zenPage.autoExecute(zenThis);" />
<checkbox id="showValueInTooltip" caption="showValueInTooltip" value="#(#table.showValueInTooltip)#" onclick="zenPage.showValueInTooltip(zenThis);" />
<checkbox id="fixedHeaders" caption="fixedHeaders" value="#(#table.fixedHeaders)#" onclick="zenPage.fixedHeaders(zenThis);" />
</hgroup>

<hgroup>
<button caption="Refresh" onclick="zenPage.refreshTable();" />
<spacer width="5"/>
<button caption="Execute" onclick="zenPage.executeQuery();" />
<spacer width="5"/>
<button caption="More..." onclick="zenPage.moreRows();" />
<spacer width="5"/>
<button caption="Change style" onclick="zenPage.changeStyle();" />
<spacer width="5"/>
<button caption="Get Row" onclick="zenPage.getRowFromSnapshot();" />
<spacer width="5"/>
<button caption="Get Filters" onclick="zenPage.getFilterValues();" />
<spacer width="5"/>
<button caption="Restore Filters" onclick="zenPage.restoreFilters();" />
</hgroup>
</form>
</vgroup>

</page>
]]></Data>
</XData>

<Method name="CreateRS">
<Description><![CDATA[
Create the result set used by the table pane.
<var>pInfo</var> holds details on how to create the query.]]></Description>
<FormalSpec>*tSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	Set tRS = ""
	Set tSC = $$$OK
	
	Set tTOP = "TOP 10000"
	Set tSELECT = "ID,Name,Title,Home_City,SSN,Ranking"
	Set tFROM = "ZENDemo_Data.Employee"
	Set tORDERBY = pInfo.sortColumn
	Set tSORTORDER = pInfo.sortOrder
	Set tWHERE = ""

	// Build WHERE clause based on filters
	If ($G(pInfo.filters("Name"))'="") {
		Set tWHERE = tWHERE _ $S(tWHERE="":"",1:" AND ") _ "Name %STARTSWITH '" _ pInfo.filters("Name") _ "'"
	}
	If ($G(pInfo.filters("Title"))'="") {
		Set tWHERE = tWHERE _ $S(tWHERE="":"",1:" AND ") _ "Title %STARTSWITH '" _ pInfo.filters("Title") _ "'"
	}
	If ($G(pInfo.filters("Home_City"))'="") {
		Set tWHERE = tWHERE _ $S(tWHERE="":"",1:" AND ") _ "Home_City %STARTSWITH '" _ pInfo.filters("Home_City") _ "'"
	}
	If ($G(pInfo.filters("SSN"))'="") {
		Set tWHERE = tWHERE _ $S(tWHERE="":"",1:" AND ") _ "SSN %STARTSWITH '" _ pInfo.filters("SSN") _ "'"
	}

	Set sql = "SELECT " _ tTOP _ " " _ tSELECT _ " FROM " _ tFROM
	Set:tWHERE'="" sql = sql _ " WHERE " _tWHERE
	Set:tORDERBY'="" sql = sql _ " ORDER BY " _tORDERBY _ $S(tSORTORDER="desc":" desc",1:"")

	Set tRS = ##class(%ResultSet).%New()
	Set tSC = tRS.Prepare(sql)
	Set pInfo.queryText = sql
	
	Set pInfo.rowCount = "UNKNOWN" // !!!
	
	Quit tRS
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
This callback is called after the server-side page 
object and all of its children are created.<br>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tColumn = %page.%GetComponentById("cityList")
	If '$IsObject(tColumn) {
		Quit $$$OK
	}

	Set tCity = ""

	#; compute DISTINCT list of city names
	&sql(DECLARE sql1 CURSOR FOR
			SELECT DISTINCT Home_City INTO :city
			FROM ZENDemo_Data.Employee
			ORDER BY Home_City
	)
	&sql(OPEN sql1)
	&sql(FETCH sql1)
	While (SQLCODE = 0) {
		Set tCity = tCity _ $S(tCity="":"",1:",") _ city
		&sql(FETCH sql1)
	}
	&sql(CLOSE sql1)
	
	Set tColumn.filterEnum = tCity

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawCity">
<Description>
User override of cell-display for tablePane.</Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Draw HTML to render table cell.
	&html<<img src="images/folder.gif"/>&nbsp;#(%query(pName))#>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawTitleFilter">
<Description>
User override of filter for Title column.</Description>
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pColInfo:%ZEN.Auxiliary.column</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Draw HTML to display as filter.
	Set captions = $LB("All","Assistants","Executives")
	Set values = $LB("","Assistant","Executive")

	#; draw set of radio buttons
	#; These have id values of the form #(pTable.%MakeId("filterN_"_pName))#
	#; in order to cooperate with filter disabling
	For n=1:1:$LL(values) {
		Set tValue = $LG(values,n)
		Set tCaption = $LG(captions,n)
		&html<<input type="radio" id=#(pTable.%MakeId("filter"_n_"_"_pName))# name="titleFilter_#(pTable.index)#" #($S(pColInfo.filterValue=tValue:"checked",1:""))# onclick="zenPage.setTitleFilter('#(tValue)#');" >#(tCaption)#>
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="setTitleFilter">
<Description>
User click on custom title filter</Description>
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	table.setFilterValue('Title',value);
	table.applyFilters();
]]></Implementation>
</Method>

<Method name="refreshTable">
<Description>
Refresh contents of the table</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	table.setProperty('parameters',1,'C');
]]></Implementation>
</Method>

<Method name="executeQuery">
<Description>
Execute the query for the table.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	table.executeQuery();
]]></Implementation>
</Method>

<Method name="moreRows">
<Description>
More rows...</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	//table.maxRows = 1000;
	table.currPage++;
	table.refreshContents();
]]></Implementation>
</Method>

<Method name="changeStyle">
<Description>
Change style of the table</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	var col = this.getComponentById('nameColumn');
	zenASSERT(col,"Unable to find column",arguments);
	if (col) {
		if (col.style != "background: orange;") {
			col.style = "background: orange;";
		}
		else {
			col.style = "background: gray;"
		}
	}
	table.refreshContents();
]]></Implementation>
</Method>

<Method name="getRowFromSnapshot">
<Description>
Get a row from the table snapshot.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	var index = table.getProperty('selectedIndex');
	if (index < 0) {
		alert('No row is selected in the table.');
		return;
	}

	var data = table.getRowData(index);
	
	if (data == null) {
		alert('Table is not in snapshot mode or invalid request.');
	}
	else {
		// unpackage returned object
		var msg = '';
		for (var p in data) {
			msg += p + ': ' + data[p] + ': ' + (typeof data[p]) + '\n';
		}
		alert('Row data:\n--------------\n'+msg);
	}
]]></Implementation>
</Method>

<Method name="getFilterValues">
<Description>
Get current set of filter values.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	var state = table.getColumnFilters();
	
	if (state == null) {
		alert('Unable to get filter values!');
	}
	else {
		// save filter state
		this.filterState = state;

		// unpackage returned object
		var msg = '';
		for (var p in state) {
			msg += p + ': ' + state[p] + '\n';
		}
		alert('Filter State:\n--------------\n'+msg);
	}
]]></Implementation>
</Method>

<Method name="restoreFilters">
<Description>
Restore saved set of filter values.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	
	if (null == this.filterState) {
		alert('No saved filter state found.');
	}
	else {
		table.setColumnFilters(this.filterState);
	}
]]></Implementation>
</Method>

<Method name="rowUnselected">
<Description>
User unselected the current row in the table</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	var ctrl = this.getComponentById('selectedIndex');
	var idx = table.getProperty('selectedIndex');
	if (idx<0) {
		ctrl.setValue("");
		var ctrl = this.getComponentById('value');
		ctrl.setValue("");
	}
]]></Implementation>
</Method>

<Method name="rowSelected">
<Description>
User selected a new row in the table</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	var ctrl = this.getComponentById('selectedIndex');
	ctrl.setValue(table.getProperty('selectedIndex'));

	var ctrl = this.getComponentById('value');
	ctrl.setValue(table.getProperty('value'));
]]></Implementation>
</Method>

<Method name="rowMultiSelected">
<Description>
User multi-selected a new row in the table</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	var ctrl = this.getComponentById('selectedRows');
	ctrl.setValue(table.getProperty('selectedRows'));
]]></Implementation>
</Method>

<Method name="selectedIndexChange">
<Description>
selectedIndexChange</Description>
<FormalSpec>ctrl</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	table.setProperty('selectedIndex',ctrl.getValue());
]]></Implementation>
</Method>

<Method name="pageSizeChange">
<Description>
pageSizeChange</Description>
<FormalSpec>ctrl</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = this.getComponentById('table');
	table.setProperty('pageSize',ctrl.getValue());
]]></Implementation>
</Method>

<Method name="showRowNumbers">
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('showRowNumbers',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="showValueInTooltip">
<FormalSpec>cb:%String</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('showValueInTooltip',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="showRowSelector">
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('showRowSelector',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="showZebra">
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('showZebra',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="autoExecute">
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('autoExecute',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="showFilters">
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('showFilters',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="filtersDisabled">
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('filtersDisabled',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="rowSelect">
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('rowSelect',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="multiSelect">
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('multiSelect',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="headerLayout">
<FormalSpec>rs</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('headerLayout',rs.getValue());
]]></Implementation>
</Method>

<Method name="useSnapshot">
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('useSnapshot',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="fixedHeaders">
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	table.setProperty('fixedHeaders',(cb.getValue() == 1) ? true : false);
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Description>
This client event, if present, is fired when the page is loaded.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
</Method>

<Method name="updatePagingInfo">
<Description>
update page info
This is called whenever the server updates the tablePane object</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var table = zenPage.getComponentById('table');
	zenASSERT(table,'Unable to find table',arguments);

	var pageNo = table.getProperty('currPage');
	var pageCount = table.getPageCount();

	// rowcount
	var text = this.getComponentById('rowCount');
	text.setValue(table.getProperty('rowCount'));

	// multi-select info
	var ctrl = this.getComponentById('selectedRows');
	ctrl.setValue(table.getProperty('selectedRows'));
]]></Implementation>
</Method>

<Method name="%OnDrawHTMLBody">
<Description><![CDATA[
This callback is called at the start of the HTML BODY section of the page.<br>
(default implementation is a simple expression).]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Write "<!-- GETIO ",$$$GETIO," -->",!
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.TestApplication">
<Description>
Application definition for Zen Test Suite application.</Description>
<Super>%ZEN.application</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60160,40061.551706</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Zen Test Suite</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>ZENTest.HomePage.cls</Default>
</Parameter>

<XData name="Style">
<Description>
example of customized style sheet for application</Description>
<Data><![CDATA[
<style type="text/css">
/* default body style */
body {
	font-family: arial;
	background: #F0F0F0;
}

/* descriptive text */
#description {
	color: black;
	font-size: 1.2em;
	padding: 5px;
	padding-top: 10px;
	padding-bottom: 10px;
}

#description:first-letter {
	font-size: 1.5em;
}

.locatorBarTable td {
	background: rgb(47,98,128);
	background-image: none;
	border-bottom: 1px solid darkblue;
	padding-bottom: 1px;
	color: white;
}

.locatorBarLinks {
	color: white;
}

.locatorBarLinks a {
	color: white;
}

.locatorBarLinks a:visited {
	color: white;
}

.locatorBarSelect {
	color: white;
}

.locatorBarLinks a:hover {
	color: red;
	background: #FFFAE7;
}

#intro {
	color: darkblue;
	font-size: 1.2em;
	margin: 10px;
}

/* descriptive text */
.msg {
	font-size: 0.8em;
	color: darkblue;
	width: 500px;
	padding-top: 3px;
	padding-bottom: 10px;
}

.msg:first-letter {
	font-size: 0.9em;
	font-weight: bold;
}

/* override calendar style for Sunday and Saturday */
table.calendar td.calendarDay0,
table.calendar td.calendarDay6
{
	background: #F8F8F8;
	color: gray;
}

/* Column labels for dynaGrid. */
table.dynaGrid th.dynaGridLabel,
table.dynaGrid th.dynaGridRow,
table.dynaGrid th.dynaGridColumn {
	color: black;
	background: #404040;
	background-image: url(images/grad-gray-10x100.png);
	background-repeat: repeat-x;
}

table.dynaGrid th.dynaGridLabel:hover,
table.dynaGrid th.dynaGridRow:hover,
table.dynaGrid th.dynaGridColumn:hover {
	color: white;
	background: #F0F0F0;
	background-image: url(images/grad-gray2-10x100.png);
	background-repeat: repeat-x;
}

</style>
]]></Data>
</XData>
</Class>


<Class name="ZENTest.TimerTest">
<Description>
Test page for Zen timer component.</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60216,67899.597089</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Default>Timer Test Page</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<Property name="eventCounter">
<Description>
Counter to keep track of how many timer events have fired.</Description>
<Type>%ZEN.Datatype.integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Timer Test">
<demo:demoTitle id="title" title="Zen Timer Test Page"/>
<locatorBar id="locator">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>
<locatorLink caption="Timer" title="Timer Test Page" />
</locatorBar>

<timer id="timer" 
	ontimeout="zenPage.timeout(zenThis);" 
	timeout="1000"/>
<html id="message">No events (An event should fire once per second).</html>
</page>
]]></Data>
</XData>

<Method name="timeout">
<Description>
Timer has fired</Description>
<FormalSpec>timer</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.eventCounter++;

	var div = this.getComponentById('message');
	div.setProperty("content",'This is event: ' + this.eventCounter);

	// restart the timer
	timer.startTimer();
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.altDataGridTest">
<Description>

Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63683,83655.095675</TimeChanged>
<TimeCreated>63337,51230.71907</TimeCreated>

<Parameter name="APPLICATION">
<Description>

Class name of application this page belongs to.</Description>
<Default>ZENTest.TestApplication</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>

Displayed name of this page.</Description>
<Default>DataGrid Test</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>

Domain used for localization.</Description>
<Default>ZENTEST</Default>
</Parameter>

<XData name="Style">
<Description>

This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[

<style type="text/css">

#dataGrid {

	width: 100%;

	height: 500px;

}

</style>

]]></Data>
</XData>

<XData name="Contents">
<Description>

This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[

<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="">

<demo:demoTitle id="title" title="Zen DataGrid Test Page Using The Alternate JSON SQL Provider widget" category="Zen Test Suite" />



<locatorBar id="locator">

<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>

<locatorLink caption="Test Suite" title="Test Suite" href="ZENTest.HomePage.cls"/>

<locatorLink caption="DataGridTest" title="DataGrid Test Page" />

</locatorBar>



<titleBox title="Zen DataGrid Test Page" 

		subtitle="Use this page to test the various DataGrid box controls." />

<spacer height="25"/>

<altJSONSQLProvider id="json" />

<vgroup width="100%" height="100%">

<hgroup enclosingStyle="background:#F0F0F0;">

<spacer width="600"/>

<label value="Filter current results : "/>

<image src="deepsee/ds2_magnify_18.png" onclick="zenPage.SetFilter(zen('txtFilter'));"/>

<text id="txtFilter" onchange="zenPage.SetFilter(zenThis);"/>

</hgroup>

 <dataGrid pageSize="20"  id="dataGrid" pagingMode="client" controllerId="json" sortMode="client" selectMode="cells" onaction="zenPage.fireAction(row,name,value);" onchangecell="return zenPage.fireChangeCell(value);" ongetlookupdata="return zenPage.fireLookupData();" >

 <columnDescriptor caption="ID" type="string" readOnly="false"/>

 <columnDescriptor caption="Age" type="string" readOnly="false"/>

 <columnDescriptor caption="DOB" type="string" readOnly="false"/>

 <columnDescriptor caption="FavoriteColors" type="lookup" readOnly="false" ongetlookupspec="return zenPage.fireLookupDataFavColors();"/>

 <columnDescriptor caption="Name" type="string" readOnly="false"/>

 <columnDescriptor caption="SSN" type="string" readOnly="false"/>

 <columnDescriptor caption="Spouse" type="lookup" readOnly="false"/>

 <columnDescriptor caption="Home_City" type="string" readOnly="false"/>

 <columnDescriptor caption="Home_State" type="lookup" readOnly="false" ongetlookupspec="return zenPage.fireLookupDataState('Home');"/>

 <columnDescriptor caption="Home_Street" type="string" readOnly="false"/>

 <columnDescriptor caption="Home_Zip" type="string" readOnly="false"/>

 <columnDescriptor caption="Office_City" type="string" readOnly="false"/>

 <columnDescriptor caption="Office_State" type="lookup" readOnly="false" ongetlookupspec="return zenPage.fireLookupDataState('Office');"/>

 <columnDescriptor caption="Office_Street" type="string" readOnly="false"/>

 <columnDescriptor caption="Office_Zip" type="string" readOnly="false"/>

 </dataGrid>

 <hgroup enclosingStyle="background:#F0F0F0;">

 <label value="Show all Names starting with : "/>

 <button caption="A" onclick="zenPage.changeQuery('A');"/>

 <button caption="B" onclick="zenPage.changeQuery('B');"/>

 <button caption="C" onclick="zenPage.changeQuery('C');"/>

 <label value=" ... "/>

 <button caption="Z" onclick="zenPage.changeQuery('Z');"/>

 <spacer width="10"/>

 <button caption="Show All" onclick="zenPage.changeQuery('');"/>

 </hgroup>

</vgroup>

</page>

]]></Data>
</XData>

<Method name="SetFilter">
<FormalSpec>pTextBox:%ZEN.Component.text</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	zen('dataGrid').setProperty('filterKey',pTextBox.getValue());

	zen('dataGrid').renderContents();

]]></Implementation>
</Method>

<Method name="fireChangeCell">
<FormalSpec>value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[



	var cCol=zen('dataGrid').getProperty('currColumn');

	var cRow=zen('dataGrid').getProperty('currRow');

	var cPage=zen('dataGrid').getProperty('currPage');



	return value;

]]></Implementation>
</Method>

<Method name="fireLookupData">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	var cCol=zen('dataGrid').getProperty('currColumn');



	if (cCol==4) return zenPage.fireLookupDataFavColors();  //Favorite Colors

	if (cCol==9) return zenPage.fireLookupDataState('Home');  //Home_State

	if (cCol==13) return zenPage.fireLookupDataState('Office');  //Office_State

]]></Implementation>
</Method>

<Method name="fireLookupDataFavColors">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	//var values = ['Red','Orange','Yellow','Green','Blue','Purple','Black','White'];

	

	var FavColString = zenPage.GetFavoriteColors();

	var values = FavColString.split(',');

		  	

	return values

]]></Implementation>
</Method>

<Method name="GetFavoriteColors">
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Quit "Red,Orange,Yellow,Green,Blue,Purple,Black,White"

]]></Implementation>
</Method>

<Method name="fireLookupDataState">
<FormalSpec>what</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	var StatesString;

	

	if (what=='Home') StatesString = zenPage.GetStates(true);

	else  StatesString = zenPage.GetStates(false);

	

	var values = StatesString.split(',');

	//var values = ['MA','NY','OH'];

	

	return values

]]></Implementation>
</Method>

<Method name="GetStates">
<FormalSpec>Home:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[

	set sql="select distinct("_$s(Home=1:"Home",1:"Office")_"_State) as State from Sample.Person order by "_$s(Home=1:"Home",1:"Office")_"_State "_$s(Home=1:"asc",1:"desc")

	

	Set rs=##class(%ResultSet).%New()

	do rs.Prepare(sql)

	do rs.Execute()

	

	Set StatesString=""

	While (rs.Next()) {

		Set StatesString=StatesString_rs.Get("State")_","

	}

	

	do rs.Close()

	

	Set:$e(StatesString,$l(StatesString))="," StatesString=$e(StatesString,1,$l(StatesString)-1)

	

	Quit StatesString

]]></Implementation>
</Method>

<Method name="fireAction">
<FormalSpec>row,name,value</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	alert(row + ' : ' + name + ' : ' + value + ' : ' + zen('dataGrid').getCurrPage());

]]></Implementation>
</Method>

<Method name="changeQuery">
<FormalSpec>namestartswith</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[

	var ret = zenPage.ChangeQueryOnServer(namestartswith);

	zen('json').reloadContents();

]]></Implementation>
</Method>

<Method name="ChangeQueryOnServer">
<FormalSpec>namestartswith:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[

	

	set %page.%GetComponentById("json").sql = "select * from sample.person "_$s(namestartswith'="":"where name %startswith '"_namestartswith_"'",1:"")_" order by name"

	quit 1

]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[

This callback is called after the server-side page 

object and all of its children are created.<br/>

Subclasses can override this to add, remove, or modify 

items within the page object model, or to provide values

for controls.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	Set provider = ..%GetComponentById("json")

	Set provider.sql = "select * from sample.person order by name"

	Quit $$$OK

]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.customClass">
<Description>
Simple class used to test JavaScript classes.</Description>
<Super>%ZEN.Component.object</Super>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60470,47135.405945</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
XML namespace for class</Description>
<Default>http://www.intersystems.com/zentest</Default>
</Parameter>

<Method name="test">
<Description>
test</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert('Hello from customClass.');
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.customComponent">
<Description>
Simple component used for testing custom components.</Description>
<Super>%ZEN.Component.control</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60314,50314.181609</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
This is the XML namespace for this component.</Description>
<Default>http://www.intersystems.com/zentest</Default>
</Parameter>

<Property name="message">
<Description>
This message is displayed within the custom component.</Description>
<Type>%ZEN.Datatype.caption</Type>
<InitialExpression>"Custom Component"</InitialExpression>
</Property>

<XData name="Style">
<Description>
This Style block contains component-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<Method name="%DrawHTML">
<Description>
The %DrawHTML method draws the initial HTML for this component.</Description>
<Implementation><![CDATA[
	#; write out HTML-escaped message.
	&html<#($ZCVT(..message,"O","HTML"))#>

 	#; test of error detection:
 	#; we are not allowed to create component once HTML rendering has started
	/*
	Set btn = ##class(%ZEN.Component.button).%New()
	Set btn.caption = "Not allowed"
	Do %page.%AddChild(btn)
	*/
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.customSVGComponent">
<Description>
An example of a custom SVG component.</Description>
<Super>%ZEN.SVGComponent.svgComponent</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60470,36694.715539</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
This is the XML namespace for this component.</Description>
<Default>http://www.intersystems.com/zentest</Default>
</Parameter>

<Property name="style">
<Description>
Additional style to apply to this shape.</Description>
<Type>%ZEN.Datatype.style</Type>
</Property>

<XData name="SVGStyle">
<Description>
SVG styles used by this component</Description>
<Data><![CDATA[
<style type="text/css">
.customSVGComponent {
	fill: url(#myGrad);
	stroke: black;
	stroke-width: 2px;
}
</style>
]]></Data>
</XData>

<XData name="SVGDef">
<Description>
SVG defs used by this component.</Description>
<Data><![CDATA[
<defs>
<linearGradient id="myGrad" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:darkblue" />
<stop offset="30%" style="stop-color:#FF00FF" />
<stop offset="70%" style="stop-color:#FF00FF" />
<stop offset="100%" style="stop-color:darkred" />
</linearGradient>

</defs>
]]></Data>
</XData>

<Method name="renderContents">
<Description>
Render the inner SVG contents of this component.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// create an svg shape & set its attributes
	var rect = this.document.createElementNS(SVGNS,'rect');
	rect.setAttribute('id',this.makeId('rect'));
	rect.setAttribute('class','customSVGComponent');
	rect.setAttribute('x',0);
	rect.setAttribute('y',0);
	rect.setAttribute('width',this.width);
	rect.setAttribute('height',this.height);
	rect.setAttribute('style',this.style);

	// add to our group
	this.svgGroup.appendChild(rect);
]]></Implementation>
</Method>

<Method name="setProperty">
<Description>
Set the value of a named property.</Description>
<FormalSpec>property,value,value2</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch(property) {
	case 'style':
		this[property] = value;
		var el = this.findSVGElement('rect');
		if (el) {
			el.setAttribute(property,value);
		}
		break;
	case 'width':
	case 'height':
		var el = this.findSVGElement('rect');
		if (el) {
			el.setAttribute(property,value);
		}
		return this.invokeSuper('setProperty',arguments);

	default:
		return this.invokeSuper('setProperty',arguments);
	}
	return true;
]]></Implementation>
</Method>
</Class>


<Class name="ZENTest.customTable">
<Description>
Simple custom component used for testing custom components.</Description>
<Super>%ZEN.Component.tablePane</Super>
<System>4</System>
<TimeChanged>65825,24677</TimeChanged>
<TimeCreated>60314,50314.181609</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
This is the XML namespace for this component.</Description>
<Default>http://www.intersystems.com/zentest</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains component-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<Method name="%DrawHTML">
<Description>
The %DrawHTML method draws the initial HTML for this component.</Description>
<Implementation><![CDATA[
	Write "<div>CUSTOM TABLE</div>"
	
	Do ..columns.Clear()

	Set column = ##class(%ZEN.Auxiliary.column).%New()
	Set column.colName="ID"
	Set column.width="1px"
	Do ..columns.Insert(column)
	Do:$IsObject(%page) %page.%AddComponent(column)

	Do ##super()
]]></Implementation>
</Method>
</Class>


<Class name="ZMbasics.Tutorial1.HomePage">
<Description><![CDATA[
Sample Zen Mojo tutorial page, with one &lt;mojo:documentView>, which is a general container. 
<p>To specify the appearance of the &lt;mojo:documentView>, this sample uses 
the ongetlayout callback attribute. 
This returns a JSON string that describes the contents of the component,
in terms of a set of layout objects defined by the plugins used in this &;lt;documentView.
This callback is defined as follows:
<p>ongetlayout="return zenPage.getContent('mainViewLayout',key,criteria);"
<p>The method <method>getContent</method> is a built-in page method that you can use to retrieve
a content object, in this case a layout graph. This method:
<ol>
<li>Calls the onGetContent() method of the associated template class. If that method
returns content for the given key, ZM uses that content.</li>
<li>Otherwise, ZM calls the %OnGetJSONContent() method of the same template class (not demonstrated here).
</li> 
</ol>
<p>Within &lt;mojo:documentView>, the developerMode="true" option adds a toggle button that you can 
use to see the JSON data and layout strings available to the component.
<p>This ZM page class uses the template class <class>ZMbasics.Tutorial1.Template</class>.
<p>Next tutorial in the series: <class>ZMbasics.Tutorial2.HomePage</class>.]]></Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>62992,74468.158952</TimeCreated>

<Parameter name="TEMPLATECLASS">
<Description>
Name of the default template class that this page uses.</Description>
<Default>ZMbasics.Tutorial1.Template</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Localization domain; best practice is to always specify this</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<XData name="pageContents">
<Description>
This XML block defines the contents of the pageContents pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" 
xmlns:mojo="http://www.intersystems.com/zen/mojo" layout="none">
<mojo:documentView id="mainView" 
developerMode="true"
ongetlayout  ="return zenPage.getContent('mainViewLayout',key,criteria);">
<mojo:mojoDefaultPageManager>
<mojo:HTML5Helper/>
</mojo:mojoDefaultPageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="adjustContentSize">
<Description>
Implementation for this page. This method adjusts the size of the documentView components 
within the content area based on the current width and height of the screen. 
In this case there is only one documentView.</Description>
<FormalSpec>load,width,height</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    // This method should have an if{} block for each component. 
    
    var mainView = zen('mainView');
    if (mainView) {
        mainView.setSize(width, height);
        var mainDiv = mainView.getEnclosingDiv();
        mainDiv.style.top =  '0px';
        mainDiv.style.left = '0px';
    }
]]></Implementation>
</Method>

<Method name="%GetAppSettings">
<Description>
Method override for this page. This method defines the application name,
which controls the name shown on the browser tab.</Description>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    //get most settings from the superclass
    set tInfo = ##super()

    // then override the nameApplication setting -- this affects the browser tab name
    set tInfo.nameApplication = "ZM Tutorial 1"

    quit tInfo
]]></Implementation>
</Method>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

* {
  	font-family: arial;
	margin: 0;
	padding: 0;
}

body {
	position: relative;
	font-family: arial;
	font-size: 12pt;
	background: #F8F8F1;
	overflow: auto;
}

#zMojoHeaderPane {
}

#zMojoForegroundGroup {
	position: relative;
	top: 0px;
	left: 0px;
	border: 1px;
	overflow: hidden;
	padding: 0px;
}

#zMojoFooterGroup {
}


</style>
]]></Data>
</XData>

<Method name="ZMojoDrawQuickLinks">
<Description>
This implementation erases the default contents of the header area.</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMbasics.Tutorial1.Template">
<Description><![CDATA[
This is the template for the ZM page <class>ZMbasics.Tutorial1.HomePage</class>.
The ZM page invokes its page method <method>getContent</method>, which in turn invokes the 
<method>onGetContent</method> method of this class (the associated template class).
Depending on the first argument (<var>pProviderName</var>), <method>onGetContent</method> either:
<ul>
<li>Invokes another client-side method of this class, and obtains a JSON layout object.</li>
<li>Returns null, so that ZM calls the server-side <method>%OnGetJSONContent</method> 
and obtains a JSON data object. In this case, onGetContent() always returns a JSON layout object,
and this sample does not contain an implementation of <method>%OnGetJSONContent</method>.
</li>
</ul>
<p>Next tutorial in the series: <class>ZMbasics.Tutorial2.HomePage</class>.]]></Description>
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>62992,82112.841398</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
Each template class must have a unique combination of short class name and NAMESPACE parameter.</Description>
<Default>http://www.intersystems.com/zen/mojo/ZMTutorial1</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Localization domain; best practice is to always specify this</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="onGetContent">
<Description><![CDATA[
Implementation of callback.
This client-side method is called by the page method getContent(). 
If <var>providerName</var> is the name of a layout object, this method invokes 
<method>myGetMainViewLayout</method> and returns the result.
Otherwise, this method returns null, which means that ZM calls the 
<method>%OnGetJSONContent</method> of this template (thus going to the server instead).]]></Description>
<FormalSpec>providerName,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var content = null;

    // dispatch to convenient methods
    switch(providerName) {
    case 'mainViewLayout':
        content = this.myGetMainViewLayout(key,criteria);
        break;
    }
    return content;
]]></Implementation>
</Method>

<Method name="myGetMainViewLayout">
<Description><![CDATA[
Method used to get layout information for the mainView component. 
<p>This method must create and return a JS object with layout information.
Specifically, the JS object has a set of children, each of which corresponds to a block on the page.
To create this JS object, it is necessary to know only the following:
<ul>
<li>Syntax to create a JS object.</li>
<li>The available layout objects to use as children.</li>
<li>The properties that you can set for these layout objects.</li>
<li>The syntax for referring to the available data. (Not applicable here.)
</ul>]]></Description>
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var myLayoutGraph = {};

    //The standard technique is to have a switch/case construct based on the key argument.
    //In this case, the layout is not key-specific layout, so there is no need to branch.

    myLayoutGraph = {
        children: [
            { type: '$header', $content: 'Zen Mojo Tutorial 1'},
            { type: '$p',      $content: 'This page displays some simple text.'},
            { type: '$p',      $content: 'Here is another paragraph.' },
        ]
        

    }
    return myLayoutGraph;
]]></Implementation>
</Method>
</Class>


<Class name="ZMbasics.Tutorial2.HomePage">
<Description><![CDATA[
Sample Zen Mojo tutorial page. Use this tutorial after working with <class>ZMbasics.Tutorial1.HomePage</class>.
<p>The primary difference from Tutorial 1 is that *this* tutorial demonstrates 
the server-side method <method>%OnGetJSONContent</method>.
<p>This ZM page class uses the template class <class>ZMbasics.Tutorial2.Template</class>.
<p>Next tutorial in the series: <class>ZMbasics.Tutorial3.HomePage</class>.]]></Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>62992,74468.158952</TimeCreated>

<Parameter name="TEMPLATECLASS">
<Description>
Name of the default template class that this page uses.</Description>
<Default>ZMbasics.Tutorial2.Template</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Localization domain; best practice is to always specify this</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description><![CDATA[
List of server-side JSON providers for ZM to create; each of these can send a JSON string to the client.
This works as follows: The parameter is a comma-separated list of strings. 
For each string in this list, ZM creates an instance of the associated template class (see TEMPLATECLASS) 
and invokes its %OnGetJSONContent() method, passing the PROVIDERLIST list item as the first argument.
The method returns a set of JSON strings, which are available on the client.
<p>In this example, there is only one JSON provider. ]]></Description>
<Default>mainViewData</Default>
</Parameter>

<XData name="pageContents">
<Description>
This XML block defines the contents of the pageContents pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" 
xmlns:mojo="http://www.intersystems.com/zen/mojo" layout="none">
<mojo:documentView id="mainView" 
developerMode="true"
ongetdata    ="return zenPage.getContent('mainViewData',key,criteria);" 
ongetlayout  ="return zenPage.getContent('mainViewLayout',key,criteria);">
<mojo:mojoDefaultPageManager>
<mojo:HTML5Helper/>
</mojo:mojoDefaultPageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="adjustContentSize">
<Description>
Implementation for this page. This method adjusts the size of the documentView components 
within the content area based on the current width and height of the screen. 
In this case there is only one documentView.</Description>
<FormalSpec>load,width,height</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    // This method should have an if{} block for each component. 
    
    var mainView = zen('mainView');
    if (mainView) {
        mainView.setSize(width, height);
        var mainDiv = mainView.getEnclosingDiv();
        mainDiv.style.top =  '0px';
        mainDiv.style.left = '0px';
    }
]]></Implementation>
</Method>

<Method name="%GetAppSettings">
<Description>
Method override for this page. This method defines the application name,
which controls the name shown on the browser tab.</Description>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    //get most settings from the superclass
    set tInfo = ##super()

    // then override the nameApplication setting -- this affects the browser tab name
    set tInfo.nameApplication = "ZM Tutorial 2"

    quit tInfo
]]></Implementation>
</Method>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

* {
  	font-family: arial;
	margin: 0;
	padding: 0;
}

body {
	position: relative;
	font-family: arial;
	font-size: 12pt;
	background: #F8F8F1;
	overflow: auto;
}

#zMojoHeaderPane {
}

#zMojoForegroundGroup {
	position: relative;
	top: 0px;
	left: 0px;
	border: 1px;
	overflow: hidden;
	padding: 0px;
}

#zMojoFooterGroup {
}


</style>
]]></Data>
</XData>

<Method name="ZMojoDrawQuickLinks">
<Description>
This implementation erases the default contents of the header area.</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMbasics.Tutorial2.Template">
<Description><![CDATA[
This is the template for the ZM page <class>ZMbasics.Tutorial2.HomePage</class>.
<p>The primary difference from Tutorial 1 is that *this* tutorial demonstrates 
the server-side method <method>%OnGetJSONContent</method>.
<p>Next tutorial in the series: <class>ZMbasics.Tutorial3.HomePage</class>.]]></Description>
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>62992,82112.841398</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
Each template class must have a unique combination of short class name and NAMESPACE parameter.</Description>
<Default>http://www.intersystems.com/zen/mojo/ZMTutorial2</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Localization domain; best practice is to always specify this</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="onGetContent">
<Description><![CDATA[
Implementation of callback.
This client-side method is called by the page method getContent(). 
If <var>providerName</var> is the name of a layout object, this method invokes 
<method>myGetMainViewLayout</method> and returns the result.
Otherwise, this method returns null, which means that ZM calls the 
<method>%OnGetJSONContent</method> of this template (thus going to the server instead).]]></Description>
<FormalSpec>providerName,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var content = null;

    // dispatch to convenient methods
    // if content is null, then the %OnGetJSONContent method will be called

    switch(providerName) {
    case 'mainViewLayout':
        content = this.myGetMainViewLayout(key,criteria);
        break;
    }
    return content;
]]></Implementation>
</Method>

<Method name="myGetMainViewLayout">
<Description>
Method used to get layout information for the mainView component. </Description>
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var myLayoutGraph = {};

    //The standard technique is to have a switch/case construct based on the key argument.
    //In this case, the layout is not key-specific layout, so there is no need to branch.

    myLayoutGraph = {
        children: [
            { type: '$header', $content:'Zen Mojo Tutorial 2'},
            { type: '$p',      $content:'Below are details for the first person in Sample.Person.'},
            { type: '$p',	   title:'Name', $content:'=[personName]' },
            { type: '$p',      title:'Birth Date', $content:'=[personDOB]' }
        ]

    }
    return myLayoutGraph;
]]></Implementation>
</Method>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Implementation of callback method. 
This method provides content for the ZM page that uses this template. Arguments:
<ul>
<li><var>pProviderName</var> is the name of the provider, as declared in the PROVIDERLIST parameter of the page.</li>
<li><var>pKey</var> is an application-defined key that is used to indicate which content is to be served. 
Not used in this implementation.</li>
<li><var>pCriteria</var> is an object containing search criteria. Not used in this implementation.</li>
<li><var>pParms</var> is an array of additional parameters from the JSON provider (not currently used).</li>
<li><var>pObject</var> is the object that will be served to the client in JSON format.</li>
<li><var>pLoad</var> is true if this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.</li>
</ul>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pProviderName:%String,pKey:%String,&pParms,*pObject:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // The standard technique is to have an outermost if/elseif construct  
    // based on the pProviderName argument; in this case there is only one 
    // possible value for pProviderName.
    if (pProviderName = "mainViewData") {
        
        // Within a pProviderName branch, the standard technique is to have an 
        // if/elseif construct based on the key argument.
        // In this case, there are no keys, so there is no need to branch

        //create proxy object that the ZM will convert to a JSON string and send to the client
        set pObject = ##class(%ZEN.proxyObject).%New()

        set tPerson = ##class(Sample.Person).%OpenId(1)
        set pObject.personName=tPerson.Name
        set pObject.personDOB=$zdate(tPerson.DOB,3)

    } ; additional pProviderName branches would go here
    quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMbasics.Tutorial3.HomePage">
<Description><![CDATA[
Sample Zen Mojo tutorial page. Use this tutorial after working with <class>ZMbasics.Tutorial2.HomePage</class>.
<p>The primary difference from Tutorial 2 is that *this* tutorial demonstrates 
the <method>onselect</method> event handler.
<p>This ZM page class uses the template class <class>ZMbasics.Tutorial3.Template</class>.
<p>Next tutorial in the series: <class>ZMbasics.Tutorial4.HomePage</class>.]]></Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>62992,74468.158952</TimeCreated>

<Parameter name="TEMPLATECLASS">
<Description>
Name of the default template class that this page uses.</Description>
<Default>ZMbasics.Tutorial3.Template</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Localization domain; best practice is to always specify this</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description><![CDATA[
List of server-side JSON providers for ZM to create; each of these can send a JSON string to the client.
This works as follows: The parameter is a comma-separated list of strings. 
For each string in this list, ZM creates an instance of the associated template class (see TEMPLATECLASS) 
and invokes its %OnGetJSONContent() method, passing the PROVIDERLIST list item as the first argument.
The method returns a set of JSON strings, which are available on the client.
<p>In this example, there is only one JSON provider.]]></Description>
<Default>mainViewData</Default>
</Parameter>

<XData name="pageContents">
<Description>
This XML block defines the contents of the pageContents pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" 
xmlns:mojo="http://www.intersystems.com/zen/mojo" layout="none">
<mojo:documentView id="mainView" 
developerMode="true"
ongetdata    ="return zenPage.getContent('mainViewData',key,criteria);" 
ongetlayout  ="return zenPage.getContent('mainViewLayout',key,criteria);">
<mojo:mojoDefaultPageManager>
<mojo:HTML5Helper/>
</mojo:mojoDefaultPageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="adjustContentSize">
<Description>
Implementation for this page. This method adjusts the size of the documentView components 
within the content area based on the current width and height of the screen. 
In this case there is only one documentView.</Description>
<FormalSpec>load,width,height</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    // This method should have an if{} block for each component. 
    
    var mainView = zen('mainView');
    if (mainView) {
        mainView.setSize(width, height);
        var mainDiv = mainView.getEnclosingDiv();
        mainDiv.style.top =  '0px';
        mainDiv.style.left = '0px';
    }
]]></Implementation>
</Method>

<Method name="%GetAppSettings">
<Description>
Method override for this page. This method defines the application name,
which controls the name shown on the browser tab.</Description>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    //get most settings from the superclass
    set tInfo = ##super()

    // then override the nameApplication setting -- this affects the browser tab name
    set tInfo.nameApplication = "ZM Tutorial 3"

    quit tInfo
]]></Implementation>
</Method>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">

* {
  	font-family: arial;
	margin: 0;
	padding: 0;
}

body {
	position: relative;
	font-family: arial;
	font-size: 12pt;
	background: #F8F8F1;
	overflow: auto;
}

#zMojoHeaderPane {
}

#zMojoForegroundGroup {
	position: relative;
	top: 0px;
	left: 0px;
	border: 1px;
	overflow: hidden;
	padding: 0px;
}

#zMojoFooterGroup {
}


</style>
]]></Data>
</XData>

<Method name="ZMojoDrawQuickLinks">
<Description>
This implementation erases the default contents of the header area.</Description>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMbasics.Tutorial3.Template">
<Description><![CDATA[
This is the template for the ZM page <class>ZMbasics.Tutorial3.HomePage</class>.
<p>The primary difference from Tutorial 2 is that *this* tutorial demonstrates 
the <method>onselect</method> event handler.
<p>Next tutorial in the series: <class>ZMbasics.Tutorial4.HomePage</class>.]]></Description>
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>62992,82112.841398</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
Each template class must have a unique combination of short class name and NAMESPACE parameter.</Description>
<Default>http://www.intersystems.com/zen/mojo/ZMTutorial3</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Localization domain; best practice is to always specify this</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="onGetContent">
<Description><![CDATA[
Implementation of callback.
This client-side method is called by the page method getContent(). 
If <var>providerName</var> is the name of a layout object, this method invokes 
<method>myGetMainViewLayout</method> and returns the result.
Otherwise, this method returns null, which means that ZM calls the 
<method>%OnGetJSONContent</method> of this template (thus going to the server instead).]]></Description>
<FormalSpec>providerName,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var content = null;

    // dispatch to convenient methods
    // if content is null, then the %OnGetJSONContent method will be called

    switch(providerName) {
    case 'mainViewLayout':
        content = this.myGetMainViewLayout(key,criteria);
        break;
    }
    return content;
]]></Implementation>
</Method>

<Method name="myGetMainViewLayout">
<Description><![CDATA[
Method used to get layout information for the mainView component. 
<p>This method must create and return a JS object with layout information.
Specifically, the JS object has a set of children, each of which corresponds to a block on the page.
To create this JS object, it is necessary to know only the following:
<ul>
<li>Syntax to create a JS object.</li>
<li>The available ZM building blocks to use as children.</li>
<li>The properties that you can set for these building blocks.</li>
<li>The syntax for referring to the available data. 
The ongetdata callback, ultimately, creates a JSON string that includes a set of name/value pairs
with values obtained from the server.
When this JSON string arrives on the client, the name/value pairs are available to the client.
Then, in this method, you can use the syntax =[name] to access a value. 
For example, =[dateOfBirth] accesses the dateOfBirth value. 
</ul>
<p>ZM passes two values to this kind of callback in a &lt;mojo:documentView>:
<var>key</var> and <var>criteria</var>. 
Following best practices, this method uses these values as arguments so that they
are available if needed.
In this scenario, these values are not needed, and the method does not use them.]]></Description>
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var myLayoutGraph = {};

    //The standard technique is to have a switch/case construct based on the key argument.
    //In this case, the layout is not key-specific layout, so there is no need to branch.

    myLayoutGraph = {
        children: [
            { type: '$header', $content: 'Zen Mojo Tutorial 3'},
            { type: '$p'},
            { type: '$button', $content:'Show Person 1', key:'showPerson1'},
            { type: '$p'},
            { type: '$button', $content:'Show Person 2', key:'showPerson2'},
            { type: '$p'},

            { type: '$div', key:'person1',
               children:[
	            { type: '$p', title:'Name', $content:'=[person1Name]' },
    	        { type: '$p', title:'Birth Date', $content:'=[person1DOB]' }
                ]},
            
            { type: '$div', key:'person2', hidden:true,
               children:[
	            { type: '$p', title:'Name', $content:'=[person2Name]' },
    	        { type: '$p', title:'Birth Date', $content:'=[person2DOB]' }
                ]},



        ]
        

    }
    return myLayoutGraph;
]]></Implementation>
</Method>

<Method name="onselect">
<Description>
Notification that a select event has happened</Description>
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   console.log('in onselect(), docViewId: '+docViewId+ ' key: ' + key + ' value: ' + value);
   
   if (docViewId=='mainView') {
	   var person1=zen('mainView').getItemByKey('person1');
	   var person2=zen('mainView').getItemByKey('person2');

       if (key=='showPerson1') {
	       person1.$show();
	       person2.$hide();
	   } else if (key=='showPerson2') {
	       person1.$hide();
	       person2.$show();
	   }
   
   }
]]></Implementation>
</Method>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Implementation of callback method. 
This method provides content for the ZM page that uses this template. Arguments:
<ul>
<li><var>pProviderName</var> is the name of the provider, as declared in the PROVIDERLIST parameter of the page.</li>
<li><var>pKey</var> is an application-defined key that is used to indicate which content is to be served. 
Not used in this implementation.</li>
<li><var>pCriteria</var> is an object containing search criteria. Not used in this implementation.</li>
<li><var>pParms</var> is an array of additional parameters from the JSON provider (not currently used).</li>
<li><var>pObject</var> is the object that will be served to the client in JSON format.</li>
<li><var>pLoad</var> is true if this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.</li>
</ul>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pProviderName:%String,pKey:%String,&pParms,*pObject:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // The standard technique is to have an outermost if/elseif construct  
    // based on the pProviderName argument; in this case there is only one 
    // possible value for pProviderName.
    if (pProviderName = "mainViewData") {
        
        // Within a pProviderName branch, the standard technique is to have an 
        // if/elseif construct based on the key argument.
        // In this case, there are no keys, so there is no need to branch

        //create proxy object that the ZM will convert to a JSON string and send to the client
        set pObject = ##class(%ZEN.proxyObject).%New()

        set person1 = ##class(Sample.Person).%OpenId(1)
        set pObject.person1Name=person1.Name
        set pObject.person1DOB=$zdate(person1.DOB,3)
        
        set person2 = ##class(Sample.Person).%OpenId(2)
        set pObject.person2Name=person2.Name
        set pObject.person2DOB=$zdate(person2.DOB,3)
   
    } ; additional pProviderName branches would go here
    quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.LoadAndStore.Application">
<Description>
Load and Store Sample.Person Application</Description>
<Super>%ZEN.Mojo.baseApplication</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58507.342228</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Load and Store Sample.Person objects</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
</Parameter>

<Method name="%GetAppSettings">
<Description>
Return an object containing the various configured settings for the portal.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	
	Set tInfo = ##class(%ZEN.proxyObject).%New()

	// initial templateClass
	Set tInfo.templateClass = ""

	// names
	Set tInfo.nameApplication = "jQM Load and Store Demo"

	// overrides

	Quit tInfo
]]></Implementation>
</Method>

<Method name="ZMojoDrawBackgroundDiv">
<Description><![CDATA[
Draw the contents of the background div section (this is purely decorative)
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawQuickLinks">
<Description><![CDATA[
Draw the contents of the quick links section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<Method name="ZMojoDrawBasicHelp">
<Description><![CDATA[
Draw the contents of the basic section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawFooterGroup">
<Description><![CDATA[
Draw the contents of the footer group section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.LoadAndStore.HomePage">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58484.834602</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZMdemo.LoadAndStore.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>HomePage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description>
List of JSON providers created for this page.
Used by contentProvider.</Description>
<Default>data,layout</Default>
</Parameter>

<Parameter name="TEMPLATECLASS">
<Description>
Starting template class for this page
Used by contentProvider.
This is overriden by application settings, of provided.</Description>
<Default>ZMdemo.LoadAndStore.loadStoreTemplate</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
Comma-separated list of additional CSS3 include files for the page.
If this is defined *and* this page is using CSS3, then the CSSINCLUDES parameter is ignored.
If this is not defined *and* this page is using CSS3, then the CSSINCLUDES parameter is used.</Description>
<Type>STRING</Type>
<Default>jquery.mobile-1.3.2.min.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Comma-separated list of additional JS include files for the page.</Description>
<Type>STRING</Type>
<Default>jquery-1.10.2.min.js,jquery.mobile-1.3.2.min.js</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
	.ui-listview-filter {
		margin: 0px;
	}
</style>
]]></Data>
</XData>

<XData name="pageContents">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen"
xmlns:mojo="http://www.intersystems.com/zen/mojo"
layout="none">

<mojo:documentView id="mainView"
developerMode="false" 
initialDocumentKey="home"
initialLayoutKey="home"
ongetlayout = "return zenPage.getContent('layout',key,criteria);"
ongetdata = "return zenPage.getContent('data',key,criteria);"
>
<mojo:jQM-1.3.2-PageManager jQueryAnimation="slide" onPageShow="zenPage.onPageShow(layoutkey,documentkey);">
<mojo:jQM-1.3.2-Helper/>
<mojo:HTML5Helper/>
<mojo:mojoDefaultHelper/>
</mojo:jQM-1.3.2-PageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="onPageShow">
<FormalSpec>layoutkey,documentkey</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
</Method>

<Method name="adjustContentSize">
<Description>
Implementation for this page. This method adjusts the size of components 
within the content area based on the current width and height of the screen. 
In this case there is only one component.</Description>
<FormalSpec>load,width,height</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	
	var mainView = zen('mainView');
	if (mainView) {
		var mainDiv = mainView.getEnclosingDiv();
		mainDiv.style.top =  '0px';
		mainDiv.style.left = '0px';
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.LoadAndStore.loadStoreTemplate">
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58554.738224</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/mojo/demo/loadStore</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Server-side method to provide content to JSON providers.<br/>
<var>pWhich</var> is the name of the provider.<br/>
<var>pKey</var> is an app-defined key that is used to indicate which content is to be served.<br/>
<var>pCriteria</var>is an object containing search criteria. This is used for searching.<br/>
<var>pParms</var> is an array of additional parameters from the JSON provider. (not current used).<br/>
<var>pObject</var> is the object that will be served to the client in JSON format.<br/>
<var>pLoad</var> is true is this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pWhich:%String,pKey:%String,&pParms,*pObject:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sql As %String = ""
	#dim tsc As %Status = $$$OK
	#dim result As %SQL.StatementResult
	
	set pObject = ##class(%ZEN.proxyObject).%New()
	
	if (pKey = "home") {
		set pObject.sectionHeader = "Person List"
		set pObject.personList = ##class(%ListOfObjects).%New()
		
		set statement = ##class(%SQL.Statement).%New()
		set sql = "SELECT ID, Name, SSN FROM Sample.Person"
		set tsc = statement.%Prepare(sql)
		if ($$$ISERR(tsc)) {
			quit $$$OK
		}
		set result = statement.%Execute()
		
		while result.%Next() {
			set person = ##class(%ZEN.proxyObject).%New()
			set person.id = result.%Get("ID")
			set person.name = result.%Get("Name")
			set person.ssn = result.%Get("SSN")
			do pObject.personList.Insert(person)
		}
		
	} elseif (pKey = "show-person") {
		
		set pObject.sectionHeader = "Person Detail"
		
		set statement = ##class(%SQL.Statement).%New()
		// Get any additional details now
		set sql = "SELECT ID, Name, SSN, Home_City FROM Sample.Person WHERE ID = ?"
		set tsc  = statement.%Prepare(sql)
		if ($$$ISERR(tsc)) {
			quit $$$OK
		}
		set result = statement.%Execute(pCriteria.id)
		
		while result.%Next() {
			set pObject.id = result.%Get("ID")
			set pObject.name = result.%Get("Name")
			set pObject.ssn = result.%Get("SSN")
			set pObject.home = ##class(%ZEN.proxyObject).%New()
			set pObject.home.city = result.%Get("Home_City")
		}
		
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="onGetContent">
<Description><![CDATA[
Client-side content provider method.
<var>which</var> is the name of the content to return.
<var>key</var> is the key value associated with the request.
<var>criteria</var> is the search criteria associated with the request.]]></Description>
<FormalSpec>which,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//console.log(which + ' - ' + key + ' - ' + criteria);
	switch (which)
	{
		case 'layout':
			return this.getLayout(key,criteria);
		case 'data':
			// always fetch data from server for this sample
	}
	
	// returning null -> fetch data from server
	return null;
]]></Implementation>
</Method>

<Method name="getLayout">
<Description>
Creates the layout object for the page</Description>
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var content = null;
	
    
    switch(key) {
	    case 'home' :
	     	content = {
		     	children:[
		     		{type:'$header',caption:'=[sectionHeader]'},
		     		{type:'$listview',value:'=[personList]',filter:true,children:[
		     			{type:'$listviewitem',key:'drill-person',value:'=[id]',label:'=[name]',content:'=[ssn]',clickable:true,labelNoWrapper:false}
		     		]}
		     	]
		     };
	     	break;
	     case 'show-person' :
	     	content = {
		     	children:[
		     		{type:'$header',caption:'=[sectionHeader]'},
		     		{type:'$form',children:[
		     			{type:'$text',placeHolder:$$$Text('Name'),value:'=[name]',fieldcontain:true,label:$$$Text('Name:'),key:'person-name'},
		     			{type:'$text',placeHolder:$$$Text('SSN'),value:'=[ssn]',fieldcontain:true,label:$$$Text('SSN:'),key:'person-ssn'},
		     			{type:'$text',placeHolder:$$$Text('Home City'),value:'=[home.city]',fieldcontain:true,label:$$$Text('Home City:'),key:'person-home-city'},
		     		]},
		     		{type:'$footer',children:[
		     			{type:'$grid',showBox:true,barTheme:'d',children:[
		     				{type:'$button',dataTheme:'a',caption:'Save',key:'save-person',value:'=[id]'}
		     			]}
		     		]}
	     		]
		     };
	     	break;
    } 
           				
    return content;
]]></Implementation>
</Method>

<Method name="onselect">
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('select '+key);
	var mainView = zen(docViewId);
	var realKey = key.split(':')[0];
	switch(realKey) {
		case 'drill-person':
			mainView.pushDocument('show-person',{id:value},'show-person',{id:value});
			break;
		case 'save-person':
			var name = mainView.getControlValue('person-name');
			var ssn = mainView.getControlValue('person-ssn');
			var homecity = mainView.getControlValue('person-home-city');
			
			var response = zenPage.submitData('save-person',{id:value,name:name,ssn:ssn,home:{city:homecity}});
			if (response && response.error) {
				alert(response.errorMsg);
			}
			zenPage.getContentProvider().invalidate('data','home');
			zenPage.getContentProvider().invalidate('data','show-person');
			mainView.popDocument(true,true);
			break;
	}
]]></Implementation>
</Method>

<Method name="onchange">
<FormalSpec>key,value,final,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('change ' + key + ' to ' + value);
	var view = zen(docViewId);
	switch(key) {
	}
]]></Implementation>
</Method>

<Method name="%OnSubmitData">
<Description><![CDATA[
Submit data handler for content provider.<br/>
Overridden by subclasses.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pKey:%String,pID:%String,pSubmitObject:%RegisteredObject,&pResponseObject:%RegisteredObject]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim tSC = $$$OK
	#Dim ex As %Exception.AbstractException

	set pResponseObject = ##class(%ZEN.proxyObject).%New()
	Try {
		if (pKey = "save-person") {
			set person = ##class(Sample.Person).%OpenId(pSubmitObject.id)
			
			if ($ISO(person)) {
				set person.Name = pSubmitObject.name
				set person.SSN = pSubmitObject.ssn
				set person.Home.City = pSubmitObject.home.city
				set tSC = person.%Save()
				if ($$$ISERR(tSC)) {
					set pResponseObject.error = 1
					set pResponseObject.errorMsg = ##class(%SYSTEM.Status).GetErrorText(tSC)
				}
			}
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnDrawHTMLMeta">
<Description><![CDATA[
This callback is called at the start of the HTML HEAD section of the page (just after the title).<br/>
It allows a page to write out meta tags, if desired.
(default implementation is a simple expression).]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Make it so that, when the user has selected IE compatibility mode, we ignore it and use the most recent IE version available
	//Write "<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />"
	// turn off unless this is actually mobile
	Write "<meta name=""viewport"" content=""width=device-width, initial-scale=1.0,maximum-scale=1, user-scalable=no""/>"
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.LoadAsync.Application">
<Description>
application showing how to load data in an asyncronous way</Description>
<Super>%ZEN.Mojo.baseApplication</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58507.342228</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>load async</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<Method name="%GetAppSettings">
<Description>
Return an object containing the various configured settings for the portal.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	
	Set tInfo = ##class(%ZEN.proxyObject).%New()

	// initial templateClass
	Set tInfo.templateClass = ""

	// names
	Set tInfo.nameApplication = "jQM Load Async Demo"

	// overrides

	Quit tInfo
]]></Implementation>
</Method>

<Method name="ZMojoDrawBackgroundDiv">
<Description><![CDATA[
Draw the contents of the background div section (this is purely decorative)
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawQuickLinks">
<Description><![CDATA[
Draw the contents of the quick links section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawBasicHelp">
<Description><![CDATA[
Draw the contents of the basic section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawFooterGroup">
<Description><![CDATA[
Draw the contents of the footer group section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.LoadAsync.HomePage">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58484.834602</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZMdemo.LoadAsync.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>HomePage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description>
List of JSON providers created for this page.
Used by contentProvider.</Description>
<Default>data,layout</Default>
</Parameter>

<Parameter name="TEMPLATECLASS">
<Description>
Starting template class for this page
Used by contentProvider.
This is overriden by application settings, of provided.</Description>
<Default>ZMdemo.LoadAsync.baseTemplate</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
Comma-separated list of additional CSS3 include files for the page.
If this is defined *and* this page is using CSS3, then the CSSINCLUDES parameter is ignored.
If this is not defined *and* this page is using CSS3, then the CSSINCLUDES parameter is used.</Description>
<Type>STRING</Type>
<Default>jquery.mobile-1.3.2.min.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Comma-separated list of additional JS include files for the page.</Description>
<Type>STRING</Type>
<Default>jquery-1.10.2.min.js,jquery.mobile-1.3.2.min.js</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
	.ui-listview-filter {
		margin: 0px;
	}
</style>
]]></Data>
</XData>

<XData name="pageContents">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen"
xmlns:mojo="http://www.intersystems.com/zen/mojo"
layout="none">

<mojo:documentView id="mainView"
developerMode="true" 
initialDocumentKey="home"
initialLayoutKey="home"
maxPanels="15"
ongetlayout = "return zenPage.getContent('layout',key,criteria);"
ongetdata = "return zenPage.getContent('data',key,criteria);"
>
<mojo:jQM-1.3.2-PageManager jQueryAnimation="fade" onPageShow="zenPage.onPageShow(layoutkey,documentkey);">
<mojo:jQM-1.3.2-Helper/>
<mojo:HTML5Helper/>
</mojo:jQM-1.3.2-PageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="onPageShow">
<FormalSpec>layoutkey,documentkey</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
</Method>

<Method name="%OnDrawHTMLMeta">
<Description><![CDATA[
This callback is called at the start of the HTML HEAD section of the page (just after the title).<br/>
It allows a page to write out meta tags, if desired.
(default implementation is a simple expression).]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Make it so that, when the user has selected IE compatibility mode, we ignore it and use the most recent IE version available
	//Write "<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />"
	// turn off unless this is actually mobile
	Write "<meta name=""viewport"" content=""width=device-width, initial-scale=1.0,maximum-scale=1, user-scalable=no""/>"
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.LoadAsync.baseTemplate">
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58554.738224</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/mojo/demo/loadAsync</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Server-side method to provide content to JSON providers.<br/>
<var>pWhich</var> is the name of the provider.<br/>
<var>pKey</var> is an app-defined key that is used to indicate which content is to be served.<br/>
<var>pCriteria</var>is an object containing search criteria. This is used for searching.<br/>
<var>pParms</var> is an array of additional parameters from the JSON provider. (not current used).<br/>
<var>pObject</var> is the object that will be served to the client in JSON format.<br/>
<var>pLoad</var> is true is this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pWhich:%String,pKey:%String,&pParms,*pObject:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pObject = ##class(%ZEN.proxyObject).%New()
	
	if (pKey = "slow-loading") {
		// emulate async
		h 5
		set pObject.message = "Here is a huge payload."
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="getData">
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var data = null;
	switch (key) {
		case 'home':
			data = {};
			data.message = 'Nothing loaded';
			break;
	}
	return data;
]]></Implementation>
</Method>

<Method name="onGetContent">
<Description><![CDATA[
Client-side content provider method.
<var>which</var> is the name of the content to return.
<var>key</var> is the key value associated with the request.
<var>criteria</var> is the search criteria associated with the request.]]></Description>
<FormalSpec>which,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log(which + ' - ' + key + ' - ' + criteria);
	switch (which)
	{
		case 'layout':
			return this.getLayout(key,criteria);
		case 'data':
			// comment this out, if you wanna get data from the server
			return this.getData(key,criteria);
	}
	
	// returning null -> fetch data from server
	return null;
]]></Implementation>
</Method>

<Method name="getLayout">
<Description>
Creates the layout object for the page</Description>
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var content = null;
	
    
    switch(key) {
	    case 'home' :
	     	content = {
		     	children:[
		     		{type:'$header',caption:'Start Page'},
		     		{type:'$button',caption:'Load async',key:'load-async'},
		     		{type:'$span',$content:'=[message]'}
		     	]
		     };
	     	break;
    } 
           				
    return content;
]]></Implementation>
</Method>

<Method name="onselect">
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('select '+key);
	var mainView = zen(docViewId);
	switch(key) {
		case 'load-async':
			var notify = function(final){
				if (final) {
					console.log('done');
					$.mobile.loading('hide');
					// change the document key to the data we just finished loading
					mainView.setDocumentKey('slow-loading',{});
					// update the layout
					mainView.updateLayout();
				}
			};
			$.mobile.loading('show');
			zenPage.getContent('data','slow-loading',{},false,notify);
			
			break;
	}
]]></Implementation>
</Method>

<Method name="onchange">
<FormalSpec>key,value,final,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('change ' + key + ' to ' + value);
	var view = zen(docViewId);
	switch(key) {
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.bootstrap.Application">
<Description>
Load and Store Sample.Person Application</Description>
<Super>%ZEN.Mojo.baseApplication</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63707,52661.232086</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Bootstrap Sample</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>ZMdemo.bootstrap.HomePage.cls</Default>
</Parameter>

<Method name="%GetAppSettings">
<Description>
Return an object containing the various configured settings for the portal.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	
	Set tInfo = ##class(%ZEN.proxyObject).%New()

	// initial templateClass
	Set tInfo.templateClass = "ZMdemo.bootstrap.baseTemplate"

	// names
	Set tInfo.nameApplication = "Bootstrap Sample"

	// overrides

	Quit tInfo
]]></Implementation>
</Method>

<Method name="ZMojoDrawBackgroundDiv">
<Description><![CDATA[
Draw the contents of the background div section (this is purely decorative)
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawQuickLinks">
<Description><![CDATA[
Draw the contents of the quick links section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<Method name="ZMojoDrawBasicHelp">
<Description><![CDATA[
Draw the contents of the basic section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawFooterGroup">
<Description><![CDATA[
Draw the contents of the footer group section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.bootstrap.ApplicationServerSide">
<Description>
Load and Store Sample.Person Application</Description>
<Super>%ZEN.Mojo.baseApplication</Super>
<TimeChanged>63851,55437.742283</TimeChanged>
<TimeCreated>63707,52661.232086</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Bootstrap Server-side Layout Sample</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>ZMdemo.bootstrap.HomePageServerSide.cls</Default>
</Parameter>

<Method name="%GetAppSettings">
<Description>
Return an object containing the various configured settings for the portal.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	
	Set tInfo = ##class(%ZEN.proxyObject).%New()

	// initial templateClass
	Set tInfo.templateClass = "ZMdemo.bootstrap.baseTemplateServerSide"

	// names
	Set tInfo.nameApplication = "Bootstrap Server-side Layout Sample"

	// overrides

	Quit tInfo
]]></Implementation>
</Method>

<Method name="ZMojoDrawBackgroundDiv">
<Description><![CDATA[
Draw the contents of the background div section (this is purely decorative)
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawQuickLinks">
<Description><![CDATA[
Draw the contents of the quick links section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<Method name="ZMojoDrawBasicHelp">
<Description><![CDATA[
Draw the contents of the basic section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawFooterGroup">
<Description><![CDATA[
Draw the contents of the footer group section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.bootstrap.HomePage">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63712,61102.1991</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZMdemo.bootstrap.Application</Default>
</Parameter>

<Parameter name="AUTOLOGOUT">
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>HomePage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description>
List of JSON providers created for this page.
Used by contentProvider.</Description>
<Default>data,layout</Default>
</Parameter>

<Parameter name="TEMPLATECLASS">
<Description>
Starting template class for this page
Used by contentProvider.
This is overriden by application settings, of provided.</Description>
<Default>ZMdemo.bootstrap.baseTemplate</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
Comma-separated list of additional CSS3 include files for the page.
If this is defined *and* this page is using CSS3, then the CSSINCLUDES parameter is ignored.
If this is not defined *and* this page is using CSS3, then the CSSINCLUDES parameter is used.</Description>
<Type>STRING</Type>
<Default>bootstrap-3-3-5/dist/css/bootstrap.min.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Comma-separated list of additional JS include files for the page.</Description>
<Type>STRING</Type>
<Default>jquery-1.11.3.min.js,bootstrap-3-3-5/dist/js/bootstrap.min.js</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
	.headerDiv {
		width: 100%;
		height: 50px;
		line-height: 40px;
		background-color: black;
		color: white;
		padding: 3px 10px;
		font-size: 1.5em;
	}
	.headerDiv .header {
		display: inline-block;
		text-align: center;
		width: 80%;
		position: absolute;
		left: 10%;
		z-index:-1;
	}
	.navbar-header {
	    float: left;
	    padding: 15px;
	    text-align: center;
	    width: 100%;
	}
	.navbar-brand {float:none;}
	.main-grid {
		width: 80%;
		margin: 0 auto;
		margin-top: 70px;
	}
	#detail-form {
		width: 50%;
	}
	.modal-header {
		border-bottom:none;
	}
	.modal-title {
		text-align: left;
	}
	.modal-body button {
		margin-right: 10px;
	}
	.modal-footer {
		border-top:none;
	}
	.modal-dialog {
  		padding-top: 15%;
	}
</style>
]]></Data>
</XData>

<XData name="pageContents">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen"
xmlns:mojo="http://www.intersystems.com/zen/mojo"
layout="none">


<mojo:documentView id="mainView"
developerMode="false" 
initialDocumentKey="home"
initialLayoutKey="home"
ongetlayout = "return zenPage.getContent('layout',key,criteria);"
ongetdata = "return zenPage.getContent('data',key,criteria);"
>

<mojo:mojoDefaultPageManager>
<mojo:bootstrap-3.3.x-Helper/>
<mojo:HTML5Helper/>
<mojo:mojoDefaultHelper/>
</mojo:mojoDefaultPageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="onPageShow">
<FormalSpec>layoutkey,documentkey</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
</Method>

<Method name="adjustContentSize">
<Description>
Implementation for this page. This method adjusts the size of components 
within the content area based on the current width and height of the screen. 
In this case there is only one component.
Adjust size of components within the content area.</Description>
<FormalSpec>load,width,height</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var view = zen('mainView');
	if (view) {
		view.setSize(width,height);
	}
]]></Implementation>
</Method>

<Method name="%OnDrawHTMLMeta">
<Description><![CDATA[
This callback is called at the start of the HTML HEAD section of the page (just after the title).<br/>
It allows a page to write out meta tags, if desired.
(default implementation is a simple expression).]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Make it so that, when the user has selected IE compatibility mode, we ignore it and use the most recent IE version available
	//Write "<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />"
	// turn off unless this is actually mobile
	Write "<meta name=""viewport"" content=""width=device-width, initial-scale=1.0,maximum-scale=1, user-scalable=no""/>"
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="embedded">
<Description>
If true, only show the core content.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="ZENURL" value="EMBED"/>
</Property>
</Class>


<Class name="ZMdemo.bootstrap.HomePageServerSide">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>63851,55119.458584</TimeChanged>
<TimeCreated>63712,61102.1991</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZMdemo.bootstrap.Application</Default>
</Parameter>

<Parameter name="AUTOLOGOUT">
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>HomePage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description>
List of JSON providers created for this page.
Used by contentProvider.</Description>
<Default>data,layout</Default>
</Parameter>

<Parameter name="TEMPLATECLASS">
<Description>
Starting template class for this page
Used by contentProvider.
This is overriden by application settings, of provided.</Description>
<Default>ZMdemo.bootstrap.baseTemplateServerSide</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
Comma-separated list of additional CSS3 include files for the page.
If this is defined *and* this page is using CSS3, then the CSSINCLUDES parameter is ignored.
If this is not defined *and* this page is using CSS3, then the CSSINCLUDES parameter is used.</Description>
<Type>STRING</Type>
<Default>bootstrap-3-3-5/dist/css/bootstrap.min.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Comma-separated list of additional JS include files for the page.</Description>
<Type>STRING</Type>
<Default>jquery-1.11.3.min.js,bootstrap-3-3-5/dist/js/bootstrap.min.js</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
	.headerDiv {
		width: 100%;
		height: 50px;
		line-height: 40px;
		background-color: black;
		color: white;
		padding: 3px 10px;
		font-size: 1.5em;
	}
	.headerDiv .header {
		display: inline-block;
		text-align: center;
		width: 80%;
		position: absolute;
		left: 10%;
		z-index:-1;
	}
	.navbar-header {
	    float: left;
	    padding: 15px;
	    text-align: center;
	    width: 100%;
	}
	.navbar-brand {float:none;}
	.main-grid {
		width: 80%;
		margin: 0 auto;
		margin-top: 70px;
	}
	#detail-form {
		width: 50%;
	}
	.modal-header {
		border-bottom:none;
	}
	.modal-title {
		text-align: left;
	}
	.modal-body button {
		margin-right: 10px;
	}
	.modal-footer {
		border-top:none;
	}
	.modal-dialog {
  		padding-top: 15%;
	}
</style>
]]></Data>
</XData>

<XData name="pageContents">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen"
xmlns:mojo="http://www.intersystems.com/zen/mojo"
layout="none">


<mojo:documentView id="mainView"
developerMode="false" 
initialDocumentKey="home"
initialLayoutKey="home"
ongetlayout = "return zenPage.getContent('layout',key,criteria);"
ongetdata = "return zenPage.getContent('data',key,criteria);"
>

<mojo:mojoDefaultPageManager>
<mojo:bootstrap-3.3.x-Helper/>
<mojo:HTML5Helper/>
<mojo:mojoDefaultHelper/>
</mojo:mojoDefaultPageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="onPageShow">
<FormalSpec>layoutkey,documentkey</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
</Method>

<Method name="adjustContentSize">
<Description>
Implementation for this page. This method adjusts the size of components 
within the content area based on the current width and height of the screen. 
In this case there is only one component.
Adjust size of components within the content area.</Description>
<FormalSpec>load,width,height</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var view = zen('mainView');
	if (view) {
		view.setSize(width,height);
	}
]]></Implementation>
</Method>

<Method name="%OnDrawHTMLMeta">
<Description><![CDATA[
This callback is called at the start of the HTML HEAD section of the page (just after the title).<br/>
It allows a page to write out meta tags, if desired.
(default implementation is a simple expression).]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Make it so that, when the user has selected IE compatibility mode, we ignore it and use the most recent IE version available
	//Write "<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />"
	// turn off unless this is actually mobile
	Write "<meta name=""viewport"" content=""width=device-width, initial-scale=1.0,maximum-scale=1, user-scalable=no""/>"
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="embedded">
<Description>
If true, only show the core content.</Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="ZENURL" value="EMBED"/>
</Property>
</Class>


<Class name="ZMdemo.bootstrap.baseTemplate">
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63707,52557.497079</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/mojo/demo/bootstrap</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Server-side method to provide content to JSON providers.<br/>
<var>pWhich</var> is the name of the provider.<br/>
<var>pKey</var> is an app-defined key that is used to indicate which content is to be served.<br/>
<var>pCriteria</var>is an object containing search criteria. This is used for searching.<br/>
<var>pParms</var> is an array of additional parameters from the JSON provider. (not current used).<br/>
<var>pObject</var> is the object that will be served to the client in JSON format.<br/>
<var>pLoad</var> is true is this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pWhich:%String,pKey:%String,&pParms,*pObject:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sql As %String = ""
	#dim tsc As %Status = $$$OK
	#dim result As %SQL.StatementResult
	
	set pObject = ##class(%ZEN.proxyObject).%New()
	
	if (pKey = "home") {
		set pObject.sectionHeader = "Employee List"
		set pObject.employeeList = ##class(%ListOfObjects).%New()
		
		set statement = ##class(%SQL.Statement).%New()
		set sql = "SELECT ID, Name, Title FROM Sample.Employee ORDER BY Name ASC"
		set tsc = statement.%Prepare(sql)
		if ($$$ISERR(tsc)) {
			quit $$$OK
		}
		set result = statement.%Execute()
		
		while result.%Next() {
			set employee = ##class(%ZEN.proxyObject).%New()
			set employee.id = result.%Get("ID")
			set employee.name = result.%Get("Name")
			set employee.title = result.%Get("Title")
			do pObject.employeeList.Insert(employee)
		}
		
		set pObject.employeeList1 = ##class(%ListOfObjects).%New()
		set pObject.employeeList2 = ##class(%ListOfObjects).%New()
		set pObject.employeeList3 = ##class(%ListOfObjects).%New()
		
		//first-column
		for i=1:1:33 {
			do pObject.employeeList1.Insert(pObject.employeeList.GetAt(i))
		}
		//second-column
		for i=34:1:66 {
			do pObject.employeeList2.Insert(pObject.employeeList.GetAt(i))
		}
		//third-column
		for i=67:1:99 {
			do pObject.employeeList3.Insert(pObject.employeeList.GetAt(i))
		}
		
	} elseif (pKey = "show-employee") {
		
		set pObject.sectionHeader = "Employee Detail"
		
		set statement = ##class(%SQL.Statement).%New()
		// Get any additional details now
		set sql = "SELECT ID, Name, Title, Home_City FROM Sample.Employee WHERE ID = ?"
		
		set tsc  = statement.%Prepare(sql)
		if ($$$ISERR(tsc)) {
			quit $$$OK
		}
		set result = statement.%Execute(pCriteria.id)
		
		while result.%Next() {
			set pObject.id = result.%Get("ID")
			set pObject.name = result.%Get("Name")
			set pObject.title = result.%Get("Title")
			set pObject.home = ##class(%ZEN.proxyObject).%New()
			set pObject.home.city = result.%Get("Home_City")
		}
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="onGetContent">
<FormalSpec>which,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log(which + ' - ' + key + ' - ' + criteria);
	switch (which)
	{
		case 'layout':
			return this.getLayout(key,criteria);
		case 'data':
			// always fetch data from server for this sample
	}
	
	// returning null -> fetch data from server
	return null;
]]></Implementation>
</Method>

<Method name="getLayout">
<Description><![CDATA[
Client-side content provider method.
<var>which</var> is the name of the content to return.
<var>key</var> is the key value associated with the request.
<var>criteria</var> is the search criteria associated with the request.
testing
Creates the layout object for the page]]></Description>
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var content = null;
    switch(key) {
	      case 'home' :	     	
	     	content = {children:[{type:'$div', cssClass:'headerDiv navbar-fixed-top',children:[{type:'$text',cssClass:'header',content:'=[sectionHeader]'}]},								 
								 {type:'$gridSystem',cssClass:'main-grid',children:[{type:'$gridColumn',md:'4',
								 								children:[{type:'$listGroup',linked:'true',value:'=[employeeList1]',
								 										   children:[{type:'$listGroupItem',key:'drill-employee',linked:'true',iconRight:'true',icon:'menu-right',id:'=[id]',value:'=[id]',label:'=[name]',content:'=[title]'}]							
								 										  }]
								 							   },
								 							   {type:'$gridColumn',md:'4',
								 								children:[{type:'$listGroup',linked:'true',value:'=[employeeList2]',
								 										    children:[{type:'$listGroupItem',key:'drill-employee',linked:'true',iconRight:'true',icon:'menu-right',id:'=[id]',value:'=[id]',label:'=[name]',content:'=[title]'}]							
								 										  }]
								 							   },
								 							   {type:'$gridColumn',md:'4',
								 								children:[{type:'$listGroup',linked:'true',value:'=[employeeList3]',
								 										   children:[{type:'$listGroupItem',key:'drill-employee',linked:'true',iconRight:'true',icon:'menu-right',id:'=[id]',value:'=[id]',label:'=[name]',content:'=[title]'}]						
								 										  }]
								 							   }]
								}]
					  }
	     	break;
	     	
	     case 'show-employee' :
	     	content = {children:[{type:'$div', cssClass:'headerDiv navbar-fixed-top',
	     						  children:[{type:'$button',icon:'menu-left',content:' ',key:'back',theme:'primary'},
	     						  			{type:'$text',cssClass:'header',content:'=[sectionHeader]'}]
	     						  },
								{type:'$form',cssClass:'main-grid',id:'detail-form',horizontal:'true',
								 children:[{type:'$formGroup',children:[{type:'$input',colSize:'sm',offset:'1',label:'Name',id:'employee-name',key:'employee-name',value:'=[name]'}]},
										   {type:'$formGroup',children:[{type:'$input',colSize:'sm',offset:'1',label:'Title',id:'employee-title',key:'employee-title',value:'=[title]'}]},
										   {type:'$formGroup',children:[{type:'$input',colSize:'sm',offset:'1',label:'Home City',id:'employee-home-city',key:'employee-home-city',value:'=[home.city]'}]},
										   {type:'$formGroup',children:[{type:'$button',colSize:'sm',offset:'1',content:'save',dataToggle:'modal',dataTarget:'#myModal',value:'myModal',theme:'primary'},
										   								{type:'$modal',id:'myModal',tabindex:'-1',size:'sm',role:'dialog',ariaLabel:'myModalLabel',ariaHidden:'true',label:'Do you want to save it?',
										   								headerClass:'modal-footer',children:[{type:'$button',theme:'default',dataDismiss:'modal',content:'cancel'},
										   										  			                 {type:'$button',theme:'primary',content:'save',key:'save-employee',value:'=[id]'}]}]}
										   ]}]}
	     	break;
}
return content;
]]></Implementation>
</Method>

<Method name="onselect">
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('select '+key);
	var mainView = zen(docViewId);
	var realKey = key.split(':')[0];
	switch(realKey) {
		case 'drill-employee':
			mainView.pushDocument('show-employee',{id:value},'show-employee',{id:value});
			break;
		case 'save-employee':
			var name = mainView.getControlValue('employee-name');
			var title = mainView.getControlValue('employee-title');
			var homecity = mainView.getControlValue('employee-home-city');
			var profile = {id:value,name:name,title:title,homecity:homecity};
			var response = zenPage.submitData('save-employee',profile);
			if (response && response.error) {
				alert(response.errorMsg);
			}
			zenPage.getContentProvider().invalidate('data','home');
			zenPage.getContentProvider().invalidate('data','show-employee');		
			$('#myModal').modal('hide');
			mainView.popDocument(true,true);
			break;
		case 'back':
			mainView.popDocument(true,true);
			break;
	}
]]></Implementation>
</Method>

<Method name="onchange">
<FormalSpec>key,value,final,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('change ' + key + ' to ' + value);
	var view = zen(docViewId);
	switch(key) {
	}
]]></Implementation>
</Method>

<Method name="%OnSubmitData">
<Description><![CDATA[
Submit data handler for content provider.<br/>
Overridden by subclasses.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pKey:%String,pID:%String,pSubmitObject:%RegisteredObject,&pResponseObject:%RegisteredObject]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	#Dim tSC = $$$OK
	#Dim ex As %Exception.AbstractException
	set pResponseObject = ##class(%ZEN.proxyObject).%New()
	Try {
		if (pKey = "save-employee") {
			set employee = ##class(Sample.Employee).%OpenId(pSubmitObject.id)
			if ($ISO(employee)) {
				set employee.Name = pSubmitObject.name
				set employee.Title = pSubmitObject.title
				set employee.Home.City = pSubmitObject.homecity
				set tSC = employee.%Save()
				if ($$$ISERR(tSC)) {
					set pResponseObject.error = 1
					set pResponseObject.errorMsg = ##class(%SYSTEM.Status).GetErrorText(tSC)
				}
			}
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.bootstrap.baseTemplateServerSide">
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>63851,55348.92144</TimeChanged>
<TimeCreated>63707,52557.497079</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/mojo/demo/bootstrap</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Server-side method to provide content to JSON providers.<br/>
<var>pWhich</var> is the name of the provider.<br/>
<var>pKey</var> is an app-defined key that is used to indicate which content is to be served.<br/>
<var>pCriteria</var>is an object containing search criteria. This is used for searching.<br/>
<var>pParms</var> is an array of additional parameters from the JSON provider. (not current used).<br/>
<var>pObject</var> is the object that will be served to the client in JSON format.<br/>
<var>pLoad</var> is true is this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pWhich:%String,pKey:%String,&pParms,*pObject:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	if (pWhich = "layout"){
		set pObject = ##class(%ZEN.proxyObject).%New()
		set pObject.children = ##class(%ListOfObjects).%New()

	  	if (pKey="home") {
		    set header = ##class(%ZEN.proxyObject).%New()
		    set header.type = "$div"
		    set header.cssClass = "headerDiv navbar-fixed-top"
		    set header.children = ##class(%ListOfObjects).%New()
		    
		    set headerC = ##class(%ZEN.proxyObject).%New()
		    set headerC.type = "$text"
		    set headerC.cssClass = "header"
		    set headerC.content = "=[sectionHeader]"
		    
		    do header.children.Insert(headerC)
		    do pObject.children.Insert(header)
		    
		    set grid = ##class(%ZEN.proxyObject).%New()
		    set grid.type = "$gridSystem"
		    set grid.cssClass = "main-grid"
		    set grid.children = ##class(%ListOfObjects).%New()
		    
		    set gridC1 = ##class(%ZEN.proxyObject).%New()
		    set gridC1.type = "$gridColumn"
		    set gridC1.md = "4"
		    set gridC1.children = ##class(%ListOfObjects).%New()
		    
		    set gridC1L = ##class(%ZEN.proxyObject).%New()
		    set gridC1L.type = "$listGroup"
		    set gridC1L.linked = "true"
		    set gridC1L.value = "=[employeeList1]"
		    set gridC1L.children = ##class(%ListOfObjects).%New()
		    
		    set gridC1LI = ##class(%ZEN.proxyObject).%New()
		    set gridC1LI.type = "$listGroupItem"
		    set gridC1LI.linked = "true"
		    set gridC1LI.key = "drill-employee"
		    set gridC1LI.iconRight = "true"
		    set gridC1LI.icon = "menu-right"
		    set gridC1LI.id = "=[id]"
		    set gridC1LI.value = "=[id]"
		    set gridC1LI.label = "=[name]"
		    set gridC1LI.content = "=[title]"
		    
		    do gridC1L.children.Insert(gridC1LI)
		    do gridC1.children.Insert(gridC1L)
		    do grid.children.Insert(gridC1)
		    
		    set gridC2 = ##class(%ZEN.proxyObject).%New()
		    set gridC2.type = "$gridColumn"
		    set gridC2.md = "4"
		    set gridC2.children = ##class(%ListOfObjects).%New()
		    
		    set gridC2L = ##class(%ZEN.proxyObject).%New()
		    set gridC2L.type = "$listGroup"
		    set gridC2L.linked = "true"
		    set gridC2L.value = "=[employeeList2]"
		    set gridC2L.children = ##class(%ListOfObjects).%New()
		    
		    set gridC2LI = ##class(%ZEN.proxyObject).%New()
		    set gridC2LI.type = "$listGroupItem"
		    set gridC2LI.linked = "true"
		    set gridC2LI.key = "drill-employee"
		    set gridC2LI.iconRight = "true"
		    set gridC2LI.icon = "menu-right"
		    set gridC2LI.id = "=[id]"
		    set gridC2LI.value = "=[id]"
		    set gridC2LI.label = "=[name]"
		    set gridC2LI.content = "=[title]"
		    
		    do gridC2L.children.Insert(gridC2LI)
		    do gridC2.children.Insert(gridC2L)
		    do grid.children.Insert(gridC2)
		    
		    set gridC3 = ##class(%ZEN.proxyObject).%New()
		    set gridC3.type = "$gridColumn"
		    set gridC3.md = "4"
		    set gridC3.children = ##class(%ListOfObjects).%New()
		    
		    set gridC3L = ##class(%ZEN.proxyObject).%New()
		    set gridC3L.type = "$listGroup"
		    set gridC3L.linked = "true"
		    set gridC3L.value = "=[employeeList3]"
		    set gridC3L.children = ##class(%ListOfObjects).%New()
		    
		    set gridC3LI = ##class(%ZEN.proxyObject).%New()
		    set gridC3LI.type = "$listGroupItem"
		    set gridC3LI.linked = "true"
		    set gridC3LI.key = "drill-employee"
		    set gridC3LI.iconRight = "true"
		    set gridC3LI.icon = "menu-right"
		    set gridC3LI.id = "=[id]"
		    set gridC3LI.value = "=[id]"
		    set gridC3LI.label = "=[name]"
		    set gridC3LI.content = "=[title]"
		    
		    do gridC3L.children.Insert(gridC3LI)
		    do gridC3.children.Insert(gridC3L)
		    do grid.children.Insert(gridC3)
		    
		    do pObject.children.Insert(grid)
		    
	  } elseif (pKey="show-employee") {
		  
		    set header = ##class(%ZEN.proxyObject).%New()
		    set header.type = "$div"
		    set header.cssClass = "headerDiv navbar-fixed-top"
		    set header.children = ##class(%ListOfObjects).%New()
		    
		    set headerB = ##class(%ZEN.proxyObject).%New()
		    set headerB.type = "$button"
		    set headerB.icon = "menu-left"
		    set headerB.content = " "
		    set headerB.key = "back"
		    set headerB.theme = "primary"
		    
		    set headerT = ##class(%ZEN.proxyObject).%New()
		    set headerT.type = "$text"
		    set headerT.cssClass = "header"
		    set headerT.content = "=[sectionHeader]"
		    
		    do header.children.Insert(headerB)
		    do header.children.Insert(headerT) 		    
		    do pObject.children.Insert(header)
		    
		    set form = ##class(%ZEN.proxyObject).%New()
		    set form.type = "$form"
		    set form.cssClass = "main-grid"
		    set form.id = "detail-form"
		    set form.horizontal = "true"
		    set form.children = ##class(%ListOfObjects).%New()
		    
		    set formG1 = ##class(%ZEN.proxyObject).%New()
		    set formG1.type = "$formGroup"
		    set formG1.children = ##class(%ListOfObjects).%New()
		    
		    set formG1I = ##class(%ZEN.proxyObject).%New()
		    set formG1I.type = "$input"
		    set formG1I.colSize = "sm"
		    set formG1I.offset = "1"
		    set formG1I.label = "Name"
		    set formG1I.id = "employee-name"
		    set formG1I.key = "employee-name"
		    set formG1I.value = "=[name]"
		    
		    do formG1.children.Insert(formG1I)
		    do form.children.Insert(formG1) 
		    
		    set formG2 = ##class(%ZEN.proxyObject).%New()
		    set formG2.type = "$formGroup"
		    set formG2.children = ##class(%ListOfObjects).%New()
		    
		    set formG2I = ##class(%ZEN.proxyObject).%New()
		    set formG2I.type = "$input"
		    set formG2I.colSize = "sm"
		    set formG2I.offset = "1"
		    set formG2I.label = "Title"
		    set formG2I.id = "employee-title"
		    set formG2I.key = "employee-title"
		    set formG2I.value = "=[title]"
		    
		    do formG2.children.Insert(formG2I)
		    do form.children.Insert(formG2)
		    
		    set formG3 = ##class(%ZEN.proxyObject).%New()
		    set formG3.type = "$formGroup"
		    set formG3.children = ##class(%ListOfObjects).%New()
		    
		    set formG3I = ##class(%ZEN.proxyObject).%New()
		    set formG3I.type = "$input"
		    set formG3I.colSize = "sm"
		    set formG3I.offset = "1"
		    set formG3I.label = "Home City"
		    set formG3I.id = "home-city"
		    set formG3I.key = "home-city"
		    set formG3I.value = "=[home.city]"
		    
		    do formG3.children.Insert(formG3I)
		    do form.children.Insert(formG3)
		    
		    set formG4 = ##class(%ZEN.proxyObject).%New()
		    set formG4.type = "$formGroup"
		    set formG4.children = ##class(%ListOfObjects).%New()
		    
		    set formG4B = ##class(%ZEN.proxyObject).%New()
		    set formG4B.type = "$button"
		    set formG4B.colSize = "sm"
		    set formG4B.offset = "1"
		    set formG4B.content = "save"
		    set formG4B.dataToggle = "modal"
		    set formG4B.dataTarget = "#myModal"
		    set formG4B.value = "myModal"
		    set formG4B.theme = "primary"
		    
		    do formG4.children.Insert(formG4B)
		    
		    set formG4M = ##class(%ZEN.proxyObject).%New()
		    set formG4M.type = "$modal"
		    set formG4M.id = "myModal"
		    set formG4M.tabindex = "-1"
		    set formG4M.size = "sm"
		    set formG4M.role = "dialog"
		    set formG4M.ariaLabel = "myModalLabel"
		    set formG4M.ariaHidden = "true"
		    set formG4M.label = "Do you want to save it?"
		    set formG4M.headerClass = "modal-footer"
		    set formG4M.children = ##class(%ListOfObjects).%New()
		    
		    set formG4MB1 = ##class(%ZEN.proxyObject).%New()
		    set formG4MB1.type = "$button"
		    set formG4MB1.content = "cancel"
		    set formG4MB1.dataDismiss = "modal"
		    set formG4MB1.theme = "default"
		    
		    do formG4M.children.Insert(formG4MB1)
		    
		    set formG4MB2 = ##class(%ZEN.proxyObject).%New()
		    set formG4MB2.type = "$button"
		    set formG4MB2.key = "save-employee"
		    set formG4MB2.content = "save"
		    set formG4MB2.value = "=[id]"
		    set formG4MB2.theme = "primary"
		    
		    do formG4M.children.Insert(formG4MB2)
		    do formG4.children.Insert(formG4M)
		    do form.children.Insert(formG4)	     		    
		    do pObject.children.Insert(form)
	  }
			
	} elseif (pWhich = "data") {
		#dim sql As %String = ""
		#dim tsc As %Status = $$$OK
		#dim result As %SQL.StatementResult
	    set pObject = ##class(%ZEN.proxyObject).%New()
	  
	    if (pKey = "home") {
			set pObject.sectionHeader = "Employee List"
			set pObject.employeeList = ##class(%ListOfObjects).%New()
		
			set statement = ##class(%SQL.Statement).%New()
			set sql = "SELECT ID, Name, Title FROM Sample.Employee ORDER BY Name ASC"
			set tsc = statement.%Prepare(sql)
			if ($$$ISERR(tsc)) {
				quit $$$OK
			}
			set result = statement.%Execute()
		
			while result.%Next() {
				set employee = ##class(%ZEN.proxyObject).%New()
				set employee.id = result.%Get("ID")
				set employee.name = result.%Get("Name")
				set employee.title = result.%Get("Title")
				do pObject.employeeList.Insert(employee)
			}
		
			set pObject.employeeList1 = ##class(%ListOfObjects).%New()
			set pObject.employeeList2 = ##class(%ListOfObjects).%New()
			set pObject.employeeList3 = ##class(%ListOfObjects).%New()
		
			//first-column
			for i=1:1:33 {
				do pObject.employeeList1.Insert(pObject.employeeList.GetAt(i))
			}
			//second-column
			for i=34:1:66 {
				do pObject.employeeList2.Insert(pObject.employeeList.GetAt(i))
			}
			//third-column
			for i=67:1:99 {
				do pObject.employeeList3.Insert(pObject.employeeList.GetAt(i))
			}
		
		} elseif (pKey = "show-employee") {
		
			set pObject.sectionHeader = "Employee Detail"
		
			set statement = ##class(%SQL.Statement).%New()
			
			// Get any additional details now
			set sql = "SELECT ID, Name, Title, Home_City FROM Sample.Employee WHERE ID = ?"
		
			set tsc  = statement.%Prepare(sql)
			if ($$$ISERR(tsc)) {
				quit $$$OK
			}
			set result = statement.%Execute(pCriteria.id)
		
			while result.%Next() {
				set pObject.id = result.%Get("ID")
				set pObject.name = result.%Get("Name")
				set pObject.title = result.%Get("Title")
				set pObject.home = ##class(%ZEN.proxyObject).%New()
				set pObject.home.city = result.%Get("Home_City")
			}
		}
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="onGetContent">
<FormalSpec>which,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	
	// returning null -> fetch layout and data from server
	return null;
]]></Implementation>
</Method>

<Method name="onselect">
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('select '+key);
	var mainView = zen(docViewId);
	var realKey = key.split(':')[0];
	switch(realKey) {
		case 'drill-employee':
			mainView.pushDocument('show-employee',{id:value},'show-employee',{id:value});
			break;
		case 'save-employee':
			var name = mainView.getControlValue('employee-name');
			var title = mainView.getControlValue('employee-title');
			var homecity = mainView.getControlValue('employee-home-city');
			var profile = {id:value,name:name,title:title,homecity:homecity};
			var response = zenPage.submitData('save-employee',profile);
			if (response && response.error) {
				alert(response.errorMsg);
			}
			zenPage.getContentProvider().invalidate('data','home');
			zenPage.getContentProvider().invalidate('data','show-employee');		
			$('#myModal').modal('hide');
			mainView.popDocument(true,true);
			break;
		case 'back':
			mainView.popDocument(true,true);
			break;
	}
]]></Implementation>
</Method>

<Method name="onchange">
<FormalSpec>key,value,final,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('change ' + key + ' to ' + value);
	var view = zen(docViewId);
	switch(key) {
	}
]]></Implementation>
</Method>

<Method name="%OnSubmitData">
<Description><![CDATA[
Submit data handler for content provider.<br/>
Overridden by subclasses.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pKey:%String,pID:%String,pSubmitObject:%RegisteredObject,&pResponseObject:%RegisteredObject]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	#Dim tSC = $$$OK
	#Dim ex As %Exception.AbstractException
	set pResponseObject = ##class(%ZEN.proxyObject).%New()
	Try {
		if (pKey = "save-employee") {
			set employee = ##class(Sample.Employee).%OpenId(pSubmitObject.id)
			if ($ISO(employee)) {
				set employee.Name = pSubmitObject.name
				set employee.Title = pSubmitObject.title
				set employee.Home.City = pSubmitObject.homecity
				set tSC = employee.%Save()
				if ($$$ISERR(tSC)) {
					set pResponseObject.error = 1
					set pResponseObject.errorMsg = ##class(%SYSTEM.Status).GetErrorText(tSC)
				}
			}
		}
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.chui.Application">
<Description>
chocolate chip ui application</Description>
<Super>%ZEN.Mojo.baseApplication</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63048,58507.342228</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>chocolate-chip-ui demo</Default>
</Parameter>

<Method name="%GetAppSettings">
<Description>
Return an object containing the various configured settings for the portal.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	
	Set tInfo = ##class(%ZEN.proxyObject).%New()

	// initial templateClass
	Set tInfo.templateClass = ""

	// names
	Set tInfo.nameApplication = "Chocolate Chip UI Demo"

	// overrides

	Quit tInfo
]]></Implementation>
</Method>

<Method name="ZMojoDrawBackgroundDiv">
<Description><![CDATA[
Draw the contents of the background div section (this is purely decorative)
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawQuickLinks">
<Description><![CDATA[
Draw the contents of the quick links section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawBasicHelp">
<Description><![CDATA[
Draw the contents of the basic section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawFooterGroup">
<Description><![CDATA[
Draw the contents of the footer group section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.chui.HomePage">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63048,58484.834602</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZMdemo.chui.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>HomePage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description>
List of JSON providers created for this page.
Used by contentProvider.</Description>
<Default>data,layout</Default>
</Parameter>

<Parameter name="TEMPLATECLASS">
<Description>
Starting template class for this page
Used by contentProvider.
This is overriden by application settings, of provided.</Description>
<Default>ZMdemo.chui.baseTemplate</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
Comma-separated list of additional CSS3 include files for the page.
If this is defined *and* this page is using CSS3, then the CSSINCLUDES parameter is ignored.
If this is not defined *and* this page is using CSS3, then the CSSINCLUDES parameter is used.</Description>
<Type>STRING</Type>
<Default>chui-ios-3.5.2.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Comma-separated list of additional JS include files for the page.</Description>
<Type>STRING</Type>
<Default>jquery-2.0.3.min.js,chui-3.5.2.js</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>

<XData name="pageContents">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen"
xmlns:mojo="http://www.intersystems.com/zen/mojo"
layout="none">

<mojo:documentView id="mainView"
developerMode="false" 
initialDocumentKey="home"
initialLayoutKey="home"
ongetlayout = "return zenPage.getContent('layout',key,criteria);"
ongetdata = "return zenPage.getContent('data',key,criteria);"
>
<mojo:chui-3.5.2-PageManager onPageShow ="console.log('showing page: ' + layoutkey);"
>
<mojo:chui-3.5.2-Helper/>
<mojo:HTML5Helper/>
<mojo:mojoDefaultHelper/>
</mojo:chui-3.5.2-PageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="%OnDrawHTMLMeta">
<Description><![CDATA[
This callback is called at the start of the HTML HEAD section of the page (just after the title).<br/>
It allows a page to write out meta tags, if desired.
(default implementation is a simple expression).]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Make it so that, when the user has selected IE compatibility mode, we ignore it and use the most recent IE version available
	//Write "<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />"
	// turn off unless this is actually mobile
	Write "<meta name=""viewport"" content=""width=device-width, initial-scale=1.0,maximum-scale=1, user-scalable=no""/>"
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.chui.baseTemplate">
<Description>
This template is not finished yet</Description>
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63048,58554.738224</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/mojo/demo/chui</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Server-side method to provide content to JSON providers.<br/>
<var>pProviderName</var> is the name of the provider.<br/>
<var>pKey</var> is an app-defined key that is used to indicate which content is to be served.<br/>
<var>pCriteria</var>is an object containing search criteria. This is used for searching.<br/>
<var>pParms</var> is an array of additional parameters from the JSON provider. (not current used).<br/>
<var>pObject</var> is the object that will be served to the client in JSON format.<br/>
<var>pLoad</var> is true is this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pProviderName:%String,pKey:%String,&pParms,*pObject:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pObject = ##class(%ZEN.proxyObject).%New()
	
	if (pKey = "home") {
		set pObject.sectionHeader = "It starts here..."
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="getData">
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var data = {};
	switch (key) {
		case 'home':
			data.sectionHeader = 'Select a fruit';
			break;
		case 'details':
			data.sectionHeader = criteria.product;
			break;
	}
	return data;
]]></Implementation>
</Method>

<Method name="onGetContent">
<Description><![CDATA[
Client-side content provider method.
<var>providerName</var> is the name of the json provider.
<var>key</var> is the key value associated with the request.
<var>criteria</var> is the search criteria associated with the request.]]></Description>
<FormalSpec>providerName,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//console.log(providerName + ' - ' + key + ' - ' + criteria);
	switch (providerName)
	{
		case 'layout':
			return this.getLayout(key,criteria);
		case 'data':
			// comment this out, if you want get data from the server
			return this.getData(key,criteria);
	}
	
	// returning null -> fetch data from server
	return null;
]]></Implementation>
</Method>

<Method name="getLayout">
<Description>
Creates the layout object for the page</Description>
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var content = {};
    
    switch(key) {
	    case 'home' :
	     	content = {
		     	children:[
		     		{type:'$navbar',title:'=[sectionHeader]',children:[
		     		]},
		     		{type:'$article',children:[
		     			{type:'$section',children:[
			     			{type:'$list',caption:'Navigation',children:[
			     				{type:'$listitem',showNavigation:true,key:'goto',value:'Apples',children:[
			     					{type:'$h3',caption:'Apples'}
			     				]},
			     				{type:'$listitem',caption:'Oranges',showNavigation:true,key:'goto',value:'Oranges'},
			     				{type:'$listitem',caption:'Bananas',showNavigation:true,key:'goto',value:'Bananas'},
			     			]}
			     		]}
		     		]}
		     	]
		     };
	     	break;
	     case 'details':
	     	content = {
		     	children:[
		     		{type:'$navbar',title:'=[sectionHeader]',children:[
		     			{type:'$button',caption:'Back',key:'back'}
		     		]},
		     		{type:'$article',children:[
		     			{type:'$section',children:[
			     		]}
		     		]}
		     	]
		     };
	     	break;
    } 
           				
    return content;
]]></Implementation>
</Method>

<Method name="onselect">
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('select '+key + ' | ' + value);
	var mainView = zen(docViewId);
	switch(key) {
		case 'goto':
			mainView.pushDocument('details',{product:value},'details',{product:value});
			break;
		case 'back':
			mainView.popDocument();
			break;
	}
]]></Implementation>
</Method>

<Method name="onchange">
<FormalSpec>key,value,final,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('change ' + key + ' to ' + value + ' | ' + final);
	var view = zen(docViewId);
	switch(key) {
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.dojo.Application">
<Description>
dojo application</Description>
<Super>%ZEN.Mojo.baseApplication</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63126,57604.610957</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Dojo Demo</Default>
</Parameter>

<Method name="%GetAppSettings">
<Description>
Return an object containing the various configured settings for the portal.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	
	Set tInfo = ##class(%ZEN.proxyObject).%New()

	// initial templateClass
	Set tInfo.templateClass = ""

	// names
	Set tInfo.nameApplication = "Dojo Demo Application"

	// overrides

	Quit tInfo
]]></Implementation>
</Method>

<Method name="ZMojoDrawBackgroundDiv">
<Description><![CDATA[
Draw the contents of the background div section (this is purely decorative)
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawQuickLinks">
<Description><![CDATA[
Draw the contents of the quick links section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawBasicHelp">
<Description><![CDATA[
Draw the contents of the basic section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawFooterGroup">
<Description><![CDATA[
Draw the contents of the footer group section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.dojo.HomePage">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63144,39027.046854</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZMdemo.dojo.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>DojoHomePage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description>
List of JSON providers created for this page.
Used by contentProvider.</Description>
<Default>data,layout</Default>
</Parameter>

<Parameter name="TEMPLATECLASS">
<Description>
Starting template class for this page
Used by contentProvider.
This is overriden by application settings, of provided.</Description>
<Default>ZMdemo.dojo.baseTemplate</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Comma-separated list of additional JS include files for the page.</Description>
<Type>STRING</Type>
<Default>dojo-release-1-9-1/dojo/dojo.js,dojo-release-1-9-1/app/dojo_2DChart.js,dojo-release-1-9-1/app/dojo_191Dijit.js</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
Comma-separated list of additional CSS include files for the page.
If this page is using CSS3 then the CSS3INCLUDES parameter is used (if defined).</Description>
<Type>STRING</Type>
<Default>dojo-release-1-9-1/dijit/themes/claro/claro.css,dojo-release-1-9-1/gridx/resources/claro/Gridx.css</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
.dvDocument {
	width: 100%;
	height: 100%;
}
.dvEnclosingClass iframe {
	position:relative;
}
.dvEnclosingClass {
	border: none;
}
#zMojoContentGroup {
	border:none;
}
.gridx {
	width: 99%;
	height: 300px;
}
.labelAlign50px {
	width: 50px;
	float: left;
    text-align: right;
    margin-right: 5px;
}
.labelAlign75px {
	width: 75px;
	float: left;
    text-align: right;
    margin-right: 5px;
}
.labelAlign140px {
	width: 140px;
	float: left;
	position: relative;
    text-align: right;
    margin-right: 5px;
}
.labelAlign180px {
	width: 180px;
	float: left;
	position: relative;
    text-align: right;
    margin-right: 5px;
}
/*
.gridx {
	width: 99%;
	height: 95px;
}
*/
</style>
]]></Data>
</XData>

<XData name="pageContents">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane
xmlns="http://www.intersystems.com/zen"
xmlns:mojo="http://www.intersystems.com/zen/mojo"
layout="none"
>

<mojo:documentView
id="mainView"
ongetlayout="return zenPage.getContent('layout',key,criteria);"
ongetdata="return zenPage.getContent('data',key,criteria);"
initialDocumentKey="home"
initialLayoutKey="home"
maxPanels="10"
developerMode="false"
>
<mojo:dojo-1.9.1-PageManager>
<mojo:dojo-1.9.1-DijitHelper/>
<mojo:dojo-1.9.1-2DChartHelper/>
<mojo:dojoGridX-1.3.0-Helper/>
<mojo:HTML5Helper/>
<mojo:mojoDefaultHelper/>
</mojo:dojo-1.9.1-PageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="adjustContentSize">
<Description>
Implementation for this page. This method adjusts the size of components 
within the content area based on the current width and height of the screen. 
In this case there is only one component.</Description>
<FormalSpec>load,width,height</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	
	var mainView = zen('mainView');
	if (mainView) {
		
		mainView.setSize(width, height);
		var mainDiv = mainView.getEnclosingDiv();
		mainDiv.style.top =  '0px';
		mainDiv.style.left = '0px';
	}
]]></Implementation>
</Method>

<Method name="onlayoutHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.invokeSuper('onlayoutHandler',arguments);
	
	var topContainer = zen('mainView').getItemByKey('layoutContainer-1');
	
	if (topContainer) {
		topContainer.$dojoItem.resize();
	}
]]></Implementation>
</Method>

<Method name="getMaxContentWidth">
<Description>
In non-embed mode, maximum width of page content area.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return 3000;
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.dojo.baseTemplate">
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63144,39380.617408</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/mojo/demo/dojo</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="onGetContent">
<Description><![CDATA[
Client-side content provider method.
<var>which</var> is the name of the content to return.
<var>key</var> is the key value associated with the request.
<var>criteria</var> is the search criteria associated with the request.]]></Description>
<FormalSpec>which,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	switch (which) {
		case 'layout':
			return this.getLayout(key,criteria);
		case 'data':
			return this.getData(key,criteria);
	}
	
	return null;
]]></Implementation>
</Method>

<Method name="getData">
<FormalSpec>key,layout</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var content = {};
	
	switch (key) {
		case 'home':
			content = {
				main_menu:[
					{id:'all',name:'All',openTab:false},
					
					
					{id:'generic',name:'Generic Elements',parent:'all',openTab:false},
					{id:'generic-colorpalette',name:'ColorPalette',parent:'generic'},
					{id:'generic-dialog',name:'Dialog',parent:'generic'},
					{id:'generic-editor',name:'Editor',parent:'generic'},
					{id:'generic-fieldset',name:'Fieldset',parent:'generic'},
					{id:'generic-inlineeditbox',name:'InlineEditBox',parent:'generic'},
					{id:'generic-menu',name:'Menu (Context Menu)',parent:'generic'},
					{id:'generic-menubar',name:'MenuBar',parent:'generic'},
					{id:'generic-progressbar',name:'ProgressBar',parent:'generic'},
					{id:'generic-titlepane',name:'TitlePane',parent:'generic'},
					{id:'generic-toolbar',name:'Toolbar',parent:'generic'},
					{id:'generic-tooltip',name:'Tooltip',parent:'generic'},
					{id:'generic-tree',name:'Tree',parent:'generic'},
					
					{id:'form',name:'Form Elements',parent:'all',openTab:false},
					{id:'form-buttons',name:'Buttons',parent:'form'},
					{id:'form-checkbox',name:'CheckBox',parent:'form'},
					{id:'form-combobox',name:'ComboBox',parent:'form'},
					{id:'form-combobutton',name:'ComboButton',parent:'form'},
					{id:'form-currencytextbox',name:'CurrencyTextBox',parent:'form'},
					{id:'form-datetextbox',name:'DateTextBox',parent:'form'},
					{id:'form-dropdownbutton',name:'DropDownButton',parent:'form'},
					{id:'form-filteringselect',name:'FilteringSelect',parent:'form'},
					{id:'form-horizontalslider',name:'HorizontalSlider',parent:'form'},
					{id:'form-multiselect',name:'MultiSelect',parent:'form'},
					{id:'form-numberspinner',name:'NumberSpinner',parent:'form'},
					{id:'form-numbertextbox',name:'NumberTextBox',parent:'form'},
					{id:'form-radiobutton',name:'RadioButton',parent:'form'},
					{id:'form-select',name:'Select',parent:'form'},
					{id:'form-simpletextarea',name:'SimpleTextArea',parent:'form'},
					{id:'form-textarea',name:'TextArea',parent:'form'},
					{id:'form-timetextbox',name:'TimeTextBox',parent:'form'},
					{id:'form-togglebutton',name:'ToggleButton',parent:'form'},
					{id:'form-validationtextbox',name:'ValidationTextBox',parent:'form'},
					{id:'form-verticalslider',name:'VerticalSlider',parent:'form'},
					
					{id:'layout',name:'Layout Elements',parent:'all',openTab:false},
					{id:'layout-accordionContainer',name:'Accordion',parent:'layout'},
					{id:'layout-borderContainer-splitter',name:'Border Container',parent:'layout'},
					{id:'layout-splitContainer',name:'Split Container',parent:'layout'},
					{id:'layout-splitContainer-2',name:'Multiple Split Container',parent:'layout'},
					{id:'layout-stackContainer',name:'Stack Container',parent:'layout'},
					{id:'layout-tabContainer',name:'Tab Container',parent:'layout'},
					{id:'layout-iframe',name:'ContentPane with iFrame',parent:'layout'},
					
					{id:'grid',name:'Grid Elements',parent:'all',openTab:false},
					{id:'grid-basic-gridx',name:'Basic Gridx',parent:'grid'},
					{id:'grid-modules-gridx',name:'Gridx with loaded modules',parent:'grid'},
					{id:'grid-filter-gridx',name:'Gridx with filters',parent:'grid'},
					{id:'grid-dnd-gridx',name:'Gridx with Column Resort',parent:'grid'},
					{id:'grid-expand-gridx',name:'Gridx with expand',parent:'grid'},
					
					{id:'chart',name:'Charts',parent:'all',openTab:false},
					{id:'chart-areas',name:'Areas',parent:'chart'},
					{id:'chart-clustered-bars',name:'Clustered Bars',parent:'chart'},
					{id:'chart-bars',name:'Bars',parent:'chart'},
					{id:'chart-bubbles',name:'Bubbles',parent:'chart'},
					{id:'chart-bubbles-grid',name:'Bubbles (+Grid Plot)',parent:'chart'},
					{id:'chart-candlesticks',name:'Candlesticks',parent:'chart'},
					{id:'chart-columns',name:'Column',parent:'chart'},
					{id:'chart-columns-animate',name:'Column with Animate',parent:'chart'},
					{id:'chart-columns-highlight',name:'Column with Highlight',parent:'chart'},
					{id:'chart-columns-shadow',name:'Column with Shadow',parent:'chart'},
					{id:'chart-columns-shake',name:'Column with Shake',parent:'chart'},
					{id:'chart-columns-zoom',name:'Column with Mouse Zoom',parent:'chart'},
					{id:'chart-columns-touch-zoom',name:'Column with Touch Zoom (Broken?)',parent:'chart'},
					{id:'chart-lines',name:'Lines',parent:'chart'},
					{id:'chart-lines-magnify',name:'Lines with Magnify',parent:'chart'},
					{id:'chart-pie',name:'Pie Chart',parent:'chart'},
					{id:'chart-pie-title',name:'Pie Chart with Title',parent:'chart'},
					{id:'chart-pie-tooltip',name:'Pie Chart with Tooltip',parent:'chart'},
					{id:'chart-pie-tooltip-custom',name:'Pie Chart with Tooltip (custom)',parent:'chart'},
					{id:'chart-pie-move-slice',name:'Pie Chart with MoveSlice',parent:'chart'},
					{id:'chart-scatter',name:'Scatter',parent:'chart'},
					{id:'chart-spider',name:'Spider',parent:'chart'},
					{id:'chart-spider-circle',name:'Spider (Circle)',parent:'chart'},
					{id:'chart-stacked-areas',name:'Stacked Areas',parent:'chart'},
					{id:'chart-stacked-areas-legend',name:'Stacked Areas with Legend',parent:'chart'},
					{id:'chart-stacked-areas-selectable-legend',name:'Stacked Areas with Selectable Legend',parent:'chart'},
					{id:'chart-stacked-lines',name:'Stacked Lines',parent:'chart'},
				]
			};
			break;
		case 'generic-tree':
			content = {
				store_1_data: [
					{ id: 'world', name:'The earth', type:'planet', population: '6 billion'},
           			{ id: 'AF', name:'Africa', type:'continent', population:'900 million', area: '30,221,532 sq km', timezone: '-1 UTC to +4 UTC', parent: 'world'},
              	  	{ id: 'EG', name:'Egypt', type:'country', parent: 'AF' },
                	{ id: 'KE', name:'Kenya', type:'country', parent: 'AF' },
                    { id: 'Nairobi', name:'Nairobi', type:'city', parent: 'KE' },
                    { id: 'Mombasa', name:'Mombasa', type:'city', parent: 'KE' },
               	 	{ id: 'SD', name:'Sudan', type:'country', parent: 'AF' },
                    { id: 'Khartoum', name:'Khartoum', type:'city', parent: 'SD' },
            		{ id: 'AS', name:'Asia', type:'continent', parent: 'world' },
                	{ id: 'CN', name:'China', type:'country', parent: 'AS' },
                	{ id: 'IN', name:'India', type:'country', parent: 'AS' },
                	{ id: 'RU', name:'Russia', type:'country', parent: 'AS' },
                	{ id: 'MN', name:'Mongolia', type:'country', parent: 'AS' },
            		{ id: 'OC', name:'Oceania', type:'continent', population:'21 million', parent: 'world'},
            		{ id: 'EU', name:'Europe', type:'continent', parent: 'world' },
	                { id: 'DE', name:'Germany', type:'country', parent: 'EU' },
	                { id: 'FR', name:'France', type:'country', parent: 'EU' },
	                { id: 'ES', name:'Spain', type:'country', parent: 'EU' },
	                { id: 'IT', name:'Italy', type:'country', parent: 'EU' },
		            { id: 'NA', name:'North America', type:'continent', parent: 'world' },
		            { id: 'SA', name:'South America', type:'continent', parent: 'world' }
        		]
			};
			break;
		case 'grid-basic-gridx':
		case 'grid-modules-gridx':
		case 'grid-filter-gridx':
		case 'grid-dnd-gridx':
		case 'grid-expand-gridx':
		case 'layout-splitContainer-2':
			content = {
				basic_grid_1: [
					{id:1, title: 'Hey There', artist: 'Bette Midler'},
					{id:2, title: 'Hey There 2', artist: 'Bette Midler 2'},
					{id:3, title: 'Hey There 3', artist: 'Bette Midler 3'},
				],
				grid_1_columns: [
					{field:'id',name:'Identity'},
					{field:'title',name:'Title'},
					{field:'artist',name:'Artist'},
				]
			};
			break;
		
		case 'chart-candlesticks' :
			content = {
				chart_data: [
					{ open: 20, close: 16, high: 22, low: 8 },
					{ open: 16, close: 22, high: 26, low: 6, mid: 18 },
					{ open: 22, close: 18, high: 22, low: 11, mid: 21 },
					{ open: 18, close: 29, high: 32, low: 14, mid: 27 },
					{ open: 29, close: 24, high: 29, low: 13, mid: 27 },
					{ open: 24, close: 8, high: 24, low: 5 },
					{ open: 8, close: 16, high: 22, low: 2 },
					{ open: 16, close: 12, high: 19, low: 7 },
					{ open: 12, close: 20, high: 22, low: 8 },
					{ open: 20, close: 16, high: 22, low: 8 },
					{ open: 16, close: 22, high: 26, low: 6, mid: 18 },
					{ open: 22, close: 18, high: 22, low: 11, mid: 21 },
					{ open: 18, close: 29, high: 32, low: 14, mid: 27 },
					{ open: 29, close: 24, high: 29, low: 13, mid: 27 },
					{ open: 24, close: 8, high: 24, low: 5 },
					{ open: 8, close: 16, high: 22, low: 2 },
					{ open: 16, close: 12, high: 19, low: 7 },
					{ open: 12, close: 20, high: 22, low: 8 },
					{ open: 20, close: 16, high: 22, low: 8 },
					{ open: 16, close: 22, high: 26, low: 6 },
					{ open: 22, close: 18, high: 22, low: 11 },
					{ open: 18, close: 29, high: 32, low: 14 },
					{ open: 29, close: 24, high: 29, low: 13 },
					{ open: 24, close: 8, high: 24, low: 5 },
					{ open: 8, close: 16, high: 22, low: 2 },
					{ open: 16, close: 12, high: 19, low: 7 },
					{ open: 12, close: 20, high: 22, low: 8 },
					{ open: 20, close: 16, high: 22, low: 8 }
				]
			};
			break;
		
		case 'chart-columns':
		case 'chart-columns-animate':
		case 'chart-columns-highlight':
		case 'chart-columns-shadow':
		case 'chart-columns-shake':
		case 'chart-columns-zoom':
		case 'chart-columns-touch-zoom':
			content = {
				chart_data: [10000,9200,11811,12000,7662,13887,14200,12222,12000,10009,11288,12099]
			};
			break;
		
		case 'chart-bars':
			content = {
				chart_data: [10000,9200,11811,12000,7662,13887,14200,12222,12000,10009,11288,12099]
			};
			break;
			
		case 'chart-lines':
		case 'chart-lines-magnify':
			content = {
				chart_data: [
					{y:10000,text:"First"},
					{y:9200,text:"Second"},
					{y:11811,text:"Third"},
					{y:12000,text:"Fourth"},
					{y:7662,text:"Fifth"},
					{y:13887,text:"Sixth"},
					{y:14200,text:"Seventh"},
					{y:12222,text:"Eighth"},
					{y:12000,text:"Ninth"},
					{y:10009,text:"Tenth"},
					{y:11288,text:"Eleventh"},
					{y:12099,text:"Twelfth"}]
			};
			break;
				
		case 'chart-pie':
		case 'chart-pie-title':
		case 'chart-pie-tooltip':
		case 'chart-pie-tooltip-custom':
		case 'chart-pie-move-slice':
			content = {
				chart_data: [
				    { x: 1, y: 19021, text:'One' },
				    { x: 1, y: 12837, text:'Two' },
				    { x: 1, y: 12378, text:'Three' },
				    { x: 1, y: 21882, text:'Four' },
				    { x: 1, y: 17654, text:'Five' },
				    { x: 1, y: 15833, text:'Six' },
				    { x: 1, y: 16122, text:'Seven' }
				]
			};
			break;
		
		case 'chart-bubbles':
		case 'chart-bubbles-grid':
			content = {
				chart_data: [
					{x:10,y:10,size:3},
					{x:1,y:5,size:2},
					{x:7,y:5,size:5},
					{x:3,y:8,size:3},
				],
			};
			break;
		case 'chart-scatter':
			content = {
				chart_data: [10000,9200,11811,12000,7662,13887,14200,12222,12000,10009,11288,12099]
			};
			break;
		
		case 'chart-spider':
		case 'chart-spider-circle':
			
			content = {
				chart_data_china : {data: {"GDP": 2, "area": 6, "population": 2000, "inflation": 15, "growth": 12}},
				chart_data_usa : {data: {"GDP": 3, "area": 20, "population": 1500, "inflation": 10, "growth": 3}},
				chart_data_canada : {data: {"GDP": 1, "area": 18, "population": 300, "inflation": 3, "growth": 15}}
			};
		
			break;
		
		case 'chart-clustered-bars':
		case 'chart-stacked-areas':
		case 'chart-stacked-areas-legend':
		case 'chart-stacked-areas-selectable-legend':
		case 'chart-stacked-lines':
		
			content = {
				chart_data_2010: [10000,9200,11811,12000,7662,13887,14200,12222,12000,10009,11288,12099],
				chart_data_2009: [3000,12000,17733,9876,12783,12899,13888,13277,14299,12345,12345,15763]
			};
			break;
	}
	
	return content;
]]></Implementation>
</Method>

<Method name="getLayout">
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var content = {};
	
	switch (key) {
		case 'home':
		
			content = {
				children: [
					{type:'$StoreMemory',key:'menu-store',data:'=[main_menu]',parentAttribute:'parent'},
					{type:'$TreeObjectStoreModel',key:'model-menu',store:'menu-store',query:{id:'all'},mayHaveChildren:function(item){return !zenGet(item.openTab,true);}},
					{type:'$LayoutContainer',key:'layoutContainer-1',design:'headline',style:'width:100%;height:100%;',children:[
						{type:'$ContentPane',region:'top',title:'Buttons',key:'contentPane-top',children:[
							{type:'$span',$content:'Dojo Demo'},
						]},
						{type:'$BorderContainer',key:'layoutContainer-2',region:'center',design:'headline',liveSplitters:false,style:'width:100%;height:100%;',children:[
							{type:'$AccordionContainer',region:'leading',splitter:true,style:'width:400px;',children:[
								{type:'$ContentPane',title:'Demo By Type',key:'contentPane-1',children:[
									{type:'$Tree',key:'tree-menu',model:'model-menu',showRoot:false,persist:true},
								]}
								
							]},
							{type:'$ContentPane',region:'center',key:'contentPane-center',children:[
								//{type:'$span',$content:'This is the main content pane'},
								{type:'$TabContainer',key:'tabContainer-1',region:'center',style:'width:100%;height:100%;',children:[
								]}
							]},
						]}
					]}
				]
			};
			break;
		
		case 'chart-areas':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-areas',theme:'dojox/charting/themes/Shrooms',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Areas',options:{tension:'X'}},
							{type:'$Series',title:'Series A',data:[1, 2, 0.5, 1.5, 1, 2.8, 0.4]},
							{type:'$Series',title:'Series B',data:[2.6, 1.8, 2, 1, 1.4, 0.7, 2]},
							{type:'$Series',title:'Series C',data:[6.3, 1.8, 3, 0.5, 4.4, 2.7, 2]},
						]}
					]},
				]
			};
			 
			break;
		
		case 'chart-bars':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-lines',theme:'dojox/charting/themes/Adobebricks',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Bars',options:{gap:5}},
							{type:'$Series',title:'SalesThisDecade',data:'=[chart_data]'},
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-clustered-bars':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-lines',theme:'dojox/charting/themes/Adobebricks',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/ClusteredBars',options:{gap:5}},
							{type:'$Series',title:'Monthly Sales - 2010',data:'=[chart_data_2010]'},
							{type:'$Series',title:'Monthly Sales - 2009',data:'=[chart_data_2009]'},
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-bubbles':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-lines',theme:'dojox/charting/themes/MiamiNice',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Bubble',options:{markers:true}},
							{type:'$Series',title:'SalesThisDecade',data:'=[chart_data]'},
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-bubbles-grid':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-lines',theme:'dojox/charting/themes/MiamiNice',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Bubble',options:{markers:true}},
							{type:'$Series',title:'SalesThisDecade',data:'=[chart_data]'},
							{type:'$Axis',name:'x',options:{natural:true,stroke:'grey',majorTick:{stroke:'black',length:4},minorTick:{stroke:'black',length:2},min:-10,max:20}},
							{type:'$Axis',name:'y',options:{vertical:true,stroke:'grey',majorTick:{stroke:'black',length:4},minorTick:{stroke:'black',length:2},min:-10,max:20}},
							{type:'$Plot',plotType:'dojox/charting/plot2d/Grid',name:'grid',options:{hMajorLines:true,hMinorLines:false,vMajorLines:true,vMinorLines:false,majorHLine:{color:'green',width:3},majorVLine:{color:'red',width:3}}},
						]}
					]},
				]
			};
			 
			break;
		
		case 'chart-candlesticks':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-candlesticks',theme:'dojox/charting/themes/Adobebricks',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Candlesticks',options:{gap:1}},
							{type:'$Series',title:'Series A',data:'=[chart_data]'},
						]}
					]},
				]
			};
			 
			break;
		
		case 'chart-columns':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-columns',theme:'dojox/charting/themes/MiamiNice',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Columns',options:{gap:5}},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major"}}
						]}
					]},
				]
			};
			 
			break;
		
		case 'chart-columns-shake':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-columns',theme:'dojox/charting/themes/MiamiNice',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Columns',options:{gap:5,shake:true}},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major"}}
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-columns-animate':
			
			// relevant part:
			// animate:{ duration: 2000, easing: "elasticInOut" } in $Plot
			// easing has to be the function as string you want to call in dojo/fx/easing
			// rest gets passed through as is
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-columns',theme:'dojox/charting/themes/MiamiNice',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Columns',options:{gap:5,animate:{ duration: 2000, easing: "elasticInOut" }}},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major"}}
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-columns-highlight':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-columns',theme:'dojox/charting/themes/MiamiNice',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Columns',options:{gap:5,highlight:true}},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major"}}
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-columns-shadow':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-columns',theme:'dojox/charting/themes/MiamiNice',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Columns',options:{gap:5,shadow:{dx:3,dy:-1}}},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major"}}
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-columns-zoom':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-columns',theme:'dojox/charting/themes/MiamiNice',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Columns',options:{gap:5,mousezoomandpan:true}},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major"}}
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-columns-touch-zoom':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-columns',theme:'dojox/charting/themes/MiamiNice',children:[
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major"}},
							{type:'$Plot',plotType:'dojox/charting/plot2d/Columns',options:{gap:5,touchzoomandpan:true}},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-lines':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-lines',theme:'dojox/charting/themes/Tom',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Lines',options:{tension:'X',markers:true}},
							{type:'$Series',title:'SalesThisDecade',data:'=[chart_data]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{min:5000,max:15000,vertical:true,fixLower:"major",fixUpper:"major"}}
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-lines-magnify':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-lines',theme:'dojox/charting/themes/Tom',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Lines',options:{tension:'X',magnify:true,markers:true}},
							{type:'$Series',title:'SalesThisDecade',data:'=[chart_data]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{min:5000,max:15000,vertical:true,fixLower:"major",fixUpper:"major"}}
						]}
					]},
				]
			};
			 
			break;
		
		case 'chart-pie':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-pie',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Pie'},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-pie-title':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{
							type:'$Chart',key:'chart-pie',title:{
								title:'Monthly Sales',
								titlePos:'bottom',
								titleGap:25,
								titleFont: 'normal normal normal 15pt Arial',
								titleFontColor: 'orange'},
							children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Pie'},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-pie-tooltip':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-pie',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Pie',options:{tooltip:true}},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
						]}
					]},
				]
			};
			 
			break;
		
		case 'chart-pie-tooltip-custom':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-pie',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Pie',options:{tooltip:true,tooltipOptions:{text:function(o){return "Slice Value: " + o.y}}}},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
						]}
					]},
				]
			};
			 
			break;
			
		case 'chart-pie-move-slice':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-pie',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Pie',options:{moveSlice:true}},
							{type:'$Series',title:'Monthly Sales',data:'=[chart_data]'},
						]}
					]},
				]
			};
			
			break;
		
		case 'chart-scatter':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-lines',theme:'dojox/charting/themes/MiamiNice',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Scatter',options:{markers:true}},
							{type:'$Series',title:'SalesThisDecade',data:'=[chart_data]'},
						]}
					]},
				]
			};
			 
			break;
		
		case 'chart-spider':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-spider',theme:'dojox/charting/themes/Tom',legend:'chart-legend',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Spider'},
							{type:'$Series',title:'China',data:'=[chart_data_china]',options:{fill:'blue'}},
							{type:'$Series',title:'USA',data:'=[chart_data_usa]',options:{fill:'green'}},
							{type:'$Series',title:'Canada',data:'=[chart_data_canada]',options:{fill:'purple'}},
						]},
						{type:'$ChartLegend',key:'chart-legend'},
					]},
				]
			};
			 
			break;
			
		case 'chart-spider-circle':
		
			/// $Plot element defines options:{spiderType:'circle'}
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-spider',theme:'dojox/charting/themes/Tom',legend:'chart-legend',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/Spider',options:{spiderType:'circle'}},
							{type:'$Series',title:'China',data:'=[chart_data_china]',options:{fill:'blue'}},
							{type:'$Series',title:'USA',data:'=[chart_data_usa]',options:{fill:'green'}},
							{type:'$Series',title:'Canada',data:'=[chart_data_canada]',options:{fill:'purple'}},
						]},
						{type:'$ChartLegend',key:'chart-legend'},
					]},
				]
			};
			 
			break;
		
		case 'chart-stacked-areas':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-stacked-areas',theme:'dojox/charting/themes/Dollar',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/StackedAreas',options:{markers:true}},
							{type:'$Series',title:'Monthly Sales - 2010',data:'=[chart_data_2010]'},
							{type:'$Series',title:'Monthly Sales - 2009',data:'=[chart_data_2009]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major",min:5000,max:30000}}
						]},
					]},
				]
			};
			 
			break;
			
		case 'chart-stacked-areas-legend':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-stacked-areas',theme:'dojox/charting/themes/Dollar',legend:'chart-legend',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/StackedAreas',options:{markers:true}},
							{type:'$Series',title:'Monthly Sales - 2010',data:'=[chart_data_2010]'},
							{type:'$Series',title:'Monthly Sales - 2009',data:'=[chart_data_2009]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major",min:5000,max:30000}}
						]},
						{type:'$ChartLegend',key:'chart-legend'},
					]},
				]
			};
			 
			break;
			
		case 'chart-stacked-areas-selectable-legend':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-stacked-areas',theme:'dojox/charting/themes/Dollar',legend:'chart-legend',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/StackedAreas',options:{markers:true}},
							{type:'$Series',title:'Monthly Sales - 2010',data:'=[chart_data_2010]'},
							{type:'$Series',title:'Monthly Sales - 2009',data:'=[chart_data_2009]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major",min:5000,max:30000}}
						]},
						{type:'$ChartLegend',selectable:true,key:'chart-legend'},
					]},
				]
			};
			 
			break;
			
		case 'chart-stacked-lines':
			
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Chart',key:'chart-stacked-areas',theme:'dojox/charting/themes/Dollar',children:[
							{type:'$Plot',plotType:'dojox/charting/plot2d/StackedLines',options:{markers:true}},
							{type:'$Series',title:'Monthly Sales - 2010',data:'=[chart_data_2010]'},
							{type:'$Series',title:'Monthly Sales - 2009',data:'=[chart_data_2009]'},
							{type:'$Axis',name:'x'},
							{type:'$Axis',name:'y',options:{vertical:true,fixLower:"major",fixUpper:"major",min:5000,max:30000}}
						]},
					]},
				]
			};
			 
			break;
		
		case 'grid-basic-gridx':
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$StoreMemory',key:'store-1',data:'=[basic_grid_1]'},
						{type:'$Gridx',key:'gridx-basic',style:'width: 400px; height: 300px;',store:'store-1',columns:'=[grid_1_columns]'},
					]},
			]};
		
			break;
			
		case 'grid-modules-gridx':
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$span',$content:'This grid can be sorted and columns can be resized.'},
						{type:'$StoreMemory',key:'store-1',data:'=[basic_grid_1]'},
						{type:'$Gridx',key:'gridx-modules',style:'width: 400px; height: 300px;',store:'store-1',columns:'=[grid_1_columns]',modules:[{moduleClass:"gridx/modules/SingleSort"},{moduleClass:"gridx/modules/ColumnResizer"}]},
					]},
			]};
		
			break;
			
		case 'grid-filter-gridx':
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$span',$content:'This grid can be filtered by expression and in the bar.'},
						{type:'$StoreMemory',key:'store-1',data:'=[basic_grid_1]'},
						{type:'$Gridx',key:'gridx-modules',style:'width: 400px; height: 300px;',store:'store-1',columns:'=[grid_1_columns]',modules:[{moduleClass:"gridx/modules/Filter"},{moduleClass:"gridx/modules/filter/QuickFilter"},{moduleClass:"gridx/modules/filter/FilterBar"}]},
					]},
			]};
		
			break;
			
		case 'grid-dnd-gridx':
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$span',$content:'Columns can be reordered with Drag & Drop'},
						{type:'$StoreMemory',key:'store-1',data:'=[basic_grid_1]'},
						{type:'$Gridx',key:'gridx-modules',style:'width: 400px; height: 300px;',store:'store-1',columns:'=[grid_1_columns]',modules:[{moduleClass:"gridx/modules/dnd/_Dnd"},{moduleClass:"gridx/modules/dnd/Column"},{moduleClass:"gridx/modules/select/Column"},{moduleClass:"gridx/modules/dnd/Row"},{moduleClass:"gridx/modules/select/Row"},{moduleClass:"gridx/modules/move/Column"},{moduleClass:"gridx/modules/move/Row"}]},
					]},
			]};
		
			break;
		
		case 'grid-expand-gridx':
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',baseClass:'baseGrid',children:[
						{type:'$StoreMemory',key:'store-1',data:'=[basic_grid_1]'},
						{
							type:'$Gridx',key:'gridx-modules',style:'width: 400px; height: 150px;',
							store:'store-1',columns:'=[grid_1_columns]',
							modules:[
								{
									moduleClass:"gridx/modules/Pagination",
									initialPageSize:1
								},
								/*{
									moduleClass:"gridx/modules/pagination/PaginationBar",
									sizes:[1,5,10,20],
								},*/
							],
							barTop: [
						          /*[
						               {pluginClass: "gridx/support/Summary", colSpan: 2, style: 'text-align: center;'}
						          ],
						          [
						               "gridx/support/DropDownPager",
						               {pluginClass: "gridx/support/QuickFilter", style: 'text-align: right;'}
						          ] */    
						     ],
						},
					]},
			]};
		
			break;
		
		case 'generic-colorpalette' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$ColorPalette',key:'clrpalette-default'},
						{type:'$ColorPalette',key:'clrpalette-small',palette:'3x4'},
					]}
			]};
		
			break;
		
		case 'generic-dialog' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Dialog',key:'myDialog',title:'My first dialog',children:[
							{type:'$TextBox',key:'txt-name',label:'Name:',labelClass:'labelAlign50px'},
							{type:'$TextBox',key:'txt-hobby',label:'Hobby:',labelClass:'labelAlign50px'},
						]},
						{type:'$Button',key:'btn-open-dialog',label:'Open Dialog',value:'myDialog',title:'Open the dialog and cover the underlay'},
					]}
			]};
		
			break;
		
		case 'generic-editor' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Editor',key:'editor',value:'Test content'},
						{type:'$Editor',key:'editor-custom-toolbar',value:'Reordered Toolbar.',plugins:['cut','copy','paste','|','bold','italic','underline','strikethrough','subscript','superscript','|','indent','outdent','justifyLeft','justifyCenter','justifyRight']},
					]}
			]};
		
			break;
		
		case 'generic-fieldset' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Fieldset',key:'fieldset',title:'Fieldset',children:[
							{type:'$TextBox',key:'txt-name',label:'Name:',labelClass:'labelAlign50px'},
							{type:'$TextBox',key:'txt-hobby',label:'Hobby:',labelClass:'labelAlign50px'},
						]}
					]}
			]};
		
			break;
			
		case 'generic-inlineeditbox' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$InlineEditBox',key:'inlineeditbox-default',value:'Click me to edit my content!'},
						{type:'$InlineEditBox',key:'inlineeditbox-different-editor',value:'1234',editor:'dijit/form/NumberTextBox',title:'quantity',width:'70px'},
						{type:'$InlineEditBox',key:'inlineeditbox-richtext-editor',value:'lorem ipsum...<br/> No auto-save - you should see cancel and save buttons in edit mode.',editor:'dijit/Editor',renderAsHtml:true,autoSave:false},
					]}
			]};
		
			break;
		
		case 'generic-menu' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$span',$content:'Right click anywhere on this page to see a menu'},
						{type:'$Menu',key:'menu-default',contextMenuForWindow:true,style:'display:none;',children:[
							{type:'$MenuItem',label:'Cut',iconClass:'dijitEditorIcon dijitEditorIconCut',key:'menu-cut'},
							{type:'$MenuItem',label:'Copy',iconClass:'dijitEditorIcon dijitEditorIconCopy',key:'menu-copy'},
							{type:'$MenuItem',label:'Paste',iconClass:'dijitEditorIcon dijitEditorIconPaste',key:'menu-paste'},
							{type:'$MenuSeparator'},
							{type:'$PopupMenuItem',label:'Enabled Submenu',key:'submenu-1',children:[
								{type:'$Menu',key:'sub-menu-1',children:[
									{type:'$MenuItem',label:'Submenu Item One',key:'submenu-item-1'},
									{type:'$MenuItem',label:'Submenu Item Two',key:'submenu-item-2'},
								]}
							]},
							{type:'$PopupMenuItem',label:'Popup of something other than a menu',key:'submenu-2',children:[
								{type:'$ColorPalette',key:'color-palette-1'}
							]},
						]}
					]}
			]};
		
			break;
			
		case 'generic-menubar' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$MenuBar',key:'menubar-default',children:[
							{type:'$PopupMenuBarItem',label:'File',children:[
								{type:'$DropDownMenu',children:[
									{type:'$MenuItem',label:'File #1',key:'menu-file-1'},
									{type:'$MenuItem',label:'File #2',key:'menu-file-2'},
									{type:'$CheckedMenuItem',label:'File #1 opened',key:'menu-file-1 opened',checked:false},
									{type:'$CheckedMenuItem',label:'File #2 opened',key:'menu-file-2 opened',checked:true},
								]}
							]},
							{type:'$PopupMenuBarItem',label:'RadioMenuItems',children:[
								{type:'$DropDownMenu',children:[
									{type:'$RadioMenuItem',label:'red',key:'menu-color',checked:false,value:'red',group:'color'},
									{type:'$RadioMenuItem',label:'yellow',key:'menu-color',checked:true,value:'yellow',group:'color'},
									{type:'$RadioMenuItem',label:'green',key:'menu-color',checked:true,value:'green',group:'color'},
								]}
							]},
							{type:'$PopupMenuBarItem',label:'Edit',children:[
								{type:'$DropDownMenu',children:[
									{type:'$MenuItem',label:'Cut',iconClass:'dijitEditorIcon dijitEditorIconCut',key:'menu-cut'},
									{type:'$MenuItem',label:'Copy',iconClass:'dijitEditorIcon dijitEditorIconCopy',key:'menu-copy'},
									{type:'$MenuItem',label:'Paste',iconClass:'dijitEditorIcon dijitEditorIconPaste',key:'menu-paste'},
								]}
							]},
							{type:'$MenuBarItem',key:'menubar-save',label:'Save'},
							{type:'$PopupMenuBarItem',label:'Popup of something other than a menu',children:[
								{type:'$ColorPalette',key:'color-palette-1'}
							]},
						]}
					]}
			]};
		
			break;
		
		case 'generic-progressbar' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$ProgressBar',key:'progressbar-1',maximum:10,style:'width:300px;'},
						{type:'$Button',label:'Start something',key:'btn-start-progressbar-1'}
					]}
			]};
		
			break;
		
		case 'generic-titlepane' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$TitlePane',key:'title-pane',title:'Title Pane',children:[
							{type:'$div',cssClass:'left',children:[
								{type:'$TextBox',key:'txt-name',label:'Name:',labelClass:'labelAlign50px'},
								{type:'$TextBox',key:'txt-hobby',label:'Hobby:',labelClass:'labelAlign50px'},
							]},
							{type:'$div',cssClass:'right',children:[
								{type:'$img',src:'images/einstein.jpg'}
							]},
						]}
					]}
			]};
		
			break;
			
		case 'generic-toolbar' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Toolbar',key:'tb-default',children:[
							{type:'$Button',label:'Cut',iconClass:'dijitEditorIcon dijitEditorIconCut',key:'tb-cut',renderInline:true},
							{type:'$Button',label:'Copy',iconClass:'dijitEditorIcon dijitEditorIconCopy',key:'tb-copy',renderInline:true},
							{type:'$Button',label:'Paste',iconClass:'dijitEditorIcon dijitEditorIconPaste',key:'tb-paste',renderInline:true},
							{type:'$ToolbarSeparator'},
							{type:'$DropDownButton',key:'ddbtn-default',label:'Default DropDownButton',title:'Default Tooltip', value:'Test value',renderInline:true,children:[
								{type:'$TooltipDialog',key:'ttdlg-default',children:[
									{type:'$TextBox',key:'txt-name',label:'Name:',labelClass:'labelAlign50px'},
									{type:'$TextBox',key:'txt-hobby',label:'Hobby:',labelClass:'labelAlign50px'},
									{type:'$Button',key:'btn-save',label:'Save',title:'Default Tooltip', value:'Save',inputType:'submit'},
								]}
							]},
						]}
					]}
			]};
			
			break;
		
		case 'generic-tooltip' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Button',key:'btn-default-1',label:'Tooltip above'},
						{type:'$Button',key:'btn-default-2',label:'Tooltip below'},
						{type:'$Tooltip',label:'This is a tooltip.',connectId:'btn-default-1',position:['above']},
						{type:'$Tooltip',label:'This is a tooltip.',connectId:'btn-default-2',position:['below']},
					]}
			]};
		
			break;
			
		case 'generic-tree' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$StoreMemory',key:'store-1',data:'=[store_1_data]',parentAttribute:'parent'},
						{type:'$TreeObjectStoreModel',key:'tree-model',store:'store-1',query:{id:'world'}},
						{type:'$span',$content:'A tree with default settings'},
						{type:'$Tree',key:'tree-1',model:'tree-model'},
						{type:'$span',$content:'Same store, hidden root'},
						{type:'$Tree',key:'tree-2',model:'tree-model',showRoot:false}
					]}
			]};
		
			break;
		
		case 'form-buttons' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Button',key:'btn-default',label:'Default Button',title:'Default Tooltip',value:'Test value'},
						{type:'$Button',key:'btn-disabled',label:'Disabled Button',disabled:true,inputType:'reset'},
						{type:'$Button',key:'btn-icon',label:'Image',iconClass:'dijitEditorIcon dijitEditorIconCut',showLabel:true},
						{type:'$Button',key:'btn-icon-no-lbl',label:'Image',iconClass:'dijitEditorIcon dijitEditorIconCut',showLabel:false}
					]}
			]};
		
			break;
			
		case 'form-checkbox' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$CheckBox',key:'cbx-default',label:'Default CheckBox',labelClass:'labelAlign140px',title:'Default Tooltip',checked:true},
						{type:'$CheckBox',key:'cbx-disabled',label:'Disabled CheckBox',labelClass:'labelAlign140px',disabled:true},
						{type:'$CheckBox',key:'cbx-rdOnly',label:'Read Only Checkbox',labelClass:'labelAlign140px',checked:true,readOnly:true,showLabel:true},
					]}
			]};
		
			break;
			
		case 'form-combobox' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$DataList',key:'fruits',valueList:[{value:'Ap',text:'Apple'},{value:'Ba',text:'Bananas'},{value:'Bl',text:'Blueberries'},{value:'Or',text:'Oranges'}]},
						{type:'$ComboBox',key:'cbx-default',label:'Default ComboBox',labelClass:'labelAlign140px',title:'Default Tooltip',valueList:[{value:'AP',text:'Apples'},{value:'OR',text:'Oranges'},{value:'PE',text:'Pears'}]},
						{type:'$ComboBox',key:'cbx-selected',label:'One Item preselected',labelClass:'labelAlign140px',title:'Default Tooltip',value:'Florida',valueList:[{value:'NY',text:'New York'},{value:'FL',text:'Florida'},{value:'CL',text:'California'}]},
						{type:'$ComboBox',key:'cbx-store',label:'Default ComboBox',labelClass:'labelAlign140px',title:'Default Tooltip',store:'fruits',searchAttr:'name'}
					]}
			]};
		
			break;
			
		case 'form-combobutton' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$ComboButton',key:'cbtn-default',label:'Default ComboButton',title:'Default Tooltip',children:[
							{type:'$DropDownMenu',children:[
								{type:'$MenuItem',label:'Test Entry 1',key:'cbtn-default-item',value:'yeha'}
							]}
						]}
					]}
			]};
		
			break;
			
		case 'form-currencytextbox' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$CurrencyTextBox',key:'currencytxt-default',label:'Default CurrencyTextBox',labelClass:'labelAlign180px',title:'Default Tooltip'},
						{type:'$CurrencyTextBox',key:'currencytxt-us',label:'US CurrencyTextBox',labelClass:'labelAlign180px', value:'', required:true, constraints:{fractional:true}, currency:'USD', invalidMessage:'Invalid amount. Cents are required.'},
						{type:'$CurrencyTextBox',key:'currencytxt-eu',label:'EU CurrencyTextBox',labelClass:'labelAlign180px', value:'abc', lang:'de-de', currency:'EUR'}
					]}
			]};
		
			break;
			
		case 'form-datetextbox' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$DateTextBox',key:'datetxt-default',label:'Default DateTextBox',labelClass:'labelAlign180px',title:'Default Tooltip', value:'2005-12-30'},
						{type:'$DateTextBox',key:'datetxt-required',label:'required DateTextBox',labelClass:'labelAlign180px', value:'', required:true},
						{type:'$DateTextBox',key:'datetxt-constraints',label:'Constrained DateTextBox (2004)',labelClass:'labelAlign180px', value:'', constraints:{min:'2004-01-01',max:'2004-12-31'},invalidMessage:'Select a date in 2004!'}
					]}
			]};
		
			break;
			
		case 'form-dropdownbutton' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$DropDownButton',key:'ddbtn-default',label:'Default DropDownButton',title:'Default Tooltip', value:'Test value',children:[
							{type:'$TooltipDialog',key:'ttdlg-default',children:[
								{type:'$TextBox',key:'txt-name',label:'Name:',labelClass:'labelAlign75px'},
								{type:'$TextBox',key:'txt-hobby',label:'Hobby:',labelClass:'labelAlign75px'},
								{type:'$TextBox',key:'txt-password',label:'Password:',labelClass:'labelAlign75px',inputType:'password'},
								{type:'$Button',key:'btn-save',label:'Save',title:'Default Tooltip', value:'Save',inputType:'submit'},
							]}
						]},
					]}
			]};
		
			break;
			
		case 'form-filteringselect' :
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$DataList',key:'fruits',valueList:[{value:'Ap',text:'Apple'},{value:'Ba',text:'Bananas'},{value:'Bl',text:'Blueberries'},{value:'Or',text:'Oranges'}]},
						{type:'$FilteringSelect',key:'filteringselect-default',label:'Default FilteringSelect',labelClass:'labelAlign180px',title:'Default Tooltip',valueList:[{value:'AP',text:'Apples'},{value:'OR',text:'Oranges'},{value:'PE',text:'Pears'}]},
						{type:'$FilteringSelect',key:'filteringselect-selected',label:'One Item preselected',labelClass:'labelAlign180px',title:'Default Tooltip',value:'FL',valueList:[{value:'NY',text:'New York'},{value:'FL',text:'Florida'},{value:'CL',text:'California'}]},
						{type:'$FilteringSelect',key:'filteringselect-store',label:'FilteringSelect with Store',labelClass:'labelAlign180px',title:'Default Tooltip',store:'fruits',searchAttr:'name'}
					]}
			]};
		
			break;
			
		case 'form-horizontalslider' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$HorizontalSlider',key:'hz-slider-default',label:'Default Horizontal Slider',title:'Default Tooltip', value:'15',minimum:10,maximum:20,discreteValues:11},
						{type:'$HorizontalSlider',key:'hz-slider-decorated',label:'Decorated Horizontal Slider',title:'Default Tooltip', value:'15',minimum:10,maximum:20,discreteValues:11,children:[
							{type:'$HorizontalRule',container:'bottomDecoration',count:11, style:'height:5px;'},
							{type:'$HorizontalRuleLabels',container:'topDecoration', labels:[10,11,12,13,14,15,16,17,18,19,20],style:'height:20px;'}
						]},
					]}
			]};
		
			break;
			
		case 'form-multiselect' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$MultiSelect',key:'multiselect-default',label:'Default MultiSelect',labelClass:'labelAlign140px',title:'Default Tooltip',valueList:[{value:'AP',text:'Apples'},{value:'OR',text:'Oranges'},{value:'PE',text:'Pears'}]},
						{type:'$MultiSelect',key:'multiselect-selected',label:'One Item preselected',labelClass:'labelAlign140px',title:'Default Tooltip',value:'FL',valueList:[{value:'NY',text:'New York'},{value:'FL',text:'Florida'},{value:'CL',text:'California'}]},
						{type:'$MultiSelect',key:'multiselect-multi-selected',label:'Two Items preselected',labelClass:'labelAlign140px',multiple:true,title:'Default Tooltip',value:'AP,PE',valueList:[{value:'AP',text:'Apples'},{value:'OR',text:'Oranges'},{value:'PE',text:'Pears'}]}
					]}
			]};
		
			break;
			
		case 'form-numberspinner' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$NumberSpinner',key:'numberspinner-default',label:'Default NumberSpinner',title:'Default Tooltip',value:1000,smallDelta:10,constraints:{min:9,max:1550,places:0}},
					]}
			]};
		
			break;
			
		case 'form-numbertextbox' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$NumberTextBox',key:'numbertxtbx-default',label:'Number between -20000 and 20000',title:'Default Tooltip',value:3000,required:true,constraints:{min:-20000,max:20000,places:0},invalidMessage:'Invalid number.'},
					]}
			]};
		
			break;

		case 'form-radiobutton' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Form',children:[
							{type:'$RadioButton',key:'rbtn-ice-tea',label:'Ice Tea',title:'Default Tooltip',value:"Ice Tea",name:'Drink',renderInline:true},
							{type:'$RadioButton',key:'rbtn-beer',label:'Beer',title:'Default Tooltip',value:"Beer",name:'Drink',renderInline:true,checked:true},
						]}
					]}
			]};
			break;
			
		case 'form-select' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Select',key:'select-default',label:'Default MultiSelect',labelClass:'labelAlign180px',title:'Default Tooltip',valueList:[{value:'AP',text:'Apples'},{value:'OR',text:'Oranges'},{value:'PE',text:'Pears'}]},
						{type:'$Select',key:'select-selected',label:'One Item preselected',labelClass:'labelAlign180px',title:'Default Tooltip',value:'FL',valueList:[{value:'NY',text:'New York'},{value:'FL',text:'Florida'},{value:'CL',text:'California'}]},
						{type:'$Select',key:'select-multi-selected',label:'Two Items preselected',labelClass:'labelAlign180px',multiple:true,title:'Default Tooltip',value:'AP,PE',valueList:[{value:'AP',text:'Apples'},{value:'OR',text:'Oranges'},{value:'PE',text:'Pears'}]}
					]}
			]};
		
			break;
			
		case 'form-simpletextarea' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$SimpleTextarea',key:'simple-text-area',label:'Simple Text Area',title:'Default Tooltip',value:"Lorem ipsum dolor sit amet, ..."},
						{type:'$SimpleTextarea',key:'simple-text-area-2',label:'UpperCase and 30 cols',title:'Default Tooltip',value:"Lorem ipsum dolor sit amet, ...",uppercase:true,cols:30},
						{type:'$SimpleTextarea',key:'simple-text-area-3',label:'Lowercase and 10 rows',title:'Default Tooltip',value:"Lorem ipsum dolor sit amet, ...",lowercase:true,rows:10},	
					]}
			]};
			break;
			
		case 'form-textarea' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$Textarea',key:'simple-text-area',label:'Simple Text Area',title:'Default Tooltip',value:"Lorem ipsum dolor sit amet, ...",style:'width:200px;'},
					]}
			]};
			break;
		
		case 'form-timetextbox' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$TimeTextBox',key:'timetxt-default',label:'Default TimeTextBox',labelClass:'labelAlign180px',title:'Default Tooltip', value:'T15:00:00',constraints:{timePattern:'HH:mm:ss'}},
						{type:'$TimeTextBox',key:'timetxt-required',label:'required TimeTextBox',labelClass:'labelAlign180px', value:'T15:15:00', required:true,constraints:{timePattern:'HH:mm:ss'}},
						{type:'$TimeTextBox',key:'timetxt-constraints',label:'Constrained TimeTextBox (10am-12am)',labelClass:'labelAlign180px', value:'T11:00:00', constraints:{timePattern:'HH:mm:ss',min:'T10:00:00',max:'T12:00:00'},invalidMessage:'Select a time between 10am and 12am.'}
					]}
			]};
		
			break;
			
		case 'form-togglebutton' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$ToggleButton',key:'tgbtn-default',label:'Default Button',title:'Default Tooltip',value:true},
						{type:'$ToggleButton',key:'tgbtn-disabled',label:'Disabled Button (checked)',disabled:true,checked:true,value:true},
						{type:'$ToggleButton',key:'tgbtn-icon-nolbl',label:'No Label Image',iconClass:'dijitCheckBoxIcon',showLabel:false}
					]}
			]};
		
			break;
			
		case 'form-validationtextbox' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$ValidationTextBox',key:'vtxtbx-default',label:'Only Non-Space Text valid',labelClass:'labelAlign180px',title:'Default Tooltip',value:'someTestString',regExp:'[\\\\w]+',invalidMessage:'Invalid Non-Space Text.'},
						{type:'$ValidationTextBox',key:'vtxtbx-default',label:'U.S. Zipcode only:',labelClass:'labelAlign180px',title:'Default Tooltip',value:'00000',regExp:'\\\\d{5}',invalidMessage:'Invalid zip code.'},
					]}
			]};
		
			break;
		
		case 'form-verticalslider' :
		
			content = {
				children: [
					{type:'$ContentPane',key:'layoutContainer-1',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$VerticalSlider',key:'vt-slider-default',label:'Default Vertical Slider',title:'Default Tooltip', value:'15',minimum:10,maximum:20,discreteValues:11,style:'height:400px;',renderInline:true},
						{type:'$VerticalSlider',key:'vt-slider-decorated',label:'Decorated Vertical Slider',title:'Default Tooltip', value:'15',minimum:10,maximum:20,discreteValues:11,style:'height:400px;',renderInline:true,children:[
							{type:'$VerticalRule',container:'leftDecoration',count:11, style:'width:5px;'},
							{type:'$VerticalRuleLabels',container:'rightDecoration', labels:[10,11,12,13,14,15,16,17,18,19,20],style:'width:20px;'}
						]},
					]}
			]};
		
			break;
		
		case 'layout-accordionContainer':
			content = {
				children:[
					{type:'$LayoutContainer',key:'layoutContainer-1',design:'sidebar',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$AccordionContainer',region:'leading',style:'width:400px;',children:[
							{type:'$ContentPane',title:'Buttons',key:'contentPane-1',children:[
								{type:'$Button',key:'btn-default',label:'Default Button',title:'Default Tooltip',value:'Test value'},
								{type:'$Button',key:'btn-disabled',label:'Disabled Button',disabled:true,inputType:'reset'},
								{type:'$Button',key:'btn-icon',label:'Image',iconClass:'dijitEditorIcon dijitEditorIconCut',showLabel:true},
								{type:'$Button',key:'btn-icon-no-lbl',label:'Image',iconClass:'dijitEditorIcon dijitEditorIconCut',showLabel:false}
							]},
							{type:'$ContentPane',title:'More Buttons',key:'contentPane-2',children:[
								{type:'$Button',key:'btn-default',label:'Default Button',title:'Default Tooltip',value:'Test value'},
								{type:'$Button',key:'btn-disabled',label:'Disabled Button',disabled:true},
								{type:'$Button',key:'btn-icon',label:'Image',iconClass:'dijitEditorIcon dijitEditorIconCut',showLabel:true},
								{type:'$Button',key:'btn-icon-no-lbl',label:'Image',iconClass:'dijitEditorIcon dijitEditorIconCut',showLabel:false}
							]}
						]},
					]},
				]
			};
			break;
		
		case 'layout-borderContainer-splitter':
		
			content = {
				children: [
					{type:'$BorderContainer',key:'layoutContainer-1',design:'sidebar',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$AccordionContainer',region:'leading',splitter:true,style:'width:400px;',children:[
							{type:'$ContentPane',title:'Accordion',key:'contentPane-1',children:[
								{type:'$span',$content:'You can resize this pane by dragging the splitter.'},
							]}
						]},
						{type:'$ContentPane',region:'center',title:'Buttons',key:'contentPane-2',children:[
							{type:'$span',$content:'Center pane'},
						]}
					]}
				]
			};
		
			break;
		
		case 'layout-splitContainer':
		
			content = {
				children: [		
					{type:'$SplitContainer',key:'layoutContainer-1',orientation:'horizontal',style:'width:100%;height:100%;padding:0px;',children:[
						{type:'$AccordionContainer',sizeShare:20,sizeMin:200,children:[
							{type:'$ContentPane',title:'Accordion',key:'contentPane-1',children:[
								{type:'$span',$content:'You can resize this pane by dragging the splitter.'},
							]}
						]},
						{type:'$ContentPane',region:'center',title:'Buttons',key:'contentPane-2',sizeShare:20,children:[
							{type:'$span',$content:'Center pane'},
						]}
					]}
				]
			};
		
			break;
			
		case 'layout-splitContainer-2':
		
			content = {
				children: [		
					{type:'$SplitContainer',key:'layoutContainer-top',orientation:'vertical',style:'width:100%;height:100%;',children:[
						
						{type:'$SplitContainer',key:'layoutContainer-part1',orientation:'vertical',style:'width:100%;height:100%;',children:[
							{type:'$ContentPane',region:'top',key:'contentPane-part1-top',children:[
								{type:'$Toolbar',key:'tb-default',children:[
									{type:'$Button',label:'Cut',iconClass:'dijitEditorIcon dijitEditorIconCut',key:'tb-cut',renderInline:true},
									{type:'$Button',label:'Copy',iconClass:'dijitEditorIcon dijitEditorIconCopy',key:'tb-copy',renderInline:true},
									{type:'$Button',label:'Paste',iconClass:'dijitEditorIcon dijitEditorIconPaste',key:'tb-paste',renderInline:true},
									{type:'$ToolbarSeparator'},
									{type:'$DropDownButton',key:'ddbtn-default',label:'Default DropDownButton',title:'Default Tooltip', value:'Test value',renderInline:true,children:[
										{type:'$TooltipDialog',key:'ttdlg-default',children:[
											{type:'$TextBox',key:'txt-name',label:'Name:'},
											{type:'$TextBox',key:'txt-hobby',label:'Hobby:'},
											{type:'$Button',key:'btn-save',label:'Save',title:'Default Tooltip', value:'Save',inputType:'submit'},
										]}
									]},
									{type:'$TextBox',key:'txt-filtergrid',placeHolder:'Search grid',renderInline:true}
								]},
								{type:'$StoreMemory',key:'store-1',data:'=[basic_grid_1]'},
								{
									type:'$Gridx',key:'gridx-modules',
									style:'width: 400px; height: 300px;',
									store:'store-1',columns:'=[grid_1_columns]',
									headerHidden: true,
									barTop: [
						            	{pluginClass:"gridx/support/Summary"},
						            	{pluginClass:"gridx/support/LinkPager"},
						            	{pluginClass:"gridx/support/SampleSupport"},
						            	{pluginClass: "gridx/support/QuickFilter", style: 'text-align: right;'}
						          	],
									modules:[
										{moduleClass:"gridx/modules/Filter"},
										{
											moduleClass:"gridx/modules/Pagination",
											initialPageSize:1
										},
										{moduleClass:"gridx/modules/Bar"},
										{
											moduleClass:"gridx/modules/filter/FilterBar",
											autoHide:true
										}
									]
								},
							]},
							{type:'$ContentPane',region:'center',key:'contentPane-part1-bottom',children:[
								{type:'$span',$content:'Part 1 Bottom pane'},
							]}
						]},
					
					
						{type:'$SplitContainer',key:'layoutContainer-part2',orientation:'vertical',style:'width:100%;height:100%;',children:[
							{type:'$ContentPane',region:'top',key:'contentPane-part2-top',children:[
								{type:'$span',$content:'Part 2 Top pane'},
							]},
							{type:'$ContentPane',region:'center',key:'contentPane-part2-bottom',children:[
								{type:'$span',$content:'Part 2 Bottom pane'},
							]}
						]},
					
					]},
				]
			};
		
			break;
			
		case 'layout-stackContainer':
		
			content = {
				children: [		
					{type:'$StackContainer',key:'stackContainer-1',style:'width:100%;height:100%;',children:[
						{type:'$AccordionContainer',children:[
							{type:'$ContentPane',title:'Accordion',key:'contentPane-1',children:[
								{type:'$span',$content:'Content Pane 1'},
								{type:'$Button',key:'btn-stackContainer-prev',label:'Prev',title:'Advance to the previous content.',value:'Test value'},
								{type:'$Button',key:'btn-stackContainer-next',label:'Next',title:'Advance to the next content.',value:'Test value'},
							]}
						]},
						{type:'$AccordionContainer',children:[
							{type:'$ContentPane',title:'Accordion',key:'contentPane-2',children:[
								{type:'$span',$content:'Content Pane 2'},
								{type:'$Button',key:'btn-stackContainer-prev',label:'Prev',title:'Advance to the previous content.',value:'Test value'},
								{type:'$Button',key:'btn-stackContainer-next',label:'Next',title:'Advance to the next content.',value:'Test value'},
							]}
						]},
						{type:'$AccordionContainer',children:[
							{type:'$ContentPane',title:'Accordion',key:'contentPane-3',children:[
								{type:'$span',$content:'Content Pane 3'},
								{type:'$Button',key:'btn-stackContainer-prev',label:'Prev',title:'Advance to the previous content.',value:'Test value'},
								{type:'$Button',key:'btn-stackContainer-next',label:'Next',title:'Advance to the next content.',value:'Test value'},
							]}
						]},
					]}
				]
			};
		
			break;
			
		case 'layout-tabContainer':
		
			content = {
				children: [		
					{type:'$LayoutContainer',key:'layoutContainer-1',design:'headline',style:'width:100%;height:100%;',children:[
						{type:'$TabContainer',key:'stackContainer-1',region:'center',children:[
							{type:'$AccordionContainer',title:'Content 1',children:[
								{type:'$ContentPane',title:'Accordion',key:'contentPane-1',children:[
									{type:'$span',$content:'Content Pane 1'},
									{type:'$Button',key:'btn-stackContainer-prev',label:'Prev',title:'Advance to the previous content.',value:'Test value'},
									{type:'$Button',key:'btn-stackContainer-next',label:'Next',title:'Advance to the next content.',value:'Test value'},
								]}
							]},
							{type:'$AccordionContainer',closable:true,title:'Content 2',children:[
								{type:'$ContentPane',title:'Accordion',key:'contentPane-2',children:[
									{type:'$span',$content:'Content Pane 2 (closable)'},
									{type:'$Button',key:'btn-stackContainer-prev',label:'Prev',title:'Advance to the previous content.',value:'Test value'},
									{type:'$Button',key:'btn-stackContainer-next',label:'Next',title:'Advance to the next content.',value:'Test value'},
								]}
							]},
							{type:'$AccordionContainer',disabled:true,title:'Content 3',children:[
								{type:'$ContentPane',title:'Accordion',key:'contentPane-3',children:[
									{type:'$span',$content:'Content Pane 3 (disabled)'},
									{type:'$Button',key:'btn-stackContainer-prev',label:'Prev',title:'Advance to the previous content.',value:'Test value'},
									{type:'$Button',key:'btn-stackContainer-next',label:'Next',title:'Advance to the next content.',value:'Test value'},
								]}
							]},
							{type:'$AccordionContainer',title:'Content 4',children:[
								{type:'$ContentPane',title:'Accordion',key:'contentPane-1',children:[
									{type:'$span',$content:'Content Pane 4'},
									{type:'$Button',key:'btn-stackContainer-prev',label:'Prev',title:'Advance to the previous content.',value:'Test value'},
									{type:'$Button',key:'btn-stackContainer-next',label:'Next',title:'Advance to the next content.',value:'Test value'},
								]}
							]},
						]}
					]}
				]
			};
		
			break;
			
		case 'layout-iframe':
			content = {
				children: [		
					{type:'$LayoutContainer',key:'layoutContainer-1',design:'headline',style:'width:100%;height:100%;',children:[
						{type:'$ContentPane',key:'contentpane-1',region:'center',children:[
							{type:'$iframe', src:'ZENDemo.Home.cls', width:'100%', height:'100%'}
						]}
					]}
				]
			};
			break;
	}
	
	return content;
]]></Implementation>
</Method>

<Method name="onselect">
<Description>
Select handler</Description>
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('select: ' + key + ' value: ' + value);
	
	var docView = zen(docViewId);
	
	switch (key) {
		case 'tree-menu':
		
			var tree = docView.getItemByKey(key);
			var store = tree.$dojoItem.model.store;
			
			var item = store.query({id:value})[0];
			
			if (zenGet(item.openTab,true)) {
				
				var tc = zen('mainView').getItemByKey('tabContainer-1').$dojoItem;
				var tabIsOpen = false;
				
				if (tc.hasChildren()) {
					var openTabs = tc.getChildren();
					
					for (var i = 0; i < openTabs.length; i++) {
						if (openTabs[i].title == value) {
							// open!
							tabIsOpen = true;
							tc.selectChild(openTabs[i],true);
						}
					}
				}
				
				if (!tabIsOpen) {
					var nv = docView.getPluginByLayoutObjectType('$Tree').createDocumentView(value,value,'newView_'+value);
					docView.getPluginByLayoutObjectType('$Tree').addTabWithDocumentView(docView,'tabContainer-1',1,value,nv);
				}
			}
			
			break;
		case 'btn-stackContainer-prev' :
			docView.getItemByKey('stackContainer-1').$dojoItem.back();
			break;
		case 'btn-stackContainer-next' :
			docView.getItemByKey('stackContainer-1').$dojoItem.forward();
			break;
		case 'btn-open-dialog':
			docView.getItemByKey(value).$dojoItem.show();
			break;
		case 'btn-start-progressbar-1':
			var i = 0;
			download = function() {
				docView.getItemByKey('progressbar-1').$dojoItem.set('value',++i);
				if (i<10) {
					setTimeout(download,100 + Math.floor(Math.random() * 1000));
				}
			};
			download();
			break;
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.html5.Application">
<Description><![CDATA[
Application class for the <b>Mojo HTML5 Plugin Demo</b> ]]></Description>
<Super>%ZEN.Mojo.baseApplication</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63243,28536.950405</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>HTML5 Demo</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>ZMdemo.html5.HomePage</Default>
</Parameter>

<Method name="%GetAppSettings">
<Description>
Return an object containing the various configured settings for the portal.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	
	Set tInfo = ##class(%ZEN.proxyObject).%New()

	// initial templateClass
	Set tInfo.templateClass = ""

	// names
	Set tInfo.nameApplication = "HTML5 Demo Application"

	// overrides

	Quit tInfo
]]></Implementation>
</Method>

<Method name="ZMojoDrawBackgroundDiv">
<Description><![CDATA[
Draw the contents of the background div section (this is purely decorative)
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawQuickLinks">
<Description><![CDATA[
Draw the contents of the quick links section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawBasicHelp">
<Description><![CDATA[
Draw the contents of the basic section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawFooterGroup">
<Description><![CDATA[
Draw the contents of the footer group section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.html5.HomePage">
<Description><![CDATA[
This is the home page of the <b>Mojo HTML5 Plugin Demo</b>.
<p>The <class>%ZEN.Mojo.Plugin.HTML5Helper</class> is a helper plugin, which is always used in conjunction with a page manager plugin.</p>
<p>In this demo a Dojo-based Mojo application is enriched with HTML5 elements.</p>]]></Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63243,28841.448966</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.
This is set by the %OnCreateApplication method.</Description>
<Default>ZMdemo.html5.Application</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="TEMPLATECLASS">
<Description>
Starting template class for this page
Used by contentProvider.
This is overriden by application settings, if provided.</Description>
<Default>ZMdemo.html5.baseTemplate</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
Comma-separated list of additional CSS3 include files for the page.
If this is defined *and* this page is using CSS3, then the CSSINCLUDES parameter is ignored.
If this is not defined *and* this page is using CSS3, then the CSSINCLUDES parameter is used.</Description>
<Type>STRING</Type>
<Default>dojo-release-1-9-1/dijit/themes/claro/claro.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Comma-separated list of additional JS include files for the page.</Description>
<Type>STRING</Type>
<Default>dojo-release-1-9-1/dojo/dojo.js</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
/* Style definitions for the proper operation of the Dojo Plugin */
.dvDocument {
	width: 100%;
	height: 100%;
}

.dvEnclosingClass iframe {
	position:relative;
}

.dvEnclosingClass {
	border: none;
}

#zMojoContentGroup {
	border:none;
}
/* End of style definitions of the Dojo Plugin */

.contentHeader {
	height:60px;
	line-height:60px;
	padding: 0px;

	background-image: url(images/zentitle.jpg);
	background-repeat: no-repeat;
	background-position: left;
	background-color: #c5d6d6;

	font-size: 1.4em;
	font-family: verdana;
	text-align: center;
	vertical-align: middle;

	color: rgb(53,107,141);
}

/* Style settings for the menu buttons of the left menu pane */
.divMenuItem {
	position: relative;
	font-size: 24px;
	font-family: arial;
	font-style: normal;
	font-weight: bold;
	text-decoration: none;

	background: #E0E0F0;
	border: 1px solid #E0E0F0;
	height: 60px;
	margin: 5px;

	color: #444;
}

.divMenuItem:hover {
	background-color: #FFEEAA;
}

.divMenuItemSelected, .divMenuItemSelected:hover {
	background-color: rgb(53,107,141);
	color: white;
}

.imageMenuItem {
	position: absolute;
	width: 32px;
	height: 32px;
	
	margin: 14px 5px;
}

.titleMenuItem {
	position: relative;
	line-height: 60px;
	text-align: left;
	vertical-align: middle;
	
	padding-left: 50px;
}
/* End of style settings for the menu buttons */

/* HTML range input customization */
input[type=range] {
	-webkit-appearance: none;
	width: 200px;

	/*fix for FF unable to apply focus style bug */
	border: 1px solid white;
}

input[type=range]::-webkit-slider-runnable-track {
	width: 200px;
	height: 6px;
	background-image: url(images/docindexgradient.png);
	background-repeat: repeat-y;
	border: none;
	border-radius: 3px;
}
input[type=range]::-moz-range-track {
	width: 200px;
	height: 6px;
	background-image: url(images/docindexgradient.png);
	background-repeat: repeat-y;
	border: none;
	border-radius: 3px;
}
input[type=range]::-ms-track {
	width: 200px;
	height: 6px;
	background-image: url(images/docindexgradient.png);
	background-repeat: repeat-y;
	border: none;
	border-radius: 3px;
}

input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    border: none;
    height: 16px;
    width: 16px;
    background-image: url(images/MacGreenDotB.png);
    margin-top: -5px;
}
input[type=range]::-moz-range-thumb {
    -webkit-appearance: none;
    border: none;
    height: 16px;
    width: 16px;
    background-image: url(images/MacGreenDotB.png);
    margin-top: -5px;
}
input[type=range]::-ms-thumb {
    -webkit-appearance: none;
    border: none;
    height: 16px;
    width: 16px;
    background-image: url(images/MacGreenDotB.png);
    margin-top: -5px;
}

input[type=range]:focus {
    outline: none;
}

/* hide the outline behind the border in Firefox - workaround of a known bug */
input[type=range]:-moz-focusring{
    outline: 1px solid white;
    outline-offset: -1px;
}
/* End of HTML range input customization */

.tableDemo {
	border: 1px solid black;
	font-size: 1em;
}

.tableDemo tfoot tr td {
	background-color:rgb(53,107,141);
	color:white;
	font-weight:bold;
}

.tPerson tr td {
	padding: 5px;
}

.tPerson td label {
	font-weight: bold;
}
</style>
]]></Data>
</XData>

<XData name="pageContents">
<Description>
This XML block defines the contents of this page.
Subclasses will replace this.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane 
xmlns="http://www.intersystems.com/zen" 
xmlns:mojo="http://www.intersystems.com/zen/mojo"
layout="none">

<!-- 
	Outer document view, containing the header, the left menu and only a placeholder for the actual content.
	In this implementation it never changes the document- or the layout key, as both the header and the menu are "static".
-->
<mojo:documentView id="mainView"
developerMode="false" 
initialDocumentKey="home"
initialLayoutKey="home"
maxPanels="15"
ongetlayout = "return zenPage.getContent('layout',key,criteria);"
ongetdata = "return zenPage.getContent('data',key,criteria);"
>
<mojo:dojo-1.9.1-PageManager onPageShow="return zenPage.onPageShow(key);">
<mojo:dojo-1.9.1-DijitHelper />
<mojo:HTML5Helper/>
<mojo:mojoDefaultHelper/>
</mojo:dojo-1.9.1-PageManager>
</mojo:documentView>

<!-- 
	Inner document view, implementing the actual content of the page (except header and left menu).
	Its content is injected into a placeholder of the outer document view. This is done by the content template.
-->
<mojo:documentView id="centerView"
developerMode="false" 
initialDocumentKey="empty"
initialLayoutKey="empty"
maxPanels="15"
ongetlayout = "return zenPage.getContent('layout',key,criteria);"
ongetdata = "return zenPage.getContent('data',key,criteria);"
>
<mojo:dojo-1.9.1-PageManager onPageShow="return zenPage.onPageShow(key);">
<mojo:dojo-1.9.1-DijitHelper/>
<mojo:HTML5Helper/>
<mojo:mojoDefaultHelper/>
</mojo:dojo-1.9.1-PageManager>
</mojo:documentView>
</pane>
]]></Data>
</XData>

<Method name="adjustContentSize">
<Description>
Adjust size of components within the content area.</Description>
<FormalSpec>load,width,height</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var mainView = zen('mainView');
	if (mainView) {
		mainView.setSize(width, height);

		var mainDiv = mainView.getEnclosingDiv();
		mainDiv.style.top =  '0px';
		mainDiv.style.left = '0px';
	}
]]></Implementation>
</Method>

<Method name="onlayoutHandler">
<Description>
Triggers the automatic resize of the topmost Dojo container every time, 
when the page is first loaded or whenever it is resized. </Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.invokeSuper('onlayoutHandler',arguments);
	
	var topContainer = zen('mainView').getItemByKey('top-container');
	if (topContainer) {
		topContainer.$dojoItem.resize();
	}
]]></Implementation>
</Method>

<Method name="onPageShow">
<Description><![CDATA[
Dispatches <var>onPageShow</var> event handling to the current content template.
<p>The content template has to implement the <var>pageShow()</var> JavaScript function.</p>]]></Description>
<FormalSpec>key</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// dispatch to template object
	var template = this.getTemplate();
	return (template&&template.pageShow) ? template.pageShow(key) : null;
]]></Implementation>
</Method>

<Method name="getMaxContentWidth">
<Description>
In non-embed mode, maximum width of page content area.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	return 3000;
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.html5.baseTemplate">
<Description>
This class feeds the </Description>
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63243,56058.9311</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/mojo/demo/html5</Default>
</Parameter>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Server-side method to provide content to JSON providers.<br/>
<var>pProviderName</var> is the name of the provider.<br/>
<var>pKey</var> is an app-defined key that is used to indicate which content is to be served.<br/>
<var>pCriteria</var>is an object containing criteria. If provided it as a %ZEN.proxyObject<br/>
<var>pParms</var> is an array of additional parameters from the JSON provider. (not current used).<br/>
<var>pResponse</var> is the object that will be served to the client in JSON format.<br/>
<var>pLoad</var> is true is this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pProviderName:%String,pKey:%String,&pParms,*pResponse:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	// Populate some test data if Sample.Person is empty
	If ($Data(^Sample.PersonD) < 10) {
		Do ##class(Sample.Person).Populate(20)
	}

	If ((pProviderName = "data") && (pKey = "table-demo")) {
		
		Set pResponse = ##class(%ZEN.proxyObject).%New()
		Set pResponse.caption = "HTML Table Test with ZEN Mojo"
		
		Set pResponse.cols = ##class(%ListOfObjects).%New()
		Set col = ##class(%ZEN.proxyObject).%New()
		Set col.header = "Identifier"
		Set col.style = "background-color:lightblue;"
		Do pResponse.cols.Insert(col)
		Set col = ##class(%ZEN.proxyObject).%New()
		Set col.header = "Name"
		Set col.style = "background-color:#EEE;"
		Do pResponse.cols.Insert(col)
		Set col = ##class(%ZEN.proxyObject).%New()
		Set col.header = "D.of Birth"
		Set col.style = "background-color:lightblue;"
		Do pResponse.cols.Insert(col)
		
		Set pResponse.rows = ##class(%ListOfObjects).%New()
		
		Set rs = ##class(%SQL.Statement).%ExecDirect(.st,
			"SELECT TOP 20 SSN, Name, TO_CHAR(DOB, 'YYYY-MM-DD') AS DOB FROM Sample.Person ORDER BY Name")
		
		While $IsObject(rs) && (rs.%Next()) {
			Set row = ##class(%ZEN.proxyObject).%New()
			Set row.ssn = rs.SSN
			Set row.name = rs.Name
			Set row.dob = rs.DOB
			Do pResponse.rows.Insert(row)
		}
	}
	
	ElseIf ((pProviderName = "data") && (pKey = "form-demo")) {
		
		Set pResponse = ##class(%ZEN.proxyObject).%New()
		
		Set pResponse.options = ##class(%ListOfObjects).%New()
		
		Set rs = ##class(%SQL.Statement).%ExecDirect(.st,
			"SELECT Name FROM Sample.Person ORDER BY Name")
		
		While $IsObject(rs) && (rs.%Next()) {
			Set opt = ##class(%ZEN.proxyObject).%New()
			Set opt.name = rs.Name
			Do pResponse.options.Insert(opt)
		}
	}

	ElseIf ((pProviderName = "data") && (pKey = "selected-person")) {
		
		Set pResponse = ##class(%ZEN.proxyObject).%New()
		
		Set rs = ##class(%SQL.Statement).%ExecDirect(.st,
			"SELECT ID, Name, TO_CHAR(DOB, 'YYYY-MM-DD') AS DOB, Age, NVL($LISTGET(FavoriteColors, 1), 'white') AS FavColor"_
			" FROM Sample.Person WHERE Name = ?", pCriteria.name)
		
		While $IsObject(rs) && (rs.%Next()) {
			Set pResponse.id = rs.ID
			Set pResponse.name = rs.Name
			Set pResponse.dob = rs.DOB
			Set pResponse.age = rs.Age
			// The HTML5 color input works only with hexadecimal color codes
			Set pResponse.favcolor = ..EncodeColor(rs.FavColor)
		}
	}

	Quit tSC
]]></Implementation>
</Method>

<Method name="EncodeColor">
<Description><![CDATA[
Returns the hexadecimal RGB color codes for color names.
<p>Only colors enabled for the <property>FavoriteColor</property> property of <class>Sample.Person</class> are considered here.</p>]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pColorName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
$Case($ZCVT($Get(pColorName), "L"),
	"red": "#FF0000",
	"orange": "#FFA500",
	"yellow": "#FFFF00",
	"green": "#00FF00",
	"blue": "#0000FF",
	"purple": "#800080",
	"black": "#000000",
	: "#FFFFFF")
]]></Implementation>
</Method>

<Method name="onGetContent">
<Description><![CDATA[
Client-side content provider method.
<var>which</var> is the name of the content to return.
<var>key</var> is the key value associated with the request.
<var>criteria</var> is the search criteria associated with the request.]]></Description>
<FormalSpec>which,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var content = null;
	
	switch (which) {
		case 'data':
			content = this.getData(key, criteria);
			break;
		case 'layout':
			content = this.getLayout(key, criteria);
			break;
	}
	
	return content;
]]></Implementation>
</Method>

<Method name="getData">
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	/* The default value is an empty JS object, so it won't go to the server. */
	var data = {};
	
	switch (key) {

	case 'home':
		/* This data structure described the menu on the left pane. */
		data = {
			menus:[
				{title:'Basic HTML Elements',items:[
					{class:'divMenuItem',title:'Text',image:'deepsee/ds2_text_44.png',triggers:'show-text-demo'},
					{class:'divMenuItem',title:'Table',image:'deepsee/ds2_dialpad_44.png',triggers:'show-table-demo'}
				]},
				{title:'Form Elements',items:[
					{class:'divMenuItem',title:'Form',image:'deepsee/ds2_gear_44.png',triggers:'show-form-demo'}
				]},
				{title:'Embedded Media',items:[
					{class:'divMenuItem',title:'Video',image:'deepsee/ds2_glasses_44.png',triggers:'show-video-demo'}
				]}
			]
		}
		break;
	
	case 'table-demo':
	case 'form-demo':
	case 'selected-person':
		/* Some parts of the demo need server-side data, null has to be returned here. */
		data = null;
		break;	
		
	}
	
	return data;
]]></Implementation>
</Method>

<Method name="getLayout">
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var layout = {};
	
	switch (key) {

	/* Initial (empty) content for the inner document view. */
	case 'empty':
		layout = {
			children: [
				{type:'$ContentPane',children:[
				]}
			]
		};
		break;
	
	/* 
		This is the only layout definition for the outer document view. 
		Defines header, left menu and empty placeholder for inner content.
	*/
	case 'home':
		layout = {
			children: [ 
				{type:'$BorderContainer',key:'top-container',design:'headline',liveSplitters:true,style:'width:100%;height:100%',children:[
					{type:'$ContentPane',region:'top',children:[
						{type:'$div',$content:'ZEN Mojo / HTML5 Plugin Demo',cssClass:'contentHeader'}
					]},
					{type:'$AccordionContainer',region:'leading',style:'width:33%;max-width:300px;',splitter:true,value:'=[menus]',children:[
						{type:'$ContentPane',key:'menu-pane',title:'=[title]',value:'=[items]',children:[
							/* Menu items built from pure HTML elements */
							{type:'$div',cssClass:'=[class]',key:'show-menu-item',value:'=[triggers]',children:[
								{type:'$img',src:'=[image]',cssClass:'imageMenuItem'},
								{type:'$div',$content:'=[title]',cssClass:'titleMenuItem'}
							]}
						]}
					]},
					{type:'$StackContainer',key:'content',region:'center',style:'width:100%;height:100%',children:[
						/* This is the- initially empty- placeholder for the inner document view. */
						{type:'$ContentPane',key:'content-pane',layoutkey:'empty',documentkey:'empty',children:[
						]}
					]}
				]}
		]};
		break;
	
	/* Inner content layouts, triggered by left menu items. */
	case 'text-demo':
		layout = {
			children:[
				// Simple HTML elements, defined in Mojo syntax
				{type:'$h1',children:[
					{type:'$span',$content:'HTML Text Formatting with ZEN '},
					{type:'$del',$content:'Mobile'},
					{type:'$span',$content:' '},
					{type:'$ins',$content:'Mojo'}
				]},
				{type:'$h2',$content:'Phrase Tags'},
				{type:'$em',$content:'This is an emphasized text'},
				{type:'$br'},
				{type:'$dfn',$content:'A definition term'},
				{type:'$br'},
				{type:'$strong',$content:'Important text with strong style'},
				{type:'$br'},
				{type:'$code',$content:'This is a piece of computer code'},
				{type:'$br'},
				{type:'$samp',$content:'Sample output from computer program'},
				{type:'$br'},
				{type:'$kbd',$content:'Text from keyboard input:'},
				{type:'$span',$content:' '},
				{type:'$var',$content:'myVariable'}
			]
		}
		break;
	
	case 'table-demo':
		layout = {
			children:[
				// An HTML table, defined in Mojo syntax - with dynamic content
				{type:'$table',cssClass:'tableDemo',children:[
					{type:'$caption',$content:'=[caption]'},
					{type:'$colgroup',children:[
						{type:'$loop',value:'=[cols]',children:[
							{type:'$col',style: '=[style]'}
						]}
					]},
					{type:'$thead',children:[
						{type:'$tr',children:[
							{type:'$loop',value:'=[cols]',children:[
						 		{type:'$th',$content:'=[header]'}
							]}
						]}
					]},
					{type:'$tbody',children:[
						{type:'$loop',value:'=[rows]',children:[
							{type:'$tr',children:[
						 		{type:'$td',$content:'=[ssn]'},
						 		{type:'$td',$content:'=[name]'},
						 		{type:'$td',$content:'=[dob]'}
							]}
						]}
					]},
					{type:'$tfoot',children:[
						{type:'$tr',children:[
					 		{type:'$td',$content:''},
					 		{type:'$td',$content:'Total # of rows:'},
					 		{type:'$td',style:'text-align:right;',$content:'=[rows.length]'},
						]}
					]}
				]}
			]
		}
		break;
		
	case 'form-demo':
		layout = {
			children:[
				// HTML form with HTML5 inputs. The demo does not submit data back to the server, 
				// and the HTML5 input types may behave differently in different browsers (and devices). 
				{type:'$datalist',key:'person-namelist',children:[
					{type:'$loop',value:'=[options]',children:[
						{type:'$option',value:'=[name]'}
					]}
				]},
				{type:'$form',children:[
					{type:'$fieldset',children:[
						{type:'$legend',$content:'Search by name'},
						/* The list attribute refers the 'key' and not the 'id' of the $datalist above! */
						{type:'$input',inputType:'search',autocomplete:'on',list:'person-namelist',key:'person-search'},
						{type:'$input',inputType:'button',value:'Go',key:'select-person'}
					]},
					{
					 type:'$label',$content:'* Some HTML5 input types may behave differently, based on your browser- and device type!',
					 style:'font-size:.8em;color:rgb(53,107,141);'
					},
					{type:'$fieldset',children:[
						{type:'$legend',$content:'Selected person'},
						{type:'$table',cssClass:'tPerson',children:[
							{type:'$tr',children:[
								{type:'$td',children:[
									{type:'$label',$content:'ID:'}
								]},
								{type:'$td',children:[
									{
									 type:'$input',inputType:'number',value:'=[person.id]',key:'person-id',
									 style:'width:5em;'
									}									
								]}
							]},
							{type:'$tr',children:[
								{type:'$td',children:[
									{type:'$label',$content:'Name:'}
								]},
								{type:'$td',children:[
									{type:'$input',inputType:'text',value:'=[person.name]',key:'person-name'}
								]}
							]},
							{type:'$tr',children:[
								{type:'$td',children:[
									{type:'$label',$content:'D.of birth:'}
								]},
								{type:'$td',children:[
									{type:'$input',inputType:'date',value:'=[person.dob]',key:'person-dob'}
								]}
							]},
							{type:'$tr',children:[
								{type:'$td',children:[
									{type:'$label',$content:'Age:'}
								]},
								{type:'$td',children:[
									/* CSS-customzied slider, see ZMDemo.html5.HomePage for style definition */
									{type:'$input',inputType:'range',min:0,max:130,value:'=[person.age]',key:'person-age-range'},
									{
									 type:'$input',inputType:'number',min:0,max:130,value:'=[person.age]',key:'person-age-nr',
									 style:'width:3em;'
									}
								]}
							]},
							{type:'$tr',children:[
								{type:'$td',children:[
									{type:'$label',$content:'Fav.color:'}
								]},
								{type:'$td',children:[
									{type:'$input',inputType:'color',value:'=[person.favcolor]',key:'person-favcolor'}
								]}
							]}
						]}
					]}
				]}
			]
		}
		break;
	
	case 'video-demo':
		layout = {
			children:[
				// Embedded video with extra HTML attributes (not defined in the HTML5 standard)
				{
				 type:'$embed',key:'video',mimeType:'application/x-shockwave-flash',
				 src:'http://c.brightcove.com/services/viewer/federated_f9?&amp;playerID=97820443001&amp;playerKey=AQ%252E%252E%2CAAAAFSasgmk%252E%2C99hiZNTvp0-cMF21gnQrIHdNOBZG7qZy&amp;isVid=true&amp;dynamicStreaming=true&amp;%40videoPlayer=3547030825001&amp;htmlFallback=true&amp;debuggerID=&amp;startTime=1415196805935',
				 width:486,height:412,
				 $extra:{
					allowScriptAccess:'always',
					allowFullScreen:false,			/* Change this to true, in order to enable full-screen mode */
					quality:'high',
					seamlessTabbing:false,
					swliveconnect:true,
					wmode:'transparent'
				}
				},
				{type:'$div',style:'padding:10px;display:block;',children:[
					{type:'$button',$content:'Show',key:'show-video'},
					{type:'$button',$content:'Hide',key:'hide-video'}
				]}
			]
		}
		break;
		/* End of inner content layouts, triggered by left menu items. */
	
	}
		
	return layout;
]]></Implementation>
</Method>

<Method name="onchange">
<Description>
Notification that a change event has happened</Description>
<FormalSpec>key,value,final,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var view = zen(docViewId);
	var realKey = key.split(':')[0];
	
	switch(realKey) {
	
	case 'person-age-range':
		/* The slider automatically changes the corresponding number input, too */
		// $getValue and $setVale are auto generated functions of all components, rendered by the HTML5 plugin
		view.getItemByKey('person-age-nr').$setValue(view.getItemByKey('person-age-range').$getValue());
		break;

	case 'person-age-nr':
		/* The number input automatically changes the corresponding slider, too */
		// $getValue and $setVale are auto generated functions of all components, rendered by the HTML5 plugin
		view.getItemByKey('person-age-range').$setValue(view.getItemByKey('person-age-nr').$getValue());
		break;
	}
]]></Implementation>
</Method>

<Method name="onselect">
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var view = zen(docViewId);
	var realKey = key.split(':')[0];
	
	switch(realKey) {
	
	case 'show-menu-item':
		var menuKey = value.substr(5);
		// The full key is used here (with all the loop indexes included)
		this.selectMenuItem(key);
		this.selectContentPane(menuKey, {}, menuKey, {}, false);
		break;
	
	case 'select-person':
		var name = view.getItemByKey('person-search').$getValue();
		// zenPage.getContent() can be used to fetch data from the server directly, 
		// but still using the ultimate communication pattern of Mojo
		view.getSourceData().person = zenPage.getContent('data', 'selected-person', {"name": name});
		view.updateLayout();
		break;
	
	case 'show-video':
		// $show and $hide are auto generated functions of all components, rendered by the HTML5 plugin
		view.getItemByKey('video').$show();
		break;
		
	case 'hide-video':
		// $show and $hide are auto generated functions of all components, rendered by the HTML5 plugin
		view.getItemByKey('video').$hide();
		break;
		
	default:
		console.log('Select: key=\'' + key + '\', value=\'' + value + '\'');
		break;
	
	}
]]></Implementation>
</Method>

<Method name="pageShow">
<Description>
This method is called, whenever the rendering of a layout is completed.</Description>
<FormalSpec>key</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// Injects the inner document view content into the outer document view, when its rendering is completed.
	if (key == 'home') {
		var view = zen('mainView');
		var plugin = view.getPluginByLayoutObjectType('$ContentPane');

		var cp = view.getItemByKey('content-pane');
		// If the content pane is attached to a document view already, no need to do it again.
		if (!cp.$dojoItem.$documentView) {
			plugin.injectDocumentViewIntoContentPane(zen('centerView'), 'content-pane');
		}
	}
]]></Implementation>
</Method>

<Method name="selectMenuItem">
<Description>
Controls the visual selection of left menu items.</Description>
<FormalSpec>menukey</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// Reset the former selection, using the $getAttribute and $setAttribute methods,
	// which are auto generated for all components, rendered by the HTML5 plugin
	var item = zenPage._selectedItem;
	if (item) {
		item.$setAttribute('cssClass', item.$getAttribute('cssClass').replace(new RegExp('(\\s|^)divMenuItemSelected(\\s|$)'), ' '));
		zenPage._selectedItem = null;
	}
	
	// Set the current selection
	item = zen('mainView').getItemByKey(menukey);
	item.$setAttribute('cssClass', item.$getAttribute('cssClass') + ' divMenuItemSelected');
	zenPage._selectedItem = item;
]]></Implementation>
</Method>

<Method name="selectContentPane">
<Description>
Updates the content of the inner document view.</Description>
<FormalSpec>layoutkey,layoutcriteria,documentkey,documentcriteria,push</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var view = zen('centerView');
	if (push) {
		view.pushDocument(layoutkey, layoutcriteria, documentkey, documentcriteria);
	}
	else {
		view.setLayoutKey(layoutkey, layoutcriteria);
		view.setDocumentKey(documentkey, documentcriteria);
		view.updateLayout();
	}
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.jQM.Application">
<Description>
jquerymobile.Application</Description>
<Super>%ZEN.Mojo.baseApplication</Super>
<TimeChanged>65825,24760</TimeChanged>
<TimeCreated>63048,58507.342228</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>jquerymobile</Default>
</Parameter>

<Method name="%GetAppSettings">
<Description>
Return an object containing the various configured settings for the portal.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	
	Set tInfo = ##class(%ZEN.proxyObject).%New()

	// initial templateClass
	Set tInfo.templateClass = ""

	// names
	Set tInfo.nameApplication = "jQM Demo Application"

	// overrides

	Quit tInfo
]]></Implementation>
</Method>

<Method name="ZMojoDrawBackgroundDiv">
<Description><![CDATA[
Draw the contents of the background div section (this is purely decorative)
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawQuickLinks">
<Description><![CDATA[
Draw the contents of the quick links section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawBasicHelp">
<Description><![CDATA[
Draw the contents of the basic section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawFooterGroup">
<Description><![CDATA[
Draw the contents of the footer group section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.jQM.HomePage">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58484.834602</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZMdemo.jQM.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>HomePage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description>
List of JSON providers created for this page.
Used by contentProvider.</Description>
<Default>data,layout</Default>
</Parameter>

<Parameter name="TEMPLATECLASS">
<Description>
Starting template class for this page
Used by contentProvider.
This is overriden by application settings, of provided.</Description>
<Default>ZMdemo.jQM.baseTemplate</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
Comma-separated list of additional CSS3 include files for the page.
If this is defined *and* this page is using CSS3, then the CSSINCLUDES parameter is ignored.
If this is not defined *and* this page is using CSS3, then the CSSINCLUDES parameter is used.</Description>
<Type>STRING</Type>
<Default>jquery.mobile-1.3.2.min.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Comma-separated list of additional JS include files for the page.</Description>
<Type>STRING</Type>
<Default>jquery-1.10.2.min.js,jquery.mobile-1.3.2.min.js,https://maps.googleapis.com/maps/api/js?sensor=true</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
	.ui-listview-filter {
		margin: 0px;
	}
</style>
]]></Data>
</XData>

<XData name="pageContents">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen"
xmlns:mojo="http://www.intersystems.com/zen/mojo"
layout="none">

<mojo:documentView id="mainView"
developerMode="true" 
onload="zenPage._latestjQMVersion = 'jQM-1.3.2-Helper';"
initialDocumentKey="home"
initialLayoutKey="home"
maxPanels="15"
ongetlayout = "return zenPage.getContent('layout',key,criteria);"
ongetdata = "return zenPage.getContent('data',key,criteria);"
onresolvepluginconflicts ="console.log(conflicts);"
>
<mojo:jQM-1.3.2-PageManager jQueryAnimation="flip" onPageShow="zenPage.onPageShow(layoutkey,documentkey);">
<mojo:jQM-1.3.2-Helper/>
<mojo:googleMaps-3-Helper/>
<mojo:HTML5Helper/>
<mojo:mojoDefaultHelper/>
</mojo:jQM-1.3.2-PageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="onPageShow">
<FormalSpec>layoutkey,documentkey</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (layoutkey == 'maps-demo') {
		zen('mainView').getPluginByLayoutObjectType('$map').resizeMap();
	}
]]></Implementation>
</Method>

<Method name="%OnDrawHTMLMeta">
<Description><![CDATA[
This callback is called at the start of the HTML HEAD section of the page (just after the title).<br/>
It allows a page to write out meta tags, if desired.
(default implementation is a simple expression).]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Make it so that, when the user has selected IE compatibility mode, we ignore it and use the most recent IE version available
	//Write "<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />"
	// turn off unless this is actually mobile
	Write "<meta name=""viewport"" content=""width=device-width, initial-scale=1.0,maximum-scale=1, user-scalable=no""/>"
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.jQM.baseTemplate">
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58554.738224</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/mojo/demo/jQM</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Server-side method to provide content to JSON providers.<br/>
<var>pWhich</var> is the name of the provider.<br/>
<var>pKey</var> is an app-defined key that is used to indicate which content is to be served.<br/>
<var>pCriteria</var>is an object containing search criteria. This is used for searching.<br/>
<var>pParms</var> is an array of additional parameters from the JSON provider. (not current used).<br/>
<var>pObject</var> is the object that will be served to the client in JSON format.<br/>
<var>pLoad</var> is true is this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pWhich:%String,pKey:%String,&pParms,*pObject:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pObject = ##class(%ZEN.proxyObject).%New()
	
	if (pKey = "home") {
		set pObject.sectionHeader = "It starts here..."
	} elseif (pKey = "form-demo") {
		set pObject.sectionHeader = "Forms"
	} elseif (pKey = "maps-demo") {
		set pObject.sectionHeader = "Google Maps"
	} elseif (pKey = "panel-demo") {
		set pObject.sectionHeader = "Panels"
	} elseif (pKey = "themes-demo") {
		set pObject.sectionHeader = "Themes"
	} elseif (pKey = "footer-demo") {
		set pObject.sectionHeader = "Footers"
	} elseif (pKey = "complex-footer-demo") {
		set pObject.sectionHeader = "Complex Footers"
	} elseif (pKey = "simple-navbar-demo") {
		set pObject.sectionHeader = "Nav Bar"
	} elseif (pKey = "icon-navbar-demo") {
		set pObject.sectionHeader = "Nav Bar with Icons"
	} elseif (pKey = "animation-demo") {
		set pObject.sectionHeader = "Transitions"
	} elseif (pKey = "checkbox-demo") {
		set pObject.sectionHeader = "Checkboxes"
	} elseif (pKey = "radiobuttons-demo") {
		set pObject.sectionHeader = "Radio Buttons"
	} elseif (pKey = "buttons-demo") {
		set pObject.sectionHeader = "Buttons"
	} elseif (pKey = "buttons-icons-demo") {
		set pObject.sectionHeader = "Icon Buttons"
	} elseif (pKey = "buttons-grouped-demo") {
		set pObject.sectionHeader = "Grouped Buttons"
	} elseif (pKey = "listview-demo") {
		set pObject.sectionHeader = "List View"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Audi"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Acura"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "BMW"
		set element.key = "Key 3"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Honda"
		set element.key = "Key 4"
		do pObject.elements.Insert(element)
	} elseif (pKey = "listview-filter-demo") {
		set pObject.sectionHeader = "List View With Filters"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Audi"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Acura"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "BMW"
		set element.key = "Key 3"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Honda"
		set element.key = "Key 4"
		do pObject.elements.Insert(element)
	} elseif (pKey = "listview-divider-demo") {
		
		set pObject.sectionHeader = "List View With Dividers"
		set pObject.groups = ##class(%ListOfObjects).%New()
		
		set group = ##class(%ZEN.proxyObject).%New()
		set group.label= "Mail"
		set group.elements = ##class(%ListOfObjects).%New()
		
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Inbox"
		set element.count = 123
		do group.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Outbox"
		set element.count = 2
		do group.elements.Insert(element)
		do pObject.groups.Insert(group)
		
		set group = ##class(%ZEN.proxyObject).%New()
		set group.label= "Contacts"
		set group.elements = ##class(%ListOfObjects).%New()
		
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Friends"
		set element.count = 5682
		do group.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Work"
		set element.count = 2
		do group.elements.Insert(element)
		do pObject.groups.Insert(group)
		
		// second data set
		
		set pObject.elements = ##class(%ListOfObjects).%New()
		
		for i=1:1:10 {
			set ^||temp(##class(%PopulateUtils).Name()) = ""
		}
		
		set key = $O(^||temp(""))
		while (key '= "") {
			set element = ##class(%ZEN.proxyObject).%New()
			set element.label=key
			do pObject.elements.Insert(element)
			set key = $O(^||temp(key))
		}
		
	} elseif (pKey = "listview-format-demo") {
		set pObject.sectionHeader = "List View Formats"
	} elseif (pKey = "collapsible-demo") {
		set pObject.sectionHeader = "Collapsibles"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "More Money!"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Less Work!"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
	} elseif (pKey = "collapsibleset-demo") {
		set pObject.sectionHeader = "Accordions"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "More Money!"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Less Work!"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
	} elseif (pKey = "table-demo") {
		set pObject.sectionHeader = "Tables"
		set pObject.Stores = ##class(%ListOfObjects).%New()
		for i=1:1:5 {
			set store = ##class(%ZEN.proxyObject).%New()
			set store.Rating = i
			set store.Name = "Store "_ i
			set store.Location = "Location " _ i
			do pObject.Stores.Insert(store)
		}
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="getData">
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var data = {};
	switch (key) {
		case 'home':
			data.sectionHeader = 'It starts here...';
			break;
		case 'form-demo':
			data.sectionHeader = 'Forms';
			break;
		case 'maps-demo':
			data.sectionHeader = 'Google Maps';
			data.markers = [
				{lat:59.1456566,lng:18.1988525,title:'Stockholm',draggable:true},
				{lat:50.110922,lng:8.682127,title:'Frankfurt',draggable:false},
				{address:'Paris, France',draggable:true,title:'Paris'}
			];
			break;
		case 'panel-demo':
			data.sectionHeader = 'Panels';
			break;
		case 'themes-demo':
			data.sectionHeader = 'Themes';
			break;
		case 'footer-demo':
			data.sectionHeader = 'Footers';
			break;
		case 'complex-footer-demo':
			data.sectionHeader = 'Complex Footers';
			break;
		case 'simple-navbar-demo':
			data.sectionHeader = 'Nav Bar';
			break;
		case 'icon-navbar-demo':
			data.sectionHeader = 'Nav Bar With Icons';
			break;
		case 'animation-demo':
			data.sectionHeader = 'Transitions';
			break;
		case 'checkbox-demo':
			data.sectionHeader = 'Checkboxes';
			break;
		case 'radiobuttons-demo':
			data.sectionHeader = 'Radio Buttons';
			break;
		case 'buttons-demo':
			data.sectionHeader = 'Buttons';
			break;
		case 'buttons-icons-demo':
			data.sectionHeader = 'Icon Buttons';
			break;
		case 'buttons-grouped-demo':
			data.sectionHeader = 'Grouped Buttons';
			break;
		case 'listview-demo':
			data.sectionHeader = 'List View';
			data.elements = [
				{label:'Audi',key:'Key 1'},
				{label:'Acura',key:'Key 2'},
				{label:'BMW',key:'Key 3'},
				{label:'Honda',key:'Key 4'}
			];
			break;
		case 'listview-filter-demo':
			data.sectionHeader = 'List View With Filter';
			data.elements = [
				{label:'Audi',key:'Key 1'},
				{label:'Acura',key:'Key 2'},
				{label:'BMW',key:'Key 3'},
				{label:'Honda',key:'Key 4'}
			];
			break;
		case 'listview-divider-demo':
			data.sectionHeader = 'List View with Dividers';
			data.groups = [
				{label:'Mail',elements:[{label:'Inbox',count:123},{label:'Outbox',count:2}]},
				{label:'Contacts',elements:[{label:'Friends',count:5682},{label:'Work',count:2}]}
			];
			data.elements = [{label:'Homer Jay Simpson'},{label:'Marjorie "Marge" Simpson'},{label:'Bartholomew JoJo "Bart" Simpson'},{label:'J. Edgar Hoover'}];
			break;
		case 'listview-format-demo':
			data.sectionHeader = 'List View Formats';
			break;
		case 'collapsible-demo':
			data.sectionHeader = 'Collapsibles';
			data.elements = [
				{label:'More Money!',key:'Key 1'},
				{label:'Less work!',key:'Key 2'}
			];
			break;
		case 'collapsibleset-demo':
			data.sectionHeader = 'Accordions';
			data.elements = [
				{label:'More Money!',key:'Key 1'},
				{label:'Less work!',key:'Key 2'}
			];
			break;
		case 'table-demo':
			data.sectionHeader = 'Table Demo';
			data.Stores = [
				{Name:'Store 1',Location:'Location 1', Rating:1},
				{Name:'Store 2',Location:'Location 2', Rating:2},
				{Name:'Store 3',Location:'Location 3', Rating:3},
				{Name:'Store 4',Location:'Location 4', Rating:4},
				{Name:'Store 5',Location:'Location 5', Rating:5}
			];
			break;
		case '':
			data.sectionHeader = '';
			break;
	}
	return data;
]]></Implementation>
</Method>

<Method name="onGetContent">
<Description><![CDATA[
Client-side content provider method.
<var>which</var> is the name of the content to return.
<var>key</var> is the key value associated with the request.
<var>criteria</var> is the search criteria associated with the request.]]></Description>
<FormalSpec>which,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//console.log(which + ' - ' + key + ' - ' + criteria);
	switch (which)
	{
		case 'layout':
			return this.getLayout(key,criteria);
		case 'data':
			// comment this out, if you want to get data from the server
			return this.getData(key,criteria);
	}
	
	// returning null -> fetch data from server
	return null;
]]></Implementation>
</Method>

<Method name="getLayout">
<Description>
Creates the layout object for the page</Description>
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var content = null;
	
	var header = { type: '$header', caption: '=[sectionHeader]', fixed:true};
    

    if (criteria && criteria.dataKey) {
    	data = zenPage.getContent('data',criteria.dataKey,{});
    } else {
	    data = zenPage.getContent('data',key,{});
    }
    
    switch(key) {
	    case 'home' :
	    	
	    	content = {
		    	children:[
		    		header,
		    		{type:'$span',$content:'Let\'s get started.',hidden:true,key:'start-show-label'},
		    		{type:'$button',caption:'Start demo',key:'start-show'},
		    		{type:'$collapsible',dataTheme:'b',label:'... or jump directly',children:[
		    			{type:'$listview',filter:true,key:'listview',children:[
		    				{type:'$listviewitem',label:'Buttons',clickable:true,key:'goto' ,value:'buttons-demo'},
		    				{type:'$listviewitem',label:'Buttons (Icons)',clickable:true,key:'goto' ,value:'buttons-icons-demo'},
		    				{type:'$listviewitem',label:'Buttons (Grouped)',clickable:true,key:'goto' ,value:'buttons-grouped-demo'},
		    				{type:'$listviewitem',label:'Checkboxes',clickable:true,key:'goto' ,value:'checkbox-demo'},
		    				{type:'$listviewitem',label:'Collapsibles',clickable:true,key:'goto' ,value:'collapsible-demo'},
		    				{type:'$listviewitem',label:'Collapsible Set (Accordion)',clickable:true,key:'goto' ,value:'collapsibleset-demo'},
		    				{type:'$listviewitem',label:'Forms',clickable:true,key:'goto' ,value:'form-demo'},
		    				{type:'$listviewitem',label:'Footer',clickable:true,key:'goto' ,value:'footer-demo'},
		    				{type:'$listviewitem',label:'Footer (Complex)',clickable:true,key:'goto' ,value:'complex-footer-demo'},
		    				{type:'$listviewitem',label:'List View',clickable:true,key:'goto' ,value:'listview-demo'},
		    				{type:'$listviewitem',label:'List View (Filter)',clickable:true,key:'goto' ,value:'listview-filter-demo'},
		    				{type:'$listviewitem',label:'List View (Divider)',clickable:true,key:'goto' ,value:'listview-divider-demo'},
		    				{type:'$listviewitem',label:'List View (Format)',clickable:true,key:'goto' ,value:'listview-format-demo'},
		    				{type:'$listviewitem',label:'Google Maps',clickable:true,key:'goto' ,value:'maps-demo'},
		    				{type:'$listviewitem',label:'Navbar',clickable:true,key:'goto' ,value:'simple-navbar-demo'},
		    				{type:'$listviewitem',label:'Navbar (Icons)',clickable:true,key:'goto' ,value:'icon-navbar-demo'},
		    				{type:'$listviewitem',label:'Panel',clickable:true,key:'goto' ,value:'panel-demo'},
		    				{type:'$listviewitem',label:'Radiobuttons',clickable:true,key:'goto' ,value:'radiobuttons-demo'},
		    				{type:'$listviewitem',label:'Themes',clickable:true,key:'goto' ,value:'themes-demo'},
		    			]},
		    		]},
		    		{type:'$popup',key:'going-back',transition:'flip',children:[
	    				{type:'$controlgroup',children:[
	    					{type:'$button',caption:'Let\'s relax a while.'},
	    					{type:'$button',caption:'But this is not the end.'}
	    				]}
	    			]},
	    			{type:'$popup',key:'still-loading',children:[
	    				{type:'$controlgroup',children:[
	    					{type:'$button',caption:'Sorry, still loading.'}
	    				]}
	    			]},
		    	]
	    	};
	    
	    	break;
	    
	     case 'themes-demo':
	     	
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$text',fieldcontain:true,placeHolder:'Enter some text',key:'text-1',label:'Text input:'},
		    			{type:'$textarea',fieldcontain:true,placeHolder:'Enter some text',key:'textarea-1',label:'Text area:'},
		    			{type:'$checkbox',fieldcontain:true,label:'Checkbox',text:'Do you want to select me?',key:'check-1'},
		    			{type:'$select',fieldcontain:true,slider:true,label:'Flip-switch:',key:'flip-1',valueList:[{value:0,text:'off'},{value:1,text:'on'}],value:0},
		    			{type:'$input',inputType:'range',highlight:true,fieldcontain:true,label:'Slider:',key:'range-1',min:100,max:5000,value:2000,text:2000},
		    			{type:'$select',fieldcontain:true,slider:false,label:'Choose shipping method:',key:'select-1',valueList:[{value:0,text:'Standard: 7 days'},{value:1,text:'Rush: 3 days'},{value:2,text:'Express: next day'},{value:3,text:'Overnight'}],value:0},
		    			{type:'$grid',showBox:true,barTheme:'d',children:[
		    				{type:'$button',caption:'Cancel',key:'cancel-form-demo'},
		    				{type:'$button',caption:'Submit',key:'submit-form-demo'}
		    			]},
		    		]},
		    		{type:'$button',caption:'Theme 1',key:'changetheme',value:1},
		    		{type:'$button',caption:'Theme 2',key:'changetheme',value:2},
		    		{type:'$button',caption:'Theme 3',key:'changetheme',value:3},
		    		{type:'$button',caption:'Theme 4',key:'changetheme',value:4},
		    		{type:'$button',caption:'Theme 5',key:'changetheme',value:5},
		    		{type:'$button',caption:'Theme 6',key:'changetheme',value:6}
		    	]
	    	};
	     	break;
	    
	     case 'maps-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	    			{type:'$map',id:'map1',width:window.innerWidth,height:(window.innerHeight-96),
	    				zoom:10,centerLat:50.11,centerLng:8.68,address:'Berlin, Germany',mapTypeId:google.maps.MapTypeId.HYBRID,
	    				centerAtUser:true,showMarkerAtCenter:true,centerMarkerTitle:'This is your position',
	    				centerMarkerDraggable:true,value:'=[markers]',children:[
	    				{type:'$marker',lat:'=[lat]',lng:'=[lng]',address:'=[address]',title:'=[title]',draggable:'=[draggable]'},
	    				//{type:'$marker',lat:50.11,lng:8.68,title:'Frankfurt'},
	    				//{type:'$directions',startLat:50.11,startLng:8.68,endLat:50.22,endLng:8.88}
	    			]}
	     		]
	    	};
	     
	     	break;
	    
	     case 'form-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$text',fieldcontain:true,placeHolder:'Enter some text',key:'text-1',label:'Text input:'},
		    			{type:'$textarea',fieldcontain:true,placeHolder:'Enter some text',key:'textarea-1',label:'Text area:'},
		    			{type:'$checkbox',fieldcontain:true,label:'Checkbox',text:'Do you want to select me?',key:'check-1'},
		    			{type:'$select',fieldcontain:true,slider:true,label:'Flip-switch:',key:'flip-1',valueList:[{value:0,text:'off'},{value:1,text:'on'}],value:0},
		    			{type:'$input',inputType:'range',highlight:true,fieldcontain:true,label:'Slider:',key:'range-1',min:100,max:5000,value:2000,text:2000},
		    			{type:'$select',fieldcontain:true,slider:false,label:'Choose shipping method:',key:'select-1',valueList:[{value:0,text:'Standard: 7 days'},{value:1,text:'Rush: 3 days'},{value:2,text:'Express: next day'},{value:3,text:'Overnight'}],value:0},
		    			{type:'$grid',showBox:true,barTheme:'d',children:[
		    				{type:'$button',caption:'Cancel',key:'cancel-form-demo'},
		    				{type:'$button',caption:'Submit',key:'submit-form-demo'}
		    			]},
		    			{type:'$popup',key:'form-popup',children:[
		    				{type:'$controlgroup',children:[
		    					{type:'$button',caption:'Excited? We are just getting started!'},
		    					{type:'$button',caption:'And yes, this is a popup.'}
		    				]}
		    			]}
		    		]
		    		}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'buttons-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$button',caption:'Standard Button',key:'action-1'},
		    			{type:'$button',caption:'Disabled Button',disabled:true,key:'action-1'},
		    			{type:'$button',caption:'Standard Mini Button',mini:true,key:'action-1'},
		    			{type:'$button',caption:'No Corners',corners:false},
		    			{type:'$button',caption:'No Shadow',shadow:false},
		    			{type:'$button',inline:true,caption:'Inline'},
		    			{type:'$button',inline:true,mini:true,caption:'Inline Mini'},
		    		]}
		    	]
	    	};
	     
	     	break;
	     
	     case 'buttons-icons-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataiconpos:'notext',dataicon:'bars',caption:'Bars'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'edit'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-l'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-r'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-u'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-d'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'delete'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'plus'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'minus'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'check'}
		    			]},
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataiconpos:'notext',dataicon:'gear'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'refresh'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'forward'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'back'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'grid'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'star'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'alert'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'info'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'home'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'search'}
		    			]},
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataicon:'bars',caption:'Bars'},
		    				{type:'$button',dataiconpos:'right',dataicon:'edit',caption:'Edit'},
		    			]},
		    		]}
		    	]
		    };
		    		
	     	break;
	     	
	     case 'buttons-grouped-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataicon:'bars',caption:'Bars'},
		    				{type:'$button',dataiconpos:'right',dataicon:'edit',caption:'Edit'},
		    			]},
		    			{type:'$controlgroup',children:[
		    				{type:'$button',caption:'Yes'},
		    				{type:'$button',caption:'No'},
		    				{type:'$button',caption:'Maybe'}
		    			]},
		    			{type:'$grid',showBox:true,barTheme:'d',children:[
		    				{type:'$button',caption:'Cancel',key:'cancel-form-demo'},
		    				{type:'$button',caption:'Submit',key:'submit-form-demo'}
		    			]},
		    		]}
		    	]
		    };
		    	break;
	     	
	     case 'footer-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	     			{type:'$footer',fixed:true,caption:'This is a simple footer',children:[
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'complex-footer-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	     			{type:'$footer',fixed:true,caption:'This is a complex footer',children:[
	     				{type:'$grid',children:[
	     					{type:'$controlgroup',children:[
	     						{type:'$button',mini:true,caption:'Action 1',key:'footer-action-1'},
	     						{type:'$button',mini:true,caption:'Action 2',key:'footer-action-2'},
	     					]},
	     					{type:'$select',mini:true,slider:false,label:'Choose shipping method:',key:'select-1',valueList:[{value:0,text:'Standard: 7 days'},{value:1,text:'Rush: 3 days'},{value:2,text:'Express: next day'},{value:3,text:'Overnight'}],value:0}
	     				]}
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'simple-navbar-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		{type:'$header', caption: '=[sectionHeader]', fixed:true, children:[
		    			{type:'$navbar',children:[
	     					{type:'$navbaritem',caption:'One',active:true},
	     					{type:'$navbaritem',caption:'Two'},
	     					{type:'$navbaritem',caption:'Three'},
	     					{type:'$navbaritem',caption:'Four'},
	     					{type:'$navbaritem',caption:'Five'},
	     					{type:'$navbaritem',caption:'Six'}
	     					
	     				]}
		    		]},
	     			{type:'$footer',fixed:true,caption:'Footer with simple navbar (theme \'e\')',children:[
	     				{type:'$navbar',children:[
	     					{type:'$navbaritem',dataTheme:'e',caption:'One',active:true},
	     					{type:'$navbaritem',dataTheme:'e',caption:'Two'},
	     					{type:'$navbaritem',dataTheme:'e',caption:'Three'}
	     				]}
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'icon-navbar-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		{type:'$header', caption: '=[sectionHeader]', fixed:true, children:[
		    			{type:'$navbar',children:[
	     					{type:'$navbaritem',caption:'One',active:true,icon:'grid'},
	     					{type:'$navbaritem',caption:'Two',icon:'star'},
	     					{type:'$navbaritem',caption:'Three',icon:'gear'},
	     					
	     				]}
		    		]},
	     			{type:'$footer',fixed:true,caption:'Footer with simple navbar',children:[
	     				{type:'$navbar',dataiconpos:'right',children:[
	     					{type:'$navbaritem',caption:'One',active:true,icon:'grid'},
	     					{type:'$navbaritem',caption:'Two',icon:'star'},
	     					{type:'$navbaritem',caption:'Three',icon:'gear'},
	     				]}
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'panel-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	     			{type:'$pagecontent',children:[
	     				{type:'$button',caption:'Toogle left pane',key:'toggle-left-pane'},
	     				{type:'$button',caption:'Toogle right pane',key:'toggle-right-pane'},
	     			]},
	     			{type:'$panel',key:'leftPanel',displayMode:'push',children:[
	     				{type:'$controlgroup',children:[
	     					{type:'$span',$content:'This is a panel on the left side'},
		    				{type:'$button',caption:'Action 1'},
		    				{type:'$button',caption:'Action 2'},
		    				{type:'$button',caption:'Action 3'}
		    			]},
	     			]},
	     			{type:'$panel',key:'rightPanel',position:'right',displayMode:'overlay',children:[
	     				{type:'$controlgroup',children:[
	     					{type:'$span',$content:'This is a panel on the right side with a different mode: \'overlay\'.'},
		    				{type:'$button',caption:'Action 1'},
		    				{type:'$button',caption:'Action 2'},
		    				{type:'$button',caption:'Action 3'}
		    			]},
	     			]},
		    	]
    		}
	     
	     	break;
	     	
	     case 'checkbox-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$checkbox',label:'Standard Checkbox',key:'check-1'},
		    			{type:'$checkbox',fieldcontain:true,label:'Checkbox',label:'Contained Checkbox',key:'check-1'},
		    			{type:'$checkbox',mini:true,label:'Mini Checkbox',key:'check-1'},
		    			{type:'$checkbox',dataiconpos:'right',label:'Right Icon',key:'check-1'},
		    			{type:'$fieldset',label:'What do you prefer?',children:[
		    				{type:'$checkbox',label:'Men-made',key:'check-1'},
		    				{type:'$checkbox',label:'God-made',key:'check-1'},
		    			]},
		    			{type:'$fieldset',horizontal:true,label:'What do you want most?',children:[
		    				{type:'$checkbox',label:'More money!',key:'check-1'},
		    				{type:'$checkbox',label:'Less work!',key:'check-1'},
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'radiobuttons-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$radio-button',text:'One',name:'radio-1',checked:true,key:'radio-1-one',optionValue:'One'},
		    			{type:'$radio-button',text:'Two',name:'radio-1',key:'radio-1-two',optionValue:'Two'},
		    			{type:'$fieldset',label:'Vertical',children:[
		    				{type:'$radio-button',text:'One',name:'radio-2',checked:true,key:'radio-2-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-2',key:'radio-2-two',optionValue:'Two'},
		    			]},
		    			{type:'$fieldset',label:'Horizontal',horizontal:true,children:[
		    				{type:'$radio-button',text:'One',name:'radio-3',checked:true,key:'radio-3-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-3',key:'radio-3-two',optionValue:'Two'},
		    			]},
		    			{type:'$fieldset',label:'Vertical Mini',mini:true,children:[
		    				{type:'$radio-button',text:'One',name:'radio-4',checked:true,key:'radio-4-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-4',key:'radio-4-two',optionValue:'Two'},
		    			]},
		    			{type:'$fieldset',label:'Vertical Icon right',dataiconpos:'right',children:[
		    				{type:'$radio-button',text:'One',name:'radio-5',checked:true,key:'radio-5-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-5',key:'radio-5-two',optionValue:'Two'},
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     
	     case 'listview-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'List View'},
		    			{type:'$listview',children:[
		    				{type:'$listviewitem',label:'Audi'},
		    				{type:'$listviewitem',label:'BMW'}
		    			]},
		    			{type:'$span',$content:'Ordered List View'},
		    			{type:'$listview',ordered:true,children:[
		    				{type:'$listviewitem',label:'Audi'},
		    				{type:'$listviewitem',label:'BMW'}
		    			]},
		    			{type:'$span',$content:'Clickable List View'},
		    			{type:'$listview',value:'=[elements]',children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]'}
		    			]},
		    			{type:'$span',$content:'Inset List View (and custom icons)'},
		    			{type:'$listview',value:'=[elements]',inset:true,children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]',dataicon:'gear'}
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'listview-filter-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'List View with reveal filter',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[elements]',inset:true,filter:true,filterplaceholder:'Search for cars...',filterreveal:true,children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]'}
		    			]},
		    			{type:'$span',$content:'List View with filter',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[elements]',filter:true,filterplaceholder:'Search for cars...',children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]'}
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'listview-divider-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'List View with Divider (and bubbles)',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[groups]',children:[
		    				{type:'$listviewitem',label:'=[label]',divider:true},
		    				{type:'$loop',value:'=[elements]',children:[
		    					{type:'$listviewitem',label:'=[label]',count:'=[count]',clickable:true},
		    				]}
		    			]},
		    			{type:'$span',$content:'List View with filter and autodividers',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[elements]',inset:true,filter:true,autodividers:true,children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true}
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'listview-format-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'Thumbnails and custom content',style:'margin-bottom:10px'},
		    			{type:'$listview',children:[
		    				{type:'$listviewitem',thumbnail:'covers/13152112_s.jpg',key:'money',clickable:true,children:[
		    					{type:'$content',content:'<h2>Money</h2><p>For everyone</p>'}
		    				]},
		    				{type:'$listviewitem',thumbnail:'covers/9105872_s.jpg',key:'city',clickable:true,children:[
		    					{type:'$content',content:'<h2>City</h2><p>Enjoy the skyline</p>'}
		    				]},
		    			]},
		    			{type:'$span',$content:'Formatted content',style:'margin-bottom:10px'},
		    			{type:'$listview',children:[
		    				{type:'$listviewitem',label:'Friday, August 23, 2013',divider:true},
		    				{type:'$listviewitem',clickable:true,children:[
		    					{type:'$content',content:'<h2>The Demo Team</h2><p><strong>You have been invited to a meeting in Boston</strong></p><p>Are you available tomorrow at 10am?</p><p class="ui-li-aside"><strong>6:24</strong>PM</p>'}
		    				]},
		    				{type:'$listviewitem',clickable:true,children:[
		    					{type:'$content',content:'<h2>Coffee House</h2><p><strong>We found a new mixture!</strong></p><p>Let\'s try the new apple-cinnamon coffee with crumble topping.</p> <p class="ui-li-aside"><strong>1:32</strong>PM</p>'}
		    				]},
		    			]}
		    		]}
		    	]
	    	};
	     
	     	break;
	     		
	     case 'collapsible-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$collapsible',label:'This is collapsible',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',dataContentTheme:'b',label:'This collapsible uses a theme',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',dataContentTheme:'d',expanded:true,label:'This themed collapsible is expanded',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',mini:true,label:'This is a mini collapsible',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',dataiconpos:'right',collapsedicon:'arrow-d',expandedicon:'arrow-u',label:'Icons',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',inset:false,label:'Non-Inset',children:[
		    				// static - not using value!
		    				{type:'$checkbox',label:'More money!',key:'check-1'},
		    				{type:'$checkbox',label:'Less work!',key:'check-1'},
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	      case 'collapsibleset-demo':
	     	
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$collapsibleset',children:[
		    				{type:'$collapsible',label:'Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',expanded:true,label:'Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',inset:false,children:[
		    				{type:'$collapsible',label:'Non-inset Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',label:'Non-inset Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',mini:true,children:[
		    				{type:'$collapsible',mini:true,label:'Mini Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',mini:true,label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',mini:true,label:'Mini Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',mini:true,label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',collapsedicon:'arrow-d',expandedicon:'arrow-u',children:[
		    				{type:'$collapsible',label:'Icon Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',label:'Right Icon Section 2',dataiconpos:'right',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',corners:false,children:[
		    				{type:'$collapsible',label:'No Corners Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',label:'No Corners Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]}
		    		]}
		    	]
	    	};
	     
	     	break;
    } 
           				
    return content;
]]></Implementation>
</Method>

<Method name="onselect">
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//console.log('select '+key);
	var mainView = zen(docViewId);

	switch(key) {
		case 'goto':
			mainView.pushDocument(value,{},value,{});
			break;
		case 'start-show':
		
			mainView.getItemByKey('start-show').$hide();
			mainView.getItemByKey('start-show-label').$show();
			
			$.mobile.showPageLoadingMsg("a", "Preparing the demo. Yes this is a loading screen!", false);
			
			var lastTime = 0;
			var startTime = 2000;
			
			setTimeout(function() { 
				$.mobile.hidePageLoadingMsg();
			},startTime);
			
			// ** starting forms demo **
			
			console.log('start forms demo at: '+startTime);
			lastTime = this.formDemo(startTime,1200,300);
			console.log('finish forms demo at: '+lastTime);
			
			// ** starting popup demo **
			
			startTime = lastTime + 1400; // 16000
			
			setTimeout(function() { 
				var mainView = zen('mainView');
				mainView.getPluginByLayoutObjectType('$popup').showPopup('form-popup');
			},startTime);
			
			setTimeout(function() { 
				var mainView = zen('mainView');
				mainView.getPluginByLayoutObjectType('$popup').closePopup('form-popup');
			},startTime+1800);
			
			lastTime = startTime + 1800;
			
			// ** buttons demo **
			
			startTime = lastTime + 500; 
			
			console.log('start buttons demo at: '+startTime);
			lastTime = this.buttonsDemo(startTime,2500,0);
			console.log('finish buttons demo at: '+lastTime);
			
			// ** checkbox demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start checkbox demo at: '+startTime);
			lastTime = this.checkboxDemo(startTime,2500,0);
			console.log('finish checkbox demo at: '+lastTime);
			
			// ** radiobuttons demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start radiobuttons demo at: '+startTime);
			lastTime = this.radiobuttonsDemo(startTime,2500,0);
			console.log('finish radiobuttons demo at: '+lastTime);
			
			// ** collapsible demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start collapsible demo at: '+startTime);
			lastTime = this.collapsibleDemo(startTime,2500,0);
			console.log('finish collapsible demo at: '+lastTime);
			
			// ** collapsible set demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start collapsibleset demo at: '+startTime);
			lastTime = this.collapsiblesetDemo(startTime,2500,0);
			console.log('finish collapsibleset demo at: '+lastTime);
			
			// ** starting footer demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start footer demo at: '+startTime);
			lastTime = this.footerDemo(startTime,2500,0);
			console.log('finish footer demo at: '+lastTime);
			
			// ** starting navbar demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start navbar demo at: '+startTime);
			lastTime = this.navbarDemo(startTime,2500,0);
			console.log('finish navbar demo at: '+lastTime);
			
			// ** going back to home **
			
			startTime = lastTime + 2500;
			
			setTimeout(function() {
				var mainView = zen('mainView');
				mainView.popAll();
				mainView.getPluginByLayoutObjectType('$popup').showPopup('going-back');
			},startTime);
			
			setTimeout(function() {
				var mainView = zen('mainView');;
				mainView.getPluginByLayoutObjectType('$popup').closePopup('going-back');
			},startTime+2000);
			
			lastTime = startTime + 2000;
			
			// ** starting panels demo **
			
			startTime = lastTime + 1000; 
			
			console.log('start panels demo at: '+startTime);
			lastTime = this.panelsDemo(startTime,1500,500);
			console.log('finish panels demo at: '+lastTime);
			
			// ** starting listview demo **
			
			startTime = lastTime + 1000; 
			
			console.log('start listview demo at: '+startTime);
			lastTime = this.listviewDemo(startTime,2500,0);
			console.log('finish listview demo at: '+lastTime);
			
			// ** starting themes demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start themes demo at: '+startTime);
			lastTime = this.themesDemo(startTime,750,0);
			console.log('finish themes demo at: '+lastTime);
			
			// ** starting animations demo **
			
			startTime = lastTime + 1000; 
			
			console.log('start animations demo at: '+startTime);
			lastTime = this.animationDemo(startTime,2500,0);
			console.log('finish animations demo at: '+lastTime);
			
			break;
			
		case 'toggle-left-pane':
			
			mainView.getPluginByLayoutObjectType('$popup').togglePanel('leftPanel');
			
			break;
			
		case 'toggle-right-pane':
		
			mainView.getPluginByLayoutObjectType('$popup').togglePanel('rightPanel');
		
			break;
		
		case 'changetheme':
			switch (value) {
				case 1:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('a','c','c');
					break;
				case 2:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('b','e','e');
					break;
				case 3:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
					break;
				case 4:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('d','b','b');
					break;
				case 5:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('e','d','d');
					break;
				case 6:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
					break;
			}
	}
	
	return true;
]]></Implementation>
</Method>

<Method name="onchange">
<FormalSpec>key,value,final,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('change ' + key + ' to ' + value);
	var view = zen(docViewId);
	switch(key) {
	}
]]></Implementation>
</Method>

<Method name="formDemo">
<FormalSpec>startTime,step=1000,initialWait=800</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.pushDocument('form-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('text-1','This is some text');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('textarea-1','This is some more text. Let\s start playing around with the other form elements.');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('check-1',true);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('flip-1',1);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('range-1',3333);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('select-1',3);
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="themesDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.pushDocument('form-demo',{dataKey:'themes-demo'});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('a','c','c');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('b','e','e');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('d','b','b');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('e','d','d');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="panelsDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('panel-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').openPanel('leftPanel');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').closePanel('leftPanel');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').openPanel('rightPanel');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').closePanel('rightPanel');
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="buttonsDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('buttons-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('buttons-icons-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('buttons-grouped-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="checkboxDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('checkbox-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="radiobuttonsDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('radiobuttons-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="collapsibleDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('collapsible-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="collapsiblesetDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('collapsibleset-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="footerDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('footer-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('complex-footer-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="navbarDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('simple-navbar-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('icon-navbar-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="listviewDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-filter-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-divider-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-format-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="animationDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'fade';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'pop';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'flip';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'turn';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'flow';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	/*setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'slidefade';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;*/
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'slide';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'slideup';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popAll();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.jQM143.Application">
<Super>%ZEN.Mojo.baseApplication</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58507.342228</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>jquerymobile</Default>
</Parameter>

<Method name="%GetAppSettings">
<Description>
Return an object containing the various configured settings for the portal.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	
	Set tInfo = ##class(%ZEN.proxyObject).%New()

	// initial templateClass
	Set tInfo.templateClass = ""

	// names
	Set tInfo.nameApplication = "jQM Demo Application"

	// overrides

	Quit tInfo
]]></Implementation>
</Method>

<Method name="ZMojoDrawBackgroundDiv">
<Description><![CDATA[
Draw the contents of the background div section (this is purely decorative)
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawQuickLinks">
<Description><![CDATA[
Draw the contents of the quick links section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawBasicHelp">
<Description><![CDATA[
Draw the contents of the basic section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawFooterGroup">
<Description><![CDATA[
Draw the contents of the footer group section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.jQM143.HomePage">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58484.834602</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZMdemo.jQM.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>HomePage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description>
List of JSON providers created for this page.
Used by contentProvider.</Description>
<Default>data,layout</Default>
</Parameter>

<Parameter name="TEMPLATECLASS">
<Description>
Starting template class for this page
Used by contentProvider.
This is overriden by application settings, of provided.</Description>
<Default>ZMdemo.jQM143.baseTemplate</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
Comma-separated list of additional CSS3 include files for the page.
If this is defined *and* this page is using CSS3, then the CSSINCLUDES parameter is ignored.
If this is not defined *and* this page is using CSS3, then the CSSINCLUDES parameter is used.</Description>
<Type>STRING</Type>
<Default>jquery.mobile-1.4.3.min.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Comma-separated list of additional JS include files for the page.</Description>
<Type>STRING</Type>
<Default>jquery-1.10.2.min.js,jquery.mobile-1.4.3.min.js,https://maps.googleapis.com/maps/api/js?sensor=true</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
	.ui-listview-filter {
		margin: 0px;
	}
</style>
]]></Data>
</XData>

<XData name="pageContents">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen"
xmlns:mojo="http://www.intersystems.com/zen/mojo"
layout="none">

<mojo:documentView id="mainView" 
onload="zenPage._latestjQMVersion = 'jQM-1.4.3-Helper';"
initialDocumentKey="home"
initialLayoutKey="home"
maxPanels="15"
ongetlayout = "return zenPage.getContent('layout',key,criteria);"
ongetdata = "return zenPage.getContent('data',key,criteria);"
onresolvepluginconflicts ="console.log(conflicts);"
>
<mojo:jQM-1.4.3-PageManager jQueryAnimation="flip" onPageShow="zenPage.onPageShow(layoutkey,documentkey);">
<mojo:jQM-1.4.3-Helper/>
<mojo:googleMaps-3-Helper/>
<mojo:HTML5Helper/>
<mojo:mojoDefaultHelper/>
</mojo:jQM-1.4.3-PageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="onPageShow">
<FormalSpec>layoutkey,documentkey</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (layoutkey == 'maps-demo') {
		zen('mainView').getPluginByLayoutObjectType('$map').resizeMap();
	}
]]></Implementation>
</Method>

<Method name="%OnDrawHTMLMeta">
<Description><![CDATA[
This callback is called at the start of the HTML HEAD section of the page (just after the title).<br/>
It allows a page to write out meta tags, if desired.
(default implementation is a simple expression).]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Make it so that, when the user has selected IE compatibility mode, we ignore it and use the most recent IE version available
	//Write "<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />"
	// turn off unless this is actually mobile
	Write "<meta name=""viewport"" content=""width=device-width, initial-scale=1.0,maximum-scale=1, user-scalable=no""/>"
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.jQM143.baseTemplate">
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58554.738224</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/mojo/demo/jQM143</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Server-side method to provide content to JSON providers.<br/>
<var>pWhich</var> is the name of the provider.<br/>
<var>pKey</var> is an app-defined key that is used to indicate which content is to be served.<br/>
<var>pCriteria</var>is an object containing search criteria. This is used for searching.<br/>
<var>pParms</var> is an array of additional parameters from the JSON provider. (not current used).<br/>
<var>pObject</var> is the object that will be served to the client in JSON format.<br/>
<var>pLoad</var> is true is this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pWhich:%String,pKey:%String,&pParms,*pObject:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pObject = ##class(%ZEN.proxyObject).%New()
	
	if (pKey = "home") {
		set pObject.sectionHeader = "It starts here..."
	} elseif (pKey = "form-demo") {
		set pObject.sectionHeader = "Forms"
	} elseif (pKey = "maps-demo") {
		set pObject.sectionHeader = "Google Maps"
	} elseif (pKey = "panel-demo") {
		set pObject.sectionHeader = "Panels"
	} elseif (pKey = "themes-demo") {
		set pObject.sectionHeader = "Themes"
	} elseif (pKey = "footer-demo") {
		set pObject.sectionHeader = "Footers"
	} elseif (pKey = "complex-footer-demo") {
		set pObject.sectionHeader = "Complex Footers"
	} elseif (pKey = "simple-navbar-demo") {
		set pObject.sectionHeader = "Nav Bar"
	} elseif (pKey = "icon-navbar-demo") {
		set pObject.sectionHeader = "Nav Bar with Icons"
	} elseif (pKey = "animation-demo") {
		set pObject.sectionHeader = "Transitions"
	} elseif (pKey = "checkbox-demo") {
		set pObject.sectionHeader = "Checkboxes"
	} elseif (pKey = "radiobuttons-demo") {
		set pObject.sectionHeader = "Radio Buttons"
	} elseif (pKey = "buttons-demo") {
		set pObject.sectionHeader = "Buttons"
	} elseif (pKey = "buttons-icons-demo") {
		set pObject.sectionHeader = "Icon Buttons"
	} elseif (pKey = "buttons-grouped-demo") {
		set pObject.sectionHeader = "Grouped Buttons"
	} elseif (pKey = "listview-demo") {
		set pObject.sectionHeader = "List View"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Audi"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Acura"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "BMW"
		set element.key = "Key 3"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Honda"
		set element.key = "Key 4"
		do pObject.elements.Insert(element)
	} elseif (pKey = "listview-filter-demo") {
		set pObject.sectionHeader = "List View With Filters"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Audi"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Acura"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "BMW"
		set element.key = "Key 3"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Honda"
		set element.key = "Key 4"
		do pObject.elements.Insert(element)
	} elseif (pKey = "listview-divider-demo") {
		
		set pObject.sectionHeader = "List View With Dividers"
		set pObject.groups = ##class(%ListOfObjects).%New()
		
		set group = ##class(%ZEN.proxyObject).%New()
		set group.label= "Mail"
		set group.elements = ##class(%ListOfObjects).%New()
		
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Inbox"
		set element.count = 123
		do group.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Outbox"
		set element.count = 2
		do group.elements.Insert(element)
		do pObject.groups.Insert(group)
		
		set group = ##class(%ZEN.proxyObject).%New()
		set group.label= "Contacts"
		set group.elements = ##class(%ListOfObjects).%New()
		
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Friends"
		set element.count = 5682
		do group.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Work"
		set element.count = 2
		do group.elements.Insert(element)
		do pObject.groups.Insert(group)
		
		// second data set
		
		set pObject.elements = ##class(%ListOfObjects).%New()
		
		for i=1:1:10 {
			set ^||temp(##class(%PopulateUtils).Name()) = ""
		}
		
		set key = $O(^||temp(""))
		while (key '= "") {
			set element = ##class(%ZEN.proxyObject).%New()
			set element.label=key
			do pObject.elements.Insert(element)
			set key = $O(^||temp(key))
		}
		
	} elseif (pKey = "listview-format-demo") {
		set pObject.sectionHeader = "List View Formats"
	} elseif (pKey = "collapsible-demo") {
		set pObject.sectionHeader = "Collapsibles"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "More Money!"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Less Work!"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
	} elseif (pKey = "collapsibleset-demo") {
		set pObject.sectionHeader = "Accordions"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "More Money!"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Less Work!"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
	} elseif (pKey = "table-demo") {
		set pObject.sectionHeader = "Tables"
		set pObject.Stores = ##class(%ListOfObjects).%New()
		for i=1:1:5 {
			set store = ##class(%ZEN.proxyObject).%New()
			set store.Rating = i
			set store.Name = "Store "_ i
			set store.Location = "Location " _ i
			do pObject.Stores.Insert(store)
		}
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="getData">
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var data = {};
	switch (key) {
		case 'home':
			data.sectionHeader = 'It starts here...';
			break;
		case 'form-demo':
			data.sectionHeader = 'Forms';
			break;
		case 'maps-demo':
			data.sectionHeader = 'Google Maps';
			data.markers = [
				{lat:59.1456566,lng:18.1988525,title:'Stockholm',draggable:true},
				{lat:50.110922,lng:8.682127,title:'Frankfurt',draggable:false},
				{address:'Paris, France',draggable:true,title:'Paris'}
			];
			break;
		case 'panel-demo':
			data.sectionHeader = 'Panels';
			break;
		case 'themes-demo':
			data.sectionHeader = 'Themes';
			break;
		case 'footer-demo':
			data.sectionHeader = 'Footers';
			break;
		case 'complex-footer-demo':
			data.sectionHeader = 'Complex Footers';
			break;
		case 'simple-navbar-demo':
			data.sectionHeader = 'Nav Bar';
			break;
		case 'icon-navbar-demo':
			data.sectionHeader = 'Nav Bar With Icons';
			break;
		case 'animation-demo':
			data.sectionHeader = 'Transitions';
			break;
		case 'checkbox-demo':
			data.sectionHeader = 'Checkboxes';
			break;
		case 'radiobuttons-demo':
			data.sectionHeader = 'Radio Buttons';
			break;
		case 'buttons-demo':
			data.sectionHeader = 'Buttons';
			break;
		case 'buttons-icons-demo':
			data.sectionHeader = 'Icon Buttons';
			break;
		case 'buttons-grouped-demo':
			data.sectionHeader = 'Grouped Buttons';
			break;
		case 'listview-demo':
			data.sectionHeader = 'List View';
			data.elements = [
				{label:'Audi',key:'Key 1'},
				{label:'Acura',key:'Key 2'},
				{label:'BMW',key:'Key 3'},
				{label:'Honda',key:'Key 4'}
			];
			break;
		case 'listview-filter-demo':
			data.sectionHeader = 'List View With Filter';
			data.elements = [
				{label:'Audi',key:'Key 1'},
				{label:'Acura',key:'Key 2'},
				{label:'BMW',key:'Key 3'},
				{label:'Honda',key:'Key 4'}
			];
			break;
		case 'listview-divider-demo':
			data.sectionHeader = 'List View with Dividers';
			data.groups = [
				{label:'Mail',elements:[{label:'Inbox',count:123},{label:'Outbox',count:2}]},
				{label:'Contacts',elements:[{label:'Friends',count:5682},{label:'Work',count:2}]}
			];
			data.elements = [{label:'Homer Jay Simpson'},{label:'Marjorie "Marge" Simpson'},{label:'Bartholomew JoJo "Bart" Simpson'},{label:'J. Edgar Hoover'}];
			break;
		case 'listview-format-demo':
			data.sectionHeader = 'List View Formats';
			break;
		case 'collapsible-demo':
			data.sectionHeader = 'Collapsibles';
			data.elements = [
				{label:'More Money!',key:'Key 1'},
				{label:'Less work!',key:'Key 2'}
			];
			break;
		case 'collapsibleset-demo':
			data.sectionHeader = 'Accordions';
			data.elements = [
				{label:'More Money!',key:'Key 1'},
				{label:'Less work!',key:'Key 2'}
			];
			break;
		case 'table-demo':
			data.sectionHeader = 'Table Demo';
			data.Stores = [
				{Name:'Store 1',Location:'Location 1', Rating:1},
				{Name:'Store 2',Location:'Location 2', Rating:2},
				{Name:'Store 3',Location:'Location 3', Rating:3},
				{Name:'Store 4',Location:'Location 4', Rating:4},
				{Name:'Store 5',Location:'Location 5', Rating:5}
			];
			break;
		case '':
			data.sectionHeader = '';
			break;
	}
	return data;
]]></Implementation>
</Method>

<Method name="onGetContent">
<Description><![CDATA[
Client-side content provider method.
<var>which</var> is the name of the content to return.
<var>key</var> is the key value associated with the request.
<var>criteria</var> is the search criteria associated with the request.]]></Description>
<FormalSpec>which,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//console.log(which + ' - ' + key + ' - ' + criteria);
	switch (which)
	{
		case 'layout':
			return this.getLayout(key,criteria);
		case 'data':
			// comment this out, if you want to get data from the server
			return this.getData(key,criteria);
	}
	
	// returning null -> fetch data from server
	return null;
]]></Implementation>
</Method>

<Method name="getLayout">
<Description>
Creates the layout object for the page</Description>
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var content = null;
	
	var header = { type: '$header', dataTheme:'b', caption: '=[sectionHeader]', fixed:true};
    

    if (criteria && criteria.dataKey) {
    	data = zenPage.getContent('data',criteria.dataKey,{});
    } else {
	    data = zenPage.getContent('data',key,{});
    }
    
    switch(key) {
	    case 'home' :
	    	
	    	content = {
		    	children:[
		    		header,
		    		{type:'$span',$content:'Let\'s get started.',hidden:true,key:'start-show-label'},
		    		{type:'$button',caption:'Start demo',key:'start-show'},
		    		{type:'$collapsible',dataTheme:'b',label:'... or jump directly',children:[
		    			{type:'$listview',filter:true,key:'listview',children:[
		    				{type:'$listviewitem',label:'Buttons',clickable:true,key:'goto' ,value:'buttons-demo'},
		    				{type:'$listviewitem',label:'Buttons (Icons)',clickable:true,key:'goto' ,value:'buttons-icons-demo'},
		    				{type:'$listviewitem',label:'Buttons (Grouped)',clickable:true,key:'goto' ,value:'buttons-grouped-demo'},
		    				{type:'$listviewitem',label:'Checkboxes',clickable:true,key:'goto' ,value:'checkbox-demo'},
		    				{type:'$listviewitem',label:'Collapsibles',clickable:true,key:'goto' ,value:'collapsible-demo'},
		    				{type:'$listviewitem',label:'Collapsible Set (Accordion)',clickable:true,key:'goto' ,value:'collapsibleset-demo'},
		    				{type:'$listviewitem',label:'Forms',clickable:true,key:'goto' ,value:'form-demo'},
		    				{type:'$listviewitem',label:'Footer',clickable:true,key:'goto' ,value:'footer-demo'},
		    				{type:'$listviewitem',label:'Footer (Complex)',clickable:true,key:'goto' ,value:'complex-footer-demo'},
		    				{type:'$listviewitem',label:'List View',clickable:true,key:'goto' ,value:'listview-demo'},
		    				{type:'$listviewitem',label:'List View (Filter)',clickable:true,key:'goto' ,value:'listview-filter-demo'},
		    				{type:'$listviewitem',label:'List View (Divider)',clickable:true,key:'goto' ,value:'listview-divider-demo'},
		    				{type:'$listviewitem',label:'List View (Format)',clickable:true,key:'goto' ,value:'listview-format-demo'},
		    				{type:'$listviewitem',label:'Google Maps',clickable:true,key:'goto' ,value:'maps-demo'},
		    				{type:'$listviewitem',label:'Navbar',clickable:true,key:'goto' ,value:'simple-navbar-demo'},
		    				{type:'$listviewitem',label:'Navbar (Icons)',clickable:true,key:'goto' ,value:'icon-navbar-demo'},
		    				{type:'$listviewitem',label:'Panel',clickable:true,key:'goto' ,value:'panel-demo'},
		    				{type:'$listviewitem',label:'Radiobuttons',clickable:true,key:'goto' ,value:'radiobuttons-demo'},
		    				{type:'$listviewitem',label:'Themes',clickable:true,key:'goto' ,value:'themes-demo'},
		    			]},
		    		]},
		    		{type:'$popup',key:'going-back',transition:'flip',children:[
	    				{type:'$controlgroup',children:[
	    					{type:'$button',caption:'Let\'s relax a while.'},
	    					{type:'$button',caption:'But this is not the end.'}
	    				]}
	    			]},
	    			{type:'$popup',key:'still-loading',children:[
	    				{type:'$controlgroup',children:[
	    					{type:'$button',caption:'Sorry, still loading.'}
	    				]}
	    			]},
		    	]
	    	};
	    
	    	break;
	    
	     case 'themes-demo':
	     	
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$text',fieldcontain:true,placeHolder:'Enter some text',key:'text-1',label:'Text input:'},
		    			{type:'$textarea',fieldcontain:true,placeHolder:'Enter some text',key:'textarea-1',label:'Text area:'},
		    			{type:'$checkbox',fieldcontain:true,label:'Checkbox',text:'Do you want to select me?',key:'check-1'},
		    			{type:'$select',fieldcontain:true,slider:true,label:'Flip-switch:',key:'flip-1',valueList:[{value:0,text:'off'},{value:1,text:'on'}],value:0},
		    			{type:'$input',inputType:'range',highlight:true,fieldcontain:true,label:'Slider:',key:'range-1',min:100,max:5000,value:2000,text:2000},
		    			{type:'$select',fieldcontain:true,slider:false,label:'Choose shipping method:',key:'select-1',valueList:[{value:0,text:'Standard: 7 days'},{value:1,text:'Rush: 3 days'},{value:2,text:'Express: next day'},{value:3,text:'Overnight'}],value:0},
		    			{type:'$grid',showBox:true,barTheme:'d',children:[
		    				{type:'$button',caption:'Cancel',key:'cancel-form-demo'},
		    				{type:'$button',caption:'Submit',key:'submit-form-demo'}
		    			]},
		    		]},
		    		{type:'$button',caption:'Theme 1',key:'changetheme',value:1},
		    		{type:'$button',caption:'Theme 2',key:'changetheme',value:2},
		    		{type:'$button',caption:'Theme 3',key:'changetheme',value:3},
		    		{type:'$button',caption:'Theme 4',key:'changetheme',value:4},
		    		{type:'$button',caption:'Theme 5',key:'changetheme',value:5},
		    		{type:'$button',caption:'Theme 6',key:'changetheme',value:6}
		    	]
	    	};
	     	break;
	    
	     case 'maps-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	    			{type:'$map',id:'map1',width:window.innerWidth,height:(window.innerHeight-96),
	    				zoom:10,centerLat:50.11,centerLng:8.68,address:'Berlin, Germany',mapTypeId:google.maps.MapTypeId.HYBRID,
	    				centerAtUser:true,showMarkerAtCenter:true,centerMarkerTitle:'This is your position',
	    				centerMarkerDraggable:true,value:'=[markers]',children:[
	    				{type:'$marker',lat:'=[lat]',lng:'=[lng]',address:'=[address]',title:'=[title]',draggable:'=[draggable]'},
	    				//{type:'$marker',lat:50.11,lng:8.68,title:'Frankfurt'},
	    				//{type:'$directions',startLat:50.11,startLng:8.68,endLat:50.22,endLng:8.88}
	    			]}
	     		]
	    	};
	     
	     	break;
	    
	     case 'form-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$text',fieldcontain:true,placeHolder:'Enter some text',key:'text-1',label:'Text input:'},
		    			{type:'$textarea',fieldcontain:true,placeHolder:'Enter some text',key:'textarea-1',label:'Text area:'},
		    			{type:'$checkbox',fieldcontain:true,label:'Checkbox',text:'Do you want to select me?',key:'check-1'},
		    			{type:'$select',fieldcontain:true,slider:true,label:'Flip-switch:',key:'flip-1',valueList:[{value:0,text:'off'},{value:1,text:'on'}],value:0},
		    			{type:'$input',inputType:'range',highlight:true,fieldcontain:true,label:'Slider:',key:'range-1',min:100,max:5000,value:2000,text:2000},
		    			{type:'$select',fieldcontain:true,slider:false,label:'Choose shipping method:',key:'select-1',valueList:[{value:0,text:'Standard: 7 days'},{value:1,text:'Rush: 3 days'},{value:2,text:'Express: next day'},{value:3,text:'Overnight'}],value:0},
		    			{type:'$grid',showBox:true,barTheme:'d',children:[
		    				{type:'$button',caption:'Cancel',key:'cancel-form-demo'},
		    				{type:'$button',caption:'Submit',key:'submit-form-demo'}
		    			]},
		    			{type:'$popup',key:'form-popup',children:[
		    				{type:'$controlgroup',children:[
		    					{type:'$button',caption:'Excited? We are just getting started!'},
		    					{type:'$button',caption:'And yes, this is a popup.'}
		    				]}
		    			]}
		    		]
		    		}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'buttons-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$button',caption:'Standard Button',key:'action-1'},
		    			{type:'$button',caption:'Disabled Button',disabled:true,key:'action-1'},
		    			{type:'$button',caption:'Standard Mini Button',mini:true,key:'action-1'},
		    			{type:'$button',caption:'No Corners',corners:false},
		    			{type:'$button',caption:'No Shadow',shadow:false},
		    			{type:'$button',inline:true,caption:'Inline'},
		    			{type:'$button',inline:true,mini:true,caption:'Inline Mini'},
		    		]}
		    	]
	    	};
	     
	     	break;
	     
	     case 'buttons-icons-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataiconpos:'notext',dataicon:'bars',caption:'Bars'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'edit',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-l',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-r',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-u',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-d',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'delete',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'plus',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'minus',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'check',caption:'_'}
		    			]},
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataiconpos:'notext',dataicon:'gear',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'refresh',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'forward',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'back',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'grid',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'star',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'alert',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'info',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'home',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'search',caption:'_'}
		    			]},
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataicon:'bars',caption:'Bars'},
		    				{type:'$button',dataiconpos:'right',dataicon:'edit',caption:'Edit'},
		    			]},
		    			{type:'$button',inline:true,dataiconpos:'notext',dataicon:'bars'},
		    			{type:'$button',inline:true,dataiconpos:'notext',dataicon:'edit'},
		    		]}
		    	]
		    };
		    		
	     	break;
	     	
	     case 'buttons-grouped-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataicon:'bars',caption:'Bars'},
		    				{type:'$button',dataiconpos:'right',dataicon:'edit',caption:'Edit'},
		    			]},
		    			{type:'$controlgroup',children:[
		    				{type:'$button',caption:'Yes'},
		    				{type:'$button',caption:'No'},
		    				{type:'$button',caption:'Maybe'}
		    			]},
		    			{type:'$grid',showBox:true,barTheme:'d',children:[
		    				{type:'$button',caption:'Cancel',key:'cancel-form-demo'},
		    				{type:'$button',caption:'Submit',key:'submit-form-demo'}
		    			]},
		    		]}
		    	]
		    };
		    	break;
	     	
	     case 'footer-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	     			{type:'$footer',fixed:true,caption:'This is a simple footer',children:[
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'complex-footer-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	     			{type:'$footer',fixed:true,caption:'This is a complex footer',children:[
	     				{type:'$grid',children:[
	     					{type:'$controlgroup',children:[
	     						{type:'$button',mini:true,caption:'Action 1',key:'footer-action-1'},
	     						{type:'$button',mini:true,caption:'Action 2',key:'footer-action-2'},
	     					]},
	     					{type:'$select',mini:true,slider:false,label:'Choose shipping method:',key:'select-1',valueList:[{value:0,text:'Standard: 7 days'},{value:1,text:'Rush: 3 days'},{value:2,text:'Express: next day'},{value:3,text:'Overnight'}],value:0}
	     				]}
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'simple-navbar-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		{type:'$header', dataTheme:'b', caption: '=[sectionHeader]', fixed:true, children:[
		    			{type:'$navbar',children:[
	     					{type:'$navbaritem',caption:'One',active:true},
	     					{type:'$navbaritem',caption:'Two'},
	     					{type:'$navbaritem',caption:'Three'},
	     					{type:'$navbaritem',caption:'Four'},
	     					{type:'$navbaritem',caption:'Five'},
	     					{type:'$navbaritem',caption:'Six'}
	     					
	     				]}
		    		]},
	     			{type:'$footer', dataTheme:'b',fixed:true,caption:'Footer with simple navbar (theme \'a\')',children:[
	     				{type:'$navbar',children:[
	     					{type:'$navbaritem',dataTheme:'a',caption:'One',active:true},
	     					{type:'$navbaritem',dataTheme:'a',caption:'Two'},
	     					{type:'$navbaritem',dataTheme:'a',caption:'Three'}
	     				]}
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'icon-navbar-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		{type:'$header',  dataTheme:'b',caption: '=[sectionHeader]', fixed:true, children:[
		    			{type:'$navbar',children:[
	     					{type:'$navbaritem',caption:'One',active:true,icon:'grid'},
	     					{type:'$navbaritem',caption:'Two',icon:'star'},
	     					{type:'$navbaritem',caption:'Three',icon:'gear'},
	     					
	     				]}
		    		]},
	     			{type:'$footer', dataTheme:'b',fixed:true,caption:'Footer with simple navbar',children:[
	     				{type:'$navbar',dataiconpos:'right',children:[
	     					{type:'$navbaritem',caption:'One',active:true,icon:'grid'},
	     					{type:'$navbaritem',caption:'Two',icon:'star'},
	     					{type:'$navbaritem',caption:'Three',icon:'gear'},
	     				]}
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'panel-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	     			{type:'$pagecontent',children:[
	     				{type:'$button',caption:'Toogle left pane',key:'toggle-left-pane'},
	     				{type:'$button',caption:'Toogle right pane',key:'toggle-right-pane'},
	     			]},
	     			{type:'$panel',key:'leftPanel',displayMode:'push',children:[
	     				{type:'$controlgroup',children:[
	     					{type:'$span',$content:'This is a panel on the left side'},
		    				{type:'$button',caption:'Action 1'},
		    				{type:'$button',caption:'Action 2'},
		    				{type:'$button',caption:'Action 3'}
		    			]},
	     			]},
	     			{type:'$panel',key:'rightPanel',position:'right',displayMode:'overlay',children:[
	     				{type:'$controlgroup',children:[
	     					{type:'$span',$content:'This is a panel on the right side with a different mode: \'overlay\'.'},
		    				{type:'$button',caption:'Action 1'},
		    				{type:'$button',caption:'Action 2'},
		    				{type:'$button',caption:'Action 3'}
		    			]},
	     			]},
		    	]
    		}
	     
	     	break;
	     	
	     case 'checkbox-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$checkbox',label:'Standard Checkbox',key:'check-1'},
		    			{type:'$checkbox',fieldcontain:true,label:'Checkbox',label:'Contained Checkbox',key:'check-1'},
		    			{type:'$checkbox',mini:true,label:'Mini Checkbox',key:'check-1'},
		    			{type:'$checkbox',dataiconpos:'right',label:'Right Icon',key:'check-1'},
		    			{type:'$fieldset',label:'What do you prefer?',children:[
		    				{type:'$checkbox',label:'Men-made',key:'check-1'},
		    				{type:'$checkbox',label:'God-made',key:'check-1'},
		    			]},
		    			{type:'$fieldset',horizontal:true,label:'What do you want most?',children:[
		    				{type:'$checkbox',label:'More money!',key:'check-1'},
		    				{type:'$checkbox',label:'Less work!',key:'check-1'},
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'radiobuttons-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$radio-button',text:'One',name:'radio-1',checked:true,key:'radio-1-one',optionValue:'One'},
		    			{type:'$radio-button',text:'Two',name:'radio-1',key:'radio-1-two',optionValue:'Two'},
		    			{type:'$fieldset',label:'Vertical',children:[
		    				{type:'$radio-button',text:'One',name:'radio-2',checked:true,key:'radio-2-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-2',key:'radio-2-two',optionValue:'Two'},
		    			]},
		    			{type:'$fieldset',label:'Horizontal',horizontal:true,children:[
		    				{type:'$radio-button',text:'One',name:'radio-3',checked:true,key:'radio-3-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-3',key:'radio-3-two',optionValue:'Two'},
		    			]},
		    			{type:'$fieldset',label:'Vertical Mini',mini:true,children:[
		    				{type:'$radio-button',text:'One',name:'radio-4',checked:true,key:'radio-4-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-4',key:'radio-4-two',optionValue:'Two'},
		    			]},
		    			{type:'$fieldset',label:'Vertical Icon right',dataiconpos:'right',children:[
		    				{type:'$radio-button',text:'One',name:'radio-5',checked:true,key:'radio-5-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-5',key:'radio-5-two',optionValue:'Two'},
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     
	     case 'listview-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'List View'},
		    			{type:'$listview',children:[
		    				{type:'$listviewitem',label:'Audi'},
		    				{type:'$listviewitem',label:'BMW'}
		    			]},
		    			{type:'$span',$content:'Ordered List View'},
		    			{type:'$listview',ordered:true,children:[
		    				{type:'$listviewitem',label:'Audi'},
		    				{type:'$listviewitem',label:'BMW'}
		    			]},
		    			{type:'$span',$content:'Clickable List View'},
		    			{type:'$listview',value:'=[elements]',children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]'}
		    			]},
		    			{type:'$span',$content:'Inset List View (and custom icons)'},
		    			{type:'$listview',value:'=[elements]',inset:true,children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]',dataicon:'gear'}
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'listview-filter-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'List View with reveal filter',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[elements]',inset:true,filter:true,filterplaceholder:'Search for cars...',filterreveal:true,children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]'}
		    			]},
		    			{type:'$span',$content:'List View with filter',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[elements]',filter:true,filterplaceholder:'Search for cars...',children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]'}
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'listview-divider-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'List View with Divider (and bubbles)',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[groups]',children:[
		    				{type:'$listviewitem',label:'=[label]',divider:true},
		    				{type:'$loop',value:'=[elements]',children:[
		    					{type:'$listviewitem',label:'=[label]',count:'=[count]',clickable:true},
		    				]}
		    			]},
		    			{type:'$span',$content:'List View with filter and autodividers',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[elements]',inset:true,filter:true,autodividers:true,children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true}
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'listview-format-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'Thumbnails and custom content',style:'margin-bottom:10px'},
		    			{type:'$listview',children:[
		    				{type:'$listviewitem',thumbnail:'covers/13152112_s.jpg',key:'money',clickable:true,children:[
		    					{type:'$content',content:'<h2>Money</h2><p>For everyone</p>'}
		    				]},
		    				{type:'$listviewitem',thumbnail:'covers/9105872_s.jpg',key:'city',clickable:true,children:[
		    					{type:'$content',content:'<h2>City</h2><p>Enjoy the skyline</p>'}
		    				]},
		    			]},
		    			{type:'$span',$content:'Formatted content',style:'margin-bottom:10px'},
		    			{type:'$listview',children:[
		    				{type:'$listviewitem',label:'Friday, August 23, 2013',divider:true},
		    				{type:'$listviewitem',clickable:true,children:[
		    					{type:'$content',content:'<h2>The Demo Team</h2><p><strong>You have been invited to a meeting in Boston</strong></p><p>Are you available tomorrow at 10am?</p><p class="ui-li-aside"><strong>6:24</strong>PM</p>'}
		    				]},
		    				{type:'$listviewitem',clickable:true,children:[
		    					{type:'$content',content:'<h2>Coffee House</h2><p><strong>We found a new mixture!</strong></p><p>Let\'s try the new apple-cinnamon coffee with crumble topping.</p> <p class="ui-li-aside"><strong>1:32</strong>PM</p>'}
		    				]},
		    			]}
		    		]}
		    	]
	    	};
	     
	     	break;
	     		
	     case 'collapsible-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$collapsible',label:'This is collapsible',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',dataContentTheme:'b',label:'This collapsible uses a theme',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',dataContentTheme:'d',expanded:true,label:'This themed collapsible is expanded',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',mini:true,label:'This is a mini collapsible',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',dataiconpos:'right',collapsedicon:'arrow-d',expandedicon:'arrow-u',label:'Icons',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',inset:false,label:'Non-Inset',children:[
		    				// static - not using value!
		    				{type:'$checkbox',label:'More money!',key:'check-1'},
		    				{type:'$checkbox',label:'Less work!',key:'check-1'},
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	      case 'collapsibleset-demo':
	     	
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$collapsibleset',children:[
		    				{type:'$collapsible',label:'Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',expanded:true,label:'Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',inset:false,children:[
		    				{type:'$collapsible',label:'Non-inset Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',label:'Non-inset Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',mini:true,children:[
		    				{type:'$collapsible',mini:true,label:'Mini Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',mini:true,label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',mini:true,label:'Mini Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',mini:true,label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',collapsedicon:'arrow-d',expandedicon:'arrow-u',children:[
		    				{type:'$collapsible',label:'Icon Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',label:'Right Icon Section 2',dataiconpos:'right',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',corners:false,children:[
		    				{type:'$collapsible',label:'No Corners Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',label:'No Corners Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]}
		    		]}
		    	]
	    	};
	     
	     	break;
    } 
           				
    return content;
]]></Implementation>
</Method>

<Method name="onselect">
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//console.log('select '+key);
	var mainView = zen(docViewId);

	switch(key) {
		case 'goto':
			mainView.pushDocument(value,{},value,{});
			break;
		case 'start-show':
		
			mainView.getItemByKey('start-show').$hide();
			mainView.getItemByKey('start-show-label').$show();
			
			$.mobile.loading( "show", {
            	text: "Preparing the demo. Yes this is a loading screen!",
            	textVisible: true,
            	theme: 'a',
            	textonly: false,
    		});
			
			var lastTime = 0;
			var startTime = 2000;
			
			setTimeout(function() { 
				$.mobile.loading("hide");
			},startTime);
			
			// ** starting forms demo **
			
			console.log('start forms demo at: '+startTime);
			lastTime = this.formDemo(startTime,1200,300);
			console.log('finish forms demo at: '+lastTime);
			
			// ** starting popup demo **
			
			startTime = lastTime + 1400; // 16000
			
			setTimeout(function() { 
				var mainView = zen('mainView');
				mainView.getPluginByLayoutObjectType('$popup').showPopup('form-popup');
			},startTime);
			
			setTimeout(function() { 
				var mainView = zen('mainView');
				mainView.getPluginByLayoutObjectType('$popup').closePopup('form-popup');
			},startTime+1800);
			
			lastTime = startTime + 1800;
			
			// ** buttons demo **
			
			startTime = lastTime + 500; 
			
			console.log('start buttons demo at: '+startTime);
			lastTime = this.buttonsDemo(startTime,2500,0);
			console.log('finish buttons demo at: '+lastTime);
			
			// ** checkbox demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start checkbox demo at: '+startTime);
			lastTime = this.checkboxDemo(startTime,2500,0);
			console.log('finish checkbox demo at: '+lastTime);
			
			// ** radiobuttons demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start radiobuttons demo at: '+startTime);
			lastTime = this.radiobuttonsDemo(startTime,2500,0);
			console.log('finish radiobuttons demo at: '+lastTime);
			
			// ** collapsible demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start collapsible demo at: '+startTime);
			lastTime = this.collapsibleDemo(startTime,2500,0);
			console.log('finish collapsible demo at: '+lastTime);
			
			// ** collapsible set demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start collapsibleset demo at: '+startTime);
			lastTime = this.collapsiblesetDemo(startTime,2500,0);
			console.log('finish collapsibleset demo at: '+lastTime);
			
			// ** starting footer demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start footer demo at: '+startTime);
			lastTime = this.footerDemo(startTime,2500,0);
			console.log('finish footer demo at: '+lastTime);
			
			// ** starting navbar demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start navbar demo at: '+startTime);
			lastTime = this.navbarDemo(startTime,2500,0);
			console.log('finish navbar demo at: '+lastTime);
			
			// ** going back to home **
			
			startTime = lastTime + 2500;
			
			setTimeout(function() {
				var mainView = zen('mainView');
				mainView.popAll();
				mainView.getPluginByLayoutObjectType('$popup').showPopup('going-back');
			},startTime);
			
			setTimeout(function() {
				var mainView = zen('mainView');;
				mainView.getPluginByLayoutObjectType('$popup').closePopup('going-back');
			},startTime+2000);
			
			lastTime = startTime + 2000;
			
			// ** starting panels demo **
			
			startTime = lastTime + 1000; 
			
			console.log('start panels demo at: '+startTime);
			lastTime = this.panelsDemo(startTime,1500,500);
			console.log('finish panels demo at: '+lastTime);
			
			// ** starting listview demo **
			
			startTime = lastTime + 1000; 
			
			console.log('start listview demo at: '+startTime);
			lastTime = this.listviewDemo(startTime,2500,0);
			console.log('finish listview demo at: '+lastTime);
			
			// ** starting themes demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start themes demo at: '+startTime);
			lastTime = this.themesDemo(startTime,750,0);
			console.log('finish themes demo at: '+lastTime);
			
			// ** starting animations demo **
			
			startTime = lastTime + 1000; 
			
			console.log('start animations demo at: '+startTime);
			lastTime = this.animationDemo(startTime,2500,0);
			console.log('finish animations demo at: '+lastTime);
			
			break;
			
		case 'toggle-left-pane':
			
			mainView.getPluginByLayoutObjectType('$popup').togglePanel('leftPanel');
			
			break;
			
		case 'toggle-right-pane':
		
			mainView.getPluginByLayoutObjectType('$popup').togglePanel('rightPanel');
		
			break;
		
		case 'changetheme':
			switch (value) {
				case 1:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('a','c','c');
					break;
				case 2:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('b','e','e');
					break;
				case 3:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
					break;
				case 4:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('d','b','b');
					break;
				case 5:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('e','d','d');
					break;
				case 6:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
					break;
			}
	}
	
	return true;
]]></Implementation>
</Method>

<Method name="onchange">
<FormalSpec>key,value,final,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('change ' + key + ' to ' + value);
	var view = zen(docViewId);
	switch(key) {
	}
]]></Implementation>
</Method>

<Method name="formDemo">
<FormalSpec>startTime,step=1000,initialWait=800</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.pushDocument('form-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('text-1','This is some text');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('textarea-1','This is some more text. Let\s start playing around with the other form elements.');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('check-1',true);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('flip-1',1);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('range-1',3333);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('select-1',3);
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="themesDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.pushDocument('form-demo',{dataKey:'themes-demo'});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('a','c','c');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('b','e','e');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('d','b','b');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('e','d','d');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="panelsDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('panel-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').openPanel('leftPanel');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').closePanel('leftPanel');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').openPanel('rightPanel');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').closePanel('rightPanel');
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="buttonsDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('buttons-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('buttons-icons-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('buttons-grouped-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="checkboxDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('checkbox-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="radiobuttonsDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('radiobuttons-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="collapsibleDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('collapsible-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="collapsiblesetDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('collapsibleset-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="footerDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('footer-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('complex-footer-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="navbarDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('simple-navbar-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('icon-navbar-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="listviewDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-filter-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-divider-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-format-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="animationDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'fade';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'pop';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'flip';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'turn';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'flow';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	/*setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'slidefade';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;*/
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'slide';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'slideup';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popAll();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.jQM145.Application">
<Super>%ZEN.Mojo.baseApplication</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58507.342228</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>jquerymobile</Default>
</Parameter>

<Method name="%GetAppSettings">
<Description>
Return an object containing the various configured settings for the portal.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String="",pMode:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	
	Set tInfo = ##class(%ZEN.proxyObject).%New()

	// initial templateClass
	Set tInfo.templateClass = ""

	// names
	Set tInfo.nameApplication = "jQM Demo Application"

	// overrides

	Quit tInfo
]]></Implementation>
</Method>

<Method name="ZMojoDrawBackgroundDiv">
<Description><![CDATA[
Draw the contents of the background div section (this is purely decorative)
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawQuickLinks">
<Description><![CDATA[
Draw the contents of the quick links section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawBasicHelp">
<Description><![CDATA[
Draw the contents of the basic section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZMojoDrawFooterGroup">
<Description><![CDATA[
Draw the contents of the footer group section.
<var>pPage</var> is the calling page's LOGICALNAME.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPage:%String,pMode:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.jQM145.HomePage">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Mojo.basePage</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58484.834602</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>ZMdemo.jQM.Application</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>HomePage</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Parameter name="PROVIDERLIST">
<Description>
List of JSON providers created for this page.
Used by contentProvider.</Description>
<Default>data,layout</Default>
</Parameter>

<Parameter name="TEMPLATECLASS">
<Description>
Starting template class for this page
Used by contentProvider.
This is overriden by application settings, of provided.</Description>
<Default>ZMdemo.jQM145.baseTemplate</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Description>
Comma-separated list of additional CSS3 include files for the page.
If this is defined *and* this page is using CSS3, then the CSSINCLUDES parameter is ignored.
If this is not defined *and* this page is using CSS3, then the CSSINCLUDES parameter is used.</Description>
<Type>STRING</Type>
<Default>jquery.mobile-1.4.5.min.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Description>
Comma-separated list of additional JS include files for the page.</Description>
<Type>STRING</Type>
<Default>jquery-1.10.2.min.js,jquery.mobile-1.4.5.min.js,https://maps.googleapis.com/maps/api/js?sensor=true</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
	.ui-listview-filter {
		margin: 0px;
	}
</style>
]]></Data>
</XData>

<XData name="pageContents">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen"
xmlns:mojo="http://www.intersystems.com/zen/mojo"
layout="none">

<mojo:documentView id="mainView" 
onload="zenPage._latestjQMVersion = 'jQM-1.4.5-Helper';"
initialDocumentKey="home"
initialLayoutKey="home"
maxPanels="15"
ongetlayout = "return zenPage.getContent('layout',key,criteria);"
ongetdata = "return zenPage.getContent('data',key,criteria);"
onresolvepluginconflicts ="console.log(conflicts);"
>
<mojo:jQM-1.4.5-PageManager jQueryAnimation="flip" onPageShow="zenPage.onPageShow(layoutkey,documentkey);">
<mojo:jQM-1.4.5-Helper/>
<mojo:googleMaps-3-Helper/>
<mojo:HTML5Helper/>
<mojo:mojoDefaultHelper/>
</mojo:jQM-1.4.5-PageManager>
</mojo:documentView>

</pane>
]]></Data>
</XData>

<Method name="onPageShow">
<FormalSpec>layoutkey,documentkey</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	if (layoutkey == 'maps-demo') {
		zen('mainView').getPluginByLayoutObjectType('$map').resizeMap();
	}
]]></Implementation>
</Method>

<Method name="%OnDrawHTMLMeta">
<Description><![CDATA[
This callback is called at the start of the HTML HEAD section of the page (just after the title).<br/>
It allows a page to write out meta tags, if desired.
(default implementation is a simple expression).]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Make it so that, when the user has selected IE compatibility mode, we ignore it and use the most recent IE version available
	//Write "<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />"
	// turn off unless this is actually mobile
	Write "<meta name=""viewport"" content=""width=device-width, initial-scale=1.0,maximum-scale=1, user-scalable=no""/>"
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ZMdemo.jQM145.baseTemplate">
<Super>%ZEN.Mojo.Component.contentTemplate</Super>
<TimeChanged>65825,24761</TimeChanged>
<TimeCreated>63048,58554.738224</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/zen/mojo/demo/jQM145</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>Zen Mojo Demo</Default>
</Parameter>

<Method name="%OnGetJSONContent">
<Description><![CDATA[
Server-side method to provide content to JSON providers.<br/>
<var>pWhich</var> is the name of the provider.<br/>
<var>pKey</var> is an app-defined key that is used to indicate which content is to be served.<br/>
<var>pCriteria</var>is an object containing search criteria. This is used for searching.<br/>
<var>pParms</var> is an array of additional parameters from the JSON provider. (not current used).<br/>
<var>pObject</var> is the object that will be served to the client in JSON format.<br/>
<var>pLoad</var> is true is this is called when the page is first being served. In this case, this method will be 
called even though there may a client-side method used to load the content.<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pWhich:%String,pKey:%String,&pParms,*pObject:%RegisteredObject,pCriteria:%RegisteredObject,pLoad:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pObject = ##class(%ZEN.proxyObject).%New()
	
	if (pKey = "home") {
		set pObject.sectionHeader = "It starts here..."
	} elseif (pKey = "form-demo") {
		set pObject.sectionHeader = "Forms"
	} elseif (pKey = "maps-demo") {
		set pObject.sectionHeader = "Google Maps"
	} elseif (pKey = "panel-demo") {
		set pObject.sectionHeader = "Panels"
	} elseif (pKey = "themes-demo") {
		set pObject.sectionHeader = "Themes"
	} elseif (pKey = "footer-demo") {
		set pObject.sectionHeader = "Footers"
	} elseif (pKey = "complex-footer-demo") {
		set pObject.sectionHeader = "Complex Footers"
	} elseif (pKey = "simple-navbar-demo") {
		set pObject.sectionHeader = "Nav Bar"
	} elseif (pKey = "icon-navbar-demo") {
		set pObject.sectionHeader = "Nav Bar with Icons"
	} elseif (pKey = "animation-demo") {
		set pObject.sectionHeader = "Transitions"
	} elseif (pKey = "checkbox-demo") {
		set pObject.sectionHeader = "Checkboxes"
	} elseif (pKey = "radiobuttons-demo") {
		set pObject.sectionHeader = "Radio Buttons"
	} elseif (pKey = "buttons-demo") {
		set pObject.sectionHeader = "Buttons"
	} elseif (pKey = "buttons-icons-demo") {
		set pObject.sectionHeader = "Icon Buttons"
	} elseif (pKey = "buttons-grouped-demo") {
		set pObject.sectionHeader = "Grouped Buttons"
	} elseif (pKey = "listview-demo") {
		set pObject.sectionHeader = "List View"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Audi"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Acura"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "BMW"
		set element.key = "Key 3"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Honda"
		set element.key = "Key 4"
		do pObject.elements.Insert(element)
	} elseif (pKey = "listview-filter-demo") {
		set pObject.sectionHeader = "List View With Filters"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Audi"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Acura"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "BMW"
		set element.key = "Key 3"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Honda"
		set element.key = "Key 4"
		do pObject.elements.Insert(element)
	} elseif (pKey = "listview-divider-demo") {
		
		set pObject.sectionHeader = "List View With Dividers"
		set pObject.groups = ##class(%ListOfObjects).%New()
		
		set group = ##class(%ZEN.proxyObject).%New()
		set group.label= "Mail"
		set group.elements = ##class(%ListOfObjects).%New()
		
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Inbox"
		set element.count = 123
		do group.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Outbox"
		set element.count = 2
		do group.elements.Insert(element)
		do pObject.groups.Insert(group)
		
		set group = ##class(%ZEN.proxyObject).%New()
		set group.label= "Contacts"
		set group.elements = ##class(%ListOfObjects).%New()
		
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Friends"
		set element.count = 5682
		do group.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Work"
		set element.count = 2
		do group.elements.Insert(element)
		do pObject.groups.Insert(group)
		
		// second data set
		
		set pObject.elements = ##class(%ListOfObjects).%New()
		
		for i=1:1:10 {
			set ^||temp(##class(%PopulateUtils).Name()) = ""
		}
		
		set key = $O(^||temp(""))
		while (key '= "") {
			set element = ##class(%ZEN.proxyObject).%New()
			set element.label=key
			do pObject.elements.Insert(element)
			set key = $O(^||temp(key))
		}
		
	} elseif (pKey = "listview-format-demo") {
		set pObject.sectionHeader = "List View Formats"
	} elseif (pKey = "collapsible-demo") {
		set pObject.sectionHeader = "Collapsibles"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "More Money!"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Less Work!"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
	} elseif (pKey = "collapsibleset-demo") {
		set pObject.sectionHeader = "Accordions"
		set pObject.elements = ##class(%ListOfObjects).%New()
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "More Money!"
		set element.key = "Key 1"
		do pObject.elements.Insert(element)
		set element = ##class(%ZEN.proxyObject).%New()
		set element.label= "Less Work!"
		set element.key = "Key 2"
		do pObject.elements.Insert(element)
	} elseif (pKey = "table-demo") {
		set pObject.sectionHeader = "Tables"
		set pObject.Stores = ##class(%ListOfObjects).%New()
		for i=1:1:5 {
			set store = ##class(%ZEN.proxyObject).%New()
			set store.Rating = i
			set store.Name = "Store "_ i
			set store.Location = "Location " _ i
			do pObject.Stores.Insert(store)
		}
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="getData">
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var data = {};
	switch (key) {
		case 'home':
			data.sectionHeader = 'It starts here...';
			break;
		case 'form-demo':
			data.sectionHeader = 'Forms';
			break;
		case 'maps-demo':
			data.sectionHeader = 'Google Maps';
			data.markers = [
				{lat:59.1456566,lng:18.1988525,title:'Stockholm',draggable:true},
				{lat:50.110922,lng:8.682127,title:'Frankfurt',draggable:false},
				{address:'Paris, France',draggable:true,title:'Paris'}
			];
			break;
		case 'panel-demo':
			data.sectionHeader = 'Panels';
			break;
		case 'themes-demo':
			data.sectionHeader = 'Themes';
			break;
		case 'footer-demo':
			data.sectionHeader = 'Footers';
			break;
		case 'complex-footer-demo':
			data.sectionHeader = 'Complex Footers';
			break;
		case 'simple-navbar-demo':
			data.sectionHeader = 'Nav Bar';
			break;
		case 'icon-navbar-demo':
			data.sectionHeader = 'Nav Bar With Icons';
			break;
		case 'animation-demo':
			data.sectionHeader = 'Transitions';
			break;
		case 'checkbox-demo':
			data.sectionHeader = 'Checkboxes';
			break;
		case 'radiobuttons-demo':
			data.sectionHeader = 'Radio Buttons';
			break;
		case 'buttons-demo':
			data.sectionHeader = 'Buttons';
			break;
		case 'buttons-icons-demo':
			data.sectionHeader = 'Icon Buttons';
			break;
		case 'buttons-grouped-demo':
			data.sectionHeader = 'Grouped Buttons';
			break;
		case 'listview-demo':
			data.sectionHeader = 'List View';
			data.elements = [
				{label:'Audi',key:'Key 1'},
				{label:'Acura',key:'Key 2'},
				{label:'BMW',key:'Key 3'},
				{label:'Honda',key:'Key 4'}
			];
			break;
		case 'listview-filter-demo':
			data.sectionHeader = 'List View With Filter';
			data.elements = [
				{label:'Audi',key:'Key 1'},
				{label:'Acura',key:'Key 2'},
				{label:'BMW',key:'Key 3'},
				{label:'Honda',key:'Key 4'}
			];
			break;
		case 'listview-divider-demo':
			data.sectionHeader = 'List View with Dividers';
			data.groups = [
				{label:'Mail',elements:[{label:'Inbox',count:123},{label:'Outbox',count:2}]},
				{label:'Contacts',elements:[{label:'Friends',count:5682},{label:'Work',count:2}]}
			];
			data.elements = [{label:'Homer Jay Simpson'},{label:'Marjorie "Marge" Simpson'},{label:'Bartholomew JoJo "Bart" Simpson'},{label:'J. Edgar Hoover'}];
			break;
		case 'listview-format-demo':
			data.sectionHeader = 'List View Formats';
			break;
		case 'collapsible-demo':
			data.sectionHeader = 'Collapsibles';
			data.elements = [
				{label:'More Money!',key:'Key 1'},
				{label:'Less work!',key:'Key 2'}
			];
			break;
		case 'collapsibleset-demo':
			data.sectionHeader = 'Accordions';
			data.elements = [
				{label:'More Money!',key:'Key 1'},
				{label:'Less work!',key:'Key 2'}
			];
			break;
		case 'table-demo':
			data.sectionHeader = 'Table Demo';
			data.Stores = [
				{Name:'Store 1',Location:'Location 1', Rating:1},
				{Name:'Store 2',Location:'Location 2', Rating:2},
				{Name:'Store 3',Location:'Location 3', Rating:3},
				{Name:'Store 4',Location:'Location 4', Rating:4},
				{Name:'Store 5',Location:'Location 5', Rating:5}
			];
			break;
		case '':
			data.sectionHeader = '';
			break;
	}
	return data;
]]></Implementation>
</Method>

<Method name="onGetContent">
<Description><![CDATA[
Client-side content provider method.
<var>which</var> is the name of the content to return.
<var>key</var> is the key value associated with the request.
<var>criteria</var> is the search criteria associated with the request.]]></Description>
<FormalSpec>which,key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//console.log(which + ' - ' + key + ' - ' + criteria);
	switch (which)
	{
		case 'layout':
			return this.getLayout(key,criteria);
		case 'data':
			// comment this out, if you want to get data from the server
			return this.getData(key,criteria);
	}
	
	// returning null -> fetch data from server
	return null;
]]></Implementation>
</Method>

<Method name="getLayout">
<Description>
Creates the layout object for the page</Description>
<FormalSpec>key,criteria</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var content = null;
	
	var header = { type: '$header', dataTheme:'b', caption: '=[sectionHeader]', fixed:false};
    

    if (criteria && criteria.dataKey) {
    	data = zenPage.getContent('data',criteria.dataKey,{});
    } else {
	    data = zenPage.getContent('data',key,{});
    }
    
    switch(key) {
	    case 'home' :
	    	
	    	content = {
		    	children:[
		    		header,
		    		{type:'$span',$content:'Let\'s get started.',hidden:true,key:'start-show-label'},
		    		{type:'$button',caption:'Start demo',key:'start-show'},
		    		{type:'$collapsible',dataTheme:'b',label:'... or jump directly',children:[
		    			{type:'$listview',filter:true,key:'listview',children:[
		    				{type:'$listviewitem',label:'Buttons',clickable:true,key:'goto' ,value:'buttons-demo'},
		    				{type:'$listviewitem',label:'Buttons (Icons)',clickable:true,key:'goto' ,value:'buttons-icons-demo'},
		    				{type:'$listviewitem',label:'Buttons (Grouped)',clickable:true,key:'goto' ,value:'buttons-grouped-demo'},
		    				{type:'$listviewitem',label:'Checkboxes',clickable:true,key:'goto' ,value:'checkbox-demo'},
		    				{type:'$listviewitem',label:'Collapsibles',clickable:true,key:'goto' ,value:'collapsible-demo'},
		    				{type:'$listviewitem',label:'Collapsible Set (Accordion)',clickable:true,key:'goto' ,value:'collapsibleset-demo'},
		    				{type:'$listviewitem',label:'Forms',clickable:true,key:'goto' ,value:'form-demo'},
		    				{type:'$listviewitem',label:'Footer',clickable:true,key:'goto' ,value:'footer-demo'},
		    				{type:'$listviewitem',label:'Footer (Complex)',clickable:true,key:'goto' ,value:'complex-footer-demo'},
		    				{type:'$listviewitem',label:'List View',clickable:true,key:'goto' ,value:'listview-demo'},
		    				{type:'$listviewitem',label:'List View (Filter)',clickable:true,key:'goto' ,value:'listview-filter-demo'},
		    				{type:'$listviewitem',label:'List View (Divider)',clickable:true,key:'goto' ,value:'listview-divider-demo'},
		    				{type:'$listviewitem',label:'List View (Format)',clickable:true,key:'goto' ,value:'listview-format-demo'},
		    				{type:'$listviewitem',label:'Google Maps',clickable:true,key:'goto' ,value:'maps-demo'},
		    				{type:'$listviewitem',label:'Navbar',clickable:true,key:'goto' ,value:'simple-navbar-demo'},
		    				{type:'$listviewitem',label:'Navbar (Icons)',clickable:true,key:'goto' ,value:'icon-navbar-demo'},
		    				{type:'$listviewitem',label:'Panel',clickable:true,key:'goto' ,value:'panel-demo'},
		    				{type:'$listviewitem',label:'Radiobuttons',clickable:true,key:'goto' ,value:'radiobuttons-demo'},
		    				{type:'$listviewitem',label:'Themes',clickable:true,key:'goto' ,value:'themes-demo'},
		    			]},
		    		]},
		    		{type:'$popup',key:'going-back',transition:'flip',children:[
	    				{type:'$controlgroup',children:[
	    					{type:'$button',caption:'Let\'s relax a while.'},
	    					{type:'$button',caption:'But this is not the end.'}
	    				]}
	    			]},
	    			{type:'$popup',key:'still-loading',children:[
	    				{type:'$controlgroup',children:[
	    					{type:'$button',caption:'Sorry, still loading.'}
	    				]}
	    			]},
		    	]
	    	};
	    
	    	break;
	    
	     case 'themes-demo':
	     	
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$text',fieldcontain:true,placeHolder:'Enter some text',key:'text-1',label:'Text input:'},
		    			{type:'$textarea',fieldcontain:true,placeHolder:'Enter some text',key:'textarea-1',label:'Text area:'},
		    			{type:'$checkbox',fieldcontain:true,label:'Checkbox',text:'Do you want to select me?',key:'check-1'},
		    			{type:'$select',fieldcontain:true,slider:true,label:'Flip-switch:',key:'flip-1',valueList:[{value:0,text:'off'},{value:1,text:'on'}],value:0},
		    			{type:'$input',inputType:'range',highlight:true,fieldcontain:true,label:'Slider:',key:'range-1',min:100,max:5000,value:2000,text:2000},
		    			{type:'$select',fieldcontain:true,slider:false,label:'Choose shipping method:',key:'select-1',valueList:[{value:0,text:'Standard: 7 days'},{value:1,text:'Rush: 3 days'},{value:2,text:'Express: next day'},{value:3,text:'Overnight'}],value:0},
		    			{type:'$grid',showBox:true,barTheme:'d',children:[
		    				{type:'$button',caption:'Cancel',key:'cancel-form-demo'},
		    				{type:'$button',caption:'Submit',key:'submit-form-demo'}
		    			]},
		    		]},
		    		{type:'$button',caption:'Theme 1',key:'changetheme',value:1},
		    		{type:'$button',caption:'Theme 2',key:'changetheme',value:2},
		    		{type:'$button',caption:'Theme 3',key:'changetheme',value:3},
		    		{type:'$button',caption:'Theme 4',key:'changetheme',value:4},
		    		{type:'$button',caption:'Theme 5',key:'changetheme',value:5},
		    		{type:'$button',caption:'Theme 6',key:'changetheme',value:6}
		    	]
	    	};
	     	break;
	    
	     case 'maps-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	    			{type:'$map',id:'map1',width:window.innerWidth,height:(window.innerHeight-96),
	    				zoom:10,centerLat:50.11,centerLng:8.68,address:'Berlin, Germany',mapTypeId:google.maps.MapTypeId.HYBRID,
	    				centerAtUser:true,showMarkerAtCenter:true,centerMarkerTitle:'This is your position',
	    				centerMarkerDraggable:true,value:'=[markers]',children:[
	    				{type:'$marker',lat:'=[lat]',lng:'=[lng]',address:'=[address]',title:'=[title]',draggable:'=[draggable]'},
	    				//{type:'$marker',lat:50.11,lng:8.68,title:'Frankfurt'},
	    				//{type:'$directions',startLat:50.11,startLng:8.68,endLat:50.22,endLng:8.88}
	    			]}
	     		]
	    	};
	     
	     	break;
	    
	     case 'form-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$text',fieldcontain:true,placeHolder:'Enter some text',key:'text-1',label:'Text input:'},
		    			{type:'$textarea',fieldcontain:true,placeHolder:'Enter some text',key:'textarea-1',label:'Text area:'},
		    			{type:'$checkbox',fieldcontain:true,label:'Checkbox',text:'Do you want to select me?',key:'check-1'},
		    			{type:'$select',fieldcontain:true,slider:true,label:'Flip-switch:',key:'flip-1',valueList:[{value:0,text:'off'},{value:1,text:'on'}],value:0},
		    			{type:'$input',inputType:'range',highlight:true,fieldcontain:true,label:'Slider:',key:'range-1',min:100,max:5000,value:2000,text:2000},
		    			{type:'$select',fieldcontain:true,slider:false,label:'Choose shipping method:',key:'select-1',valueList:[{value:0,text:'Standard: 7 days'},{value:1,text:'Rush: 3 days'},{value:2,text:'Express: next day'},{value:3,text:'Overnight'}],value:0},
		    			{type:'$grid',showBox:true,barTheme:'d',children:[
		    				{type:'$button',caption:'Cancel',key:'cancel-form-demo'},
		    				{type:'$button',caption:'Submit',key:'submit-form-demo'}
		    			]},
		    			{type:'$popup',key:'form-popup',children:[
		    				{type:'$controlgroup',children:[
		    					{type:'$button',caption:'Excited? We are just getting started!'},
		    					{type:'$button',caption:'And yes, this is a popup.'}
		    				]}
		    			]}
		    		]
		    		}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'buttons-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$button',caption:'Standard Button',key:'action-1'},
		    			{type:'$button',caption:'Disabled Button',disabled:true,key:'action-1'},
		    			{type:'$button',caption:'Standard Mini Button',mini:true,key:'action-1'},
		    			{type:'$button',caption:'No Corners',corners:false},
		    			{type:'$button',caption:'No Shadow',shadow:false},
		    			{type:'$button',inline:true,caption:'Inline'},
		    			{type:'$button',inline:true,mini:true,caption:'Inline Mini'},
		    		]}
		    	]
	    	};
	     
	     	break;
	     
	     case 'buttons-icons-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataiconpos:'notext',dataicon:'bars',caption:'Bars'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'edit',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-l',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-r',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-u',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'arrow-d',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'delete',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'plus',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'minus',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'check',caption:'_'}
		    			]},
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataiconpos:'notext',dataicon:'gear',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'refresh',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'forward',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'back',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'grid',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'star',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'alert',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'info',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'home',caption:'_'},
		    				{type:'$button',dataiconpos:'notext',dataicon:'search',caption:'_'}
		    			]},
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataicon:'bars',caption:'Bars'},
		    				{type:'$button',dataiconpos:'right',dataicon:'edit',caption:'Edit'},
		    			]},
		    			{type:'$button',inline:true,dataiconpos:'notext',dataicon:'bars'},
		    			{type:'$button',inline:true,dataiconpos:'notext',dataicon:'edit'},
		    		]}
		    	]
		    };
		    		
	     	break;
	     	
	     case 'buttons-grouped-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$controlgroup',horizontal:true,children:[
		    				{type:'$button',dataicon:'bars',caption:'Bars'},
		    				{type:'$button',dataiconpos:'right',dataicon:'edit',caption:'Edit'},
		    			]},
		    			{type:'$controlgroup',children:[
		    				{type:'$button',caption:'Yes'},
		    				{type:'$button',caption:'No'},
		    				{type:'$button',caption:'Maybe'}
		    			]},
		    			{type:'$grid',showBox:true,barTheme:'d',children:[
		    				{type:'$button',caption:'Cancel',key:'cancel-form-demo'},
		    				{type:'$button',caption:'Submit',key:'submit-form-demo'}
		    			]},
		    		]}
		    	]
		    };
		    	break;
	     	
	     case 'footer-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	     			{type:'$footer',fixed:true,caption:'This is a simple footer',children:[
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'complex-footer-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	     			{type:'$footer',fixed:true,caption:'This is a complex footer',children:[
	     				{type:'$grid',children:[
	     					{type:'$controlgroup',children:[
	     						{type:'$button',mini:true,caption:'Action 1',key:'footer-action-1'},
	     						{type:'$button',mini:true,caption:'Action 2',key:'footer-action-2'},
	     					]},
	     					{type:'$select',mini:true,slider:false,label:'Choose shipping method:',key:'select-1',valueList:[{value:0,text:'Standard: 7 days'},{value:1,text:'Rush: 3 days'},{value:2,text:'Express: next day'},{value:3,text:'Overnight'}],value:0}
	     				]}
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'simple-navbar-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		{type:'$header', dataTheme:'b', caption: '=[sectionHeader]', fixed:true, children:[
		    			{type:'$navbar',children:[
	     					{type:'$navbaritem',caption:'One',active:true},
	     					{type:'$navbaritem',caption:'Two'},
	     					{type:'$navbaritem',caption:'Three'},
	     					{type:'$navbaritem',caption:'Four'},
	     					{type:'$navbaritem',caption:'Five'},
	     					{type:'$navbaritem',caption:'Six'}
	     					
	     				]}
		    		]},
	     			{type:'$footer', dataTheme:'b',fixed:true,caption:'Footer with simple navbar (theme \'a\')',children:[
	     				{type:'$navbar',children:[
	     					{type:'$navbaritem',dataTheme:'a',caption:'One',active:true},
	     					{type:'$navbaritem',dataTheme:'a',caption:'Two'},
	     					{type:'$navbaritem',dataTheme:'a',caption:'Three'}
	     				]}
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'icon-navbar-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		{type:'$header',  dataTheme:'b',caption: '=[sectionHeader]', fixed:true, children:[
		    			{type:'$navbar',children:[
	     					{type:'$navbaritem',caption:'One',active:true,icon:'grid'},
	     					{type:'$navbaritem',caption:'Two',icon:'star'},
	     					{type:'$navbaritem',caption:'Three',icon:'gear'},
	     					
	     				]}
		    		]},
	     			{type:'$footer', dataTheme:'b',fixed:true,caption:'Footer with simple navbar',children:[
	     				{type:'$navbar',dataiconpos:'right',children:[
	     					{type:'$navbaritem',caption:'One',active:true,icon:'grid'},
	     					{type:'$navbaritem',caption:'Two',icon:'star'},
	     					{type:'$navbaritem',caption:'Three',icon:'gear'},
	     				]}
		    		]}
		    	]
    		}
	     
	     	break;
	     	
	     case 'panel-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
	     			{type:'$pagecontent',children:[
	     				{type:'$button',caption:'Toogle left pane',key:'toggle-left-pane'},
	     				{type:'$button',caption:'Toogle right pane',key:'toggle-right-pane'},
	     			]},
	     			{type:'$panel',key:'leftPanel',displayMode:'push',children:[
	     				{type:'$controlgroup',children:[
	     					{type:'$span',$content:'This is a panel on the left side'},
		    				{type:'$button',caption:'Action 1'},
		    				{type:'$button',caption:'Action 2'},
		    				{type:'$button',caption:'Action 3'}
		    			]},
	     			]},
	     			{type:'$panel',key:'rightPanel',position:'right',displayMode:'overlay',children:[
	     				{type:'$controlgroup',children:[
	     					{type:'$span',$content:'This is a panel on the right side with a different mode: \'overlay\'.'},
		    				{type:'$button',caption:'Action 1'},
		    				{type:'$button',caption:'Action 2'},
		    				{type:'$button',caption:'Action 3'}
		    			]},
	     			]},
		    	]
    		}
	     
	     	break;
	     	
	     case 'checkbox-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$checkbox',label:'Standard Checkbox',key:'check-1'},
		    			{type:'$checkbox',fieldcontain:true,label:'Checkbox',label:'Contained Checkbox',key:'check-1'},
		    			{type:'$checkbox',mini:true,label:'Mini Checkbox',key:'check-1'},
		    			{type:'$checkbox',dataiconpos:'right',label:'Right Icon',key:'check-1'},
		    			{type:'$fieldset',label:'What do you prefer?',children:[
		    				{type:'$checkbox',label:'Men-made',key:'check-1'},
		    				{type:'$checkbox',label:'God-made',key:'check-1'},
		    			]},
		    			{type:'$fieldset',horizontal:true,label:'What do you want most?',children:[
		    				{type:'$checkbox',label:'More money!',key:'check-1'},
		    				{type:'$checkbox',label:'Less work!',key:'check-1'},
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'radiobuttons-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$radio-button',text:'One',name:'radio-1',checked:true,key:'radio-1-one',optionValue:'One'},
		    			{type:'$radio-button',text:'Two',name:'radio-1',key:'radio-1-two',optionValue:'Two'},
		    			{type:'$fieldset',label:'Vertical',children:[
		    				{type:'$radio-button',text:'One',name:'radio-2',checked:true,key:'radio-2-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-2',key:'radio-2-two',optionValue:'Two'},
		    			]},
		    			{type:'$fieldset',label:'Horizontal',horizontal:true,children:[
		    				{type:'$radio-button',text:'One',name:'radio-3',checked:true,key:'radio-3-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-3',key:'radio-3-two',optionValue:'Two'},
		    			]},
		    			{type:'$fieldset',label:'Vertical Mini',mini:true,children:[
		    				{type:'$radio-button',text:'One',name:'radio-4',checked:true,key:'radio-4-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-4',key:'radio-4-two',optionValue:'Two'},
		    			]},
		    			{type:'$fieldset',label:'Vertical Icon right',dataiconpos:'right',children:[
		    				{type:'$radio-button',text:'One',name:'radio-5',checked:true,key:'radio-5-one',optionValue:'One'},
		    				{type:'$radio-button',text:'Two',name:'radio-5',key:'radio-5-two',optionValue:'Two'},
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     
	     case 'listview-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'List View'},
		    			{type:'$listview',children:[
		    				{type:'$listviewitem',label:'Audi'},
		    				{type:'$listviewitem',label:'BMW'}
		    			]},
		    			{type:'$span',$content:'Ordered List View'},
		    			{type:'$listview',ordered:true,children:[
		    				{type:'$listviewitem',label:'Audi'},
		    				{type:'$listviewitem',label:'BMW'}
		    			]},
		    			{type:'$span',$content:'Clickable List View'},
		    			{type:'$listview',value:'=[elements]',children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]'}
		    			]},
		    			{type:'$span',$content:'Inset List View (and custom icons)'},
		    			{type:'$listview',value:'=[elements]',inset:true,children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]',dataicon:'gear'}
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'listview-filter-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'List View with reveal filter',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[elements]',inset:true,filter:true,filterplaceholder:'Search for cars...',filterreveal:true,children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]'}
		    			]},
		    			{type:'$span',$content:'List View with filter',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[elements]',filter:true,filterplaceholder:'Search for cars...',children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true,key:'=[key]'}
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'listview-divider-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'List View with Divider (and bubbles)',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[groups]',children:[
		    				{type:'$listviewitem',label:'=[label]',divider:true},
		    				{type:'$loop',value:'=[elements]',children:[
		    					{type:'$listviewitem',label:'=[label]',count:'=[count]',clickable:true},
		    				]}
		    			]},
		    			{type:'$span',$content:'List View with filter and autodividers',style:'margin-bottom:10px'},
		    			{type:'$listview',value:'=[elements]',inset:true,filter:true,autodividers:true,children:[
		    				{type:'$listviewitem',label:'=[label]',clickable:true}
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	     case 'listview-format-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$span',$content:'Thumbnails and custom content',style:'margin-bottom:10px'},
		    			{type:'$listview',children:[
		    				{type:'$listviewitem',thumbnail:'covers/13152112_s.jpg',key:'money',clickable:true,children:[
		    					{type:'$content',content:'<h2>Money</h2><p>For everyone</p>'}
		    				]},
		    				{type:'$listviewitem',thumbnail:'covers/9105872_s.jpg',key:'city',clickable:true,children:[
		    					{type:'$content',content:'<h2>City</h2><p>Enjoy the skyline</p>'}
		    				]},
		    			]},
		    			{type:'$span',$content:'Formatted content',style:'margin-bottom:10px'},
		    			{type:'$listview',children:[
		    				{type:'$listviewitem',label:'Friday, August 23, 2013',divider:true},
		    				{type:'$listviewitem',clickable:true,children:[
		    					{type:'$content',content:'<h2>The Demo Team</h2><p><strong>You have been invited to a meeting in Boston</strong></p><p>Are you available tomorrow at 10am?</p><p class="ui-li-aside"><strong>6:24</strong>PM</p>'}
		    				]},
		    				{type:'$listviewitem',clickable:true,children:[
		    					{type:'$content',content:'<h2>Coffee House</h2><p><strong>We found a new mixture!</strong></p><p>Let\'s try the new apple-cinnamon coffee with crumble topping.</p> <p class="ui-li-aside"><strong>1:32</strong>PM</p>'}
		    				]},
		    			]}
		    		]}
		    	]
	    	};
	     
	     	break;
	     		
	     case 'collapsible-demo':
	     
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$collapsible',label:'This is collapsible',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',dataContentTheme:'b',label:'This collapsible uses a theme',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',dataContentTheme:'d',expanded:true,label:'This themed collapsible is expanded',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',mini:true,label:'This is a mini collapsible',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',dataiconpos:'right',collapsedicon:'arrow-d',expandedicon:'arrow-u',label:'Icons',value:'=[elements]',children:[
		    				{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    			]},
		    			{type:'$collapsible',inset:false,label:'Non-Inset',children:[
		    				// static - not using value!
		    				{type:'$checkbox',label:'More money!',key:'check-1'},
		    				{type:'$checkbox',label:'Less work!',key:'check-1'},
		    			]},
		    		]}
		    	]
	    	};
	     
	     	break;
	     	
	      case 'collapsibleset-demo':
	     	
	     	content = {
		     	sourceData:data,
		    	children:[
		    		header,
		    		{type:'$form',children:[
		    			{type:'$collapsibleset',children:[
		    				{type:'$collapsible',label:'Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',expanded:true,label:'Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',inset:false,children:[
		    				{type:'$collapsible',label:'Non-inset Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',label:'Non-inset Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',mini:true,children:[
		    				{type:'$collapsible',mini:true,label:'Mini Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',mini:true,label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',mini:true,label:'Mini Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',mini:true,label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',collapsedicon:'arrow-d',expandedicon:'arrow-u',children:[
		    				{type:'$collapsible',label:'Icon Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',label:'Right Icon Section 2',dataiconpos:'right',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]},
		    			{type:'$collapsibleset',corners:false,children:[
		    				{type:'$collapsible',label:'No Corners Section 1',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]},
		    				{type:'$collapsible',label:'No Corners Section 2',value:'=[elements]',children:[
		    					{type:'$checkbox',label:'=[label]',key:'=[key]'}
		    				]}
		    			]}
		    		]}
		    	]
	    	};
	     
	     	break;
    } 
           				
    return content;
]]></Implementation>
</Method>

<Method name="onselect">
<FormalSpec>key,value,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//console.log('select '+key);
	var mainView = zen(docViewId);

	switch(key) {
		case 'goto':
			mainView.pushDocument(value,{},value,{});
			break;
		case 'start-show':
		
			mainView.getItemByKey('start-show').$hide();
			mainView.getItemByKey('start-show-label').$show();
			
			$.mobile.loading( "show", {
            	text: "Preparing the demo. Yes this is a loading screen!",
            	textVisible: true,
            	theme: 'a',
            	textonly: false,
    		});
			
			var lastTime = 0;
			var startTime = 2000;
			
			setTimeout(function() { 
				$.mobile.loading("hide");
			},startTime);
			
			// ** starting forms demo **
			
			console.log('start forms demo at: '+startTime);
			lastTime = this.formDemo(startTime,1200,300);
			console.log('finish forms demo at: '+lastTime);
			
			// ** starting popup demo **
			
			startTime = lastTime + 1400; // 16000
			
			setTimeout(function() { 
				var mainView = zen('mainView');
				mainView.getPluginByLayoutObjectType('$popup').showPopup('form-popup');
			},startTime);
			
			setTimeout(function() { 
				var mainView = zen('mainView');
				mainView.getPluginByLayoutObjectType('$popup').closePopup('form-popup');
			},startTime+1800);
			
			lastTime = startTime + 1800;
			
			// ** buttons demo **
			
			startTime = lastTime + 500; 
			
			console.log('start buttons demo at: '+startTime);
			lastTime = this.buttonsDemo(startTime,2500,0);
			console.log('finish buttons demo at: '+lastTime);
			
			// ** checkbox demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start checkbox demo at: '+startTime);
			lastTime = this.checkboxDemo(startTime,2500,0);
			console.log('finish checkbox demo at: '+lastTime);
			
			// ** radiobuttons demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start radiobuttons demo at: '+startTime);
			lastTime = this.radiobuttonsDemo(startTime,2500,0);
			console.log('finish radiobuttons demo at: '+lastTime);
			
			// ** collapsible demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start collapsible demo at: '+startTime);
			lastTime = this.collapsibleDemo(startTime,2500,0);
			console.log('finish collapsible demo at: '+lastTime);
			
			// ** collapsible set demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start collapsibleset demo at: '+startTime);
			lastTime = this.collapsiblesetDemo(startTime,2500,0);
			console.log('finish collapsibleset demo at: '+lastTime);
			
			// ** starting footer demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start footer demo at: '+startTime);
			lastTime = this.footerDemo(startTime,2500,0);
			console.log('finish footer demo at: '+lastTime);
			
			// ** starting navbar demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start navbar demo at: '+startTime);
			lastTime = this.navbarDemo(startTime,2500,0);
			console.log('finish navbar demo at: '+lastTime);
			
			// ** going back to home **
			
			startTime = lastTime + 2500;
			
			setTimeout(function() {
				var mainView = zen('mainView');
				mainView.popAll();
				mainView.getPluginByLayoutObjectType('$popup').showPopup('going-back');
			},startTime);
			
			setTimeout(function() {
				var mainView = zen('mainView');;
				mainView.getPluginByLayoutObjectType('$popup').closePopup('going-back');
			},startTime+2000);
			
			lastTime = startTime + 2000;
			
			// ** starting panels demo **
			
			startTime = lastTime + 1000; 
			
			console.log('start panels demo at: '+startTime);
			lastTime = this.panelsDemo(startTime,1500,500);
			console.log('finish panels demo at: '+lastTime);
			
			// ** starting listview demo **
			
			startTime = lastTime + 1000; 
			
			console.log('start listview demo at: '+startTime);
			lastTime = this.listviewDemo(startTime,2500,0);
			console.log('finish listview demo at: '+lastTime);
			
			// ** starting themes demo **
			
			startTime = lastTime + 2500; 
			
			console.log('start themes demo at: '+startTime);
			lastTime = this.themesDemo(startTime,750,0);
			console.log('finish themes demo at: '+lastTime);
			
			// ** starting animations demo **
			
			startTime = lastTime + 1000; 
			
			console.log('start animations demo at: '+startTime);
			lastTime = this.animationDemo(startTime,2500,0);
			console.log('finish animations demo at: '+lastTime);
			
			break;
			
		case 'toggle-left-pane':
			
			mainView.getPluginByLayoutObjectType('$popup').togglePanel('leftPanel');
			
			break;
			
		case 'toggle-right-pane':
		
			mainView.getPluginByLayoutObjectType('$popup').togglePanel('rightPanel');
		
			break;
		
		case 'changetheme':
			switch (value) {
				case 1:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('a','c','c');
					break;
				case 2:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('b','e','e');
					break;
				case 3:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
					break;
				case 4:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('d','b','b');
					break;
				case 5:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('e','d','d');
					break;
				case 6:
					mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
					break;
			}
	}
	
	return true;
]]></Implementation>
</Method>

<Method name="onchange">
<FormalSpec>key,value,final,docViewId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('change ' + key + ' to ' + value);
	var view = zen(docViewId);
	switch(key) {
	}
]]></Implementation>
</Method>

<Method name="formDemo">
<FormalSpec>startTime,step=1000,initialWait=800</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.pushDocument('form-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('text-1','This is some text');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('textarea-1','This is some more text. Let\s start playing around with the other form elements.');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('check-1',true);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('flip-1',1);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('range-1',3333);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.setControlValue('select-1',3);
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="themesDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() { 
		var mainView = zen('mainView');
		mainView.pushDocument('form-demo',{dataKey:'themes-demo'});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('a','c','c');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('b','e','e');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('d','b','b');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('e','d','d');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByName(zenPage._latestjQMVersion).changeTheme('c','a','a');
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="panelsDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('panel-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').openPanel('leftPanel');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').closePanel('leftPanel');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').openPanel('rightPanel');
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.getPluginByLayoutObjectType('$popup').closePanel('rightPanel');
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="buttonsDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('buttons-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('buttons-icons-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('buttons-grouped-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="checkboxDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('checkbox-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="radiobuttonsDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('radiobuttons-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="collapsibleDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('collapsible-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="collapsiblesetDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('collapsibleset-demo',{});
	},startTime+(step*stepsTaken));
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="footerDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('footer-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('complex-footer-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="navbarDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('simple-navbar-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('icon-navbar-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="listviewDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-demo',{});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-filter-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-divider-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pushDocument('listview-format-demo',{});
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>

<Method name="animationDemo">
<FormalSpec>startTime,step=1300,initialWait=0</FormalSpec>
<Language>javascript</Language>
<ReturnType>%ZEN.Datatype.integer</ReturnType>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var stepsTaken = 0;
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'fade';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
	},startTime+(step*stepsTaken));
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'pop';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'flip';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'turn';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'flow';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	/*setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'slidefade';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;*/
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'slide';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popDocument();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	stepsTaken++;
	
	setTimeout(function() {
		var mainView = zen('mainView');
		mainView.pageManager.jQueryAnimation = 'slideup';
		mainView.pushDocument('form-demo',{dataKey:'animation-demo'});
		setTimeout(function() {
			var mainView = zen('mainView');
			mainView.popAll();
		},step/2);
	},startTime+(step*stepsTaken)+initialWait);
	
	return startTime+(step*stepsTaken)+initialWait;
]]></Implementation>
</Method>
</Class>
</Export>
